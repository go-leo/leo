syntax = "proto3";
package leo.statusx;
option go_package = "github.com/go-leo/leo/v3/statusx/http;http";

// Status is a wrapper of http status
message Status {
  // The HTTP status code, such as 200 or 404.
  int32 code = 1;
}

enum Code {

  _ = 0;

  // gRPC Mapping: OK
  OK = 200;

  // gRPC Mapping: INVALID_ARGUMENT | FAILED_PRECONDITION | OUT_OF_RANGE
  BAD_REQUEST = 400;

  // gRPC Mapping: UNAUTHENTICATED
  UNAUTHORIZED = 401;

  // gRPC Mapping: PERMISSION_DENIED
  FORBIDDEN = 403;

  // gRPC Mapping: NOT_FOUND
  NOT_FOUND = 404;

  // gRPC Mapping: ALREADY_EXISTS | ABORTED
  CONFLICT = 409;

  // gRPC Mapping: RESOURCE_EXHAUSTED
  TOO_MANY_REQUESTS = 429;

  // gRPC Mapping: CANCELLED
  CLIENT_CLOSED_REQUEST = 499;

  // gRPC Mapping: UNKNOWN | INTERNAL | DATA_LOSS
  INTERNAL_SERVER_ERROR = 500;

  // gRPC Mapping: UNIMPLEMENTED
  NOT_IMPLEMENTED = 501;

  // gRPC Mapping: UNAVAILABLE
  SERVICE_UNAVAILABLE = 503;

  // gRPC Mapping: DEADLINE_EXCEEDED
  GATEWAY_TIMEOUT = 504;
}

// Represents an HTTP header.
message Header {
  // The HTTP header key. It is case insensitive.
  string key = 1;

  // The HTTP header value.
  string value = 2;
}
