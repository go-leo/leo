package statusx

import (
	httpstatus "github.com/go-leo/leo/v3/statusx/http"
	"google.golang.org/grpc/codes"
	grpcstatus "google.golang.org/grpc/status"
	"net/http"
)

var (
	// OK is returned on success.
	OK = newStatus(
		grpcstatus.New(codes.OK, codes.OK.String()),
		&httpstatus.Status{Status: http.StatusOK, Reason: http.StatusText(http.StatusOK)},
	)

	// OKButFailed is returned on success, but business logic failed.
	OKButFailed = newStatus(
		grpcstatus.New(codes.Unknown, codes.Unknown.String()),
		&httpstatus.Status{Status: http.StatusOK, Reason: http.StatusText(http.StatusOK)},
	)

	// InvalidArgument indicates client specified an invalid argument.
	// Note that this differs from FailedPrecondition. It indicates arguments
	// that are problematic regardless of the state of the system
	// (e.g., a malformed file name).
	//
	// This error code will not be generated by the gRPC framework.
	InvalidArgument = newStatus(
		grpcstatus.New(codes.InvalidArgument, codes.InvalidArgument.String()),
		&httpstatus.Status{Status: http.StatusBadRequest, Reason: http.StatusText(http.StatusBadRequest)},
	)

	// FailedPrecondition indicates operation was rejected because the
	// system is not in a state required for the operation's execution.
	// For example, directory to be deleted may be non-empty, an rmdir
	// operation is applied to a non-directory, etc.
	//
	// A litmus test that may help a service implementor in deciding
	// between FailedPrecondition, Aborted, and Unavailable:
	//  (a) Use Unavailable if the client can retry just the failing call.
	//  (b) Use Aborted if the client should retry at a higher-level
	//      (e.g., restarting a read-modify-write sequence).
	//  (c) Use FailedPrecondition if the client should not retry until
	//      the system state has been explicitly fixed. E.g., if an "rmdir"
	//      fails because the directory is non-empty, FailedPrecondition
	//      should be returned since the client should not retry unless
	//      they have first fixed up the directory by deleting files from it.
	//  (d) Use FailedPrecondition if the client performs conditional
	//      REST Get/Update/Delete on a resource and the resource on the
	//      server does not match the condition. E.g., conflicting
	//      read-modify-write on the same resource.
	//
	// This error code will not be generated by the gRPC framework.
	FailedPrecondition = newStatus(
		grpcstatus.New(codes.FailedPrecondition, codes.FailedPrecondition.String()),
		&httpstatus.Status{Status: http.StatusBadRequest, Reason: http.StatusText(http.StatusBadRequest)},
	)

	// OutOfRange means operation was attempted past the valid range.
	// E.g., seeking or reading past end of file.
	//
	// Unlike InvalidArgument, this error indicates a problem that may
	// be fixed if the system state changes. For example, a 32-bit file
	// system will generate InvalidArgument if asked to read at an
	// offset that is not in the range [0,2^32-1], but it will generate
	// OutOfRange if asked to read from an offset past the current
	// file size.
	//
	// There is a fair bit of overlap between FailedPrecondition and
	// OutOfRange. We recommend using OutOfRange (the more specific
	// error) when it applies so that callers who are iterating through
	// a space can easily look for an OutOfRange error to detect when
	// they are done.
	//
	// This error code will not be generated by the gRPC framework.
	OutOfRange = newStatus(
		grpcstatus.New(codes.OutOfRange, codes.OutOfRange.String()),
		&httpstatus.Status{Status: http.StatusBadRequest, Reason: http.StatusText(http.StatusBadRequest)},
	)

	// Unauthenticated indicates the request does not have valid
	// authentication credentials for the operation.
	//
	// The gRPC framework will generate this error code when the
	// authentication metadata is invalid or a Credentials callback fails,
	// but also expect authentication middleware to generate it.
	Unauthenticated = newStatus(
		grpcstatus.New(codes.Unauthenticated, codes.Unauthenticated.String()),
		&httpstatus.Status{Status: http.StatusUnauthorized, Reason: http.StatusText(http.StatusUnauthorized)},
	)

	// PermissionDenied indicates the caller does not have permission to
	// execute the specified operation. It must not be used for rejections
	// caused by exhausting some resource (use ResourceExhausted
	// instead for those errors). It must not be
	// used if the caller cannot be identified (use Unauthenticated
	// instead for those errors).
	//
	// This error code will not be generated by the gRPC core framework,
	// but expect authentication middleware to use it.
	PermissionDenied = newStatus(
		grpcstatus.New(codes.PermissionDenied, codes.PermissionDenied.String()),
		&httpstatus.Status{Status: http.StatusForbidden, Reason: http.StatusText(http.StatusForbidden)},
	)

	// NotFound means some requested entity (e.g., file or directory) was
	// not found.
	//
	// This error code will not be generated by the gRPC framework.
	NotFound = newStatus(
		grpcstatus.New(codes.NotFound, codes.NotFound.String()),
		&httpstatus.Status{Status: http.StatusNotFound, Reason: http.StatusText(http.StatusNotFound)},
	)

	// Aborted indicates the operation was aborted, typically due to a
	// concurrency issue like sequencer check failures, transaction aborts,
	// etc.
	//
	// See litmus test above for deciding between FailedPrecondition,
	// Aborted, and Unavailable.
	//
	// This error code will not be generated by the gRPC framework.
	Aborted = newStatus(
		grpcstatus.New(codes.Aborted, codes.Aborted.String()),
		&httpstatus.Status{Status: http.StatusConflict, Reason: http.StatusText(http.StatusConflict)},
	)

	// AlreadyExists means an attempt to create an entity failed because one
	// already exists.
	//
	// This error code will not be generated by the gRPC framework.
	AlreadyExists = newStatus(
		grpcstatus.New(codes.AlreadyExists, codes.AlreadyExists.String()),
		&httpstatus.Status{Status: http.StatusConflict, Reason: http.StatusText(http.StatusConflict)},
	)

	// ResourceExhausted indicates some resource has been exhausted, perhaps
	// a per-user quota, or perhaps the entire file system is out of space.
	//
	// This error code will be generated by the gRPC framework in
	// out-of-memory and server overload situations, or when a message is
	// larger than the configured maximum size.
	ResourceExhausted = newStatus(
		grpcstatus.New(codes.ResourceExhausted, codes.ResourceExhausted.String()),
		&httpstatus.Status{Status: http.StatusTooManyRequests, Reason: http.StatusText(http.StatusTooManyRequests)},
	)

	// Canceled indicates the operation was canceled (typically by the caller).
	//
	// The gRPC framework will generate this error code when cancellation
	// is requested.
	Canceled = newStatus(
		grpcstatus.New(codes.Canceled, codes.Canceled.String()),
		&httpstatus.Status{Status: 499, Reason: "Canceled"},
	)

	// DataLoss indicates unrecoverable data loss or corruption.
	//
	// This error code will not be generated by the gRPC framework.
	DataLoss = newStatus(
		grpcstatus.New(codes.DataLoss, codes.DataLoss.String()),
		&httpstatus.Status{Status: http.StatusInternalServerError, Reason: http.StatusText(http.StatusInternalServerError)},
	)

	// Unknown error. An example of where this error may be returned is
	// if a Status value received from another address space belongs to
	// an error-space that is not known in this address space. Also
	// errors raised by APIs that do not return enough error information
	// may be converted to this error.
	//
	// The gRPC framework will generate this error code in the above two
	// mentioned cases.
	Unknown = newStatus(
		grpcstatus.New(codes.Unknown, codes.Unknown.String()),
		&httpstatus.Status{Status: http.StatusInternalServerError, Reason: http.StatusText(http.StatusInternalServerError)},
	)

	// Internal errors. Means some invariants expected by underlying
	// system has been broken. If you see one of these errors,
	// something is very broken.
	//
	// This error code will be generated by the gRPC framework in several
	// internal error conditions.
	Internal = newStatus(
		grpcstatus.New(codes.Internal, codes.Internal.String()),
		&httpstatus.Status{Status: http.StatusInternalServerError, Reason: http.StatusText(http.StatusInternalServerError)},
	)

	// Unimplemented indicates operation is not implemented or not
	// supported/enabled in this service.
	//
	// This error code will be generated by the gRPC framework. Most
	// commonly, you will see this error code when a method implementation
	// is missing on the server. It can also be generated for unknown
	// compression algorithms or a disagreement as to whether an RPC should
	// be streaming.
	Unimplemented = newStatus(
		grpcstatus.New(codes.Unimplemented, codes.Unimplemented.String()),
		&httpstatus.Status{Status: http.StatusNotImplemented, Reason: http.StatusText(http.StatusNotImplemented)},
	)

	// Unavailable indicates the service is currently unavailable.
	// This is a most likely a transient condition and may be corrected
	// by retrying with a backoff. Note that it is not always safe to retry
	// non-idempotent operations.
	//
	// See litmus test above for deciding between FailedPrecondition,
	// Aborted, and Unavailable.
	//
	// This error code will be generated by the gRPC framework during
	// abrupt shutdown of a server process or network connection.
	Unavailable = newStatus(
		grpcstatus.New(codes.Unavailable, codes.Unavailable.String()),
		&httpstatus.Status{Status: http.StatusServiceUnavailable, Reason: http.StatusText(http.StatusServiceUnavailable)},
	)

	// DeadlineExceeded means operation expired before completion.
	// For operations that change the state of the system, this error may be
	// returned even if the operation has completed successfully. For
	// example, a successful response from a server could have been delayed
	// long enough for the deadline to expire.
	//
	// The gRPC framework will generate this error code when the deadline is
	// exceeded.
	DeadlineExceeded = newStatus(
		grpcstatus.New(codes.DeadlineExceeded, codes.DeadlineExceeded.String()),
		&httpstatus.Status{Status: http.StatusGatewayTimeout, Reason: http.StatusText(http.StatusGatewayTimeout)},
	)
)
