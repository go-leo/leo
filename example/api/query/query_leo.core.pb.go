// Code generated by protoc-gen-leo-core. DO NOT EDIT.

package query

import (
	context "context"
	endpoint "github.com/go-kit/kit/endpoint"
	sd "github.com/go-kit/kit/sd"
	lb "github.com/go-kit/kit/sd/lb"
	log "github.com/go-kit/log"
	lazyloadx "github.com/go-leo/gox/syncx/lazyloadx"
	endpointx "github.com/go-leo/leo/v3/endpointx"
	sdx "github.com/go-leo/leo/v3/sdx"
	lbx "github.com/go-leo/leo/v3/sdx/lbx"
	stainx "github.com/go-leo/leo/v3/sdx/stainx"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	io "io"
)

type QueryService interface {
	Query(ctx context.Context, request *QueryRequest) (*emptypb.Empty, error)
}

type QueryEndpoints interface {
	Query(ctx context.Context) endpoint.Endpoint
}

type QueryClientEndpoints interface {
	Query(ctx context.Context) (endpoint.Endpoint, error)
}

type QueryClientTransports interface {
	Query(ctx context.Context, instance string) (endpoint.Endpoint, io.Closer, error)
}

type QueryFactories interface {
	Query(ctx context.Context) sd.Factory
}

type QueryEndpointers interface {
	Query(ctx context.Context, color string) (sd.Endpointer, error)
}

type QueryBalancers interface {
	Query(ctx context.Context) (lb.Balancer, error)
}

type queryServerEndpoints struct {
	svc         QueryService
	middlewares []endpoint.Middleware
}

func (e *queryServerEndpoints) Query(context.Context) endpoint.Endpoint {
	component := func(ctx context.Context, request any) (any, error) {
		return e.svc.Query(ctx, request.(*QueryRequest))
	}
	return endpointx.Chain(component, e.middlewares...)
}
func newQueryServerEndpoints(svc QueryService, middlewares ...endpoint.Middleware) QueryEndpoints {
	return &queryServerEndpoints{svc: svc, middlewares: middlewares}
}

type queryClientEndpoints struct {
	balancers QueryBalancers
}

func (e *queryClientEndpoints) Query(ctx context.Context) (endpoint.Endpoint, error) {
	balancer, err := e.balancers.Query(ctx)
	if err != nil {
		return nil, err
	}
	return balancer.Endpoint()
}
func newQueryClientEndpoints(
	target string,
	transports QueryClientTransports,
	instancerFactory sdx.InstancerFactory,
	endpointerOptions []sd.EndpointerOption,
	balancerFactory lbx.BalancerFactory,
	logger log.Logger,
) QueryClientEndpoints {
	factories := newQueryFactories(transports)
	endpointers := newQueryEndpointers(target, instancerFactory, factories, logger, endpointerOptions...)
	balancers := newQueryBalancers(balancerFactory, endpointers)
	return &queryClientEndpoints{balancers: balancers}
}

type queryFactories struct {
	transports QueryClientTransports
}

func (f *queryFactories) Query(ctx context.Context) sd.Factory {
	return func(instance string) (endpoint.Endpoint, io.Closer, error) {
		return f.transports.Query(ctx, instance)
	}
}
func newQueryFactories(transports QueryClientTransports) QueryFactories {
	return &queryFactories{transports: transports}
}

type queryEndpointers struct {
	target           string
	instancerFactory sdx.InstancerFactory
	factories        QueryFactories
	logger           log.Logger
	options          []sd.EndpointerOption
}

func (e *queryEndpointers) Query(ctx context.Context, color string) (sd.Endpointer, error) {
	return sdx.NewEndpointer(ctx, e.target, color, e.instancerFactory, e.factories.Query(ctx), e.logger, e.options...)
}
func newQueryEndpointers(
	target string,
	instancerFactory sdx.InstancerFactory,
	factories QueryFactories,
	logger log.Logger,
	options ...sd.EndpointerOption,
) QueryEndpointers {
	return &queryEndpointers{
		target:           target,
		instancerFactory: instancerFactory,
		factories:        factories,
		logger:           logger,
		options:          options,
	}
}

type queryBalancers struct {
	factory    lbx.BalancerFactory
	endpointer QueryEndpointers
	query      lazyloadx.Group[lb.Balancer]
}

func (b *queryBalancers) Query(ctx context.Context) (lb.Balancer, error) {
	color, _ := stainx.ExtractColor(ctx)
	balancer, err, _ := b.query.LoadOrNew(color, lbx.NewBalancer(ctx, b.factory, b.endpointer.Query))
	return balancer, err
}
func newQueryBalancers(factory lbx.BalancerFactory, endpointer QueryEndpointers) QueryBalancers {
	return &queryBalancers{
		factory:    factory,
		endpointer: endpointer,
		query:      lazyloadx.Group[lb.Balancer]{},
	}
}
