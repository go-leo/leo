// Code generated by protoc-gen-leo-core. DO NOT EDIT.

package query

import (
	context "context"
	endpoint "github.com/go-kit/kit/endpoint"
	sd "github.com/go-kit/kit/sd"
	endpointx "github.com/go-leo/leo/v3/endpointx"
	transportx "github.com/go-leo/leo/v3/transportx"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

type QueryService interface {
	Query(ctx context.Context, request *QueryRequest) (*emptypb.Empty, error)
}

type QueryEndpoints interface {
	Query(ctx context.Context) endpoint.Endpoint
}

type QueryClientTransports interface {
	Query() transportx.ClientTransport
}

type QueryFactories interface {
	Query(middlewares ...endpoint.Middleware) sd.Factory
}

type QueryEndpointers interface {
	Query() sd.Endpointer
}

type queryServerEndpoints struct {
	svc         QueryService
	middlewares []endpoint.Middleware
}

func (e *queryServerEndpoints) Query(context.Context) endpoint.Endpoint {
	component := func(ctx context.Context, request any) (any, error) {
		return e.svc.Query(ctx, request.(*QueryRequest))
	}
	return endpointx.Chain(component, e.middlewares...)
}

func newQueryServerEndpoints(svc QueryService, middlewares ...endpoint.Middleware) QueryEndpoints {
	return &queryServerEndpoints{svc: svc, middlewares: middlewares}
}

type queryClientEndpoints struct {
	transports  QueryClientTransports
	middlewares []endpoint.Middleware
}

func (e *queryClientEndpoints) Query(ctx context.Context) endpoint.Endpoint {
	return endpointx.Chain(e.transports.Query().Endpoint(ctx), e.middlewares...)
}

func newQueryClientEndpoints(transports QueryClientTransports, middlewares ...endpoint.Middleware) QueryEndpoints {
	return &queryClientEndpoints{transports: transports, middlewares: middlewares}
}
