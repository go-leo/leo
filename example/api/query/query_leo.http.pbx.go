// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package query

import (
	context "context"
	json "encoding/json"
	errors "errors"
	fmt "fmt"
	endpoint "github.com/go-kit/kit/endpoint"
	http "github.com/go-kit/kit/transport/http"
	"github.com/go-leo/gox/errorx"
	"github.com/go-leo/gox/netx/urlx"
	protox "github.com/go-leo/gox/protox"
	strconvx "github.com/go-leo/gox/strconvx"
	endpointx "github.com/go-leo/leo/v3/endpointx"
	mux "github.com/gorilla/mux"
	proto "google.golang.org/protobuf/proto"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	io "io"
	http1 "net/http"
	url "net/url"
)

func NewQueryHTTPServer(
	endpoints interface {
		Query() endpoint.Endpoint
	},
	mdw []endpoint.Middleware,
	opts ...http.ServerOption,
) http1.Handler {
	router := mux.NewRouter()
	router.NewRoute().
		Name("/leo.example.query.v1.Query/Query").
		Methods("GET").
		Path("/v1/query").
		Handler(http.NewServer(
			endpointx.Chain(endpoints.Query(), mdw...),
			func(ctx context.Context, r *http1.Request) (any, error) {
				req := &QueryRequest{}
				vars := mux.Vars(r)
				_ = vars
				queries := r.URL.Query()

				var err error
				_ = queries
				f5 := func(queries url.Values, key string) func() (bool, error) {
					return func() (bool, error) {
						return strconvx.ParseBool(queries.Get(key))
					}
				}
				req.Bool, err = errorx.Break[bool](err)(f5(queries, "bool"))

				f3 := func(queries url.Values, key string) func() (*bool, error) {
					return func() (*bool, error) {
						v, err := strconvx.ParseBool(queries.Get(key))
						return proto.Bool(v), err
					}
				}
				req.OptBool, err = errorx.Break[*bool](err)(f3(queries, "opt_bool"))

				f4 := func(queries url.Values, key string) func() ([]bool, error) {
					return func() ([]bool, error) {
						return strconvx.ParseBoolSlice(queries[key])
					}
				}
				req.RepBool, err = errorx.Break[[]bool](err)(urlx.GetBoolSlice(queries, "rep_bool"))

				f2 := func(queries url.Values, key string) func() (*wrapperspb.BoolValue, error) {
					return func() (*wrapperspb.BoolValue, error) {
						v, err := strconvx.ParseBool(queries.Get(key))
						return wrapperspb.Bool(v), err
					}
				}
				req.WrapBool, err = errorx.Break[*wrapperspb.BoolValue](err)(f2(queries, "wrap_bool"))

				f := func(queries url.Values, key string) func() ([]*wrapperspb.BoolValue, error) {
					return func() ([]*wrapperspb.BoolValue, error) {
						v, err := strconvx.ParseBoolSlice(queries[key])
						return protox.WrapBoolSlice(v), err
					}
				}
				req.RepWrapBool, err = errorx.Break[[]*wrapperspb.BoolValue](err)(urlx.GetBoolValueSlice(queries, "rep_wrap_bool"))

				if v, err := strconvx.ParseInt[int32](queries.Get("int32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Int32 = v
				}
				if v, err := strconvx.ParseInt[int32](queries.Get("sint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Sint32 = v
				}
				if v, err := strconvx.ParseUint[uint32](queries.Get("uint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Uint32 = v
				}
				if v, err := strconvx.ParseInt[int64](queries.Get("int64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Int64 = v
				}
				if v, err := strconvx.ParseInt[int64](queries.Get("sint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Sint64 = v
				}
				if v, err := strconvx.ParseUint[uint64](queries.Get("uint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Uint64 = v
				}
				if v, err := strconvx.ParseInt[int32](queries.Get("sfixed32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Sfixed32 = v
				}
				if v, err := strconvx.ParseUint[uint32](queries.Get("fixed32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Fixed32 = v
				}
				if v, err := strconvx.ParseFloat[float32](queries.Get("float"), 32); err != nil {
					return nil, err
				} else {
					req.Float = v
				}
				if v, err := strconvx.ParseInt[int64](queries.Get("sfixed64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Sfixed64 = v
				}
				if v, err := strconvx.ParseUint[uint64](queries.Get("fixed64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Fixed64 = v
				}
				if v, err := strconvx.ParseFloat[float64](queries.Get("double"), 64); err != nil {
					return nil, err
				} else {
					req.Double = v
				}
				req.String_ = queries.Get("string")
				if v, err := strconvx.ParseBool(queries.Get("opt_bool")); err != nil {
					return nil, err
				} else {
					req.OptBool = proto.Bool(v)
				}
				if v, err := strconvx.ParseInt[int32](queries.Get("opt_int32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptInt32 = proto.Int32(v)
				}
				if v, err := strconvx.ParseInt[int32](queries.Get("opt_sint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptSint32 = proto.Int32(v)
				}
				if v, err := strconvx.ParseUint[uint32](queries.Get("opt_uint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptUint32 = proto.Uint32(v)
				}
				if v, err := strconvx.ParseInt[int64](queries.Get("opt_int64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptInt64 = proto.Int64(v)
				}
				if v, err := strconvx.ParseInt[int64](queries.Get("opt_sint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptSint64 = proto.Int64(v)
				}
				if v, err := strconvx.ParseUint[uint64](queries.Get("opt_uint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptUint64 = proto.Uint64(v)
				}
				if v, err := strconvx.ParseInt[int32](queries.Get("opt_sfixed32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptSfixed32 = proto.Int32(v)
				}
				if v, err := strconvx.ParseUint[uint32](queries.Get("opt_fixed32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptFixed32 = proto.Uint32(v)
				}
				if v, err := strconvx.ParseFloat[float32](queries.Get("opt_float"), 32); err != nil {
					return nil, err
				} else {
					req.OptFloat = proto.Float32(v)
				}
				if v, err := strconvx.ParseInt[int64](queries.Get("opt_sfixed64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptSfixed64 = proto.Int64(v)
				}
				if v, err := strconvx.ParseUint[uint64](queries.Get("opt_fixed64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptFixed64 = proto.Uint64(v)
				}
				if v, err := strconvx.ParseFloat[float64](queries.Get("opt_double"), 64); err != nil {
					return nil, err
				} else {
					req.OptDouble = proto.Float64(v)
				}
				req.OptString = proto.String(queries.Get("opt_string"))
				if v, err := strconvx.ParseBoolSlice(queries["rep_bool"]); err != nil {
					return nil, err
				} else {
					req.RepBool = v
				}
				if v, err := strconvx.ParseIntSlice[int32](queries["rep_int32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepInt32 = v
				}
				if v, err := strconvx.ParseIntSlice[int32](queries["rep_sint32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepSint32 = v
				}
				if v, err := strconvx.ParseUintSlice[uint32](queries["rep_uint32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepUint32 = v
				}
				if v, err := strconvx.ParseIntSlice[int64](queries["rep_int64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepInt64 = v
				}
				if v, err := strconvx.ParseIntSlice[int64](queries["rep_sint64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepSint64 = v
				}
				if v, err := strconvx.ParseUintSlice[uint64](queries["rep_uint64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepUint64 = v
				}
				if v, err := strconvx.ParseIntSlice[int32](queries["rep_sfixed32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepSfixed32 = v
				}
				if v, err := strconvx.ParseUintSlice[uint32](queries["rep_fixed32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepFixed32 = v
				}
				if v, err := strconvx.ParseFloatSlice[float32](queries["rep_float"], 32); err != nil {
					return nil, err
				} else {
					req.RepFloat = v
				}
				if v, err := strconvx.ParseIntSlice[int64](queries["rep_sfixed64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepSfixed64 = v
				}
				if v, err := strconvx.ParseUintSlice[uint64](queries["rep_fixed64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepFixed64 = v
				}
				if v, err := strconvx.ParseFloatSlice[float64](queries["rep_double"], 64); err != nil {
					return nil, err
				} else {
					req.RepDouble = v
				}
				req.RepString = queries["rep_string"]
				if v, err := strconvx.ParseFloat[float64](queries.Get("wrap_double"), 64); err != nil {
					return nil, err
				} else {
					req.WrapDouble = wrapperspb.Double(v)
				}
				if v, err := strconvx.ParseFloat[float32](queries.Get("wrap_float"), 32); err != nil {
					return nil, err
				} else {
					req.WrapFloat = wrapperspb.Float(v)
				}
				if v, err := strconvx.ParseInt[int64](queries.Get("wrap_int64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.WrapInt64 = wrapperspb.Int64(v)
				}
				if v, err := strconvx.ParseUint[uint64](queries.Get("wrap_uint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.WrapUint64 = wrapperspb.UInt64(v)
				}
				if v, err := strconvx.ParseInt[int32](queries.Get("wrap_int32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.WrapInt32 = wrapperspb.Int32(v)
				}
				if v, err := strconvx.ParseUint[uint32](queries.Get("wrap_uint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.WrapUint32 = wrapperspb.UInt32(v)
				}
				req.WrapString = wrapperspb.String(queries.Get("wrap_string"))
				if v, err := strconvx.ParseFloat[float64](queries.Get("opt_wrap_double"), 64); err != nil {
					return nil, err
				} else {
					req.OptWrapDouble = wrapperspb.Double(v)
				}
				if v, err := strconvx.ParseFloat[float32](queries.Get("opt_wrap_float"), 32); err != nil {
					return nil, err
				} else {
					req.OptWrapFloat = wrapperspb.Float(v)
				}
				if v, err := strconvx.ParseInt[int64](queries.Get("opt_wrap_int64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptWrapInt64 = wrapperspb.Int64(v)
				}
				if v, err := strconvx.ParseUint[uint64](queries.Get("opt_wrap_uint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptWrapUint64 = wrapperspb.UInt64(v)
				}
				if v, err := strconvx.ParseInt[int32](queries.Get("opt_wrap_int32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptWrapInt32 = wrapperspb.Int32(v)
				}
				if v, err := strconvx.ParseUint[uint32](queries.Get("opt_wrap_uint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptWrapUint32 = wrapperspb.UInt32(v)
				}

				req.OptWrapString = wrapperspb.String(queries.Get("opt_wrap_string"))
				if v, err := strconvx.ParseFloatSlice[float64](queries["rep_wrap_double"], 64); err != nil {
					return nil, err
				} else {
					req.RepWrapDouble = protox.WrapFloat64Slice(v)
				}
				if v, err := strconvx.ParseFloatSlice[float32](queries["rep_wrap_float"], 32); err != nil {
					return nil, err
				} else {
					req.RepWrapFloat = protox.WrapFloat32Slice(v)
				}
				if v, err := strconvx.ParseIntSlice[int64](queries["rep_wrap_int64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepWrapInt64 = protox.WrapInt64Slice(v)
				}
				if v, err := strconvx.ParseUintSlice[uint64](queries["rep_wrap_uint64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepWrapUint64 = protox.WrapUint64Slice(v)
				}
				if v, err := strconvx.ParseIntSlice[int32](queries["rep_wrap_int32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepWrapInt32 = protox.WrapInt32Slice(v)
				}
				if v, err := strconvx.ParseUintSlice[uint32](queries["rep_wrap_uint32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepWrapUint32 = protox.WrapUint32Slice(v)
				}

				req.RepWrapString = protox.WrapStringSlice(queries["rep_wrap_string"])
				if v, err := strconvx.ParseInt[QueryRequest_Status](queries.Get("status"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Status = v
				}
				if v, err := strconvx.ParseInt[QueryRequest_Status](queries.Get("opt_status"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptStatus = &v
				}
				if v, err := strconvx.ParseIntSlice[QueryRequest_Status](queries["rep_status"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepStatus = v
				}
				return req, nil
			},
			func(ctx context.Context, w http1.ResponseWriter, obj any) error {
				resp := obj.(*emptypb.Empty)
				_ = resp
				w.WriteHeader(http1.StatusOK)
				data, err := json.Marshal(resp)
				if err != nil {
					return err
				}
				if _, err := w.Write(data); err != nil {
					return err
				}
				return nil
			},
			opts...,
		))
	return router
}

type queryHTTPClient struct {
	query endpoint.Endpoint
}

func (c *queryHTTPClient) Query(ctx context.Context, request *QueryRequest) (*emptypb.Empty, error) {
	rep, err := c.query(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*emptypb.Empty), nil
}

func NewQueryHTTPClient(
	scheme string,
	instance string,
	mdw []endpoint.Middleware,
	opts ...http.ClientOption,
) interface {
	Query(ctx context.Context, request *QueryRequest) (*emptypb.Empty, error)
} {
	router := mux.NewRouter()
	router.NewRoute().
		Name("/leo.example.query.v1.Query/Query").
		Methods("GET").
		Path("/v1/query")
	return &queryHTTPClient{
		query: endpointx.Chain(
			http.NewExplicitClient(
				func(ctx context.Context, obj interface{}) (*http1.Request, error) {
					if obj == nil {
						return nil, errors.New("request object is nil")
					}
					req, ok := obj.(*QueryRequest)
					if !ok {
						return nil, fmt.Errorf("invalid request object type, %T", obj)
					}
					_ = req
					var body io.Reader
					var pairs []string
					path, err := router.Get("/leo.example.query.v1.Query/Query").URLPath(pairs...)
					if err != nil {
						return nil, err
					}
					queries := url.Values{}
					queries["bool"] = append(queries["bool"], strconvx.FormatBool(req.GetBool()))
					queries["int32"] = append(queries["int32"], strconvx.FormatInt(req.GetInt32(), 10))
					queries["sint32"] = append(queries["sint32"], strconvx.FormatInt(req.GetSint32(), 10))
					queries["uint32"] = append(queries["uint32"], strconvx.FormatUint(req.GetUint32(), 10))
					queries["int64"] = append(queries["int64"], strconvx.FormatInt(req.GetInt64(), 10))
					queries["sint64"] = append(queries["sint64"], strconvx.FormatInt(req.GetSint64(), 10))
					queries["uint64"] = append(queries["uint64"], strconvx.FormatUint(req.GetUint64(), 10))
					queries["sfixed32"] = append(queries["sfixed32"], strconvx.FormatInt(req.GetSfixed32(), 10))
					queries["fixed32"] = append(queries["fixed32"], strconvx.FormatUint(req.GetFixed32(), 10))
					queries["float"] = append(queries["float"], strconvx.FormatFloat(req.GetFloat(), 'f', -1, 32))
					queries["sfixed64"] = append(queries["sfixed64"], strconvx.FormatInt(req.GetSfixed64(), 10))
					queries["fixed64"] = append(queries["fixed64"], strconvx.FormatUint(req.GetFixed64(), 10))
					queries["double"] = append(queries["double"], strconvx.FormatFloat(req.GetDouble(), 'f', -1, 64))
					queries["string"] = append(queries["string"], req.GetString_())
					queries["opt_bool"] = append(queries["opt_bool"], strconvx.FormatBool(req.GetOptBool()))
					queries["opt_int32"] = append(queries["opt_int32"], strconvx.FormatInt(req.GetOptInt32(), 10))
					queries["opt_sint32"] = append(queries["opt_sint32"], strconvx.FormatInt(req.GetOptSint32(), 10))
					queries["opt_uint32"] = append(queries["opt_uint32"], strconvx.FormatUint(req.GetOptUint32(), 10))
					queries["opt_int64"] = append(queries["opt_int64"], strconvx.FormatInt(req.GetOptInt64(), 10))
					queries["opt_sint64"] = append(queries["opt_sint64"], strconvx.FormatInt(req.GetOptSint64(), 10))
					queries["opt_uint64"] = append(queries["opt_uint64"], strconvx.FormatUint(req.GetOptUint64(), 10))
					queries["opt_sfixed32"] = append(queries["opt_sfixed32"], strconvx.FormatInt(req.GetOptSfixed32(), 10))
					queries["opt_fixed32"] = append(queries["opt_fixed32"], strconvx.FormatUint(req.GetOptFixed32(), 10))
					queries["opt_float"] = append(queries["opt_float"], strconvx.FormatFloat(req.GetOptFloat(), 'f', -1, 32))
					queries["opt_sfixed64"] = append(queries["opt_sfixed64"], strconvx.FormatInt(req.GetOptSfixed64(), 10))
					queries["opt_fixed64"] = append(queries["opt_fixed64"], strconvx.FormatUint(req.GetOptFixed64(), 10))
					queries["opt_double"] = append(queries["opt_double"], strconvx.FormatFloat(req.GetOptDouble(), 'f', -1, 64))
					queries["opt_string"] = append(queries["opt_string"], req.GetOptString())
					queries["rep_bool"] = append(queries["rep_bool"], strconvx.FormatBoolSlice(req.GetRepBool())...)
					queries["rep_int32"] = append(queries["rep_int32"], strconvx.FormatIntSlice(req.GetRepInt32(), 10)...)
					queries["rep_sint32"] = append(queries["rep_sint32"], strconvx.FormatIntSlice(req.GetRepSint32(), 10)...)
					queries["rep_uint32"] = append(queries["rep_uint32"], strconvx.FormatUintSlice(req.GetRepUint32(), 10)...)
					queries["rep_int64"] = append(queries["rep_int64"], strconvx.FormatIntSlice(req.GetRepInt64(), 10)...)
					queries["rep_sint64"] = append(queries["rep_sint64"], strconvx.FormatIntSlice(req.GetRepSint64(), 10)...)
					queries["rep_uint64"] = append(queries["rep_uint64"], strconvx.FormatUintSlice(req.GetRepUint64(), 10)...)
					queries["rep_sfixed32"] = append(queries["rep_sfixed32"], strconvx.FormatIntSlice(req.GetRepSfixed32(), 10)...)
					queries["rep_fixed32"] = append(queries["rep_fixed32"], strconvx.FormatUintSlice(req.GetRepFixed32(), 10)...)
					queries["rep_float"] = append(queries["rep_float"], strconvx.FormatFloatSlice(req.GetRepFloat(), 'f', -1, 32)...)
					queries["rep_sfixed64"] = append(queries["rep_sfixed64"], strconvx.FormatIntSlice(req.GetRepSfixed64(), 10)...)
					queries["rep_fixed64"] = append(queries["rep_fixed64"], strconvx.FormatUintSlice(req.GetRepFixed64(), 10)...)
					queries["rep_double"] = append(queries["rep_double"], strconvx.FormatFloatSlice(req.GetRepDouble(), 'f', -1, 64)...)
					queries["rep_string"] = append(queries["rep_string"], req.GetRepString()...)
					queries["wrap_double"] = append(queries["wrap_double"], strconvx.FormatFloat(req.GetWrapDouble().GetValue(), 'f', -1, 64))
					queries["wrap_float"] = append(queries["wrap_float"], strconvx.FormatFloat(req.GetWrapFloat().GetValue(), 'f', -1, 32))
					queries["wrap_int64"] = append(queries["wrap_int64"], strconvx.FormatInt(req.GetWrapInt64().GetValue(), 10))
					queries["wrap_uint64"] = append(queries["wrap_uint64"], strconvx.FormatUint(req.GetWrapUint64().GetValue(), 10))
					queries["wrap_int32"] = append(queries["wrap_int32"], strconvx.FormatInt(req.GetWrapInt32().GetValue(), 10))
					queries["wrap_uint32"] = append(queries["wrap_uint32"], strconvx.FormatUint(req.GetWrapUint32().GetValue(), 10))
					queries["wrap_bool"] = append(queries["wrap_bool"], strconvx.FormatBool(req.GetWrapBool().GetValue()))
					queries["wrap_string"] = append(queries["wrap_string"], req.GetWrapString().GetValue())
					queries["opt_wrap_double"] = append(queries["opt_wrap_double"], strconvx.FormatFloat(req.GetOptWrapDouble().GetValue(), 'f', -1, 64))
					queries["opt_wrap_float"] = append(queries["opt_wrap_float"], strconvx.FormatFloat(req.GetOptWrapFloat().GetValue(), 'f', -1, 32))
					queries["opt_wrap_int64"] = append(queries["opt_wrap_int64"], strconvx.FormatInt(req.GetOptWrapInt64().GetValue(), 10))
					queries["opt_wrap_uint64"] = append(queries["opt_wrap_uint64"], strconvx.FormatUint(req.GetOptWrapUint64().GetValue(), 10))
					queries["opt_wrap_int32"] = append(queries["opt_wrap_int32"], strconvx.FormatInt(req.GetOptWrapInt32().GetValue(), 10))
					queries["opt_wrap_uint32"] = append(queries["opt_wrap_uint32"], strconvx.FormatUint(req.GetOptWrapUint32().GetValue(), 10))
					queries["opt_wrap_bool"] = append(queries["opt_wrap_bool"], strconvx.FormatBool(req.GetOptWrapBool().GetValue()))
					queries["opt_wrap_string"] = append(queries["opt_wrap_string"], req.GetOptWrapString().GetValue())
					queries["rep_wrap_double"] = append(queries["rep_wrap_double"], strconvx.FormatFloatSlice(protox.UnwrapFloat64Slice(req.GetRepWrapDouble()), 'f', -1, 64)...)
					queries["rep_wrap_float"] = append(queries["rep_wrap_float"], strconvx.FormatFloatSlice(protox.UnwrapFloat32Slice(req.GetRepWrapFloat()), 'f', -1, 32)...)
					queries["rep_wrap_int64"] = append(queries["rep_wrap_int64"], strconvx.FormatIntSlice(protox.UnwrapInt64Slice(req.GetRepWrapInt64()), 10)...)
					queries["rep_wrap_uint64"] = append(queries["rep_wrap_uint64"], strconvx.FormatUintSlice(protox.UnwrapUint64Slice(req.GetRepWrapUint64()), 10)...)
					queries["rep_wrap_int32"] = append(queries["rep_wrap_int32"], strconvx.FormatIntSlice(protox.UnwrapInt32Slice(req.GetRepWrapInt32()), 10)...)
					queries["rep_wrap_uint32"] = append(queries["rep_wrap_uint32"], strconvx.FormatUintSlice(protox.UnwrapUint32Slice(req.GetRepWrapUint32()), 10)...)
					queries["rep_wrap_bool"] = append(queries["rep_wrap_bool"], strconvx.FormatBoolSlice(protox.UnwrapBoolSlice(req.GetRepWrapBool()))...)
					queries["rep_wrap_string"] = append(queries["rep_wrap_string"], protox.UnwrapStringSlice(req.GetRepWrapString())...)
					queries["status"] = append(queries["status"], strconvx.FormatInt(req.GetStatus(), 10))
					queries["opt_status"] = append(queries["opt_status"], strconvx.FormatInt(req.GetOptStatus(), 10))
					queries["rep_status"] = append(queries["rep_status"], strconvx.FormatIntSlice(req.GetRepStatus(), 10)...)
					target := &url.URL{
						Scheme:   scheme,
						Host:     instance,
						Path:     path.Path,
						RawQuery: queries.Encode(),
					}
					r, err := http1.NewRequestWithContext(ctx, "GET", target.String(), body)
					if err != nil {
						return nil, err
					}
					return r, nil
				},
				func(ctx context.Context, r *http1.Response) (interface{}, error) {
					return nil, nil
				},
				opts...,
			).Endpoint(),
			mdw...),
	}
}
