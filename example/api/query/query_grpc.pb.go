// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.3
// source: api/query/query.proto

package query

import (
	context "context"
	httpbody "google.golang.org/genproto/googleapis/api/httpbody"
	http "google.golang.org/genproto/googleapis/rpc/http"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	structpb "google.golang.org/protobuf/types/known/structpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Query_Bool_FullMethodName             = "/leo.example.query.v1.Query/Bool"
	Query_OptBool_FullMethodName          = "/leo.example.query.v1.Query/OptBool"
	Query_RepBool_FullMethodName          = "/leo.example.query.v1.Query/RepBool"
	Query_WrapBool_FullMethodName         = "/leo.example.query.v1.Query/WrapBool"
	Query_Int32_FullMethodName            = "/leo.example.query.v1.Query/Int32"
	Query_OptInt32_FullMethodName         = "/leo.example.query.v1.Query/OptInt32"
	Query_RepInt32_FullMethodName         = "/leo.example.query.v1.Query/RepInt32"
	Query_WrapInt32_FullMethodName        = "/leo.example.query.v1.Query/WrapInt32"
	Query_Uint32_FullMethodName           = "/leo.example.query.v1.Query/Uint32"
	Query_OptUint32_FullMethodName        = "/leo.example.query.v1.Query/OptUint32"
	Query_RepUint32_FullMethodName        = "/leo.example.query.v1.Query/RepUint32"
	Query_WrapUint32_FullMethodName       = "/leo.example.query.v1.Query/WrapUint32"
	Query_Fixed32_FullMethodName          = "/leo.example.query.v1.Query/Fixed32"
	Query_OptFixed32_FullMethodName       = "/leo.example.query.v1.Query/OptFixed32"
	Query_RepFixed32_FullMethodName       = "/leo.example.query.v1.Query/RepFixed32"
	Query_Int64_FullMethodName            = "/leo.example.query.v1.Query/Int64"
	Query_OptInt64_FullMethodName         = "/leo.example.query.v1.Query/OptInt64"
	Query_RepInt64_FullMethodName         = "/leo.example.query.v1.Query/RepInt64"
	Query_WrapInt64_FullMethodName        = "/leo.example.query.v1.Query/WrapInt64"
	Query_Sint64_FullMethodName           = "/leo.example.query.v1.Query/Sint64"
	Query_OptSint64_FullMethodName        = "/leo.example.query.v1.Query/OptSint64"
	Query_RepSint64_FullMethodName        = "/leo.example.query.v1.Query/RepSint64"
	Query_Sfixed64_FullMethodName         = "/leo.example.query.v1.Query/Sfixed64"
	Query_OptSfixed64_FullMethodName      = "/leo.example.query.v1.Query/OptSfixed64"
	Query_RepSfixed64_FullMethodName      = "/leo.example.query.v1.Query/RepSfixed64"
	Query_Uint64_FullMethodName           = "/leo.example.query.v1.Query/Uint64"
	Query_OptUint64_FullMethodName        = "/leo.example.query.v1.Query/OptUint64"
	Query_RepUint64_FullMethodName        = "/leo.example.query.v1.Query/RepUint64"
	Query_WrapUint64_FullMethodName       = "/leo.example.query.v1.Query/WrapUint64"
	Query_Fixed64_FullMethodName          = "/leo.example.query.v1.Query/Fixed64"
	Query_OptFixed64_FullMethodName       = "/leo.example.query.v1.Query/OptFixed64"
	Query_RepFixed64_FullMethodName       = "/leo.example.query.v1.Query/RepFixed64"
	Query_Float32_FullMethodName          = "/leo.example.query.v1.Query/Float32"
	Query_OptFloat32_FullMethodName       = "/leo.example.query.v1.Query/OptFloat32"
	Query_RepFloat32_FullMethodName       = "/leo.example.query.v1.Query/RepFloat32"
	Query_WrapFloat32_FullMethodName      = "/leo.example.query.v1.Query/WrapFloat32"
	Query_Float64_FullMethodName          = "/leo.example.query.v1.Query/Float64"
	Query_OptFloat64_FullMethodName       = "/leo.example.query.v1.Query/OptFloat64"
	Query_RepFloat64_FullMethodName       = "/leo.example.query.v1.Query/RepFloat64"
	Query_WrapFloat64_FullMethodName      = "/leo.example.query.v1.Query/WrapFloat64"
	Query_String_FullMethodName           = "/leo.example.query.v1.Query/String"
	Query_OptString_FullMethodName        = "/leo.example.query.v1.Query/OptString"
	Query_RepString_FullMethodName        = "/leo.example.query.v1.Query/RepString"
	Query_WrapString_FullMethodName       = "/leo.example.query.v1.Query/WrapString"
	Query_Bytes_FullMethodName            = "/leo.example.query.v1.Query/Bytes"
	Query_OptBytes_FullMethodName         = "/leo.example.query.v1.Query/OptBytes"
	Query_RepBytes_FullMethodName         = "/leo.example.query.v1.Query/RepBytes"
	Query_WrapBytes_FullMethodName        = "/leo.example.query.v1.Query/WrapBytes"
	Query_Enum_FullMethodName             = "/leo.example.query.v1.Query/Enum"
	Query_OptEnum_FullMethodName          = "/leo.example.query.v1.Query/OptEnum"
	Query_RepEnum_FullMethodName          = "/leo.example.query.v1.Query/RepEnum"
	Query_Dictionary_FullMethodName       = "/leo.example.query.v1.Query/Dictionary"
	Query_HttpBody_FullMethodName         = "/leo.example.query.v1.Query/HttpBody"
	Query_HttpRequest_FullMethodName      = "/leo.example.query.v1.Query/HttpRequest"
	Query_ValueRequest_FullMethodName     = "/leo.example.query.v1.Query/ValueRequest"
	Query_ListValueRequest_FullMethodName = "/leo.example.query.v1.Query/ListValueRequest"
	Query_StructRequest_FullMethodName    = "/leo.example.query.v1.Query/StructRequest"
	Query_TimestampRequest_FullMethodName = "/leo.example.query.v1.Query/TimestampRequest"
	Query_DurationRequest_FullMethodName  = "/leo.example.query.v1.Query/DurationRequest"
	Query_WrapDoubleBody_FullMethodName   = "/leo.example.query.v1.Query/WrapDoubleBody"
	Query_WrapFloatBody_FullMethodName    = "/leo.example.query.v1.Query/WrapFloatBody"
	Query_WrapInt64Body_FullMethodName    = "/leo.example.query.v1.Query/WrapInt64Body"
	Query_WrapUint64Body_FullMethodName   = "/leo.example.query.v1.Query/WrapUint64Body"
	Query_WrapInt32Body_FullMethodName    = "/leo.example.query.v1.Query/WrapInt32Body"
	Query_WrapUint32Body_FullMethodName   = "/leo.example.query.v1.Query/WrapUint32Body"
	Query_WrapBoolBody_FullMethodName     = "/leo.example.query.v1.Query/WrapBoolBody"
	Query_WrapStringBody_FullMethodName   = "/leo.example.query.v1.Query/WrapStringBody"
	Query_WrapBytesBody_FullMethodName    = "/leo.example.query.v1.Query/WrapBytesBody"
	Query_HttpBodyBody_FullMethodName     = "/leo.example.query.v1.Query/HttpBodyBody"
	Query_HttpRequestBody_FullMethodName  = "/leo.example.query.v1.Query/HttpRequestBody"
	Query_ValueBody_FullMethodName        = "/leo.example.query.v1.Query/ValueBody"
	Query_ListValueBody_FullMethodName    = "/leo.example.query.v1.Query/ListValueBody"
	Query_StructBody_FullMethodName       = "/leo.example.query.v1.Query/StructBody"
	Query_TimestampBody_FullMethodName    = "/leo.example.query.v1.Query/TimestampBody"
	Query_DurationBody_FullMethodName     = "/leo.example.query.v1.Query/DurationBody"
)

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QueryClient interface {
	Bool(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	OptBool(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RepBool(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	WrapBool(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Int32(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	OptInt32(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RepInt32(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	WrapInt32(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Uint32(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	OptUint32(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RepUint32(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	WrapUint32(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Fixed32(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	OptFixed32(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RepFixed32(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Int64(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	OptInt64(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RepInt64(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	WrapInt64(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Sint64(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	OptSint64(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RepSint64(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Sfixed64(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	OptSfixed64(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RepSfixed64(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Uint64(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	OptUint64(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RepUint64(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	WrapUint64(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Fixed64(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	OptFixed64(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RepFixed64(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Float32(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	OptFloat32(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RepFloat32(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	WrapFloat32(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Float64(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	OptFloat64(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RepFloat64(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	WrapFloat64(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	String(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	OptString(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RepString(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	WrapString(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Bytes(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	OptBytes(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RepBytes(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	WrapBytes(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Enum(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	OptEnum(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RepEnum(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Dictionary(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	HttpBody(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	HttpRequest(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ValueRequest(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListValueRequest(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	StructRequest(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	TimestampRequest(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DurationRequest(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	WrapDoubleBody(ctx context.Context, in *wrapperspb.DoubleValue, opts ...grpc.CallOption) (*emptypb.Empty, error)
	WrapFloatBody(ctx context.Context, in *wrapperspb.FloatValue, opts ...grpc.CallOption) (*emptypb.Empty, error)
	WrapInt64Body(ctx context.Context, in *wrapperspb.Int64Value, opts ...grpc.CallOption) (*emptypb.Empty, error)
	WrapUint64Body(ctx context.Context, in *wrapperspb.UInt64Value, opts ...grpc.CallOption) (*emptypb.Empty, error)
	WrapInt32Body(ctx context.Context, in *wrapperspb.Int32Value, opts ...grpc.CallOption) (*emptypb.Empty, error)
	WrapUint32Body(ctx context.Context, in *wrapperspb.UInt32Value, opts ...grpc.CallOption) (*emptypb.Empty, error)
	WrapBoolBody(ctx context.Context, in *wrapperspb.BoolValue, opts ...grpc.CallOption) (*emptypb.Empty, error)
	WrapStringBody(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*emptypb.Empty, error)
	WrapBytesBody(ctx context.Context, in *wrapperspb.BytesValue, opts ...grpc.CallOption) (*emptypb.Empty, error)
	HttpBodyBody(ctx context.Context, in *httpbody.HttpBody, opts ...grpc.CallOption) (*emptypb.Empty, error)
	HttpRequestBody(ctx context.Context, in *http.HttpRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ValueBody(ctx context.Context, in *structpb.Value, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListValueBody(ctx context.Context, in *structpb.ListValue, opts ...grpc.CallOption) (*emptypb.Empty, error)
	StructBody(ctx context.Context, in *structpb.Struct, opts ...grpc.CallOption) (*emptypb.Empty, error)
	TimestampBody(ctx context.Context, in *timestamppb.Timestamp, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DurationBody(ctx context.Context, in *durationpb.Duration, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type queryClient struct {
	cc grpc.ClientConnInterface
}

func NewQueryClient(cc grpc.ClientConnInterface) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Bool(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Query_Bool_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) OptBool(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Query_OptBool_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RepBool(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Query_RepBool_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) WrapBool(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Query_WrapBool_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Int32(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Query_Int32_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) OptInt32(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Query_OptInt32_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RepInt32(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Query_RepInt32_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) WrapInt32(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Query_WrapInt32_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Uint32(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Query_Uint32_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) OptUint32(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Query_OptUint32_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RepUint32(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Query_RepUint32_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) WrapUint32(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Query_WrapUint32_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Fixed32(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Query_Fixed32_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) OptFixed32(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Query_OptFixed32_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RepFixed32(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Query_RepFixed32_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Int64(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Query_Int64_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) OptInt64(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Query_OptInt64_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RepInt64(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Query_RepInt64_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) WrapInt64(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Query_WrapInt64_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Sint64(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Query_Sint64_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) OptSint64(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Query_OptSint64_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RepSint64(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Query_RepSint64_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Sfixed64(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Query_Sfixed64_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) OptSfixed64(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Query_OptSfixed64_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RepSfixed64(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Query_RepSfixed64_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Uint64(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Query_Uint64_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) OptUint64(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Query_OptUint64_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RepUint64(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Query_RepUint64_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) WrapUint64(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Query_WrapUint64_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Fixed64(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Query_Fixed64_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) OptFixed64(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Query_OptFixed64_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RepFixed64(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Query_RepFixed64_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Float32(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Query_Float32_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) OptFloat32(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Query_OptFloat32_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RepFloat32(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Query_RepFloat32_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) WrapFloat32(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Query_WrapFloat32_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Float64(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Query_Float64_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) OptFloat64(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Query_OptFloat64_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RepFloat64(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Query_RepFloat64_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) WrapFloat64(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Query_WrapFloat64_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) String(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Query_String_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) OptString(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Query_OptString_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RepString(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Query_RepString_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) WrapString(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Query_WrapString_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Bytes(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Query_Bytes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) OptBytes(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Query_OptBytes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RepBytes(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Query_RepBytes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) WrapBytes(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Query_WrapBytes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Enum(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Query_Enum_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) OptEnum(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Query_OptEnum_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) RepEnum(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Query_RepEnum_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Dictionary(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Query_Dictionary_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) HttpBody(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Query_HttpBody_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) HttpRequest(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Query_HttpRequest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ValueRequest(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Query_ValueRequest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ListValueRequest(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Query_ListValueRequest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) StructRequest(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Query_StructRequest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TimestampRequest(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Query_TimestampRequest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DurationRequest(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Query_DurationRequest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) WrapDoubleBody(ctx context.Context, in *wrapperspb.DoubleValue, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Query_WrapDoubleBody_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) WrapFloatBody(ctx context.Context, in *wrapperspb.FloatValue, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Query_WrapFloatBody_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) WrapInt64Body(ctx context.Context, in *wrapperspb.Int64Value, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Query_WrapInt64Body_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) WrapUint64Body(ctx context.Context, in *wrapperspb.UInt64Value, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Query_WrapUint64Body_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) WrapInt32Body(ctx context.Context, in *wrapperspb.Int32Value, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Query_WrapInt32Body_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) WrapUint32Body(ctx context.Context, in *wrapperspb.UInt32Value, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Query_WrapUint32Body_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) WrapBoolBody(ctx context.Context, in *wrapperspb.BoolValue, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Query_WrapBoolBody_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) WrapStringBody(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Query_WrapStringBody_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) WrapBytesBody(ctx context.Context, in *wrapperspb.BytesValue, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Query_WrapBytesBody_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) HttpBodyBody(ctx context.Context, in *httpbody.HttpBody, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Query_HttpBodyBody_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) HttpRequestBody(ctx context.Context, in *http.HttpRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Query_HttpRequestBody_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ValueBody(ctx context.Context, in *structpb.Value, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Query_ValueBody_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ListValueBody(ctx context.Context, in *structpb.ListValue, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Query_ListValueBody_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) StructBody(ctx context.Context, in *structpb.Struct, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Query_StructBody_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TimestampBody(ctx context.Context, in *timestamppb.Timestamp, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Query_TimestampBody_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DurationBody(ctx context.Context, in *durationpb.Duration, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Query_DurationBody_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
// All implementations should embed UnimplementedQueryServer
// for forward compatibility
type QueryServer interface {
	Bool(context.Context, *BodyRequest) (*emptypb.Empty, error)
	OptBool(context.Context, *BodyRequest) (*emptypb.Empty, error)
	RepBool(context.Context, *BodyRequest) (*emptypb.Empty, error)
	WrapBool(context.Context, *BodyRequest) (*emptypb.Empty, error)
	Int32(context.Context, *BodyRequest) (*emptypb.Empty, error)
	OptInt32(context.Context, *BodyRequest) (*emptypb.Empty, error)
	RepInt32(context.Context, *BodyRequest) (*emptypb.Empty, error)
	WrapInt32(context.Context, *BodyRequest) (*emptypb.Empty, error)
	Uint32(context.Context, *BodyRequest) (*emptypb.Empty, error)
	OptUint32(context.Context, *BodyRequest) (*emptypb.Empty, error)
	RepUint32(context.Context, *BodyRequest) (*emptypb.Empty, error)
	WrapUint32(context.Context, *BodyRequest) (*emptypb.Empty, error)
	Fixed32(context.Context, *BodyRequest) (*emptypb.Empty, error)
	OptFixed32(context.Context, *BodyRequest) (*emptypb.Empty, error)
	RepFixed32(context.Context, *BodyRequest) (*emptypb.Empty, error)
	Int64(context.Context, *BodyRequest) (*emptypb.Empty, error)
	OptInt64(context.Context, *BodyRequest) (*emptypb.Empty, error)
	RepInt64(context.Context, *BodyRequest) (*emptypb.Empty, error)
	WrapInt64(context.Context, *BodyRequest) (*emptypb.Empty, error)
	Sint64(context.Context, *BodyRequest) (*emptypb.Empty, error)
	OptSint64(context.Context, *BodyRequest) (*emptypb.Empty, error)
	RepSint64(context.Context, *BodyRequest) (*emptypb.Empty, error)
	Sfixed64(context.Context, *BodyRequest) (*emptypb.Empty, error)
	OptSfixed64(context.Context, *BodyRequest) (*emptypb.Empty, error)
	RepSfixed64(context.Context, *BodyRequest) (*emptypb.Empty, error)
	Uint64(context.Context, *BodyRequest) (*emptypb.Empty, error)
	OptUint64(context.Context, *BodyRequest) (*emptypb.Empty, error)
	RepUint64(context.Context, *BodyRequest) (*emptypb.Empty, error)
	WrapUint64(context.Context, *BodyRequest) (*emptypb.Empty, error)
	Fixed64(context.Context, *BodyRequest) (*emptypb.Empty, error)
	OptFixed64(context.Context, *BodyRequest) (*emptypb.Empty, error)
	RepFixed64(context.Context, *BodyRequest) (*emptypb.Empty, error)
	Float32(context.Context, *BodyRequest) (*emptypb.Empty, error)
	OptFloat32(context.Context, *BodyRequest) (*emptypb.Empty, error)
	RepFloat32(context.Context, *BodyRequest) (*emptypb.Empty, error)
	WrapFloat32(context.Context, *BodyRequest) (*emptypb.Empty, error)
	Float64(context.Context, *BodyRequest) (*emptypb.Empty, error)
	OptFloat64(context.Context, *BodyRequest) (*emptypb.Empty, error)
	RepFloat64(context.Context, *BodyRequest) (*emptypb.Empty, error)
	WrapFloat64(context.Context, *BodyRequest) (*emptypb.Empty, error)
	String(context.Context, *BodyRequest) (*emptypb.Empty, error)
	OptString(context.Context, *BodyRequest) (*emptypb.Empty, error)
	RepString(context.Context, *BodyRequest) (*emptypb.Empty, error)
	WrapString(context.Context, *BodyRequest) (*emptypb.Empty, error)
	Bytes(context.Context, *BodyRequest) (*emptypb.Empty, error)
	OptBytes(context.Context, *BodyRequest) (*emptypb.Empty, error)
	RepBytes(context.Context, *BodyRequest) (*emptypb.Empty, error)
	WrapBytes(context.Context, *BodyRequest) (*emptypb.Empty, error)
	Enum(context.Context, *BodyRequest) (*emptypb.Empty, error)
	OptEnum(context.Context, *BodyRequest) (*emptypb.Empty, error)
	RepEnum(context.Context, *BodyRequest) (*emptypb.Empty, error)
	Dictionary(context.Context, *BodyRequest) (*emptypb.Empty, error)
	HttpBody(context.Context, *BodyRequest) (*emptypb.Empty, error)
	HttpRequest(context.Context, *BodyRequest) (*emptypb.Empty, error)
	ValueRequest(context.Context, *BodyRequest) (*emptypb.Empty, error)
	ListValueRequest(context.Context, *BodyRequest) (*emptypb.Empty, error)
	StructRequest(context.Context, *BodyRequest) (*emptypb.Empty, error)
	TimestampRequest(context.Context, *BodyRequest) (*emptypb.Empty, error)
	DurationRequest(context.Context, *BodyRequest) (*emptypb.Empty, error)
	WrapDoubleBody(context.Context, *wrapperspb.DoubleValue) (*emptypb.Empty, error)
	WrapFloatBody(context.Context, *wrapperspb.FloatValue) (*emptypb.Empty, error)
	WrapInt64Body(context.Context, *wrapperspb.Int64Value) (*emptypb.Empty, error)
	WrapUint64Body(context.Context, *wrapperspb.UInt64Value) (*emptypb.Empty, error)
	WrapInt32Body(context.Context, *wrapperspb.Int32Value) (*emptypb.Empty, error)
	WrapUint32Body(context.Context, *wrapperspb.UInt32Value) (*emptypb.Empty, error)
	WrapBoolBody(context.Context, *wrapperspb.BoolValue) (*emptypb.Empty, error)
	WrapStringBody(context.Context, *wrapperspb.StringValue) (*emptypb.Empty, error)
	WrapBytesBody(context.Context, *wrapperspb.BytesValue) (*emptypb.Empty, error)
	HttpBodyBody(context.Context, *httpbody.HttpBody) (*emptypb.Empty, error)
	HttpRequestBody(context.Context, *http.HttpRequest) (*emptypb.Empty, error)
	ValueBody(context.Context, *structpb.Value) (*emptypb.Empty, error)
	ListValueBody(context.Context, *structpb.ListValue) (*emptypb.Empty, error)
	StructBody(context.Context, *structpb.Struct) (*emptypb.Empty, error)
	TimestampBody(context.Context, *timestamppb.Timestamp) (*emptypb.Empty, error)
	DurationBody(context.Context, *durationpb.Duration) (*emptypb.Empty, error)
}

// UnimplementedQueryServer should be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (UnimplementedQueryServer) Bool(context.Context, *BodyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Bool not implemented")
}
func (UnimplementedQueryServer) OptBool(context.Context, *BodyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OptBool not implemented")
}
func (UnimplementedQueryServer) RepBool(context.Context, *BodyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RepBool not implemented")
}
func (UnimplementedQueryServer) WrapBool(context.Context, *BodyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WrapBool not implemented")
}
func (UnimplementedQueryServer) Int32(context.Context, *BodyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Int32 not implemented")
}
func (UnimplementedQueryServer) OptInt32(context.Context, *BodyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OptInt32 not implemented")
}
func (UnimplementedQueryServer) RepInt32(context.Context, *BodyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RepInt32 not implemented")
}
func (UnimplementedQueryServer) WrapInt32(context.Context, *BodyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WrapInt32 not implemented")
}
func (UnimplementedQueryServer) Uint32(context.Context, *BodyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Uint32 not implemented")
}
func (UnimplementedQueryServer) OptUint32(context.Context, *BodyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OptUint32 not implemented")
}
func (UnimplementedQueryServer) RepUint32(context.Context, *BodyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RepUint32 not implemented")
}
func (UnimplementedQueryServer) WrapUint32(context.Context, *BodyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WrapUint32 not implemented")
}
func (UnimplementedQueryServer) Fixed32(context.Context, *BodyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Fixed32 not implemented")
}
func (UnimplementedQueryServer) OptFixed32(context.Context, *BodyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OptFixed32 not implemented")
}
func (UnimplementedQueryServer) RepFixed32(context.Context, *BodyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RepFixed32 not implemented")
}
func (UnimplementedQueryServer) Int64(context.Context, *BodyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Int64 not implemented")
}
func (UnimplementedQueryServer) OptInt64(context.Context, *BodyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OptInt64 not implemented")
}
func (UnimplementedQueryServer) RepInt64(context.Context, *BodyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RepInt64 not implemented")
}
func (UnimplementedQueryServer) WrapInt64(context.Context, *BodyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WrapInt64 not implemented")
}
func (UnimplementedQueryServer) Sint64(context.Context, *BodyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Sint64 not implemented")
}
func (UnimplementedQueryServer) OptSint64(context.Context, *BodyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OptSint64 not implemented")
}
func (UnimplementedQueryServer) RepSint64(context.Context, *BodyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RepSint64 not implemented")
}
func (UnimplementedQueryServer) Sfixed64(context.Context, *BodyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Sfixed64 not implemented")
}
func (UnimplementedQueryServer) OptSfixed64(context.Context, *BodyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OptSfixed64 not implemented")
}
func (UnimplementedQueryServer) RepSfixed64(context.Context, *BodyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RepSfixed64 not implemented")
}
func (UnimplementedQueryServer) Uint64(context.Context, *BodyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Uint64 not implemented")
}
func (UnimplementedQueryServer) OptUint64(context.Context, *BodyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OptUint64 not implemented")
}
func (UnimplementedQueryServer) RepUint64(context.Context, *BodyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RepUint64 not implemented")
}
func (UnimplementedQueryServer) WrapUint64(context.Context, *BodyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WrapUint64 not implemented")
}
func (UnimplementedQueryServer) Fixed64(context.Context, *BodyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Fixed64 not implemented")
}
func (UnimplementedQueryServer) OptFixed64(context.Context, *BodyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OptFixed64 not implemented")
}
func (UnimplementedQueryServer) RepFixed64(context.Context, *BodyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RepFixed64 not implemented")
}
func (UnimplementedQueryServer) Float32(context.Context, *BodyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Float32 not implemented")
}
func (UnimplementedQueryServer) OptFloat32(context.Context, *BodyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OptFloat32 not implemented")
}
func (UnimplementedQueryServer) RepFloat32(context.Context, *BodyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RepFloat32 not implemented")
}
func (UnimplementedQueryServer) WrapFloat32(context.Context, *BodyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WrapFloat32 not implemented")
}
func (UnimplementedQueryServer) Float64(context.Context, *BodyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Float64 not implemented")
}
func (UnimplementedQueryServer) OptFloat64(context.Context, *BodyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OptFloat64 not implemented")
}
func (UnimplementedQueryServer) RepFloat64(context.Context, *BodyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RepFloat64 not implemented")
}
func (UnimplementedQueryServer) WrapFloat64(context.Context, *BodyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WrapFloat64 not implemented")
}
func (UnimplementedQueryServer) String(context.Context, *BodyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method String not implemented")
}
func (UnimplementedQueryServer) OptString(context.Context, *BodyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OptString not implemented")
}
func (UnimplementedQueryServer) RepString(context.Context, *BodyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RepString not implemented")
}
func (UnimplementedQueryServer) WrapString(context.Context, *BodyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WrapString not implemented")
}
func (UnimplementedQueryServer) Bytes(context.Context, *BodyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Bytes not implemented")
}
func (UnimplementedQueryServer) OptBytes(context.Context, *BodyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OptBytes not implemented")
}
func (UnimplementedQueryServer) RepBytes(context.Context, *BodyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RepBytes not implemented")
}
func (UnimplementedQueryServer) WrapBytes(context.Context, *BodyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WrapBytes not implemented")
}
func (UnimplementedQueryServer) Enum(context.Context, *BodyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Enum not implemented")
}
func (UnimplementedQueryServer) OptEnum(context.Context, *BodyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OptEnum not implemented")
}
func (UnimplementedQueryServer) RepEnum(context.Context, *BodyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RepEnum not implemented")
}
func (UnimplementedQueryServer) Dictionary(context.Context, *BodyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Dictionary not implemented")
}
func (UnimplementedQueryServer) HttpBody(context.Context, *BodyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HttpBody not implemented")
}
func (UnimplementedQueryServer) HttpRequest(context.Context, *BodyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HttpRequest not implemented")
}
func (UnimplementedQueryServer) ValueRequest(context.Context, *BodyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValueRequest not implemented")
}
func (UnimplementedQueryServer) ListValueRequest(context.Context, *BodyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListValueRequest not implemented")
}
func (UnimplementedQueryServer) StructRequest(context.Context, *BodyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StructRequest not implemented")
}
func (UnimplementedQueryServer) TimestampRequest(context.Context, *BodyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TimestampRequest not implemented")
}
func (UnimplementedQueryServer) DurationRequest(context.Context, *BodyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DurationRequest not implemented")
}
func (UnimplementedQueryServer) WrapDoubleBody(context.Context, *wrapperspb.DoubleValue) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WrapDoubleBody not implemented")
}
func (UnimplementedQueryServer) WrapFloatBody(context.Context, *wrapperspb.FloatValue) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WrapFloatBody not implemented")
}
func (UnimplementedQueryServer) WrapInt64Body(context.Context, *wrapperspb.Int64Value) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WrapInt64Body not implemented")
}
func (UnimplementedQueryServer) WrapUint64Body(context.Context, *wrapperspb.UInt64Value) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WrapUint64Body not implemented")
}
func (UnimplementedQueryServer) WrapInt32Body(context.Context, *wrapperspb.Int32Value) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WrapInt32Body not implemented")
}
func (UnimplementedQueryServer) WrapUint32Body(context.Context, *wrapperspb.UInt32Value) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WrapUint32Body not implemented")
}
func (UnimplementedQueryServer) WrapBoolBody(context.Context, *wrapperspb.BoolValue) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WrapBoolBody not implemented")
}
func (UnimplementedQueryServer) WrapStringBody(context.Context, *wrapperspb.StringValue) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WrapStringBody not implemented")
}
func (UnimplementedQueryServer) WrapBytesBody(context.Context, *wrapperspb.BytesValue) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WrapBytesBody not implemented")
}
func (UnimplementedQueryServer) HttpBodyBody(context.Context, *httpbody.HttpBody) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HttpBodyBody not implemented")
}
func (UnimplementedQueryServer) HttpRequestBody(context.Context, *http.HttpRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HttpRequestBody not implemented")
}
func (UnimplementedQueryServer) ValueBody(context.Context, *structpb.Value) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValueBody not implemented")
}
func (UnimplementedQueryServer) ListValueBody(context.Context, *structpb.ListValue) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListValueBody not implemented")
}
func (UnimplementedQueryServer) StructBody(context.Context, *structpb.Struct) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StructBody not implemented")
}
func (UnimplementedQueryServer) TimestampBody(context.Context, *timestamppb.Timestamp) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TimestampBody not implemented")
}
func (UnimplementedQueryServer) DurationBody(context.Context, *durationpb.Duration) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DurationBody not implemented")
}

// UnsafeQueryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QueryServer will
// result in compilation errors.
type UnsafeQueryServer interface {
	mustEmbedUnimplementedQueryServer()
}

func RegisterQueryServer(s grpc.ServiceRegistrar, srv QueryServer) {
	s.RegisterService(&Query_ServiceDesc, srv)
}

func _Query_Bool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Bool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Bool_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Bool(ctx, req.(*BodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_OptBool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).OptBool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_OptBool_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).OptBool(ctx, req.(*BodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RepBool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RepBool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_RepBool_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RepBool(ctx, req.(*BodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_WrapBool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).WrapBool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_WrapBool_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).WrapBool(ctx, req.(*BodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Int32_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Int32(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Int32_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Int32(ctx, req.(*BodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_OptInt32_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).OptInt32(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_OptInt32_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).OptInt32(ctx, req.(*BodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RepInt32_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RepInt32(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_RepInt32_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RepInt32(ctx, req.(*BodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_WrapInt32_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).WrapInt32(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_WrapInt32_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).WrapInt32(ctx, req.(*BodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Uint32_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Uint32(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Uint32_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Uint32(ctx, req.(*BodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_OptUint32_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).OptUint32(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_OptUint32_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).OptUint32(ctx, req.(*BodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RepUint32_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RepUint32(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_RepUint32_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RepUint32(ctx, req.(*BodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_WrapUint32_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).WrapUint32(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_WrapUint32_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).WrapUint32(ctx, req.(*BodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Fixed32_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Fixed32(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Fixed32_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Fixed32(ctx, req.(*BodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_OptFixed32_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).OptFixed32(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_OptFixed32_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).OptFixed32(ctx, req.(*BodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RepFixed32_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RepFixed32(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_RepFixed32_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RepFixed32(ctx, req.(*BodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Int64_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Int64(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Int64_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Int64(ctx, req.(*BodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_OptInt64_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).OptInt64(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_OptInt64_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).OptInt64(ctx, req.(*BodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RepInt64_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RepInt64(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_RepInt64_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RepInt64(ctx, req.(*BodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_WrapInt64_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).WrapInt64(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_WrapInt64_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).WrapInt64(ctx, req.(*BodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Sint64_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Sint64(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Sint64_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Sint64(ctx, req.(*BodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_OptSint64_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).OptSint64(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_OptSint64_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).OptSint64(ctx, req.(*BodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RepSint64_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RepSint64(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_RepSint64_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RepSint64(ctx, req.(*BodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Sfixed64_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Sfixed64(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Sfixed64_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Sfixed64(ctx, req.(*BodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_OptSfixed64_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).OptSfixed64(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_OptSfixed64_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).OptSfixed64(ctx, req.(*BodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RepSfixed64_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RepSfixed64(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_RepSfixed64_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RepSfixed64(ctx, req.(*BodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Uint64_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Uint64(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Uint64_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Uint64(ctx, req.(*BodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_OptUint64_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).OptUint64(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_OptUint64_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).OptUint64(ctx, req.(*BodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RepUint64_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RepUint64(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_RepUint64_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RepUint64(ctx, req.(*BodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_WrapUint64_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).WrapUint64(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_WrapUint64_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).WrapUint64(ctx, req.(*BodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Fixed64_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Fixed64(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Fixed64_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Fixed64(ctx, req.(*BodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_OptFixed64_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).OptFixed64(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_OptFixed64_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).OptFixed64(ctx, req.(*BodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RepFixed64_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RepFixed64(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_RepFixed64_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RepFixed64(ctx, req.(*BodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Float32_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Float32(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Float32_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Float32(ctx, req.(*BodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_OptFloat32_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).OptFloat32(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_OptFloat32_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).OptFloat32(ctx, req.(*BodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RepFloat32_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RepFloat32(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_RepFloat32_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RepFloat32(ctx, req.(*BodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_WrapFloat32_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).WrapFloat32(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_WrapFloat32_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).WrapFloat32(ctx, req.(*BodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Float64_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Float64(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Float64_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Float64(ctx, req.(*BodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_OptFloat64_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).OptFloat64(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_OptFloat64_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).OptFloat64(ctx, req.(*BodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RepFloat64_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RepFloat64(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_RepFloat64_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RepFloat64(ctx, req.(*BodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_WrapFloat64_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).WrapFloat64(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_WrapFloat64_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).WrapFloat64(ctx, req.(*BodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_String_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).String(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_String_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).String(ctx, req.(*BodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_OptString_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).OptString(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_OptString_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).OptString(ctx, req.(*BodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RepString_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RepString(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_RepString_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RepString(ctx, req.(*BodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_WrapString_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).WrapString(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_WrapString_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).WrapString(ctx, req.(*BodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Bytes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Bytes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Bytes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Bytes(ctx, req.(*BodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_OptBytes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).OptBytes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_OptBytes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).OptBytes(ctx, req.(*BodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RepBytes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RepBytes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_RepBytes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RepBytes(ctx, req.(*BodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_WrapBytes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).WrapBytes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_WrapBytes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).WrapBytes(ctx, req.(*BodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Enum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Enum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Enum_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Enum(ctx, req.(*BodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_OptEnum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).OptEnum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_OptEnum_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).OptEnum(ctx, req.(*BodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_RepEnum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).RepEnum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_RepEnum_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).RepEnum(ctx, req.(*BodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Dictionary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Dictionary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Dictionary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Dictionary(ctx, req.(*BodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_HttpBody_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).HttpBody(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_HttpBody_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).HttpBody(ctx, req.(*BodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_HttpRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).HttpRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_HttpRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).HttpRequest(ctx, req.(*BodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ValueRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ValueRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_ValueRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ValueRequest(ctx, req.(*BodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ListValueRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ListValueRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_ListValueRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ListValueRequest(ctx, req.(*BodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_StructRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).StructRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_StructRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).StructRequest(ctx, req.(*BodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TimestampRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TimestampRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_TimestampRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TimestampRequest(ctx, req.(*BodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DurationRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DurationRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_DurationRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DurationRequest(ctx, req.(*BodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_WrapDoubleBody_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.DoubleValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).WrapDoubleBody(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_WrapDoubleBody_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).WrapDoubleBody(ctx, req.(*wrapperspb.DoubleValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_WrapFloatBody_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.FloatValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).WrapFloatBody(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_WrapFloatBody_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).WrapFloatBody(ctx, req.(*wrapperspb.FloatValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_WrapInt64Body_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.Int64Value)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).WrapInt64Body(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_WrapInt64Body_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).WrapInt64Body(ctx, req.(*wrapperspb.Int64Value))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_WrapUint64Body_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.UInt64Value)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).WrapUint64Body(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_WrapUint64Body_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).WrapUint64Body(ctx, req.(*wrapperspb.UInt64Value))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_WrapInt32Body_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.Int32Value)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).WrapInt32Body(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_WrapInt32Body_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).WrapInt32Body(ctx, req.(*wrapperspb.Int32Value))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_WrapUint32Body_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.UInt32Value)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).WrapUint32Body(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_WrapUint32Body_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).WrapUint32Body(ctx, req.(*wrapperspb.UInt32Value))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_WrapBoolBody_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.BoolValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).WrapBoolBody(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_WrapBoolBody_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).WrapBoolBody(ctx, req.(*wrapperspb.BoolValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_WrapStringBody_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).WrapStringBody(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_WrapStringBody_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).WrapStringBody(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_WrapBytesBody_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.BytesValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).WrapBytesBody(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_WrapBytesBody_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).WrapBytesBody(ctx, req.(*wrapperspb.BytesValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_HttpBodyBody_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(httpbody.HttpBody)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).HttpBodyBody(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_HttpBodyBody_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).HttpBodyBody(ctx, req.(*httpbody.HttpBody))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_HttpRequestBody_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(http.HttpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).HttpRequestBody(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_HttpRequestBody_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).HttpRequestBody(ctx, req.(*http.HttpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ValueBody_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(structpb.Value)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ValueBody(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_ValueBody_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ValueBody(ctx, req.(*structpb.Value))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ListValueBody_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(structpb.ListValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ListValueBody(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_ListValueBody_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ListValueBody(ctx, req.(*structpb.ListValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_StructBody_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(structpb.Struct)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).StructBody(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_StructBody_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).StructBody(ctx, req.(*structpb.Struct))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TimestampBody_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(timestamppb.Timestamp)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TimestampBody(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_TimestampBody_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TimestampBody(ctx, req.(*timestamppb.Timestamp))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DurationBody_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(durationpb.Duration)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DurationBody(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_DurationBody_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DurationBody(ctx, req.(*durationpb.Duration))
	}
	return interceptor(ctx, in, info, handler)
}

// Query_ServiceDesc is the grpc.ServiceDesc for Query service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Query_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "leo.example.query.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Bool",
			Handler:    _Query_Bool_Handler,
		},
		{
			MethodName: "OptBool",
			Handler:    _Query_OptBool_Handler,
		},
		{
			MethodName: "RepBool",
			Handler:    _Query_RepBool_Handler,
		},
		{
			MethodName: "WrapBool",
			Handler:    _Query_WrapBool_Handler,
		},
		{
			MethodName: "Int32",
			Handler:    _Query_Int32_Handler,
		},
		{
			MethodName: "OptInt32",
			Handler:    _Query_OptInt32_Handler,
		},
		{
			MethodName: "RepInt32",
			Handler:    _Query_RepInt32_Handler,
		},
		{
			MethodName: "WrapInt32",
			Handler:    _Query_WrapInt32_Handler,
		},
		{
			MethodName: "Uint32",
			Handler:    _Query_Uint32_Handler,
		},
		{
			MethodName: "OptUint32",
			Handler:    _Query_OptUint32_Handler,
		},
		{
			MethodName: "RepUint32",
			Handler:    _Query_RepUint32_Handler,
		},
		{
			MethodName: "WrapUint32",
			Handler:    _Query_WrapUint32_Handler,
		},
		{
			MethodName: "Fixed32",
			Handler:    _Query_Fixed32_Handler,
		},
		{
			MethodName: "OptFixed32",
			Handler:    _Query_OptFixed32_Handler,
		},
		{
			MethodName: "RepFixed32",
			Handler:    _Query_RepFixed32_Handler,
		},
		{
			MethodName: "Int64",
			Handler:    _Query_Int64_Handler,
		},
		{
			MethodName: "OptInt64",
			Handler:    _Query_OptInt64_Handler,
		},
		{
			MethodName: "RepInt64",
			Handler:    _Query_RepInt64_Handler,
		},
		{
			MethodName: "WrapInt64",
			Handler:    _Query_WrapInt64_Handler,
		},
		{
			MethodName: "Sint64",
			Handler:    _Query_Sint64_Handler,
		},
		{
			MethodName: "OptSint64",
			Handler:    _Query_OptSint64_Handler,
		},
		{
			MethodName: "RepSint64",
			Handler:    _Query_RepSint64_Handler,
		},
		{
			MethodName: "Sfixed64",
			Handler:    _Query_Sfixed64_Handler,
		},
		{
			MethodName: "OptSfixed64",
			Handler:    _Query_OptSfixed64_Handler,
		},
		{
			MethodName: "RepSfixed64",
			Handler:    _Query_RepSfixed64_Handler,
		},
		{
			MethodName: "Uint64",
			Handler:    _Query_Uint64_Handler,
		},
		{
			MethodName: "OptUint64",
			Handler:    _Query_OptUint64_Handler,
		},
		{
			MethodName: "RepUint64",
			Handler:    _Query_RepUint64_Handler,
		},
		{
			MethodName: "WrapUint64",
			Handler:    _Query_WrapUint64_Handler,
		},
		{
			MethodName: "Fixed64",
			Handler:    _Query_Fixed64_Handler,
		},
		{
			MethodName: "OptFixed64",
			Handler:    _Query_OptFixed64_Handler,
		},
		{
			MethodName: "RepFixed64",
			Handler:    _Query_RepFixed64_Handler,
		},
		{
			MethodName: "Float32",
			Handler:    _Query_Float32_Handler,
		},
		{
			MethodName: "OptFloat32",
			Handler:    _Query_OptFloat32_Handler,
		},
		{
			MethodName: "RepFloat32",
			Handler:    _Query_RepFloat32_Handler,
		},
		{
			MethodName: "WrapFloat32",
			Handler:    _Query_WrapFloat32_Handler,
		},
		{
			MethodName: "Float64",
			Handler:    _Query_Float64_Handler,
		},
		{
			MethodName: "OptFloat64",
			Handler:    _Query_OptFloat64_Handler,
		},
		{
			MethodName: "RepFloat64",
			Handler:    _Query_RepFloat64_Handler,
		},
		{
			MethodName: "WrapFloat64",
			Handler:    _Query_WrapFloat64_Handler,
		},
		{
			MethodName: "String",
			Handler:    _Query_String_Handler,
		},
		{
			MethodName: "OptString",
			Handler:    _Query_OptString_Handler,
		},
		{
			MethodName: "RepString",
			Handler:    _Query_RepString_Handler,
		},
		{
			MethodName: "WrapString",
			Handler:    _Query_WrapString_Handler,
		},
		{
			MethodName: "Bytes",
			Handler:    _Query_Bytes_Handler,
		},
		{
			MethodName: "OptBytes",
			Handler:    _Query_OptBytes_Handler,
		},
		{
			MethodName: "RepBytes",
			Handler:    _Query_RepBytes_Handler,
		},
		{
			MethodName: "WrapBytes",
			Handler:    _Query_WrapBytes_Handler,
		},
		{
			MethodName: "Enum",
			Handler:    _Query_Enum_Handler,
		},
		{
			MethodName: "OptEnum",
			Handler:    _Query_OptEnum_Handler,
		},
		{
			MethodName: "RepEnum",
			Handler:    _Query_RepEnum_Handler,
		},
		{
			MethodName: "Dictionary",
			Handler:    _Query_Dictionary_Handler,
		},
		{
			MethodName: "HttpBody",
			Handler:    _Query_HttpBody_Handler,
		},
		{
			MethodName: "HttpRequest",
			Handler:    _Query_HttpRequest_Handler,
		},
		{
			MethodName: "ValueRequest",
			Handler:    _Query_ValueRequest_Handler,
		},
		{
			MethodName: "ListValueRequest",
			Handler:    _Query_ListValueRequest_Handler,
		},
		{
			MethodName: "StructRequest",
			Handler:    _Query_StructRequest_Handler,
		},
		{
			MethodName: "TimestampRequest",
			Handler:    _Query_TimestampRequest_Handler,
		},
		{
			MethodName: "DurationRequest",
			Handler:    _Query_DurationRequest_Handler,
		},
		{
			MethodName: "WrapDoubleBody",
			Handler:    _Query_WrapDoubleBody_Handler,
		},
		{
			MethodName: "WrapFloatBody",
			Handler:    _Query_WrapFloatBody_Handler,
		},
		{
			MethodName: "WrapInt64Body",
			Handler:    _Query_WrapInt64Body_Handler,
		},
		{
			MethodName: "WrapUint64Body",
			Handler:    _Query_WrapUint64Body_Handler,
		},
		{
			MethodName: "WrapInt32Body",
			Handler:    _Query_WrapInt32Body_Handler,
		},
		{
			MethodName: "WrapUint32Body",
			Handler:    _Query_WrapUint32Body_Handler,
		},
		{
			MethodName: "WrapBoolBody",
			Handler:    _Query_WrapBoolBody_Handler,
		},
		{
			MethodName: "WrapStringBody",
			Handler:    _Query_WrapStringBody_Handler,
		},
		{
			MethodName: "WrapBytesBody",
			Handler:    _Query_WrapBytesBody_Handler,
		},
		{
			MethodName: "HttpBodyBody",
			Handler:    _Query_HttpBodyBody_Handler,
		},
		{
			MethodName: "HttpRequestBody",
			Handler:    _Query_HttpRequestBody_Handler,
		},
		{
			MethodName: "ValueBody",
			Handler:    _Query_ValueBody_Handler,
		},
		{
			MethodName: "ListValueBody",
			Handler:    _Query_ListValueBody_Handler,
		},
		{
			MethodName: "StructBody",
			Handler:    _Query_StructBody_Handler,
		},
		{
			MethodName: "TimestampBody",
			Handler:    _Query_TimestampBody_Handler,
		},
		{
			MethodName: "DurationBody",
			Handler:    _Query_DurationBody_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/query/query.proto",
}
