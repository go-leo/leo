// Code generated by protoc-gen-leo-grpc. DO NOT EDIT.

package query

import (
	context "context"
	endpoint "github.com/go-kit/kit/endpoint"
	grpc "github.com/go-kit/kit/transport/grpc"
	errorx "github.com/go-leo/gox/errorx"
	endpointx "github.com/go-leo/leo/v3/endpointx"
	statusx "github.com/go-leo/leo/v3/statusx"
	transportx "github.com/go-leo/leo/v3/transportx"
	grpcx "github.com/go-leo/leo/v3/transportx/grpcx"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// =========================== grpc server ===========================

type QueryGrpcServerTransports interface {
	Query() *grpc.Server
}

type queryGrpcServerTransports struct {
	query *grpc.Server
}

func (t *queryGrpcServerTransports) Query() *grpc.Server {
	return t.query
}

func newQueryGrpcServerTransports(endpoints QueryEndpoints) QueryGrpcServerTransports {
	return &queryGrpcServerTransports{
		query: _Query_Query_GrpcServer_Transport(endpoints),
	}
}

type queryGrpcServer struct {
	query *grpc.Server
}

func (s *queryGrpcServer) Query(ctx context.Context, request *QueryRequest) (*emptypb.Empty, error) {
	ctx, rep, err := s.query.ServeGRPC(ctx, request)
	if err != nil {
		return nil, err
	}
	_ = ctx
	return rep.(*emptypb.Empty), nil
}

func NewQueryGrpcServer(svc QueryService, middlewares ...endpoint.Middleware) QueryService {
	endpoints := newQueryServerEndpoints(svc, middlewares...)
	transports := newQueryGrpcServerTransports(endpoints)
	return &queryGrpcServer{
		query: transports.Query(),
	}
}

// =========================== grpc client ===========================

type queryGrpcClientTransports struct {
	query transportx.ClientTransport
}

func (t *queryGrpcClientTransports) Query() transportx.ClientTransport {
	return t.query
}

func NewQueryGrpcClientTransports(target string, options ...transportx.ClientTransportOption) (QueryClientTransports, error) {
	t := &queryGrpcClientTransports{}
	var err error
	t.query, err = errorx.Break[transportx.ClientTransport](err)(_Query_Query_GrpcClient_Transport(target, options...))
	return t, err
}

type queryGrpcClient struct {
	endpoints QueryEndpoints
}

func (c *queryGrpcClient) Query(ctx context.Context, request *QueryRequest) (*emptypb.Empty, error) {
	ctx = endpointx.InjectName(ctx, "/leo.example.query.v1.Query/Query")
	ctx = transportx.InjectName(ctx, grpcx.GrpcClient)
	rep, err := c.endpoints.Query(ctx)(ctx, request)
	if err != nil {
		return nil, statusx.FromGrpcError(err)
	}
	return rep.(*emptypb.Empty), nil
}

func NewQueryGrpcClient(transports QueryClientTransports, middlewares ...endpoint.Middleware) QueryService {
	endpoints := newQueryClientEndpoints(transports, middlewares...)
	return &queryGrpcClient{endpoints: endpoints}
}

// =========================== grpc transport ===========================

func _Query_Query_GrpcServer_Transport(endpoints QueryEndpoints) *grpc.Server {
	return grpc.NewServer(
		endpoints.Query(context.TODO()),
		func(_ context.Context, v any) (any, error) { return v, nil },
		func(_ context.Context, v any) (any, error) { return v, nil },
		grpc.ServerBefore(grpcx.ServerEndpointInjector("/leo.example.query.v1.Query/Query")),
		grpc.ServerBefore(grpcx.ServerTransportInjector),
		grpc.ServerBefore(grpcx.IncomingMetadataInjector),
	)
}

func _Query_Query_GrpcClient_Transport(target string, options ...transportx.ClientTransportOption) func() (transportx.ClientTransport, error) {
	return func() (transportx.ClientTransport, error) {
		return transportx.NewClientTransport(
			target,
			grpcx.ClientFactory(
				"leo.example.query.v1.Query",
				"Query",
				func(_ context.Context, v any) (any, error) { return v, nil },
				func(_ context.Context, v any) (any, error) { return v, nil },
				emptypb.Empty{},
				grpc.ClientBefore(grpcx.OutgoingMetadataInjector),
				grpc.ClientBefore(grpcx.OutgoingStain),
			),
			options...,
		)
	}
}
