// Code generated by protoc-gen-leo-grpc. DO NOT EDIT.

package query

import (
	context "context"
	endpoint "github.com/go-kit/kit/endpoint"
	grpc "github.com/go-kit/kit/transport/grpc"
	endpointx "github.com/go-leo/leo/v3/endpointx"
	statusx "github.com/go-leo/leo/v3/statusx"
	transportx "github.com/go-leo/leo/v3/transportx"
	grpcx "github.com/go-leo/leo/v3/transportx/grpcx"
	grpc1 "google.golang.org/grpc"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	io "io"
)

// =========================== grpc server ===========================

type QueryGrpcServerTransports interface {
	Query() *grpc.Server
}

type queryGrpcServerTransports struct {
	query *grpc.Server
}

func (t *queryGrpcServerTransports) Query() *grpc.Server {
	return t.query
}

func newQueryGrpcServerTransports(endpoints QueryEndpoints) QueryGrpcServerTransports {
	return &queryGrpcServerTransports{
		query: _Query_Query_GrpcServer_Transport(endpoints),
	}
}

type queryGrpcServer struct {
	query *grpc.Server
}

func (s *queryGrpcServer) Query(ctx context.Context, request *QueryRequest) (*emptypb.Empty, error) {
	ctx, rep, err := s.query.ServeGRPC(ctx, request)
	if err != nil {
		return nil, err
	}
	_ = ctx
	return rep.(*emptypb.Empty), nil
}

func NewQueryGrpcServer(svc QueryService, middlewares ...endpoint.Middleware) QueryService {
	endpoints := newQueryServerEndpoints(svc, middlewares...)
	transports := newQueryGrpcServerTransports(endpoints)
	return &queryGrpcServer{
		query: transports.Query(),
	}
}

// =========================== grpc client ===========================

type queryGrpcClientTransports struct {
	dialOptions   []grpc1.DialOption
	clientOptions []grpc.ClientOption
	middlewares   []endpoint.Middleware
}

func (t *queryGrpcClientTransports) Query(ctx context.Context, instance string) (endpoint.Endpoint, io.Closer, error) {
	conn, err := grpc1.NewClient(instance, t.dialOptions...)
	if err != nil {
		return nil, nil, err
	}
	opts := []grpc.ClientOption{
		grpc.ClientBefore(grpcx.OutgoingMetadataInjector),
		grpc.ClientBefore(grpcx.OutgoingStain),
	}
	opts = append(opts, t.clientOptions...)
	client := grpc.NewClient(
		conn,
		"leo.example.query.v1.Query",
		"Query",
		func(_ context.Context, v any) (any, error) { return v, nil },
		func(_ context.Context, v any) (any, error) { return v, nil },
		emptypb.Empty{},
		opts...)
	return endpointx.Chain(client.Endpoint(), t.middlewares...), conn, nil
}

func newQueryGrpcClientTransports(
	dialOptions []grpc1.DialOption,
	clientOptions []grpc.ClientOption,
	middlewares []endpoint.Middleware,
) QueryClientTransports {
	return &queryGrpcClientTransports{
		dialOptions:   dialOptions,
		clientOptions: clientOptions,
		middlewares:   middlewares,
	}
}

type queryGrpcClient struct {
	balancers QueryBalancers
}

func (c *queryGrpcClient) Query(ctx context.Context, request *QueryRequest) (*emptypb.Empty, error) {
	ctx = endpointx.InjectName(ctx, "/leo.example.query.v1.Query/Query")
	ctx = transportx.InjectName(ctx, grpcx.GrpcClient)
	balancer, err := c.balancers.Query(ctx)
	if err != nil {
		return nil, err
	}
	endpoint, err := balancer.Endpoint()
	if err != nil {
		return nil, err
	}
	rep, err := endpoint(ctx, request)
	if err != nil {
		return nil, statusx.FromGrpcError(err)
	}
	return rep.(*emptypb.Empty), nil
}

func NewQueryGrpcClient(target string, opts ...grpcx.ClientOption) QueryService {
	options := grpcx.NewClientOptions(opts...)
	transports := newQueryGrpcClientTransports(options.DialOptions(), options.ClientTransportOptions(), options.Middlewares())
	factories := newQueryFactories(transports)
	endpointers := newQueryEndpointers(target, options.InstancerFactory(), factories, options.Logger(), options.EndpointerOptions()...)
	balancers := newQueryBalancers(options.BalancerFactory(), endpointers)
	return &queryHttpClient{balancers: balancers}
}

// =========================== grpc transport ===========================

func _Query_Query_GrpcServer_Transport(endpoints QueryEndpoints) *grpc.Server {
	return grpc.NewServer(
		endpoints.Query(context.TODO()),
		func(_ context.Context, v any) (any, error) { return v, nil },
		func(_ context.Context, v any) (any, error) { return v, nil },
		grpc.ServerBefore(grpcx.ServerEndpointInjector("/leo.example.query.v1.Query/Query")),
		grpc.ServerBefore(grpcx.ServerTransportInjector),
		grpc.ServerBefore(grpcx.IncomingMetadataInjector),
	)
}
