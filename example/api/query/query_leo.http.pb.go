// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package query

import (
	bytes "bytes"
	context "context"
	json "encoding/json"
	errors "errors"
	fmt "fmt"
	endpoint "github.com/go-kit/kit/endpoint"
	http1 "github.com/go-kit/kit/transport/http"
	endpointx "github.com/go-leo/leo/v3/endpointx"
	mux "github.com/gorilla/mux"
	httpbody "google.golang.org/genproto/googleapis/api/httpbody"
	http "google.golang.org/genproto/googleapis/rpc/http"
	protojson "google.golang.org/protobuf/encoding/protojson"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	structpb "google.golang.org/protobuf/types/known/structpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	io "io"
	http2 "net/http"
	strconv "strconv"
	strings "strings"
	time "time"
)

type httpQueryClient struct {
	bool             endpoint.Endpoint
	optBool          endpoint.Endpoint
	repBool          endpoint.Endpoint
	wrapBool         endpoint.Endpoint
	int32            endpoint.Endpoint
	optInt32         endpoint.Endpoint
	repInt32         endpoint.Endpoint
	wrapInt32        endpoint.Endpoint
	uint32           endpoint.Endpoint
	optUint32        endpoint.Endpoint
	repUint32        endpoint.Endpoint
	wrapUint32       endpoint.Endpoint
	fixed32          endpoint.Endpoint
	optFixed32       endpoint.Endpoint
	repFixed32       endpoint.Endpoint
	int64            endpoint.Endpoint
	optInt64         endpoint.Endpoint
	repInt64         endpoint.Endpoint
	wrapInt64        endpoint.Endpoint
	sint64           endpoint.Endpoint
	optSint64        endpoint.Endpoint
	repSint64        endpoint.Endpoint
	sfixed64         endpoint.Endpoint
	optSfixed64      endpoint.Endpoint
	repSfixed64      endpoint.Endpoint
	uint64           endpoint.Endpoint
	optUint64        endpoint.Endpoint
	repUint64        endpoint.Endpoint
	wrapUint64       endpoint.Endpoint
	fixed64          endpoint.Endpoint
	optFixed64       endpoint.Endpoint
	repFixed64       endpoint.Endpoint
	float32          endpoint.Endpoint
	optFloat32       endpoint.Endpoint
	repFloat32       endpoint.Endpoint
	wrapFloat32      endpoint.Endpoint
	float64          endpoint.Endpoint
	optFloat64       endpoint.Endpoint
	repFloat64       endpoint.Endpoint
	wrapFloat64      endpoint.Endpoint
	string           endpoint.Endpoint
	optString        endpoint.Endpoint
	repString        endpoint.Endpoint
	wrapString       endpoint.Endpoint
	bytes            endpoint.Endpoint
	optBytes         endpoint.Endpoint
	repBytes         endpoint.Endpoint
	wrapBytes        endpoint.Endpoint
	enum             endpoint.Endpoint
	optEnum          endpoint.Endpoint
	repEnum          endpoint.Endpoint
	dictionary       endpoint.Endpoint
	httpBody         endpoint.Endpoint
	httpRequest      endpoint.Endpoint
	valueRequest     endpoint.Endpoint
	listValueRequest endpoint.Endpoint
	structRequest    endpoint.Endpoint
	timestampRequest endpoint.Endpoint
	durationRequest  endpoint.Endpoint
	wrapDoubleBody   endpoint.Endpoint
	wrapFloatBody    endpoint.Endpoint
	wrapInt64Body    endpoint.Endpoint
	wrapUint64Body   endpoint.Endpoint
	wrapInt32Body    endpoint.Endpoint
	wrapUint32Body   endpoint.Endpoint
	wrapBoolBody     endpoint.Endpoint
	wrapStringBody   endpoint.Endpoint
	wrapBytesBody    endpoint.Endpoint
	httpBodyBody     endpoint.Endpoint
	httpRequestBody  endpoint.Endpoint
	valueBody        endpoint.Endpoint
	listValueBody    endpoint.Endpoint
	structBody       endpoint.Endpoint
	timestampBody    endpoint.Endpoint
	durationBody     endpoint.Endpoint
}

func (c *httpQueryClient) Bool(ctx context.Context, request *BodyRequest) (*emptypb.Empty, error) {
	rep, err := c.bool(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*emptypb.Empty), nil
}

func (c *httpQueryClient) OptBool(ctx context.Context, request *BodyRequest) (*emptypb.Empty, error) {
	rep, err := c.optBool(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*emptypb.Empty), nil
}

func (c *httpQueryClient) RepBool(ctx context.Context, request *BodyRequest) (*emptypb.Empty, error) {
	rep, err := c.repBool(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*emptypb.Empty), nil
}

func (c *httpQueryClient) WrapBool(ctx context.Context, request *BodyRequest) (*emptypb.Empty, error) {
	rep, err := c.wrapBool(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*emptypb.Empty), nil
}

func (c *httpQueryClient) Int32(ctx context.Context, request *BodyRequest) (*emptypb.Empty, error) {
	rep, err := c.int32(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*emptypb.Empty), nil
}

func (c *httpQueryClient) OptInt32(ctx context.Context, request *BodyRequest) (*emptypb.Empty, error) {
	rep, err := c.optInt32(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*emptypb.Empty), nil
}

func (c *httpQueryClient) RepInt32(ctx context.Context, request *BodyRequest) (*emptypb.Empty, error) {
	rep, err := c.repInt32(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*emptypb.Empty), nil
}

func (c *httpQueryClient) WrapInt32(ctx context.Context, request *BodyRequest) (*emptypb.Empty, error) {
	rep, err := c.wrapInt32(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*emptypb.Empty), nil
}

func (c *httpQueryClient) Uint32(ctx context.Context, request *BodyRequest) (*emptypb.Empty, error) {
	rep, err := c.uint32(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*emptypb.Empty), nil
}

func (c *httpQueryClient) OptUint32(ctx context.Context, request *BodyRequest) (*emptypb.Empty, error) {
	rep, err := c.optUint32(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*emptypb.Empty), nil
}

func (c *httpQueryClient) RepUint32(ctx context.Context, request *BodyRequest) (*emptypb.Empty, error) {
	rep, err := c.repUint32(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*emptypb.Empty), nil
}

func (c *httpQueryClient) WrapUint32(ctx context.Context, request *BodyRequest) (*emptypb.Empty, error) {
	rep, err := c.wrapUint32(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*emptypb.Empty), nil
}

func (c *httpQueryClient) Fixed32(ctx context.Context, request *BodyRequest) (*emptypb.Empty, error) {
	rep, err := c.fixed32(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*emptypb.Empty), nil
}

func (c *httpQueryClient) OptFixed32(ctx context.Context, request *BodyRequest) (*emptypb.Empty, error) {
	rep, err := c.optFixed32(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*emptypb.Empty), nil
}

func (c *httpQueryClient) RepFixed32(ctx context.Context, request *BodyRequest) (*emptypb.Empty, error) {
	rep, err := c.repFixed32(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*emptypb.Empty), nil
}

func (c *httpQueryClient) Int64(ctx context.Context, request *BodyRequest) (*emptypb.Empty, error) {
	rep, err := c.int64(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*emptypb.Empty), nil
}

func (c *httpQueryClient) OptInt64(ctx context.Context, request *BodyRequest) (*emptypb.Empty, error) {
	rep, err := c.optInt64(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*emptypb.Empty), nil
}

func (c *httpQueryClient) RepInt64(ctx context.Context, request *BodyRequest) (*emptypb.Empty, error) {
	rep, err := c.repInt64(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*emptypb.Empty), nil
}

func (c *httpQueryClient) WrapInt64(ctx context.Context, request *BodyRequest) (*emptypb.Empty, error) {
	rep, err := c.wrapInt64(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*emptypb.Empty), nil
}

func (c *httpQueryClient) Sint64(ctx context.Context, request *BodyRequest) (*emptypb.Empty, error) {
	rep, err := c.sint64(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*emptypb.Empty), nil
}

func (c *httpQueryClient) OptSint64(ctx context.Context, request *BodyRequest) (*emptypb.Empty, error) {
	rep, err := c.optSint64(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*emptypb.Empty), nil
}

func (c *httpQueryClient) RepSint64(ctx context.Context, request *BodyRequest) (*emptypb.Empty, error) {
	rep, err := c.repSint64(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*emptypb.Empty), nil
}

func (c *httpQueryClient) Sfixed64(ctx context.Context, request *BodyRequest) (*emptypb.Empty, error) {
	rep, err := c.sfixed64(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*emptypb.Empty), nil
}

func (c *httpQueryClient) OptSfixed64(ctx context.Context, request *BodyRequest) (*emptypb.Empty, error) {
	rep, err := c.optSfixed64(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*emptypb.Empty), nil
}

func (c *httpQueryClient) RepSfixed64(ctx context.Context, request *BodyRequest) (*emptypb.Empty, error) {
	rep, err := c.repSfixed64(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*emptypb.Empty), nil
}

func (c *httpQueryClient) Uint64(ctx context.Context, request *BodyRequest) (*emptypb.Empty, error) {
	rep, err := c.uint64(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*emptypb.Empty), nil
}

func (c *httpQueryClient) OptUint64(ctx context.Context, request *BodyRequest) (*emptypb.Empty, error) {
	rep, err := c.optUint64(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*emptypb.Empty), nil
}

func (c *httpQueryClient) RepUint64(ctx context.Context, request *BodyRequest) (*emptypb.Empty, error) {
	rep, err := c.repUint64(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*emptypb.Empty), nil
}

func (c *httpQueryClient) WrapUint64(ctx context.Context, request *BodyRequest) (*emptypb.Empty, error) {
	rep, err := c.wrapUint64(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*emptypb.Empty), nil
}

func (c *httpQueryClient) Fixed64(ctx context.Context, request *BodyRequest) (*emptypb.Empty, error) {
	rep, err := c.fixed64(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*emptypb.Empty), nil
}

func (c *httpQueryClient) OptFixed64(ctx context.Context, request *BodyRequest) (*emptypb.Empty, error) {
	rep, err := c.optFixed64(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*emptypb.Empty), nil
}

func (c *httpQueryClient) RepFixed64(ctx context.Context, request *BodyRequest) (*emptypb.Empty, error) {
	rep, err := c.repFixed64(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*emptypb.Empty), nil
}

func (c *httpQueryClient) Float32(ctx context.Context, request *BodyRequest) (*emptypb.Empty, error) {
	rep, err := c.float32(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*emptypb.Empty), nil
}

func (c *httpQueryClient) OptFloat32(ctx context.Context, request *BodyRequest) (*emptypb.Empty, error) {
	rep, err := c.optFloat32(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*emptypb.Empty), nil
}

func (c *httpQueryClient) RepFloat32(ctx context.Context, request *BodyRequest) (*emptypb.Empty, error) {
	rep, err := c.repFloat32(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*emptypb.Empty), nil
}

func (c *httpQueryClient) WrapFloat32(ctx context.Context, request *BodyRequest) (*emptypb.Empty, error) {
	rep, err := c.wrapFloat32(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*emptypb.Empty), nil
}

func (c *httpQueryClient) Float64(ctx context.Context, request *BodyRequest) (*emptypb.Empty, error) {
	rep, err := c.float64(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*emptypb.Empty), nil
}

func (c *httpQueryClient) OptFloat64(ctx context.Context, request *BodyRequest) (*emptypb.Empty, error) {
	rep, err := c.optFloat64(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*emptypb.Empty), nil
}

func (c *httpQueryClient) RepFloat64(ctx context.Context, request *BodyRequest) (*emptypb.Empty, error) {
	rep, err := c.repFloat64(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*emptypb.Empty), nil
}

func (c *httpQueryClient) WrapFloat64(ctx context.Context, request *BodyRequest) (*emptypb.Empty, error) {
	rep, err := c.wrapFloat64(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*emptypb.Empty), nil
}

func (c *httpQueryClient) String(ctx context.Context, request *BodyRequest) (*emptypb.Empty, error) {
	rep, err := c.string(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*emptypb.Empty), nil
}

func (c *httpQueryClient) OptString(ctx context.Context, request *BodyRequest) (*emptypb.Empty, error) {
	rep, err := c.optString(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*emptypb.Empty), nil
}

func (c *httpQueryClient) RepString(ctx context.Context, request *BodyRequest) (*emptypb.Empty, error) {
	rep, err := c.repString(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*emptypb.Empty), nil
}

func (c *httpQueryClient) WrapString(ctx context.Context, request *BodyRequest) (*emptypb.Empty, error) {
	rep, err := c.wrapString(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*emptypb.Empty), nil
}

func (c *httpQueryClient) Bytes(ctx context.Context, request *BodyRequest) (*emptypb.Empty, error) {
	rep, err := c.bytes(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*emptypb.Empty), nil
}

func (c *httpQueryClient) OptBytes(ctx context.Context, request *BodyRequest) (*emptypb.Empty, error) {
	rep, err := c.optBytes(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*emptypb.Empty), nil
}

func (c *httpQueryClient) RepBytes(ctx context.Context, request *BodyRequest) (*emptypb.Empty, error) {
	rep, err := c.repBytes(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*emptypb.Empty), nil
}

func (c *httpQueryClient) WrapBytes(ctx context.Context, request *BodyRequest) (*emptypb.Empty, error) {
	rep, err := c.wrapBytes(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*emptypb.Empty), nil
}

func (c *httpQueryClient) Enum(ctx context.Context, request *BodyRequest) (*emptypb.Empty, error) {
	rep, err := c.enum(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*emptypb.Empty), nil
}

func (c *httpQueryClient) OptEnum(ctx context.Context, request *BodyRequest) (*emptypb.Empty, error) {
	rep, err := c.optEnum(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*emptypb.Empty), nil
}

func (c *httpQueryClient) RepEnum(ctx context.Context, request *BodyRequest) (*emptypb.Empty, error) {
	rep, err := c.repEnum(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*emptypb.Empty), nil
}

func (c *httpQueryClient) Dictionary(ctx context.Context, request *BodyRequest) (*emptypb.Empty, error) {
	rep, err := c.dictionary(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*emptypb.Empty), nil
}

func (c *httpQueryClient) HttpBody(ctx context.Context, request *BodyRequest) (*emptypb.Empty, error) {
	rep, err := c.httpBody(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*emptypb.Empty), nil
}

func (c *httpQueryClient) HttpRequest(ctx context.Context, request *BodyRequest) (*emptypb.Empty, error) {
	rep, err := c.httpRequest(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*emptypb.Empty), nil
}

func (c *httpQueryClient) ValueRequest(ctx context.Context, request *BodyRequest) (*emptypb.Empty, error) {
	rep, err := c.valueRequest(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*emptypb.Empty), nil
}

func (c *httpQueryClient) ListValueRequest(ctx context.Context, request *BodyRequest) (*emptypb.Empty, error) {
	rep, err := c.listValueRequest(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*emptypb.Empty), nil
}

func (c *httpQueryClient) StructRequest(ctx context.Context, request *BodyRequest) (*emptypb.Empty, error) {
	rep, err := c.structRequest(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*emptypb.Empty), nil
}

func (c *httpQueryClient) TimestampRequest(ctx context.Context, request *BodyRequest) (*emptypb.Empty, error) {
	rep, err := c.timestampRequest(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*emptypb.Empty), nil
}

func (c *httpQueryClient) DurationRequest(ctx context.Context, request *BodyRequest) (*emptypb.Empty, error) {
	rep, err := c.durationRequest(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*emptypb.Empty), nil
}

func (c *httpQueryClient) WrapDoubleBody(ctx context.Context, request *wrapperspb.DoubleValue) (*emptypb.Empty, error) {
	rep, err := c.wrapDoubleBody(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*emptypb.Empty), nil
}

func (c *httpQueryClient) WrapFloatBody(ctx context.Context, request *wrapperspb.FloatValue) (*emptypb.Empty, error) {
	rep, err := c.wrapFloatBody(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*emptypb.Empty), nil
}

func (c *httpQueryClient) WrapInt64Body(ctx context.Context, request *wrapperspb.Int64Value) (*emptypb.Empty, error) {
	rep, err := c.wrapInt64Body(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*emptypb.Empty), nil
}

func (c *httpQueryClient) WrapUint64Body(ctx context.Context, request *wrapperspb.UInt64Value) (*emptypb.Empty, error) {
	rep, err := c.wrapUint64Body(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*emptypb.Empty), nil
}

func (c *httpQueryClient) WrapInt32Body(ctx context.Context, request *wrapperspb.Int32Value) (*emptypb.Empty, error) {
	rep, err := c.wrapInt32Body(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*emptypb.Empty), nil
}

func (c *httpQueryClient) WrapUint32Body(ctx context.Context, request *wrapperspb.UInt32Value) (*emptypb.Empty, error) {
	rep, err := c.wrapUint32Body(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*emptypb.Empty), nil
}

func (c *httpQueryClient) WrapBoolBody(ctx context.Context, request *wrapperspb.BoolValue) (*emptypb.Empty, error) {
	rep, err := c.wrapBoolBody(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*emptypb.Empty), nil
}

func (c *httpQueryClient) WrapStringBody(ctx context.Context, request *wrapperspb.StringValue) (*emptypb.Empty, error) {
	rep, err := c.wrapStringBody(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*emptypb.Empty), nil
}

func (c *httpQueryClient) WrapBytesBody(ctx context.Context, request *wrapperspb.BytesValue) (*emptypb.Empty, error) {
	rep, err := c.wrapBytesBody(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*emptypb.Empty), nil
}

func (c *httpQueryClient) HttpBodyBody(ctx context.Context, request *httpbody.HttpBody) (*emptypb.Empty, error) {
	rep, err := c.httpBodyBody(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*emptypb.Empty), nil
}

func (c *httpQueryClient) HttpRequestBody(ctx context.Context, request *http.HttpRequest) (*emptypb.Empty, error) {
	rep, err := c.httpRequestBody(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*emptypb.Empty), nil
}

func (c *httpQueryClient) ValueBody(ctx context.Context, request *structpb.Value) (*emptypb.Empty, error) {
	rep, err := c.valueBody(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*emptypb.Empty), nil
}

func (c *httpQueryClient) ListValueBody(ctx context.Context, request *structpb.ListValue) (*emptypb.Empty, error) {
	rep, err := c.listValueBody(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*emptypb.Empty), nil
}

func (c *httpQueryClient) StructBody(ctx context.Context, request *structpb.Struct) (*emptypb.Empty, error) {
	rep, err := c.structBody(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*emptypb.Empty), nil
}

func (c *httpQueryClient) TimestampBody(ctx context.Context, request *timestamppb.Timestamp) (*emptypb.Empty, error) {
	rep, err := c.timestampBody(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*emptypb.Empty), nil
}

func (c *httpQueryClient) DurationBody(ctx context.Context, request *durationpb.Duration) (*emptypb.Empty, error) {
	rep, err := c.durationBody(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*emptypb.Empty), nil
}

func NewQueryHTTPClient(
	instance string,
	mdw []endpoint.Middleware,
	opts ...http1.ClientOption,
) interface {
	Bool(ctx context.Context, request *BodyRequest) (*emptypb.Empty, error)
	OptBool(ctx context.Context, request *BodyRequest) (*emptypb.Empty, error)
	RepBool(ctx context.Context, request *BodyRequest) (*emptypb.Empty, error)
	WrapBool(ctx context.Context, request *BodyRequest) (*emptypb.Empty, error)
	Int32(ctx context.Context, request *BodyRequest) (*emptypb.Empty, error)
	OptInt32(ctx context.Context, request *BodyRequest) (*emptypb.Empty, error)
	RepInt32(ctx context.Context, request *BodyRequest) (*emptypb.Empty, error)
	WrapInt32(ctx context.Context, request *BodyRequest) (*emptypb.Empty, error)
	Uint32(ctx context.Context, request *BodyRequest) (*emptypb.Empty, error)
	OptUint32(ctx context.Context, request *BodyRequest) (*emptypb.Empty, error)
	RepUint32(ctx context.Context, request *BodyRequest) (*emptypb.Empty, error)
	WrapUint32(ctx context.Context, request *BodyRequest) (*emptypb.Empty, error)
	Fixed32(ctx context.Context, request *BodyRequest) (*emptypb.Empty, error)
	OptFixed32(ctx context.Context, request *BodyRequest) (*emptypb.Empty, error)
	RepFixed32(ctx context.Context, request *BodyRequest) (*emptypb.Empty, error)
	Int64(ctx context.Context, request *BodyRequest) (*emptypb.Empty, error)
	OptInt64(ctx context.Context, request *BodyRequest) (*emptypb.Empty, error)
	RepInt64(ctx context.Context, request *BodyRequest) (*emptypb.Empty, error)
	WrapInt64(ctx context.Context, request *BodyRequest) (*emptypb.Empty, error)
	Sint64(ctx context.Context, request *BodyRequest) (*emptypb.Empty, error)
	OptSint64(ctx context.Context, request *BodyRequest) (*emptypb.Empty, error)
	RepSint64(ctx context.Context, request *BodyRequest) (*emptypb.Empty, error)
	Sfixed64(ctx context.Context, request *BodyRequest) (*emptypb.Empty, error)
	OptSfixed64(ctx context.Context, request *BodyRequest) (*emptypb.Empty, error)
	RepSfixed64(ctx context.Context, request *BodyRequest) (*emptypb.Empty, error)
	Uint64(ctx context.Context, request *BodyRequest) (*emptypb.Empty, error)
	OptUint64(ctx context.Context, request *BodyRequest) (*emptypb.Empty, error)
	RepUint64(ctx context.Context, request *BodyRequest) (*emptypb.Empty, error)
	WrapUint64(ctx context.Context, request *BodyRequest) (*emptypb.Empty, error)
	Fixed64(ctx context.Context, request *BodyRequest) (*emptypb.Empty, error)
	OptFixed64(ctx context.Context, request *BodyRequest) (*emptypb.Empty, error)
	RepFixed64(ctx context.Context, request *BodyRequest) (*emptypb.Empty, error)
	Float32(ctx context.Context, request *BodyRequest) (*emptypb.Empty, error)
	OptFloat32(ctx context.Context, request *BodyRequest) (*emptypb.Empty, error)
	RepFloat32(ctx context.Context, request *BodyRequest) (*emptypb.Empty, error)
	WrapFloat32(ctx context.Context, request *BodyRequest) (*emptypb.Empty, error)
	Float64(ctx context.Context, request *BodyRequest) (*emptypb.Empty, error)
	OptFloat64(ctx context.Context, request *BodyRequest) (*emptypb.Empty, error)
	RepFloat64(ctx context.Context, request *BodyRequest) (*emptypb.Empty, error)
	WrapFloat64(ctx context.Context, request *BodyRequest) (*emptypb.Empty, error)
	String(ctx context.Context, request *BodyRequest) (*emptypb.Empty, error)
	OptString(ctx context.Context, request *BodyRequest) (*emptypb.Empty, error)
	RepString(ctx context.Context, request *BodyRequest) (*emptypb.Empty, error)
	WrapString(ctx context.Context, request *BodyRequest) (*emptypb.Empty, error)
	Bytes(ctx context.Context, request *BodyRequest) (*emptypb.Empty, error)
	OptBytes(ctx context.Context, request *BodyRequest) (*emptypb.Empty, error)
	RepBytes(ctx context.Context, request *BodyRequest) (*emptypb.Empty, error)
	WrapBytes(ctx context.Context, request *BodyRequest) (*emptypb.Empty, error)
	Enum(ctx context.Context, request *BodyRequest) (*emptypb.Empty, error)
	OptEnum(ctx context.Context, request *BodyRequest) (*emptypb.Empty, error)
	RepEnum(ctx context.Context, request *BodyRequest) (*emptypb.Empty, error)
	Dictionary(ctx context.Context, request *BodyRequest) (*emptypb.Empty, error)
	HttpBody(ctx context.Context, request *BodyRequest) (*emptypb.Empty, error)
	HttpRequest(ctx context.Context, request *BodyRequest) (*emptypb.Empty, error)
	ValueRequest(ctx context.Context, request *BodyRequest) (*emptypb.Empty, error)
	ListValueRequest(ctx context.Context, request *BodyRequest) (*emptypb.Empty, error)
	StructRequest(ctx context.Context, request *BodyRequest) (*emptypb.Empty, error)
	TimestampRequest(ctx context.Context, request *BodyRequest) (*emptypb.Empty, error)
	DurationRequest(ctx context.Context, request *BodyRequest) (*emptypb.Empty, error)
	WrapDoubleBody(ctx context.Context, request *wrapperspb.DoubleValue) (*emptypb.Empty, error)
	WrapFloatBody(ctx context.Context, request *wrapperspb.FloatValue) (*emptypb.Empty, error)
	WrapInt64Body(ctx context.Context, request *wrapperspb.Int64Value) (*emptypb.Empty, error)
	WrapUint64Body(ctx context.Context, request *wrapperspb.UInt64Value) (*emptypb.Empty, error)
	WrapInt32Body(ctx context.Context, request *wrapperspb.Int32Value) (*emptypb.Empty, error)
	WrapUint32Body(ctx context.Context, request *wrapperspb.UInt32Value) (*emptypb.Empty, error)
	WrapBoolBody(ctx context.Context, request *wrapperspb.BoolValue) (*emptypb.Empty, error)
	WrapStringBody(ctx context.Context, request *wrapperspb.StringValue) (*emptypb.Empty, error)
	WrapBytesBody(ctx context.Context, request *wrapperspb.BytesValue) (*emptypb.Empty, error)
	HttpBodyBody(ctx context.Context, request *httpbody.HttpBody) (*emptypb.Empty, error)
	HttpRequestBody(ctx context.Context, request *http.HttpRequest) (*emptypb.Empty, error)
	ValueBody(ctx context.Context, request *structpb.Value) (*emptypb.Empty, error)
	ListValueBody(ctx context.Context, request *structpb.ListValue) (*emptypb.Empty, error)
	StructBody(ctx context.Context, request *structpb.Struct) (*emptypb.Empty, error)
	TimestampBody(ctx context.Context, request *timestamppb.Timestamp) (*emptypb.Empty, error)
	DurationBody(ctx context.Context, request *durationpb.Duration) (*emptypb.Empty, error)
} {
	router := mux.NewRouter()
	router.NewRoute().
		Name("/leo.example.query.v1.Query/Bool").
		Methods("PUT").
		Path("/v1/bool")
	router.NewRoute().
		Name("/leo.example.query.v1.Query/OptBool").
		Methods("PUT").
		Path("/v1/opt_bool")
	router.NewRoute().
		Name("/leo.example.query.v1.Query/RepBool").
		Methods("PUT").
		Path("/v1/rep_bool")
	router.NewRoute().
		Name("/leo.example.query.v1.Query/WrapBool").
		Methods("PUT").
		Path("/v1/wrap_bool")
	router.NewRoute().
		Name("/leo.example.query.v1.Query/Int32").
		Methods("PUT").
		Path("/v1/int32")
	router.NewRoute().
		Name("/leo.example.query.v1.Query/OptInt32").
		Methods("PUT").
		Path("/v1/opt_int32")
	router.NewRoute().
		Name("/leo.example.query.v1.Query/RepInt32").
		Methods("PUT").
		Path("/v1/rep_int32")
	router.NewRoute().
		Name("/leo.example.query.v1.Query/WrapInt32").
		Methods("PUT").
		Path("/v1/wrap_int32")
	router.NewRoute().
		Name("/leo.example.query.v1.Query/Uint32").
		Methods("PUT").
		Path("/v1/uint32")
	router.NewRoute().
		Name("/leo.example.query.v1.Query/OptUint32").
		Methods("PUT").
		Path("/v1/opt_uint32")
	router.NewRoute().
		Name("/leo.example.query.v1.Query/RepUint32").
		Methods("PUT").
		Path("/v1/rep_uint32")
	router.NewRoute().
		Name("/leo.example.query.v1.Query/WrapUint32").
		Methods("PUT").
		Path("/v1/wrap_uint32")
	router.NewRoute().
		Name("/leo.example.query.v1.Query/Fixed32").
		Methods("PUT").
		Path("/v1/fixed32")
	router.NewRoute().
		Name("/leo.example.query.v1.Query/OptFixed32").
		Methods("PUT").
		Path("/v1/opt_fixed32")
	router.NewRoute().
		Name("/leo.example.query.v1.Query/RepFixed32").
		Methods("PUT").
		Path("/v1/rep_fixed32")
	router.NewRoute().
		Name("/leo.example.query.v1.Query/Int64").
		Methods("PUT").
		Path("/v1/int64")
	router.NewRoute().
		Name("/leo.example.query.v1.Query/OptInt64").
		Methods("PUT").
		Path("/v1/opt_int64")
	router.NewRoute().
		Name("/leo.example.query.v1.Query/RepInt64").
		Methods("PUT").
		Path("/v1/rep_int64")
	router.NewRoute().
		Name("/leo.example.query.v1.Query/WrapInt64").
		Methods("PUT").
		Path("/v1/wrap_int64")
	router.NewRoute().
		Name("/leo.example.query.v1.Query/Sint64").
		Methods("PUT").
		Path("/v1/sint64")
	router.NewRoute().
		Name("/leo.example.query.v1.Query/OptSint64").
		Methods("PUT").
		Path("/v1/opt_sint64")
	router.NewRoute().
		Name("/leo.example.query.v1.Query/RepSint64").
		Methods("PUT").
		Path("/v1/rep_sint64")
	router.NewRoute().
		Name("/leo.example.query.v1.Query/Sfixed64").
		Methods("PUT").
		Path("/v1/sfixed64")
	router.NewRoute().
		Name("/leo.example.query.v1.Query/OptSfixed64").
		Methods("PUT").
		Path("/v1/opt_sfixed64")
	router.NewRoute().
		Name("/leo.example.query.v1.Query/RepSfixed64").
		Methods("PUT").
		Path("/v1/rep_sfixed64")
	router.NewRoute().
		Name("/leo.example.query.v1.Query/Uint64").
		Methods("PUT").
		Path("/v1/uint64")
	router.NewRoute().
		Name("/leo.example.query.v1.Query/OptUint64").
		Methods("PUT").
		Path("/v1/opt_uint64")
	router.NewRoute().
		Name("/leo.example.query.v1.Query/RepUint64").
		Methods("PUT").
		Path("/v1/rep_uint64")
	router.NewRoute().
		Name("/leo.example.query.v1.Query/WrapUint64").
		Methods("PUT").
		Path("/v1/wrap_uint64")
	router.NewRoute().
		Name("/leo.example.query.v1.Query/Fixed64").
		Methods("PUT").
		Path("/v1/fixed64")
	router.NewRoute().
		Name("/leo.example.query.v1.Query/OptFixed64").
		Methods("PUT").
		Path("/v1/opt_fixed64")
	router.NewRoute().
		Name("/leo.example.query.v1.Query/RepFixed64").
		Methods("PUT").
		Path("/v1/rep_fixed64")
	router.NewRoute().
		Name("/leo.example.query.v1.Query/Float32").
		Methods("PUT").
		Path("/v1/float")
	router.NewRoute().
		Name("/leo.example.query.v1.Query/OptFloat32").
		Methods("PUT").
		Path("/v1/opt_float")
	router.NewRoute().
		Name("/leo.example.query.v1.Query/RepFloat32").
		Methods("PUT").
		Path("/v1/rep_float")
	router.NewRoute().
		Name("/leo.example.query.v1.Query/WrapFloat32").
		Methods("PUT").
		Path("/v1/wrap_float")
	router.NewRoute().
		Name("/leo.example.query.v1.Query/Float64").
		Methods("PUT").
		Path("/v1/double")
	router.NewRoute().
		Name("/leo.example.query.v1.Query/OptFloat64").
		Methods("PUT").
		Path("/v1/opt_double")
	router.NewRoute().
		Name("/leo.example.query.v1.Query/RepFloat64").
		Methods("PUT").
		Path("/v1/rep_double")
	router.NewRoute().
		Name("/leo.example.query.v1.Query/WrapFloat64").
		Methods("PUT").
		Path("/v1/wrap_double")
	router.NewRoute().
		Name("/leo.example.query.v1.Query/String").
		Methods("PUT").
		Path("/v1/string")
	router.NewRoute().
		Name("/leo.example.query.v1.Query/OptString").
		Methods("PUT").
		Path("/v1/opt_string")
	router.NewRoute().
		Name("/leo.example.query.v1.Query/RepString").
		Methods("PUT").
		Path("/v1/rep_string")
	router.NewRoute().
		Name("/leo.example.query.v1.Query/WrapString").
		Methods("PUT").
		Path("/v1/wrap_string")
	router.NewRoute().
		Name("/leo.example.query.v1.Query/Bytes").
		Methods("PUT").
		Path("/v1/bytes")
	router.NewRoute().
		Name("/leo.example.query.v1.Query/OptBytes").
		Methods("PUT").
		Path("/v1/opt_bytes")
	router.NewRoute().
		Name("/leo.example.query.v1.Query/RepBytes").
		Methods("PUT").
		Path("/v1/rep_bytes")
	router.NewRoute().
		Name("/leo.example.query.v1.Query/WrapBytes").
		Methods("PUT").
		Path("/v1/wrap_bytes")
	router.NewRoute().
		Name("/leo.example.query.v1.Query/Enum").
		Methods("PUT").
		Path("/v1/status")
	router.NewRoute().
		Name("/leo.example.query.v1.Query/OptEnum").
		Methods("PUT").
		Path("/v1/opt_status")
	router.NewRoute().
		Name("/leo.example.query.v1.Query/RepEnum").
		Methods("PUT").
		Path("/v1/rep_status")
	router.NewRoute().
		Name("/leo.example.query.v1.Query/Dictionary").
		Methods("PUT").
		Path("/v1/dictionary")
	router.NewRoute().
		Name("/leo.example.query.v1.Query/HttpBody").
		Methods("PUT").
		Path("/v1/http_body")
	router.NewRoute().
		Name("/leo.example.query.v1.Query/HttpRequest").
		Methods("PUT").
		Path("/v1/http_request")
	router.NewRoute().
		Name("/leo.example.query.v1.Query/ValueRequest").
		Methods("PUT").
		Path("/v1/value")
	router.NewRoute().
		Name("/leo.example.query.v1.Query/ListValueRequest").
		Methods("PUT").
		Path("/v1/list_value")
	router.NewRoute().
		Name("/leo.example.query.v1.Query/StructRequest").
		Methods("PUT").
		Path("/v1/struct")
	router.NewRoute().
		Name("/leo.example.query.v1.Query/TimestampRequest").
		Methods("PUT").
		Path("/v1/timestamp")
	router.NewRoute().
		Name("/leo.example.query.v1.Query/DurationRequest").
		Methods("PUT").
		Path("/v1/duration")
	router.NewRoute().
		Name("/leo.example.query.v1.Query/WrapDoubleBody").
		Methods("PUT").
		Path("/v1/wrap_double_body")
	router.NewRoute().
		Name("/leo.example.query.v1.Query/WrapFloatBody").
		Methods("PUT").
		Path("/v1/wrap_float_body")
	router.NewRoute().
		Name("/leo.example.query.v1.Query/WrapInt64Body").
		Methods("PUT").
		Path("/v1/wrap_int64_body")
	router.NewRoute().
		Name("/leo.example.query.v1.Query/WrapUint64Body").
		Methods("PUT").
		Path("/v1/wrap_uint64_body")
	router.NewRoute().
		Name("/leo.example.query.v1.Query/WrapInt32Body").
		Methods("PUT").
		Path("/v1/wrap_int32_body")
	router.NewRoute().
		Name("/leo.example.query.v1.Query/WrapUint32Body").
		Methods("PUT").
		Path("/v1/wrap_uint32_body")
	router.NewRoute().
		Name("/leo.example.query.v1.Query/WrapBoolBody").
		Methods("PUT").
		Path("/v1/wrap_bool_body")
	router.NewRoute().
		Name("/leo.example.query.v1.Query/WrapStringBody").
		Methods("PUT").
		Path("/v1/wrap_string_body")
	router.NewRoute().
		Name("/leo.example.query.v1.Query/WrapBytesBody").
		Methods("PUT").
		Path("/v1/wrap_bytes_body")
	router.NewRoute().
		Name("/leo.example.query.v1.Query/HttpBodyBody").
		Methods("PUT").
		Path("/v1/http_body_body")
	router.NewRoute().
		Name("/leo.example.query.v1.Query/HttpRequestBody").
		Methods("PUT").
		Path("/v1/http_request_body")
	router.NewRoute().
		Name("/leo.example.query.v1.Query/ValueBody").
		Methods("PUT").
		Path("/v1/value_body")
	router.NewRoute().
		Name("/leo.example.query.v1.Query/ListValueBody").
		Methods("PUT").
		Path("/v1/list_value_body")
	router.NewRoute().
		Name("/leo.example.query.v1.Query/StructBody").
		Methods("PUT").
		Path("/v1/struct_body")
	router.NewRoute().
		Name("/leo.example.query.v1.Query/TimestampBody").
		Methods("PUT").
		Path("/v1/timestamp_body")
	router.NewRoute().
		Name("/leo.example.query.v1.Query/DurationBody").
		Methods("PUT").
		Path("/v1/duration_body")
	return &httpQueryClient{
		bool: endpointx.Chain(
			http1.NewExplicitClient(
				func(ctx context.Context, obj interface{}) (*http2.Request, error) {
					req, ok := obj.(*BodyRequest)
					if !ok {
						return nil, fmt.Errorf("invalid request object type, %T", obj)
					}
					if req == nil {
						return nil, errors.New("request object is nil")
					}
					var method = "PUT"
					var url string
					var body io.Reader
					body = strings.NewReader(strconv.FormatBool(req.Bool))
					var pairs []string
					path, err := router.Get("/leo.example.query.v1.Query/Bool").URLPath(pairs...)
					if err != nil {
						return nil, err
					}
					url = fmt.Sprintf("%s://%s%s", "http", instance, path)
					r, err := http2.NewRequestWithContext(ctx, method, url, body)
					if err != nil {
						return nil, err
					}
					return r, nil
				},
				func(ctx context.Context, r *http2.Response) (interface{}, error) {
					return nil, nil
				},
				opts...,
			).Endpoint(),
			mdw...),
		optBool: endpointx.Chain(
			http1.NewExplicitClient(
				func(ctx context.Context, obj interface{}) (*http2.Request, error) {
					req, ok := obj.(*BodyRequest)
					if !ok {
						return nil, fmt.Errorf("invalid request object type, %T", obj)
					}
					if req == nil {
						return nil, errors.New("request object is nil")
					}
					var method = "PUT"
					var url string
					var body io.Reader
					if req.OptBool != nil {
						body = strings.NewReader(strconv.FormatBool(*req.OptBool))
					}
					var pairs []string
					path, err := router.Get("/leo.example.query.v1.Query/OptBool").URLPath(pairs...)
					if err != nil {
						return nil, err
					}
					url = fmt.Sprintf("%s://%s%s", "http", instance, path)
					r, err := http2.NewRequestWithContext(ctx, method, url, body)
					if err != nil {
						return nil, err
					}
					return r, nil
				},
				func(ctx context.Context, r *http2.Response) (interface{}, error) {
					return nil, nil
				},
				opts...,
			).Endpoint(),
			mdw...),
		repBool: endpointx.Chain(
			http1.NewExplicitClient(
				func(ctx context.Context, obj interface{}) (*http2.Request, error) {
					req, ok := obj.(*BodyRequest)
					if !ok {
						return nil, fmt.Errorf("invalid request object type, %T", obj)
					}
					if req == nil {
						return nil, errors.New("request object is nil")
					}
					var method = "PUT"
					var url string
					var body io.Reader
					if req.RepBool != nil {
						if err := json.NewDecoder(body).Decode(req.RepBool); err != nil {
							return nil, err
						}
					}
					var pairs []string
					path, err := router.Get("/leo.example.query.v1.Query/RepBool").URLPath(pairs...)
					if err != nil {
						return nil, err
					}
					url = fmt.Sprintf("%s://%s%s", "http", instance, path)
					r, err := http2.NewRequestWithContext(ctx, method, url, body)
					if err != nil {
						return nil, err
					}
					return r, nil
				},
				func(ctx context.Context, r *http2.Response) (interface{}, error) {
					return nil, nil
				},
				opts...,
			).Endpoint(),
			mdw...),
		wrapBool: endpointx.Chain(
			http1.NewExplicitClient(
				func(ctx context.Context, obj interface{}) (*http2.Request, error) {
					req, ok := obj.(*BodyRequest)
					if !ok {
						return nil, fmt.Errorf("invalid request object type, %T", obj)
					}
					if req == nil {
						return nil, errors.New("request object is nil")
					}
					var method = "PUT"
					var url string
					var body io.Reader
					if req.WrapBool != nil {
						body = strings.NewReader(strconv.FormatBool(req.WrapBool.Value))
					}
					var pairs []string
					path, err := router.Get("/leo.example.query.v1.Query/WrapBool").URLPath(pairs...)
					if err != nil {
						return nil, err
					}
					url = fmt.Sprintf("%s://%s%s", "http", instance, path)
					r, err := http2.NewRequestWithContext(ctx, method, url, body)
					if err != nil {
						return nil, err
					}
					return r, nil
				},
				func(ctx context.Context, r *http2.Response) (interface{}, error) {
					return nil, nil
				},
				opts...,
			).Endpoint(),
			mdw...),
		int32: endpointx.Chain(
			http1.NewExplicitClient(
				func(ctx context.Context, obj interface{}) (*http2.Request, error) {
					req, ok := obj.(*BodyRequest)
					if !ok {
						return nil, fmt.Errorf("invalid request object type, %T", obj)
					}
					if req == nil {
						return nil, errors.New("request object is nil")
					}
					var method = "PUT"
					var url string
					var body io.Reader
					body = strings.NewReader(strconv.FormatInt(int64(req.Int32), 10))
					var pairs []string
					path, err := router.Get("/leo.example.query.v1.Query/Int32").URLPath(pairs...)
					if err != nil {
						return nil, err
					}
					url = fmt.Sprintf("%s://%s%s", "http", instance, path)
					r, err := http2.NewRequestWithContext(ctx, method, url, body)
					if err != nil {
						return nil, err
					}
					return r, nil
				},
				func(ctx context.Context, r *http2.Response) (interface{}, error) {
					return nil, nil
				},
				opts...,
			).Endpoint(),
			mdw...),
		optInt32: endpointx.Chain(
			http1.NewExplicitClient(
				func(ctx context.Context, obj interface{}) (*http2.Request, error) {
					req, ok := obj.(*BodyRequest)
					if !ok {
						return nil, fmt.Errorf("invalid request object type, %T", obj)
					}
					if req == nil {
						return nil, errors.New("request object is nil")
					}
					var method = "PUT"
					var url string
					var body io.Reader
					if req.OptInt32 != nil {
						body = strings.NewReader(strconv.FormatInt(int64(*req.OptInt32), 10))
					}
					var pairs []string
					path, err := router.Get("/leo.example.query.v1.Query/OptInt32").URLPath(pairs...)
					if err != nil {
						return nil, err
					}
					url = fmt.Sprintf("%s://%s%s", "http", instance, path)
					r, err := http2.NewRequestWithContext(ctx, method, url, body)
					if err != nil {
						return nil, err
					}
					return r, nil
				},
				func(ctx context.Context, r *http2.Response) (interface{}, error) {
					return nil, nil
				},
				opts...,
			).Endpoint(),
			mdw...),
		repInt32: endpointx.Chain(
			http1.NewExplicitClient(
				func(ctx context.Context, obj interface{}) (*http2.Request, error) {
					req, ok := obj.(*BodyRequest)
					if !ok {
						return nil, fmt.Errorf("invalid request object type, %T", obj)
					}
					if req == nil {
						return nil, errors.New("request object is nil")
					}
					var method = "PUT"
					var url string
					var body io.Reader
					if req.RepInt32 != nil {
						if err := json.NewDecoder(body).Decode(req.RepInt32); err != nil {
							return nil, err
						}
					}
					var pairs []string
					path, err := router.Get("/leo.example.query.v1.Query/RepInt32").URLPath(pairs...)
					if err != nil {
						return nil, err
					}
					url = fmt.Sprintf("%s://%s%s", "http", instance, path)
					r, err := http2.NewRequestWithContext(ctx, method, url, body)
					if err != nil {
						return nil, err
					}
					return r, nil
				},
				func(ctx context.Context, r *http2.Response) (interface{}, error) {
					return nil, nil
				},
				opts...,
			).Endpoint(),
			mdw...),
		wrapInt32: endpointx.Chain(
			http1.NewExplicitClient(
				func(ctx context.Context, obj interface{}) (*http2.Request, error) {
					req, ok := obj.(*BodyRequest)
					if !ok {
						return nil, fmt.Errorf("invalid request object type, %T", obj)
					}
					if req == nil {
						return nil, errors.New("request object is nil")
					}
					var method = "PUT"
					var url string
					var body io.Reader
					if req.WrapInt32 != nil {
						body = strings.NewReader(strconv.FormatInt(int64(req.WrapInt32.Value), 10))
					}
					var pairs []string
					path, err := router.Get("/leo.example.query.v1.Query/WrapInt32").URLPath(pairs...)
					if err != nil {
						return nil, err
					}
					url = fmt.Sprintf("%s://%s%s", "http", instance, path)
					r, err := http2.NewRequestWithContext(ctx, method, url, body)
					if err != nil {
						return nil, err
					}
					return r, nil
				},
				func(ctx context.Context, r *http2.Response) (interface{}, error) {
					return nil, nil
				},
				opts...,
			).Endpoint(),
			mdw...),
		uint32: endpointx.Chain(
			http1.NewExplicitClient(
				func(ctx context.Context, obj interface{}) (*http2.Request, error) {
					req, ok := obj.(*BodyRequest)
					if !ok {
						return nil, fmt.Errorf("invalid request object type, %T", obj)
					}
					if req == nil {
						return nil, errors.New("request object is nil")
					}
					var method = "PUT"
					var url string
					var body io.Reader
					body = strings.NewReader(strconv.FormatUint(uint64(req.Uint32), 10))
					var pairs []string
					path, err := router.Get("/leo.example.query.v1.Query/Uint32").URLPath(pairs...)
					if err != nil {
						return nil, err
					}
					url = fmt.Sprintf("%s://%s%s", "http", instance, path)
					r, err := http2.NewRequestWithContext(ctx, method, url, body)
					if err != nil {
						return nil, err
					}
					return r, nil
				},
				func(ctx context.Context, r *http2.Response) (interface{}, error) {
					return nil, nil
				},
				opts...,
			).Endpoint(),
			mdw...),
		optUint32: endpointx.Chain(
			http1.NewExplicitClient(
				func(ctx context.Context, obj interface{}) (*http2.Request, error) {
					req, ok := obj.(*BodyRequest)
					if !ok {
						return nil, fmt.Errorf("invalid request object type, %T", obj)
					}
					if req == nil {
						return nil, errors.New("request object is nil")
					}
					var method = "PUT"
					var url string
					var body io.Reader
					if req.OptUint32 != nil {
						body = strings.NewReader(strconv.FormatUint(uint64(*req.OptUint32), 10))
					}
					var pairs []string
					path, err := router.Get("/leo.example.query.v1.Query/OptUint32").URLPath(pairs...)
					if err != nil {
						return nil, err
					}
					url = fmt.Sprintf("%s://%s%s", "http", instance, path)
					r, err := http2.NewRequestWithContext(ctx, method, url, body)
					if err != nil {
						return nil, err
					}
					return r, nil
				},
				func(ctx context.Context, r *http2.Response) (interface{}, error) {
					return nil, nil
				},
				opts...,
			).Endpoint(),
			mdw...),
		repUint32: endpointx.Chain(
			http1.NewExplicitClient(
				func(ctx context.Context, obj interface{}) (*http2.Request, error) {
					req, ok := obj.(*BodyRequest)
					if !ok {
						return nil, fmt.Errorf("invalid request object type, %T", obj)
					}
					if req == nil {
						return nil, errors.New("request object is nil")
					}
					var method = "PUT"
					var url string
					var body io.Reader
					if req.RepUint32 != nil {
						if err := json.NewDecoder(body).Decode(req.RepUint32); err != nil {
							return nil, err
						}
					}
					var pairs []string
					path, err := router.Get("/leo.example.query.v1.Query/RepUint32").URLPath(pairs...)
					if err != nil {
						return nil, err
					}
					url = fmt.Sprintf("%s://%s%s", "http", instance, path)
					r, err := http2.NewRequestWithContext(ctx, method, url, body)
					if err != nil {
						return nil, err
					}
					return r, nil
				},
				func(ctx context.Context, r *http2.Response) (interface{}, error) {
					return nil, nil
				},
				opts...,
			).Endpoint(),
			mdw...),
		wrapUint32: endpointx.Chain(
			http1.NewExplicitClient(
				func(ctx context.Context, obj interface{}) (*http2.Request, error) {
					req, ok := obj.(*BodyRequest)
					if !ok {
						return nil, fmt.Errorf("invalid request object type, %T", obj)
					}
					if req == nil {
						return nil, errors.New("request object is nil")
					}
					var method = "PUT"
					var url string
					var body io.Reader
					if req.WrapUint32 != nil {
						body = strings.NewReader(strconv.FormatUint(uint64(req.WrapUint32.Value), 10))
					}
					var pairs []string
					path, err := router.Get("/leo.example.query.v1.Query/WrapUint32").URLPath(pairs...)
					if err != nil {
						return nil, err
					}
					url = fmt.Sprintf("%s://%s%s", "http", instance, path)
					r, err := http2.NewRequestWithContext(ctx, method, url, body)
					if err != nil {
						return nil, err
					}
					return r, nil
				},
				func(ctx context.Context, r *http2.Response) (interface{}, error) {
					return nil, nil
				},
				opts...,
			).Endpoint(),
			mdw...),
		fixed32: endpointx.Chain(
			http1.NewExplicitClient(
				func(ctx context.Context, obj interface{}) (*http2.Request, error) {
					req, ok := obj.(*BodyRequest)
					if !ok {
						return nil, fmt.Errorf("invalid request object type, %T", obj)
					}
					if req == nil {
						return nil, errors.New("request object is nil")
					}
					var method = "PUT"
					var url string
					var body io.Reader
					body = strings.NewReader(strconv.FormatUint(uint64(req.Fixed32), 10))
					var pairs []string
					path, err := router.Get("/leo.example.query.v1.Query/Fixed32").URLPath(pairs...)
					if err != nil {
						return nil, err
					}
					url = fmt.Sprintf("%s://%s%s", "http", instance, path)
					r, err := http2.NewRequestWithContext(ctx, method, url, body)
					if err != nil {
						return nil, err
					}
					return r, nil
				},
				func(ctx context.Context, r *http2.Response) (interface{}, error) {
					return nil, nil
				},
				opts...,
			).Endpoint(),
			mdw...),
		optFixed32: endpointx.Chain(
			http1.NewExplicitClient(
				func(ctx context.Context, obj interface{}) (*http2.Request, error) {
					req, ok := obj.(*BodyRequest)
					if !ok {
						return nil, fmt.Errorf("invalid request object type, %T", obj)
					}
					if req == nil {
						return nil, errors.New("request object is nil")
					}
					var method = "PUT"
					var url string
					var body io.Reader
					if req.OptFixed32 != nil {
						body = strings.NewReader(strconv.FormatUint(uint64(*req.OptFixed32), 10))
					}
					var pairs []string
					path, err := router.Get("/leo.example.query.v1.Query/OptFixed32").URLPath(pairs...)
					if err != nil {
						return nil, err
					}
					url = fmt.Sprintf("%s://%s%s", "http", instance, path)
					r, err := http2.NewRequestWithContext(ctx, method, url, body)
					if err != nil {
						return nil, err
					}
					return r, nil
				},
				func(ctx context.Context, r *http2.Response) (interface{}, error) {
					return nil, nil
				},
				opts...,
			).Endpoint(),
			mdw...),
		repFixed32: endpointx.Chain(
			http1.NewExplicitClient(
				func(ctx context.Context, obj interface{}) (*http2.Request, error) {
					req, ok := obj.(*BodyRequest)
					if !ok {
						return nil, fmt.Errorf("invalid request object type, %T", obj)
					}
					if req == nil {
						return nil, errors.New("request object is nil")
					}
					var method = "PUT"
					var url string
					var body io.Reader
					if req.RepFixed32 != nil {
						if err := json.NewDecoder(body).Decode(req.RepFixed32); err != nil {
							return nil, err
						}
					}
					var pairs []string
					path, err := router.Get("/leo.example.query.v1.Query/RepFixed32").URLPath(pairs...)
					if err != nil {
						return nil, err
					}
					url = fmt.Sprintf("%s://%s%s", "http", instance, path)
					r, err := http2.NewRequestWithContext(ctx, method, url, body)
					if err != nil {
						return nil, err
					}
					return r, nil
				},
				func(ctx context.Context, r *http2.Response) (interface{}, error) {
					return nil, nil
				},
				opts...,
			).Endpoint(),
			mdw...),
		int64: endpointx.Chain(
			http1.NewExplicitClient(
				func(ctx context.Context, obj interface{}) (*http2.Request, error) {
					req, ok := obj.(*BodyRequest)
					if !ok {
						return nil, fmt.Errorf("invalid request object type, %T", obj)
					}
					if req == nil {
						return nil, errors.New("request object is nil")
					}
					var method = "PUT"
					var url string
					var body io.Reader
					body = strings.NewReader(strconv.FormatInt(req.Int64, 10))
					var pairs []string
					path, err := router.Get("/leo.example.query.v1.Query/Int64").URLPath(pairs...)
					if err != nil {
						return nil, err
					}
					url = fmt.Sprintf("%s://%s%s", "http", instance, path)
					r, err := http2.NewRequestWithContext(ctx, method, url, body)
					if err != nil {
						return nil, err
					}
					return r, nil
				},
				func(ctx context.Context, r *http2.Response) (interface{}, error) {
					return nil, nil
				},
				opts...,
			).Endpoint(),
			mdw...),
		optInt64: endpointx.Chain(
			http1.NewExplicitClient(
				func(ctx context.Context, obj interface{}) (*http2.Request, error) {
					req, ok := obj.(*BodyRequest)
					if !ok {
						return nil, fmt.Errorf("invalid request object type, %T", obj)
					}
					if req == nil {
						return nil, errors.New("request object is nil")
					}
					var method = "PUT"
					var url string
					var body io.Reader
					if req.OptInt64 != nil {
						body = strings.NewReader(strconv.FormatInt(*req.OptInt64, 10))
					}
					var pairs []string
					path, err := router.Get("/leo.example.query.v1.Query/OptInt64").URLPath(pairs...)
					if err != nil {
						return nil, err
					}
					url = fmt.Sprintf("%s://%s%s", "http", instance, path)
					r, err := http2.NewRequestWithContext(ctx, method, url, body)
					if err != nil {
						return nil, err
					}
					return r, nil
				},
				func(ctx context.Context, r *http2.Response) (interface{}, error) {
					return nil, nil
				},
				opts...,
			).Endpoint(),
			mdw...),
		repInt64: endpointx.Chain(
			http1.NewExplicitClient(
				func(ctx context.Context, obj interface{}) (*http2.Request, error) {
					req, ok := obj.(*BodyRequest)
					if !ok {
						return nil, fmt.Errorf("invalid request object type, %T", obj)
					}
					if req == nil {
						return nil, errors.New("request object is nil")
					}
					var method = "PUT"
					var url string
					var body io.Reader
					if req.RepInt64 != nil {
						if err := json.NewDecoder(body).Decode(req.RepInt64); err != nil {
							return nil, err
						}
					}
					var pairs []string
					path, err := router.Get("/leo.example.query.v1.Query/RepInt64").URLPath(pairs...)
					if err != nil {
						return nil, err
					}
					url = fmt.Sprintf("%s://%s%s", "http", instance, path)
					r, err := http2.NewRequestWithContext(ctx, method, url, body)
					if err != nil {
						return nil, err
					}
					return r, nil
				},
				func(ctx context.Context, r *http2.Response) (interface{}, error) {
					return nil, nil
				},
				opts...,
			).Endpoint(),
			mdw...),
		wrapInt64: endpointx.Chain(
			http1.NewExplicitClient(
				func(ctx context.Context, obj interface{}) (*http2.Request, error) {
					req, ok := obj.(*BodyRequest)
					if !ok {
						return nil, fmt.Errorf("invalid request object type, %T", obj)
					}
					if req == nil {
						return nil, errors.New("request object is nil")
					}
					var method = "PUT"
					var url string
					var body io.Reader
					if req.WrapInt64 != nil {
						body = strings.NewReader(strconv.FormatInt(req.WrapInt64.Value, 10))
					}
					var pairs []string
					path, err := router.Get("/leo.example.query.v1.Query/WrapInt64").URLPath(pairs...)
					if err != nil {
						return nil, err
					}
					url = fmt.Sprintf("%s://%s%s", "http", instance, path)
					r, err := http2.NewRequestWithContext(ctx, method, url, body)
					if err != nil {
						return nil, err
					}
					return r, nil
				},
				func(ctx context.Context, r *http2.Response) (interface{}, error) {
					return nil, nil
				},
				opts...,
			).Endpoint(),
			mdw...),
		sint64: endpointx.Chain(
			http1.NewExplicitClient(
				func(ctx context.Context, obj interface{}) (*http2.Request, error) {
					req, ok := obj.(*BodyRequest)
					if !ok {
						return nil, fmt.Errorf("invalid request object type, %T", obj)
					}
					if req == nil {
						return nil, errors.New("request object is nil")
					}
					var method = "PUT"
					var url string
					var body io.Reader
					body = strings.NewReader(strconv.FormatInt(req.Sint64, 10))
					var pairs []string
					path, err := router.Get("/leo.example.query.v1.Query/Sint64").URLPath(pairs...)
					if err != nil {
						return nil, err
					}
					url = fmt.Sprintf("%s://%s%s", "http", instance, path)
					r, err := http2.NewRequestWithContext(ctx, method, url, body)
					if err != nil {
						return nil, err
					}
					return r, nil
				},
				func(ctx context.Context, r *http2.Response) (interface{}, error) {
					return nil, nil
				},
				opts...,
			).Endpoint(),
			mdw...),
		optSint64: endpointx.Chain(
			http1.NewExplicitClient(
				func(ctx context.Context, obj interface{}) (*http2.Request, error) {
					req, ok := obj.(*BodyRequest)
					if !ok {
						return nil, fmt.Errorf("invalid request object type, %T", obj)
					}
					if req == nil {
						return nil, errors.New("request object is nil")
					}
					var method = "PUT"
					var url string
					var body io.Reader
					if req.OptSint64 != nil {
						body = strings.NewReader(strconv.FormatInt(*req.OptSint64, 10))
					}
					var pairs []string
					path, err := router.Get("/leo.example.query.v1.Query/OptSint64").URLPath(pairs...)
					if err != nil {
						return nil, err
					}
					url = fmt.Sprintf("%s://%s%s", "http", instance, path)
					r, err := http2.NewRequestWithContext(ctx, method, url, body)
					if err != nil {
						return nil, err
					}
					return r, nil
				},
				func(ctx context.Context, r *http2.Response) (interface{}, error) {
					return nil, nil
				},
				opts...,
			).Endpoint(),
			mdw...),
		repSint64: endpointx.Chain(
			http1.NewExplicitClient(
				func(ctx context.Context, obj interface{}) (*http2.Request, error) {
					req, ok := obj.(*BodyRequest)
					if !ok {
						return nil, fmt.Errorf("invalid request object type, %T", obj)
					}
					if req == nil {
						return nil, errors.New("request object is nil")
					}
					var method = "PUT"
					var url string
					var body io.Reader
					if req.RepSint64 != nil {
						if err := json.NewDecoder(body).Decode(req.RepSint64); err != nil {
							return nil, err
						}
					}
					var pairs []string
					path, err := router.Get("/leo.example.query.v1.Query/RepSint64").URLPath(pairs...)
					if err != nil {
						return nil, err
					}
					url = fmt.Sprintf("%s://%s%s", "http", instance, path)
					r, err := http2.NewRequestWithContext(ctx, method, url, body)
					if err != nil {
						return nil, err
					}
					return r, nil
				},
				func(ctx context.Context, r *http2.Response) (interface{}, error) {
					return nil, nil
				},
				opts...,
			).Endpoint(),
			mdw...),
		sfixed64: endpointx.Chain(
			http1.NewExplicitClient(
				func(ctx context.Context, obj interface{}) (*http2.Request, error) {
					req, ok := obj.(*BodyRequest)
					if !ok {
						return nil, fmt.Errorf("invalid request object type, %T", obj)
					}
					if req == nil {
						return nil, errors.New("request object is nil")
					}
					var method = "PUT"
					var url string
					var body io.Reader
					body = strings.NewReader(strconv.FormatInt(req.Sfixed64, 10))
					var pairs []string
					path, err := router.Get("/leo.example.query.v1.Query/Sfixed64").URLPath(pairs...)
					if err != nil {
						return nil, err
					}
					url = fmt.Sprintf("%s://%s%s", "http", instance, path)
					r, err := http2.NewRequestWithContext(ctx, method, url, body)
					if err != nil {
						return nil, err
					}
					return r, nil
				},
				func(ctx context.Context, r *http2.Response) (interface{}, error) {
					return nil, nil
				},
				opts...,
			).Endpoint(),
			mdw...),
		optSfixed64: endpointx.Chain(
			http1.NewExplicitClient(
				func(ctx context.Context, obj interface{}) (*http2.Request, error) {
					req, ok := obj.(*BodyRequest)
					if !ok {
						return nil, fmt.Errorf("invalid request object type, %T", obj)
					}
					if req == nil {
						return nil, errors.New("request object is nil")
					}
					var method = "PUT"
					var url string
					var body io.Reader
					if req.OptSfixed64 != nil {
						body = strings.NewReader(strconv.FormatInt(*req.OptSfixed64, 10))
					}
					var pairs []string
					path, err := router.Get("/leo.example.query.v1.Query/OptSfixed64").URLPath(pairs...)
					if err != nil {
						return nil, err
					}
					url = fmt.Sprintf("%s://%s%s", "http", instance, path)
					r, err := http2.NewRequestWithContext(ctx, method, url, body)
					if err != nil {
						return nil, err
					}
					return r, nil
				},
				func(ctx context.Context, r *http2.Response) (interface{}, error) {
					return nil, nil
				},
				opts...,
			).Endpoint(),
			mdw...),
		repSfixed64: endpointx.Chain(
			http1.NewExplicitClient(
				func(ctx context.Context, obj interface{}) (*http2.Request, error) {
					req, ok := obj.(*BodyRequest)
					if !ok {
						return nil, fmt.Errorf("invalid request object type, %T", obj)
					}
					if req == nil {
						return nil, errors.New("request object is nil")
					}
					var method = "PUT"
					var url string
					var body io.Reader
					if req.RepSfixed64 != nil {
						if err := json.NewDecoder(body).Decode(req.RepSfixed64); err != nil {
							return nil, err
						}
					}
					var pairs []string
					path, err := router.Get("/leo.example.query.v1.Query/RepSfixed64").URLPath(pairs...)
					if err != nil {
						return nil, err
					}
					url = fmt.Sprintf("%s://%s%s", "http", instance, path)
					r, err := http2.NewRequestWithContext(ctx, method, url, body)
					if err != nil {
						return nil, err
					}
					return r, nil
				},
				func(ctx context.Context, r *http2.Response) (interface{}, error) {
					return nil, nil
				},
				opts...,
			).Endpoint(),
			mdw...),
		uint64: endpointx.Chain(
			http1.NewExplicitClient(
				func(ctx context.Context, obj interface{}) (*http2.Request, error) {
					req, ok := obj.(*BodyRequest)
					if !ok {
						return nil, fmt.Errorf("invalid request object type, %T", obj)
					}
					if req == nil {
						return nil, errors.New("request object is nil")
					}
					var method = "PUT"
					var url string
					var body io.Reader
					body = strings.NewReader(strconv.FormatUint(req.Uint64, 10))
					var pairs []string
					path, err := router.Get("/leo.example.query.v1.Query/Uint64").URLPath(pairs...)
					if err != nil {
						return nil, err
					}
					url = fmt.Sprintf("%s://%s%s", "http", instance, path)
					r, err := http2.NewRequestWithContext(ctx, method, url, body)
					if err != nil {
						return nil, err
					}
					return r, nil
				},
				func(ctx context.Context, r *http2.Response) (interface{}, error) {
					return nil, nil
				},
				opts...,
			).Endpoint(),
			mdw...),
		optUint64: endpointx.Chain(
			http1.NewExplicitClient(
				func(ctx context.Context, obj interface{}) (*http2.Request, error) {
					req, ok := obj.(*BodyRequest)
					if !ok {
						return nil, fmt.Errorf("invalid request object type, %T", obj)
					}
					if req == nil {
						return nil, errors.New("request object is nil")
					}
					var method = "PUT"
					var url string
					var body io.Reader
					if req.OptUint64 != nil {
						body = strings.NewReader(strconv.FormatUint(*req.OptUint64, 10))
					}
					var pairs []string
					path, err := router.Get("/leo.example.query.v1.Query/OptUint64").URLPath(pairs...)
					if err != nil {
						return nil, err
					}
					url = fmt.Sprintf("%s://%s%s", "http", instance, path)
					r, err := http2.NewRequestWithContext(ctx, method, url, body)
					if err != nil {
						return nil, err
					}
					return r, nil
				},
				func(ctx context.Context, r *http2.Response) (interface{}, error) {
					return nil, nil
				},
				opts...,
			).Endpoint(),
			mdw...),
		repUint64: endpointx.Chain(
			http1.NewExplicitClient(
				func(ctx context.Context, obj interface{}) (*http2.Request, error) {
					req, ok := obj.(*BodyRequest)
					if !ok {
						return nil, fmt.Errorf("invalid request object type, %T", obj)
					}
					if req == nil {
						return nil, errors.New("request object is nil")
					}
					var method = "PUT"
					var url string
					var body io.Reader
					if req.RepUint64 != nil {
						if err := json.NewDecoder(body).Decode(req.RepUint64); err != nil {
							return nil, err
						}
					}
					var pairs []string
					path, err := router.Get("/leo.example.query.v1.Query/RepUint64").URLPath(pairs...)
					if err != nil {
						return nil, err
					}
					url = fmt.Sprintf("%s://%s%s", "http", instance, path)
					r, err := http2.NewRequestWithContext(ctx, method, url, body)
					if err != nil {
						return nil, err
					}
					return r, nil
				},
				func(ctx context.Context, r *http2.Response) (interface{}, error) {
					return nil, nil
				},
				opts...,
			).Endpoint(),
			mdw...),
		wrapUint64: endpointx.Chain(
			http1.NewExplicitClient(
				func(ctx context.Context, obj interface{}) (*http2.Request, error) {
					req, ok := obj.(*BodyRequest)
					if !ok {
						return nil, fmt.Errorf("invalid request object type, %T", obj)
					}
					if req == nil {
						return nil, errors.New("request object is nil")
					}
					var method = "PUT"
					var url string
					var body io.Reader
					if req.WrapUint64 != nil {
						body = strings.NewReader(strconv.FormatUint(req.WrapUint64.Value, 10))
					}
					var pairs []string
					path, err := router.Get("/leo.example.query.v1.Query/WrapUint64").URLPath(pairs...)
					if err != nil {
						return nil, err
					}
					url = fmt.Sprintf("%s://%s%s", "http", instance, path)
					r, err := http2.NewRequestWithContext(ctx, method, url, body)
					if err != nil {
						return nil, err
					}
					return r, nil
				},
				func(ctx context.Context, r *http2.Response) (interface{}, error) {
					return nil, nil
				},
				opts...,
			).Endpoint(),
			mdw...),
		fixed64: endpointx.Chain(
			http1.NewExplicitClient(
				func(ctx context.Context, obj interface{}) (*http2.Request, error) {
					req, ok := obj.(*BodyRequest)
					if !ok {
						return nil, fmt.Errorf("invalid request object type, %T", obj)
					}
					if req == nil {
						return nil, errors.New("request object is nil")
					}
					var method = "PUT"
					var url string
					var body io.Reader
					body = strings.NewReader(strconv.FormatUint(req.Fixed64, 10))
					var pairs []string
					path, err := router.Get("/leo.example.query.v1.Query/Fixed64").URLPath(pairs...)
					if err != nil {
						return nil, err
					}
					url = fmt.Sprintf("%s://%s%s", "http", instance, path)
					r, err := http2.NewRequestWithContext(ctx, method, url, body)
					if err != nil {
						return nil, err
					}
					return r, nil
				},
				func(ctx context.Context, r *http2.Response) (interface{}, error) {
					return nil, nil
				},
				opts...,
			).Endpoint(),
			mdw...),
		optFixed64: endpointx.Chain(
			http1.NewExplicitClient(
				func(ctx context.Context, obj interface{}) (*http2.Request, error) {
					req, ok := obj.(*BodyRequest)
					if !ok {
						return nil, fmt.Errorf("invalid request object type, %T", obj)
					}
					if req == nil {
						return nil, errors.New("request object is nil")
					}
					var method = "PUT"
					var url string
					var body io.Reader
					if req.OptFixed64 != nil {
						body = strings.NewReader(strconv.FormatUint(*req.OptFixed64, 10))
					}
					var pairs []string
					path, err := router.Get("/leo.example.query.v1.Query/OptFixed64").URLPath(pairs...)
					if err != nil {
						return nil, err
					}
					url = fmt.Sprintf("%s://%s%s", "http", instance, path)
					r, err := http2.NewRequestWithContext(ctx, method, url, body)
					if err != nil {
						return nil, err
					}
					return r, nil
				},
				func(ctx context.Context, r *http2.Response) (interface{}, error) {
					return nil, nil
				},
				opts...,
			).Endpoint(),
			mdw...),
		repFixed64: endpointx.Chain(
			http1.NewExplicitClient(
				func(ctx context.Context, obj interface{}) (*http2.Request, error) {
					req, ok := obj.(*BodyRequest)
					if !ok {
						return nil, fmt.Errorf("invalid request object type, %T", obj)
					}
					if req == nil {
						return nil, errors.New("request object is nil")
					}
					var method = "PUT"
					var url string
					var body io.Reader
					if req.RepFixed64 != nil {
						if err := json.NewDecoder(body).Decode(req.RepFixed64); err != nil {
							return nil, err
						}
					}
					var pairs []string
					path, err := router.Get("/leo.example.query.v1.Query/RepFixed64").URLPath(pairs...)
					if err != nil {
						return nil, err
					}
					url = fmt.Sprintf("%s://%s%s", "http", instance, path)
					r, err := http2.NewRequestWithContext(ctx, method, url, body)
					if err != nil {
						return nil, err
					}
					return r, nil
				},
				func(ctx context.Context, r *http2.Response) (interface{}, error) {
					return nil, nil
				},
				opts...,
			).Endpoint(),
			mdw...),
		float32: endpointx.Chain(
			http1.NewExplicitClient(
				func(ctx context.Context, obj interface{}) (*http2.Request, error) {
					req, ok := obj.(*BodyRequest)
					if !ok {
						return nil, fmt.Errorf("invalid request object type, %T", obj)
					}
					if req == nil {
						return nil, errors.New("request object is nil")
					}
					var method = "PUT"
					var url string
					var body io.Reader
					body = strings.NewReader(strconv.FormatFloat(float64(req.Float), 'f', -1, 32))
					var pairs []string
					path, err := router.Get("/leo.example.query.v1.Query/Float32").URLPath(pairs...)
					if err != nil {
						return nil, err
					}
					url = fmt.Sprintf("%s://%s%s", "http", instance, path)
					r, err := http2.NewRequestWithContext(ctx, method, url, body)
					if err != nil {
						return nil, err
					}
					return r, nil
				},
				func(ctx context.Context, r *http2.Response) (interface{}, error) {
					return nil, nil
				},
				opts...,
			).Endpoint(),
			mdw...),
		optFloat32: endpointx.Chain(
			http1.NewExplicitClient(
				func(ctx context.Context, obj interface{}) (*http2.Request, error) {
					req, ok := obj.(*BodyRequest)
					if !ok {
						return nil, fmt.Errorf("invalid request object type, %T", obj)
					}
					if req == nil {
						return nil, errors.New("request object is nil")
					}
					var method = "PUT"
					var url string
					var body io.Reader
					if req.OptFloat != nil {
						body = strings.NewReader(strconv.FormatFloat(float64(*req.OptFloat), 'f', -1, 32))
					}
					var pairs []string
					path, err := router.Get("/leo.example.query.v1.Query/OptFloat32").URLPath(pairs...)
					if err != nil {
						return nil, err
					}
					url = fmt.Sprintf("%s://%s%s", "http", instance, path)
					r, err := http2.NewRequestWithContext(ctx, method, url, body)
					if err != nil {
						return nil, err
					}
					return r, nil
				},
				func(ctx context.Context, r *http2.Response) (interface{}, error) {
					return nil, nil
				},
				opts...,
			).Endpoint(),
			mdw...),
		repFloat32: endpointx.Chain(
			http1.NewExplicitClient(
				func(ctx context.Context, obj interface{}) (*http2.Request, error) {
					req, ok := obj.(*BodyRequest)
					if !ok {
						return nil, fmt.Errorf("invalid request object type, %T", obj)
					}
					if req == nil {
						return nil, errors.New("request object is nil")
					}
					var method = "PUT"
					var url string
					var body io.Reader
					if req.RepFloat != nil {
						if err := json.NewDecoder(body).Decode(req.RepFloat); err != nil {
							return nil, err
						}
					}
					var pairs []string
					path, err := router.Get("/leo.example.query.v1.Query/RepFloat32").URLPath(pairs...)
					if err != nil {
						return nil, err
					}
					url = fmt.Sprintf("%s://%s%s", "http", instance, path)
					r, err := http2.NewRequestWithContext(ctx, method, url, body)
					if err != nil {
						return nil, err
					}
					return r, nil
				},
				func(ctx context.Context, r *http2.Response) (interface{}, error) {
					return nil, nil
				},
				opts...,
			).Endpoint(),
			mdw...),
		wrapFloat32: endpointx.Chain(
			http1.NewExplicitClient(
				func(ctx context.Context, obj interface{}) (*http2.Request, error) {
					req, ok := obj.(*BodyRequest)
					if !ok {
						return nil, fmt.Errorf("invalid request object type, %T", obj)
					}
					if req == nil {
						return nil, errors.New("request object is nil")
					}
					var method = "PUT"
					var url string
					var body io.Reader
					if req.WrapFloat != nil {
						body = strings.NewReader(strconv.FormatFloat(float64(req.WrapFloat.Value), 'f', -1, 32))
					}
					var pairs []string
					path, err := router.Get("/leo.example.query.v1.Query/WrapFloat32").URLPath(pairs...)
					if err != nil {
						return nil, err
					}
					url = fmt.Sprintf("%s://%s%s", "http", instance, path)
					r, err := http2.NewRequestWithContext(ctx, method, url, body)
					if err != nil {
						return nil, err
					}
					return r, nil
				},
				func(ctx context.Context, r *http2.Response) (interface{}, error) {
					return nil, nil
				},
				opts...,
			).Endpoint(),
			mdw...),
		float64: endpointx.Chain(
			http1.NewExplicitClient(
				func(ctx context.Context, obj interface{}) (*http2.Request, error) {
					req, ok := obj.(*BodyRequest)
					if !ok {
						return nil, fmt.Errorf("invalid request object type, %T", obj)
					}
					if req == nil {
						return nil, errors.New("request object is nil")
					}
					var method = "PUT"
					var url string
					var body io.Reader
					body = strings.NewReader(strconv.FormatFloat(req.Double, 'f', -1, 64))
					var pairs []string
					path, err := router.Get("/leo.example.query.v1.Query/Float64").URLPath(pairs...)
					if err != nil {
						return nil, err
					}
					url = fmt.Sprintf("%s://%s%s", "http", instance, path)
					r, err := http2.NewRequestWithContext(ctx, method, url, body)
					if err != nil {
						return nil, err
					}
					return r, nil
				},
				func(ctx context.Context, r *http2.Response) (interface{}, error) {
					return nil, nil
				},
				opts...,
			).Endpoint(),
			mdw...),
		optFloat64: endpointx.Chain(
			http1.NewExplicitClient(
				func(ctx context.Context, obj interface{}) (*http2.Request, error) {
					req, ok := obj.(*BodyRequest)
					if !ok {
						return nil, fmt.Errorf("invalid request object type, %T", obj)
					}
					if req == nil {
						return nil, errors.New("request object is nil")
					}
					var method = "PUT"
					var url string
					var body io.Reader
					if req.OptDouble != nil {
						body = strings.NewReader(strconv.FormatFloat(*req.OptDouble, 'f', -1, 64))
					}
					var pairs []string
					path, err := router.Get("/leo.example.query.v1.Query/OptFloat64").URLPath(pairs...)
					if err != nil {
						return nil, err
					}
					url = fmt.Sprintf("%s://%s%s", "http", instance, path)
					r, err := http2.NewRequestWithContext(ctx, method, url, body)
					if err != nil {
						return nil, err
					}
					return r, nil
				},
				func(ctx context.Context, r *http2.Response) (interface{}, error) {
					return nil, nil
				},
				opts...,
			).Endpoint(),
			mdw...),
		repFloat64: endpointx.Chain(
			http1.NewExplicitClient(
				func(ctx context.Context, obj interface{}) (*http2.Request, error) {
					req, ok := obj.(*BodyRequest)
					if !ok {
						return nil, fmt.Errorf("invalid request object type, %T", obj)
					}
					if req == nil {
						return nil, errors.New("request object is nil")
					}
					var method = "PUT"
					var url string
					var body io.Reader
					if req.RepDouble != nil {
						if err := json.NewDecoder(body).Decode(req.RepDouble); err != nil {
							return nil, err
						}
					}
					var pairs []string
					path, err := router.Get("/leo.example.query.v1.Query/RepFloat64").URLPath(pairs...)
					if err != nil {
						return nil, err
					}
					url = fmt.Sprintf("%s://%s%s", "http", instance, path)
					r, err := http2.NewRequestWithContext(ctx, method, url, body)
					if err != nil {
						return nil, err
					}
					return r, nil
				},
				func(ctx context.Context, r *http2.Response) (interface{}, error) {
					return nil, nil
				},
				opts...,
			).Endpoint(),
			mdw...),
		wrapFloat64: endpointx.Chain(
			http1.NewExplicitClient(
				func(ctx context.Context, obj interface{}) (*http2.Request, error) {
					req, ok := obj.(*BodyRequest)
					if !ok {
						return nil, fmt.Errorf("invalid request object type, %T", obj)
					}
					if req == nil {
						return nil, errors.New("request object is nil")
					}
					var method = "PUT"
					var url string
					var body io.Reader
					if req.WrapDouble != nil {
						body = strings.NewReader(strconv.FormatFloat(req.WrapDouble.Value, 'f', -1, 64))
					}
					var pairs []string
					path, err := router.Get("/leo.example.query.v1.Query/WrapFloat64").URLPath(pairs...)
					if err != nil {
						return nil, err
					}
					url = fmt.Sprintf("%s://%s%s", "http", instance, path)
					r, err := http2.NewRequestWithContext(ctx, method, url, body)
					if err != nil {
						return nil, err
					}
					return r, nil
				},
				func(ctx context.Context, r *http2.Response) (interface{}, error) {
					return nil, nil
				},
				opts...,
			).Endpoint(),
			mdw...),
		string: endpointx.Chain(
			http1.NewExplicitClient(
				func(ctx context.Context, obj interface{}) (*http2.Request, error) {
					req, ok := obj.(*BodyRequest)
					if !ok {
						return nil, fmt.Errorf("invalid request object type, %T", obj)
					}
					if req == nil {
						return nil, errors.New("request object is nil")
					}
					var method = "PUT"
					var url string
					var body io.Reader
					body = strings.NewReader(req.String_)
					var pairs []string
					path, err := router.Get("/leo.example.query.v1.Query/String").URLPath(pairs...)
					if err != nil {
						return nil, err
					}
					url = fmt.Sprintf("%s://%s%s", "http", instance, path)
					r, err := http2.NewRequestWithContext(ctx, method, url, body)
					if err != nil {
						return nil, err
					}
					return r, nil
				},
				func(ctx context.Context, r *http2.Response) (interface{}, error) {
					return nil, nil
				},
				opts...,
			).Endpoint(),
			mdw...),
		optString: endpointx.Chain(
			http1.NewExplicitClient(
				func(ctx context.Context, obj interface{}) (*http2.Request, error) {
					req, ok := obj.(*BodyRequest)
					if !ok {
						return nil, fmt.Errorf("invalid request object type, %T", obj)
					}
					if req == nil {
						return nil, errors.New("request object is nil")
					}
					var method = "PUT"
					var url string
					var body io.Reader
					if req.OptString != nil {
						body = strings.NewReader(*req.OptString)
					}
					var pairs []string
					path, err := router.Get("/leo.example.query.v1.Query/OptString").URLPath(pairs...)
					if err != nil {
						return nil, err
					}
					url = fmt.Sprintf("%s://%s%s", "http", instance, path)
					r, err := http2.NewRequestWithContext(ctx, method, url, body)
					if err != nil {
						return nil, err
					}
					return r, nil
				},
				func(ctx context.Context, r *http2.Response) (interface{}, error) {
					return nil, nil
				},
				opts...,
			).Endpoint(),
			mdw...),
		repString: endpointx.Chain(
			http1.NewExplicitClient(
				func(ctx context.Context, obj interface{}) (*http2.Request, error) {
					req, ok := obj.(*BodyRequest)
					if !ok {
						return nil, fmt.Errorf("invalid request object type, %T", obj)
					}
					if req == nil {
						return nil, errors.New("request object is nil")
					}
					var method = "PUT"
					var url string
					var body io.Reader
					if req.RepString != nil {
						if err := json.NewDecoder(body).Decode(req.RepString); err != nil {
							return nil, err
						}
					}
					var pairs []string
					path, err := router.Get("/leo.example.query.v1.Query/RepString").URLPath(pairs...)
					if err != nil {
						return nil, err
					}
					url = fmt.Sprintf("%s://%s%s", "http", instance, path)
					r, err := http2.NewRequestWithContext(ctx, method, url, body)
					if err != nil {
						return nil, err
					}
					return r, nil
				},
				func(ctx context.Context, r *http2.Response) (interface{}, error) {
					return nil, nil
				},
				opts...,
			).Endpoint(),
			mdw...),
		wrapString: endpointx.Chain(
			http1.NewExplicitClient(
				func(ctx context.Context, obj interface{}) (*http2.Request, error) {
					req, ok := obj.(*BodyRequest)
					if !ok {
						return nil, fmt.Errorf("invalid request object type, %T", obj)
					}
					if req == nil {
						return nil, errors.New("request object is nil")
					}
					var method = "PUT"
					var url string
					var body io.Reader
					if req.WrapString != nil {
						body = strings.NewReader(req.WrapString.Value)
					}
					var pairs []string
					path, err := router.Get("/leo.example.query.v1.Query/WrapString").URLPath(pairs...)
					if err != nil {
						return nil, err
					}
					url = fmt.Sprintf("%s://%s%s", "http", instance, path)
					r, err := http2.NewRequestWithContext(ctx, method, url, body)
					if err != nil {
						return nil, err
					}
					return r, nil
				},
				func(ctx context.Context, r *http2.Response) (interface{}, error) {
					return nil, nil
				},
				opts...,
			).Endpoint(),
			mdw...),
		bytes: endpointx.Chain(
			http1.NewExplicitClient(
				func(ctx context.Context, obj interface{}) (*http2.Request, error) {
					req, ok := obj.(*BodyRequest)
					if !ok {
						return nil, fmt.Errorf("invalid request object type, %T", obj)
					}
					if req == nil {
						return nil, errors.New("request object is nil")
					}
					var method = "PUT"
					var url string
					var body io.Reader
					body = bytes.NewReader(req.Bytes)
					var pairs []string
					path, err := router.Get("/leo.example.query.v1.Query/Bytes").URLPath(pairs...)
					if err != nil {
						return nil, err
					}
					url = fmt.Sprintf("%s://%s%s", "http", instance, path)
					r, err := http2.NewRequestWithContext(ctx, method, url, body)
					if err != nil {
						return nil, err
					}
					return r, nil
				},
				func(ctx context.Context, r *http2.Response) (interface{}, error) {
					return nil, nil
				},
				opts...,
			).Endpoint(),
			mdw...),
		optBytes: endpointx.Chain(
			http1.NewExplicitClient(
				func(ctx context.Context, obj interface{}) (*http2.Request, error) {
					req, ok := obj.(*BodyRequest)
					if !ok {
						return nil, fmt.Errorf("invalid request object type, %T", obj)
					}
					if req == nil {
						return nil, errors.New("request object is nil")
					}
					var method = "PUT"
					var url string
					var body io.Reader
					body = bytes.NewReader(req.OptBytes)
					var pairs []string
					path, err := router.Get("/leo.example.query.v1.Query/OptBytes").URLPath(pairs...)
					if err != nil {
						return nil, err
					}
					url = fmt.Sprintf("%s://%s%s", "http", instance, path)
					r, err := http2.NewRequestWithContext(ctx, method, url, body)
					if err != nil {
						return nil, err
					}
					return r, nil
				},
				func(ctx context.Context, r *http2.Response) (interface{}, error) {
					return nil, nil
				},
				opts...,
			).Endpoint(),
			mdw...),
		repBytes: endpointx.Chain(
			http1.NewExplicitClient(
				func(ctx context.Context, obj interface{}) (*http2.Request, error) {
					req, ok := obj.(*BodyRequest)
					if !ok {
						return nil, fmt.Errorf("invalid request object type, %T", obj)
					}
					if req == nil {
						return nil, errors.New("request object is nil")
					}
					var method = "PUT"
					var url string
					var body io.Reader
					if req.RepBytes != nil {
						if err := json.NewDecoder(body).Decode(req.RepBytes); err != nil {
							return nil, err
						}
					}
					var pairs []string
					path, err := router.Get("/leo.example.query.v1.Query/RepBytes").URLPath(pairs...)
					if err != nil {
						return nil, err
					}
					url = fmt.Sprintf("%s://%s%s", "http", instance, path)
					r, err := http2.NewRequestWithContext(ctx, method, url, body)
					if err != nil {
						return nil, err
					}
					return r, nil
				},
				func(ctx context.Context, r *http2.Response) (interface{}, error) {
					return nil, nil
				},
				opts...,
			).Endpoint(),
			mdw...),
		wrapBytes: endpointx.Chain(
			http1.NewExplicitClient(
				func(ctx context.Context, obj interface{}) (*http2.Request, error) {
					req, ok := obj.(*BodyRequest)
					if !ok {
						return nil, fmt.Errorf("invalid request object type, %T", obj)
					}
					if req == nil {
						return nil, errors.New("request object is nil")
					}
					var method = "PUT"
					var url string
					var body io.Reader
					if req.WrapBytes != nil {
						body = bytes.NewReader(req.WrapBytes.Value)
					}
					var pairs []string
					path, err := router.Get("/leo.example.query.v1.Query/WrapBytes").URLPath(pairs...)
					if err != nil {
						return nil, err
					}
					url = fmt.Sprintf("%s://%s%s", "http", instance, path)
					r, err := http2.NewRequestWithContext(ctx, method, url, body)
					if err != nil {
						return nil, err
					}
					return r, nil
				},
				func(ctx context.Context, r *http2.Response) (interface{}, error) {
					return nil, nil
				},
				opts...,
			).Endpoint(),
			mdw...),
		enum: endpointx.Chain(
			http1.NewExplicitClient(
				func(ctx context.Context, obj interface{}) (*http2.Request, error) {
					req, ok := obj.(*BodyRequest)
					if !ok {
						return nil, fmt.Errorf("invalid request object type, %T", obj)
					}
					if req == nil {
						return nil, errors.New("request object is nil")
					}
					var method = "PUT"
					var url string
					var body io.Reader
					body = strings.NewReader(strconv.FormatInt(int64(req.Status), 10))
					var pairs []string
					path, err := router.Get("/leo.example.query.v1.Query/Enum").URLPath(pairs...)
					if err != nil {
						return nil, err
					}
					url = fmt.Sprintf("%s://%s%s", "http", instance, path)
					r, err := http2.NewRequestWithContext(ctx, method, url, body)
					if err != nil {
						return nil, err
					}
					return r, nil
				},
				func(ctx context.Context, r *http2.Response) (interface{}, error) {
					return nil, nil
				},
				opts...,
			).Endpoint(),
			mdw...),
		optEnum: endpointx.Chain(
			http1.NewExplicitClient(
				func(ctx context.Context, obj interface{}) (*http2.Request, error) {
					req, ok := obj.(*BodyRequest)
					if !ok {
						return nil, fmt.Errorf("invalid request object type, %T", obj)
					}
					if req == nil {
						return nil, errors.New("request object is nil")
					}
					var method = "PUT"
					var url string
					var body io.Reader
					if req.OptStatus != nil {
						body = strings.NewReader(strconv.FormatInt(int64(*req.OptStatus), 10))
					}
					var pairs []string
					path, err := router.Get("/leo.example.query.v1.Query/OptEnum").URLPath(pairs...)
					if err != nil {
						return nil, err
					}
					url = fmt.Sprintf("%s://%s%s", "http", instance, path)
					r, err := http2.NewRequestWithContext(ctx, method, url, body)
					if err != nil {
						return nil, err
					}
					return r, nil
				},
				func(ctx context.Context, r *http2.Response) (interface{}, error) {
					return nil, nil
				},
				opts...,
			).Endpoint(),
			mdw...),
		repEnum: endpointx.Chain(
			http1.NewExplicitClient(
				func(ctx context.Context, obj interface{}) (*http2.Request, error) {
					req, ok := obj.(*BodyRequest)
					if !ok {
						return nil, fmt.Errorf("invalid request object type, %T", obj)
					}
					if req == nil {
						return nil, errors.New("request object is nil")
					}
					var method = "PUT"
					var url string
					var body io.Reader
					if req.RepStatus != nil {
						if err := json.NewDecoder(body).Decode(req.RepStatus); err != nil {
							return nil, err
						}
					}
					var pairs []string
					path, err := router.Get("/leo.example.query.v1.Query/RepEnum").URLPath(pairs...)
					if err != nil {
						return nil, err
					}
					url = fmt.Sprintf("%s://%s%s", "http", instance, path)
					r, err := http2.NewRequestWithContext(ctx, method, url, body)
					if err != nil {
						return nil, err
					}
					return r, nil
				},
				func(ctx context.Context, r *http2.Response) (interface{}, error) {
					return nil, nil
				},
				opts...,
			).Endpoint(),
			mdw...),
		dictionary: endpointx.Chain(
			http1.NewExplicitClient(
				func(ctx context.Context, obj interface{}) (*http2.Request, error) {
					req, ok := obj.(*BodyRequest)
					if !ok {
						return nil, fmt.Errorf("invalid request object type, %T", obj)
					}
					if req == nil {
						return nil, errors.New("request object is nil")
					}
					var method = "PUT"
					var url string
					var body io.Reader
					if req.Dictionary != nil {
						data, err := json.Marshal(req.Dictionary)
						if err != nil {
							return nil, err
						}
						body = bytes.NewBuffer(data)
					}
					var pairs []string
					path, err := router.Get("/leo.example.query.v1.Query/Dictionary").URLPath(pairs...)
					if err != nil {
						return nil, err
					}
					url = fmt.Sprintf("%s://%s%s", "http", instance, path)
					r, err := http2.NewRequestWithContext(ctx, method, url, body)
					if err != nil {
						return nil, err
					}
					return r, nil
				},
				func(ctx context.Context, r *http2.Response) (interface{}, error) {
					return nil, nil
				},
				opts...,
			).Endpoint(),
			mdw...),
		httpBody: endpointx.Chain(
			http1.NewExplicitClient(
				func(ctx context.Context, obj interface{}) (*http2.Request, error) {
					req, ok := obj.(*BodyRequest)
					if !ok {
						return nil, fmt.Errorf("invalid request object type, %T", obj)
					}
					if req == nil {
						return nil, errors.New("request object is nil")
					}
					var method = "PUT"
					var url string
					var body io.Reader
					if req.HttpBody != nil {
						body = bytes.NewReader(req.HttpBody.Data)
					}
					var pairs []string
					path, err := router.Get("/leo.example.query.v1.Query/HttpBody").URLPath(pairs...)
					if err != nil {
						return nil, err
					}
					url = fmt.Sprintf("%s://%s%s", "http", instance, path)
					r, err := http2.NewRequestWithContext(ctx, method, url, body)
					if err != nil {
						return nil, err
					}
					return r, nil
				},
				func(ctx context.Context, r *http2.Response) (interface{}, error) {
					return nil, nil
				},
				opts...,
			).Endpoint(),
			mdw...),
		httpRequest: endpointx.Chain(
			http1.NewExplicitClient(
				func(ctx context.Context, obj interface{}) (*http2.Request, error) {
					req, ok := obj.(*BodyRequest)
					if !ok {
						return nil, fmt.Errorf("invalid request object type, %T", obj)
					}
					if req == nil {
						return nil, errors.New("request object is nil")
					}
					var method = "PUT"
					var url string
					var body io.Reader
					if req.HttpRequest != nil {
						body = bytes.NewReader(req.HttpRequest.Body)
					}
					var pairs []string
					path, err := router.Get("/leo.example.query.v1.Query/HttpRequest").URLPath(pairs...)
					if err != nil {
						return nil, err
					}
					url = fmt.Sprintf("%s://%s%s", "http", instance, path)
					r, err := http2.NewRequestWithContext(ctx, method, url, body)
					if err != nil {
						return nil, err
					}
					return r, nil
				},
				func(ctx context.Context, r *http2.Response) (interface{}, error) {
					return nil, nil
				},
				opts...,
			).Endpoint(),
			mdw...),
		valueRequest: endpointx.Chain(
			http1.NewExplicitClient(
				func(ctx context.Context, obj interface{}) (*http2.Request, error) {
					req, ok := obj.(*BodyRequest)
					if !ok {
						return nil, fmt.Errorf("invalid request object type, %T", obj)
					}
					if req == nil {
						return nil, errors.New("request object is nil")
					}
					var method = "PUT"
					var url string
					var body io.Reader
					if req.Value != nil {
						data, err := protojson.Marshal(req.Value)
						if err != nil {
							return nil, err
						}
						body = bytes.NewBuffer(data)
					}
					var pairs []string
					path, err := router.Get("/leo.example.query.v1.Query/ValueRequest").URLPath(pairs...)
					if err != nil {
						return nil, err
					}
					url = fmt.Sprintf("%s://%s%s", "http", instance, path)
					r, err := http2.NewRequestWithContext(ctx, method, url, body)
					if err != nil {
						return nil, err
					}
					return r, nil
				},
				func(ctx context.Context, r *http2.Response) (interface{}, error) {
					return nil, nil
				},
				opts...,
			).Endpoint(),
			mdw...),
		listValueRequest: endpointx.Chain(
			http1.NewExplicitClient(
				func(ctx context.Context, obj interface{}) (*http2.Request, error) {
					req, ok := obj.(*BodyRequest)
					if !ok {
						return nil, fmt.Errorf("invalid request object type, %T", obj)
					}
					if req == nil {
						return nil, errors.New("request object is nil")
					}
					var method = "PUT"
					var url string
					var body io.Reader
					if req.ListValue != nil {
						data, err := protojson.Marshal(req.ListValue)
						if err != nil {
							return nil, err
						}
						body = bytes.NewBuffer(data)
					}
					var pairs []string
					path, err := router.Get("/leo.example.query.v1.Query/ListValueRequest").URLPath(pairs...)
					if err != nil {
						return nil, err
					}
					url = fmt.Sprintf("%s://%s%s", "http", instance, path)
					r, err := http2.NewRequestWithContext(ctx, method, url, body)
					if err != nil {
						return nil, err
					}
					return r, nil
				},
				func(ctx context.Context, r *http2.Response) (interface{}, error) {
					return nil, nil
				},
				opts...,
			).Endpoint(),
			mdw...),
		structRequest: endpointx.Chain(
			http1.NewExplicitClient(
				func(ctx context.Context, obj interface{}) (*http2.Request, error) {
					req, ok := obj.(*BodyRequest)
					if !ok {
						return nil, fmt.Errorf("invalid request object type, %T", obj)
					}
					if req == nil {
						return nil, errors.New("request object is nil")
					}
					var method = "PUT"
					var url string
					var body io.Reader
					if req.Struct != nil {
						data, err := protojson.Marshal(req.Struct)
						if err != nil {
							return nil, err
						}
						body = bytes.NewBuffer(data)
					}
					var pairs []string
					path, err := router.Get("/leo.example.query.v1.Query/StructRequest").URLPath(pairs...)
					if err != nil {
						return nil, err
					}
					url = fmt.Sprintf("%s://%s%s", "http", instance, path)
					r, err := http2.NewRequestWithContext(ctx, method, url, body)
					if err != nil {
						return nil, err
					}
					return r, nil
				},
				func(ctx context.Context, r *http2.Response) (interface{}, error) {
					return nil, nil
				},
				opts...,
			).Endpoint(),
			mdw...),
		timestampRequest: endpointx.Chain(
			http1.NewExplicitClient(
				func(ctx context.Context, obj interface{}) (*http2.Request, error) {
					req, ok := obj.(*BodyRequest)
					if !ok {
						return nil, fmt.Errorf("invalid request object type, %T", obj)
					}
					if req == nil {
						return nil, errors.New("request object is nil")
					}
					var method = "PUT"
					var url string
					var body io.Reader
					if req.Timestamp != nil {
						body = strings.NewReader(req.Timestamp.AsTime().Format(time.RFC3339))
					}
					var pairs []string
					path, err := router.Get("/leo.example.query.v1.Query/TimestampRequest").URLPath(pairs...)
					if err != nil {
						return nil, err
					}
					url = fmt.Sprintf("%s://%s%s", "http", instance, path)
					r, err := http2.NewRequestWithContext(ctx, method, url, body)
					if err != nil {
						return nil, err
					}
					return r, nil
				},
				func(ctx context.Context, r *http2.Response) (interface{}, error) {
					return nil, nil
				},
				opts...,
			).Endpoint(),
			mdw...),
		durationRequest: endpointx.Chain(
			http1.NewExplicitClient(
				func(ctx context.Context, obj interface{}) (*http2.Request, error) {
					req, ok := obj.(*BodyRequest)
					if !ok {
						return nil, fmt.Errorf("invalid request object type, %T", obj)
					}
					if req == nil {
						return nil, errors.New("request object is nil")
					}
					var method = "PUT"
					var url string
					var body io.Reader
					if req.Duration != nil {
						body = strings.NewReader(req.Duration.AsDuration().String())
					}
					var pairs []string
					path, err := router.Get("/leo.example.query.v1.Query/DurationRequest").URLPath(pairs...)
					if err != nil {
						return nil, err
					}
					url = fmt.Sprintf("%s://%s%s", "http", instance, path)
					r, err := http2.NewRequestWithContext(ctx, method, url, body)
					if err != nil {
						return nil, err
					}
					return r, nil
				},
				func(ctx context.Context, r *http2.Response) (interface{}, error) {
					return nil, nil
				},
				opts...,
			).Endpoint(),
			mdw...),
		wrapDoubleBody: endpointx.Chain(
			http1.NewExplicitClient(
				func(ctx context.Context, obj interface{}) (*http2.Request, error) {
					req, ok := obj.(*wrapperspb.DoubleValue)
					if !ok {
						return nil, fmt.Errorf("invalid request object type, %T", obj)
					}
					if req == nil {
						return nil, errors.New("request object is nil")
					}
					var method = "PUT"
					var url string
					var body io.Reader
					if req != nil {
						body = strings.NewReader(strconv.FormatFloat(req.Value, 'f', -1, 64))
					}
					var pairs []string
					path, err := router.Get("/leo.example.query.v1.Query/WrapDoubleBody").URLPath(pairs...)
					if err != nil {
						return nil, err
					}
					url = fmt.Sprintf("%s://%s%s", "http", instance, path)
					r, err := http2.NewRequestWithContext(ctx, method, url, body)
					if err != nil {
						return nil, err
					}
					return r, nil
				},
				func(ctx context.Context, r *http2.Response) (interface{}, error) {
					return nil, nil
				},
				opts...,
			).Endpoint(),
			mdw...),
		wrapFloatBody: endpointx.Chain(
			http1.NewExplicitClient(
				func(ctx context.Context, obj interface{}) (*http2.Request, error) {
					req, ok := obj.(*wrapperspb.FloatValue)
					if !ok {
						return nil, fmt.Errorf("invalid request object type, %T", obj)
					}
					if req == nil {
						return nil, errors.New("request object is nil")
					}
					var method = "PUT"
					var url string
					var body io.Reader
					if req != nil {
						body = strings.NewReader(strconv.FormatFloat(float64(req.Value), 'f', -1, 32))
					}
					var pairs []string
					path, err := router.Get("/leo.example.query.v1.Query/WrapFloatBody").URLPath(pairs...)
					if err != nil {
						return nil, err
					}
					url = fmt.Sprintf("%s://%s%s", "http", instance, path)
					r, err := http2.NewRequestWithContext(ctx, method, url, body)
					if err != nil {
						return nil, err
					}
					return r, nil
				},
				func(ctx context.Context, r *http2.Response) (interface{}, error) {
					return nil, nil
				},
				opts...,
			).Endpoint(),
			mdw...),
		wrapInt64Body: endpointx.Chain(
			http1.NewExplicitClient(
				func(ctx context.Context, obj interface{}) (*http2.Request, error) {
					req, ok := obj.(*wrapperspb.Int64Value)
					if !ok {
						return nil, fmt.Errorf("invalid request object type, %T", obj)
					}
					if req == nil {
						return nil, errors.New("request object is nil")
					}
					var method = "PUT"
					var url string
					var body io.Reader
					if req != nil {
						body = strings.NewReader(strconv.FormatInt(req.Value, 10))
					}
					var pairs []string
					path, err := router.Get("/leo.example.query.v1.Query/WrapInt64Body").URLPath(pairs...)
					if err != nil {
						return nil, err
					}
					url = fmt.Sprintf("%s://%s%s", "http", instance, path)
					r, err := http2.NewRequestWithContext(ctx, method, url, body)
					if err != nil {
						return nil, err
					}
					return r, nil
				},
				func(ctx context.Context, r *http2.Response) (interface{}, error) {
					return nil, nil
				},
				opts...,
			).Endpoint(),
			mdw...),
		wrapUint64Body: endpointx.Chain(
			http1.NewExplicitClient(
				func(ctx context.Context, obj interface{}) (*http2.Request, error) {
					req, ok := obj.(*wrapperspb.UInt64Value)
					if !ok {
						return nil, fmt.Errorf("invalid request object type, %T", obj)
					}
					if req == nil {
						return nil, errors.New("request object is nil")
					}
					var method = "PUT"
					var url string
					var body io.Reader
					if req != nil {
						body = strings.NewReader(strconv.FormatUint(req.Value, 10))
					}
					var pairs []string
					path, err := router.Get("/leo.example.query.v1.Query/WrapUint64Body").URLPath(pairs...)
					if err != nil {
						return nil, err
					}
					url = fmt.Sprintf("%s://%s%s", "http", instance, path)
					r, err := http2.NewRequestWithContext(ctx, method, url, body)
					if err != nil {
						return nil, err
					}
					return r, nil
				},
				func(ctx context.Context, r *http2.Response) (interface{}, error) {
					return nil, nil
				},
				opts...,
			).Endpoint(),
			mdw...),
		wrapInt32Body: endpointx.Chain(
			http1.NewExplicitClient(
				func(ctx context.Context, obj interface{}) (*http2.Request, error) {
					req, ok := obj.(*wrapperspb.Int32Value)
					if !ok {
						return nil, fmt.Errorf("invalid request object type, %T", obj)
					}
					if req == nil {
						return nil, errors.New("request object is nil")
					}
					var method = "PUT"
					var url string
					var body io.Reader
					if req != nil {
						body = strings.NewReader(strconv.FormatInt(int64(req.Value), 10))
					}
					var pairs []string
					path, err := router.Get("/leo.example.query.v1.Query/WrapInt32Body").URLPath(pairs...)
					if err != nil {
						return nil, err
					}
					url = fmt.Sprintf("%s://%s%s", "http", instance, path)
					r, err := http2.NewRequestWithContext(ctx, method, url, body)
					if err != nil {
						return nil, err
					}
					return r, nil
				},
				func(ctx context.Context, r *http2.Response) (interface{}, error) {
					return nil, nil
				},
				opts...,
			).Endpoint(),
			mdw...),
		wrapUint32Body: endpointx.Chain(
			http1.NewExplicitClient(
				func(ctx context.Context, obj interface{}) (*http2.Request, error) {
					req, ok := obj.(*wrapperspb.UInt32Value)
					if !ok {
						return nil, fmt.Errorf("invalid request object type, %T", obj)
					}
					if req == nil {
						return nil, errors.New("request object is nil")
					}
					var method = "PUT"
					var url string
					var body io.Reader
					if req != nil {
						body = strings.NewReader(strconv.FormatUint(uint64(req.Value), 10))
					}
					var pairs []string
					path, err := router.Get("/leo.example.query.v1.Query/WrapUint32Body").URLPath(pairs...)
					if err != nil {
						return nil, err
					}
					url = fmt.Sprintf("%s://%s%s", "http", instance, path)
					r, err := http2.NewRequestWithContext(ctx, method, url, body)
					if err != nil {
						return nil, err
					}
					return r, nil
				},
				func(ctx context.Context, r *http2.Response) (interface{}, error) {
					return nil, nil
				},
				opts...,
			).Endpoint(),
			mdw...),
		wrapBoolBody: endpointx.Chain(
			http1.NewExplicitClient(
				func(ctx context.Context, obj interface{}) (*http2.Request, error) {
					req, ok := obj.(*wrapperspb.BoolValue)
					if !ok {
						return nil, fmt.Errorf("invalid request object type, %T", obj)
					}
					if req == nil {
						return nil, errors.New("request object is nil")
					}
					var method = "PUT"
					var url string
					var body io.Reader
					if req != nil {
						body = strings.NewReader(strconv.FormatBool(req.Value))
					}
					var pairs []string
					path, err := router.Get("/leo.example.query.v1.Query/WrapBoolBody").URLPath(pairs...)
					if err != nil {
						return nil, err
					}
					url = fmt.Sprintf("%s://%s%s", "http", instance, path)
					r, err := http2.NewRequestWithContext(ctx, method, url, body)
					if err != nil {
						return nil, err
					}
					return r, nil
				},
				func(ctx context.Context, r *http2.Response) (interface{}, error) {
					return nil, nil
				},
				opts...,
			).Endpoint(),
			mdw...),
		wrapStringBody: endpointx.Chain(
			http1.NewExplicitClient(
				func(ctx context.Context, obj interface{}) (*http2.Request, error) {
					req, ok := obj.(*wrapperspb.StringValue)
					if !ok {
						return nil, fmt.Errorf("invalid request object type, %T", obj)
					}
					if req == nil {
						return nil, errors.New("request object is nil")
					}
					var method = "PUT"
					var url string
					var body io.Reader
					if req != nil {
						body = strings.NewReader(req.Value)
					}
					var pairs []string
					path, err := router.Get("/leo.example.query.v1.Query/WrapStringBody").URLPath(pairs...)
					if err != nil {
						return nil, err
					}
					url = fmt.Sprintf("%s://%s%s", "http", instance, path)
					r, err := http2.NewRequestWithContext(ctx, method, url, body)
					if err != nil {
						return nil, err
					}
					return r, nil
				},
				func(ctx context.Context, r *http2.Response) (interface{}, error) {
					return nil, nil
				},
				opts...,
			).Endpoint(),
			mdw...),
		wrapBytesBody: endpointx.Chain(
			http1.NewExplicitClient(
				func(ctx context.Context, obj interface{}) (*http2.Request, error) {
					req, ok := obj.(*wrapperspb.BytesValue)
					if !ok {
						return nil, fmt.Errorf("invalid request object type, %T", obj)
					}
					if req == nil {
						return nil, errors.New("request object is nil")
					}
					var method = "PUT"
					var url string
					var body io.Reader
					if req != nil {
						body = bytes.NewReader(req.Value)
					}
					var pairs []string
					path, err := router.Get("/leo.example.query.v1.Query/WrapBytesBody").URLPath(pairs...)
					if err != nil {
						return nil, err
					}
					url = fmt.Sprintf("%s://%s%s", "http", instance, path)
					r, err := http2.NewRequestWithContext(ctx, method, url, body)
					if err != nil {
						return nil, err
					}
					return r, nil
				},
				func(ctx context.Context, r *http2.Response) (interface{}, error) {
					return nil, nil
				},
				opts...,
			).Endpoint(),
			mdw...),
		httpBodyBody: endpointx.Chain(
			http1.NewExplicitClient(
				func(ctx context.Context, obj interface{}) (*http2.Request, error) {
					req, ok := obj.(*httpbody.HttpBody)
					if !ok {
						return nil, fmt.Errorf("invalid request object type, %T", obj)
					}
					if req == nil {
						return nil, errors.New("request object is nil")
					}
					var method = "PUT"
					var url string
					var body io.Reader
					if req != nil {
						body = bytes.NewReader(req.Data)
					}
					var pairs []string
					path, err := router.Get("/leo.example.query.v1.Query/HttpBodyBody").URLPath(pairs...)
					if err != nil {
						return nil, err
					}
					url = fmt.Sprintf("%s://%s%s", "http", instance, path)
					r, err := http2.NewRequestWithContext(ctx, method, url, body)
					if err != nil {
						return nil, err
					}
					return r, nil
				},
				func(ctx context.Context, r *http2.Response) (interface{}, error) {
					return nil, nil
				},
				opts...,
			).Endpoint(),
			mdw...),
		httpRequestBody: endpointx.Chain(
			http1.NewExplicitClient(
				func(ctx context.Context, obj interface{}) (*http2.Request, error) {
					req, ok := obj.(*http.HttpRequest)
					if !ok {
						return nil, fmt.Errorf("invalid request object type, %T", obj)
					}
					if req == nil {
						return nil, errors.New("request object is nil")
					}
					var method = "PUT"
					var url string
					var body io.Reader
					if req != nil {
						body = bytes.NewReader(req.Body)
					}
					var pairs []string
					path, err := router.Get("/leo.example.query.v1.Query/HttpRequestBody").URLPath(pairs...)
					if err != nil {
						return nil, err
					}
					url = fmt.Sprintf("%s://%s%s", "http", instance, path)
					r, err := http2.NewRequestWithContext(ctx, method, url, body)
					if err != nil {
						return nil, err
					}
					return r, nil
				},
				func(ctx context.Context, r *http2.Response) (interface{}, error) {
					return nil, nil
				},
				opts...,
			).Endpoint(),
			mdw...),
		valueBody: endpointx.Chain(
			http1.NewExplicitClient(
				func(ctx context.Context, obj interface{}) (*http2.Request, error) {
					req, ok := obj.(*structpb.Value)
					if !ok {
						return nil, fmt.Errorf("invalid request object type, %T", obj)
					}
					if req == nil {
						return nil, errors.New("request object is nil")
					}
					var method = "PUT"
					var url string
					var body io.Reader
					if req != nil {
						data, err := protojson.Marshal(req)
						if err != nil {
							return nil, err
						}
						body = bytes.NewBuffer(data)
					}
					var pairs []string
					path, err := router.Get("/leo.example.query.v1.Query/ValueBody").URLPath(pairs...)
					if err != nil {
						return nil, err
					}
					url = fmt.Sprintf("%s://%s%s", "http", instance, path)
					r, err := http2.NewRequestWithContext(ctx, method, url, body)
					if err != nil {
						return nil, err
					}
					return r, nil
				},
				func(ctx context.Context, r *http2.Response) (interface{}, error) {
					return nil, nil
				},
				opts...,
			).Endpoint(),
			mdw...),
		listValueBody: endpointx.Chain(
			http1.NewExplicitClient(
				func(ctx context.Context, obj interface{}) (*http2.Request, error) {
					req, ok := obj.(*structpb.ListValue)
					if !ok {
						return nil, fmt.Errorf("invalid request object type, %T", obj)
					}
					if req == nil {
						return nil, errors.New("request object is nil")
					}
					var method = "PUT"
					var url string
					var body io.Reader
					if req != nil {
						data, err := protojson.Marshal(req)
						if err != nil {
							return nil, err
						}
						body = bytes.NewBuffer(data)
					}
					var pairs []string
					path, err := router.Get("/leo.example.query.v1.Query/ListValueBody").URLPath(pairs...)
					if err != nil {
						return nil, err
					}
					url = fmt.Sprintf("%s://%s%s", "http", instance, path)
					r, err := http2.NewRequestWithContext(ctx, method, url, body)
					if err != nil {
						return nil, err
					}
					return r, nil
				},
				func(ctx context.Context, r *http2.Response) (interface{}, error) {
					return nil, nil
				},
				opts...,
			).Endpoint(),
			mdw...),
		structBody: endpointx.Chain(
			http1.NewExplicitClient(
				func(ctx context.Context, obj interface{}) (*http2.Request, error) {
					req, ok := obj.(*structpb.Struct)
					if !ok {
						return nil, fmt.Errorf("invalid request object type, %T", obj)
					}
					if req == nil {
						return nil, errors.New("request object is nil")
					}
					var method = "PUT"
					var url string
					var body io.Reader
					if req != nil {
						data, err := protojson.Marshal(req)
						if err != nil {
							return nil, err
						}
						body = bytes.NewBuffer(data)
					}
					var pairs []string
					path, err := router.Get("/leo.example.query.v1.Query/StructBody").URLPath(pairs...)
					if err != nil {
						return nil, err
					}
					url = fmt.Sprintf("%s://%s%s", "http", instance, path)
					r, err := http2.NewRequestWithContext(ctx, method, url, body)
					if err != nil {
						return nil, err
					}
					return r, nil
				},
				func(ctx context.Context, r *http2.Response) (interface{}, error) {
					return nil, nil
				},
				opts...,
			).Endpoint(),
			mdw...),
		timestampBody: endpointx.Chain(
			http1.NewExplicitClient(
				func(ctx context.Context, obj interface{}) (*http2.Request, error) {
					req, ok := obj.(*timestamppb.Timestamp)
					if !ok {
						return nil, fmt.Errorf("invalid request object type, %T", obj)
					}
					if req == nil {
						return nil, errors.New("request object is nil")
					}
					var method = "PUT"
					var url string
					var body io.Reader
					if req != nil {
						body = strings.NewReader(req.AsTime().Format(time.RFC3339))
					}
					var pairs []string
					path, err := router.Get("/leo.example.query.v1.Query/TimestampBody").URLPath(pairs...)
					if err != nil {
						return nil, err
					}
					url = fmt.Sprintf("%s://%s%s", "http", instance, path)
					r, err := http2.NewRequestWithContext(ctx, method, url, body)
					if err != nil {
						return nil, err
					}
					return r, nil
				},
				func(ctx context.Context, r *http2.Response) (interface{}, error) {
					return nil, nil
				},
				opts...,
			).Endpoint(),
			mdw...),
		durationBody: endpointx.Chain(
			http1.NewExplicitClient(
				func(ctx context.Context, obj interface{}) (*http2.Request, error) {
					req, ok := obj.(*durationpb.Duration)
					if !ok {
						return nil, fmt.Errorf("invalid request object type, %T", obj)
					}
					if req == nil {
						return nil, errors.New("request object is nil")
					}
					var method = "PUT"
					var url string
					var body io.Reader
					if req != nil {
						body = strings.NewReader(req.AsDuration().String())
					}
					var pairs []string
					path, err := router.Get("/leo.example.query.v1.Query/DurationBody").URLPath(pairs...)
					if err != nil {
						return nil, err
					}
					url = fmt.Sprintf("%s://%s%s", "http", instance, path)
					r, err := http2.NewRequestWithContext(ctx, method, url, body)
					if err != nil {
						return nil, err
					}
					return r, nil
				},
				func(ctx context.Context, r *http2.Response) (interface{}, error) {
					return nil, nil
				},
				opts...,
			).Endpoint(),
			mdw...),
	}
}
