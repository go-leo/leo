// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package query

import (
	context "context"
	errors "errors"
	fmt "fmt"
	endpoint "github.com/go-kit/kit/endpoint"
	http "github.com/go-kit/kit/transport/http"
	convx "github.com/go-leo/gox/convx"
	endpointx "github.com/go-leo/leo/v3/endpointx"
	mux "github.com/gorilla/mux"
	protojson "google.golang.org/protobuf/encoding/protojson"
	proto "google.golang.org/protobuf/proto"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	io "io"
	http1 "net/http"
	url "net/url"
	strconv "strconv"
)

func NewQueryHTTPServer(
	endpoints interface {
		Query() endpoint.Endpoint
	},
	mdw []endpoint.Middleware,
	opts ...http.ServerOption,
) http1.Handler {
	router := mux.NewRouter()
	router.NewRoute().
		Name("/leo.example.query.v1.Query/Query").
		Methods("GET").
		Path("/v1/query").
		Handler(http.NewServer(
			endpointx.Chain(endpoints.Query(), mdw...),
			func(ctx context.Context, r *http1.Request) (any, error) {
				req := &QueryRequest{}
				queries := r.URL.Query()
				if v, err := strconv.ParseBool(queries.Get("bool")); err != nil {
					return nil, err
				} else {
					req.Bool = v
				}
				if v, err := strconv.ParseInt(queries.Get("int32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Int32 = int32(v)
				}
				if v, err := strconv.ParseInt(queries.Get("sint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Sint32 = int32(v)
				}
				if v, err := strconv.ParseUint(queries.Get("uint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Uint32 = uint32(v)
				}
				if v, err := strconv.ParseInt(queries.Get("int64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Int64 = v
				}
				if v, err := strconv.ParseInt(queries.Get("sint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Sint64 = v
				}
				if v, err := strconv.ParseUint(queries.Get("uint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Uint64 = v
				}
				if v, err := strconv.ParseInt(queries.Get("sfixed32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Sfixed32 = int32(v)
				}
				if v, err := strconv.ParseUint(queries.Get("fixed32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Fixed32 = uint32(v)
				}
				if v, err := strconv.ParseFloat(queries.Get("float"), 32); err != nil {
					return nil, err
				} else {
					req.Float = float32(v)
				}
				if v, err := strconv.ParseInt(queries.Get("sfixed64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Sfixed64 = v
				}
				if v, err := strconv.ParseUint(queries.Get("fixed64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Fixed64 = v
				}
				if v, err := strconv.ParseFloat(queries.Get("double"), 32); err != nil {
					return nil, err
				} else {
					req.Double = v
				}
				req.String_ = queries.Get("string")
				if v, err := strconv.ParseBool(queries.Get("opt_bool")); err != nil {
					return nil, err
				} else {
					req.OptBool = proto.Bool(v)
				}
				if v, err := strconv.ParseInt(queries.Get("opt_int32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptInt32 = proto.Int32(int32(v))
				}
				if v, err := strconv.ParseInt(queries.Get("opt_sint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptSint32 = proto.Int32(int32(v))
				}
				if v, err := strconv.ParseUint(queries.Get("opt_uint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptUint32 = proto.Uint32(uint32(v))
				}
				if v, err := strconv.ParseInt(queries.Get("opt_int64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptInt64 = proto.Int64(v)
				}
				if v, err := strconv.ParseInt(queries.Get("opt_sint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptSint64 = proto.Int64(v)
				}
				if v, err := strconv.ParseUint(queries.Get("opt_uint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptUint64 = proto.Uint64(v)
				}
				if v, err := strconv.ParseInt(queries.Get("opt_sfixed32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptSfixed32 = proto.Int32(int32(v))
				}
				if v, err := strconv.ParseUint(queries.Get("opt_fixed32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptFixed32 = proto.Uint32(uint32(v))
				}
				if v, err := strconv.ParseFloat(queries.Get("opt_float"), 32); err != nil {
					return nil, err
				} else {
					req.OptFloat = proto.Float32(float32(v))
				}
				if v, err := strconv.ParseInt(queries.Get("opt_sfixed64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptSfixed64 = proto.Int64(v)
				}
				if v, err := strconv.ParseUint(queries.Get("opt_fixed64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptFixed64 = proto.Uint64(v)
				}
				if v, err := strconv.ParseFloat(queries.Get("opt_double"), 32); err != nil {
					return nil, err
				} else {
					req.OptDouble = proto.Float64(v)
				}
				req.OptString = proto.String(queries.Get("opt_string"))
				if v, err := convx.ParseBoolSlice(queries["rep_bool"]); err != nil {
					return nil, err
				} else {
					req.RepBool = v
				}
				if v, err := convx.ParseIntSlice[int32](queries["rep_int32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepInt32 = v
				}
				if v, err := convx.ParseIntSlice[int32](queries["rep_sint32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepSint32 = v
				}
				if v, err := convx.ParseUintSlice[uint32](queries["rep_uint32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepUint32 = v
				}
				if v, err := convx.ParseIntSlice[int64](queries["rep_int64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepInt64 = v
				}
				if v, err := convx.ParseIntSlice[int64](queries["rep_sint64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepSint64 = v
				}
				if v, err := convx.ParseUintSlice[uint64](queries["rep_uint64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepUint64 = v
				}
				if v, err := convx.ParseIntSlice[int32](queries["rep_sfixed32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepSfixed32 = v
				}
				if v, err := convx.ParseUintSlice[uint32](queries["rep_fixed32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepFixed32 = v
				}
				if v, err := convx.ParseFloatSlice[float32](queries["rep_float"], 32); err != nil {
					return nil, err
				} else {
					req.RepFloat = v
				}
				if v, err := convx.ParseIntSlice[int64](queries["rep_sfixed64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepSfixed64 = v
				}
				if v, err := convx.ParseUintSlice[uint64](queries["rep_fixed64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepFixed64 = v
				}
				if v, err := convx.ParseFloatSlice[float64](queries["rep_double"], 32); err != nil {
					return nil, err
				} else {
					req.RepDouble = v
				}
				req.RepString = queries["rep_string"]
				if v, err := strconv.ParseFloat(queries.Get("wrap_double"), 64); err != nil {
					return nil, err
				} else {
					req.WrapDouble = wrapperspb.Double(v)
				}
				if v, err := strconv.ParseFloat(queries.Get("wrap_float"), 32); err != nil {
					return nil, err
				} else {
					req.WrapFloat = wrapperspb.Float(float32(v))
				}
				if v, err := strconv.ParseInt(queries.Get("wrap_int64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.WrapInt64 = wrapperspb.Int64(v)
				}
				if v, err := strconv.ParseUint(queries.Get("wrap_uint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.WrapUint64 = wrapperspb.UInt64(v)
				}
				if v, err := strconv.ParseInt(queries.Get("wrap_int32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.WrapInt32 = wrapperspb.Int32(int32(v))
				}
				if v, err := strconv.ParseUint(queries.Get("wrap_uint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.WrapUint32 = wrapperspb.UInt32(uint32(v))
				}
				if v, err := strconv.ParseBool(queries.Get("wrap_bool")); err != nil {
					return nil, err
				} else {
					req.WrapBool = wrapperspb.Bool(v)
				}
				req.WrapString = wrapperspb.String(queries.Get("wrap_string"))
				if v, err := strconv.ParseFloat(queries.Get("opt_wrap_double"), 64); err != nil {
					return nil, err
				} else {
					req.OptWrapDouble = wrapperspb.Double(v)
				}
				if v, err := strconv.ParseFloat(queries.Get("opt_wrap_float"), 32); err != nil {
					return nil, err
				} else {
					req.OptWrapFloat = wrapperspb.Float(float32(v))
				}
				if v, err := strconv.ParseInt(queries.Get("opt_wrap_int64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptWrapInt64 = wrapperspb.Int64(v)
				}
				if v, err := strconv.ParseUint(queries.Get("opt_wrap_uint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptWrapUint64 = wrapperspb.UInt64(v)
				}
				if v, err := strconv.ParseInt(queries.Get("opt_wrap_int32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptWrapInt32 = wrapperspb.Int32(int32(v))
				}
				if v, err := strconv.ParseUint(queries.Get("opt_wrap_uint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptWrapUint32 = wrapperspb.UInt32(uint32(v))
				}
				if v, err := strconv.ParseBool(queries.Get("opt_wrap_bool")); err != nil {
					return nil, err
				} else {
					req.OptWrapBool = wrapperspb.Bool(v)
				}
				req.OptWrapString = wrapperspb.String(queries.Get("opt_wrap_string"))
				if v, err := strconv.ParseFloat(queries["rep_wrap_double"], 64); err != nil {
					return nil, err
				} else {
					req.RepWrapDouble = wrapperspb.Double(v)
				}
				if v, err := strconv.ParseFloat(queries["rep_wrap_float"], 32); err != nil {
					return nil, err
				} else {
					req.RepWrapFloat = wrapperspb.Float(float32(v))
				}
				if v, err := strconv.ParseInt(queries["rep_wrap_int64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepWrapInt64 = wrapperspb.Int64(v)
				}
				if v, err := strconv.ParseUint(queries["rep_wrap_uint64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepWrapUint64 = wrapperspb.UInt64(v)
				}
				if v, err := strconv.ParseInt(queries["rep_wrap_int32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepWrapInt32 = wrapperspb.Int32(int32(v))
				}
				if v, err := strconv.ParseUint(queries["rep_wrap_uint32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepWrapUint32 = wrapperspb.UInt32(uint32(v))
				}
				if v, err := strconv.ParseBool(queries["rep_wrap_bool"]); err != nil {
					return nil, err
				} else {
					req.RepWrapBool = wrapperspb.Bool(v)
				}
				req.RepWrapString = wrapperspb.String(queries["rep_wrap_string"])
				if v, err := strconv.ParseInt(queries.Get("status"), 10, 32); err != nil {
					return nil, err
				} else {
					ev := QueryRequest_Status(v)
					req.Status = ev
				}
				if v, err := strconv.ParseInt(queries.Get("opt_status"), 10, 32); err != nil {
					return nil, err
				} else {
					ev := QueryRequest_Status(v)
					req.OptStatus = &ev
				}
				if v, err := convx.ParseIntSlice[int32](queries["rep_status"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepStatus = v
				}
				return req, nil
			},
			func(ctx context.Context, w http1.ResponseWriter, obj any) error {
				resp := obj.(*emptypb.Empty)
				_ = resp
				w.WriteHeader(http1.StatusOK)
				data, err := protojson.Marshal(resp)
				if err != nil {
					return err
				}
				if _, err := w.Write(data); err != nil {
					return err
				}
				return nil
			},
			opts...,
		))
	return router
}

type queryHTTPClient struct {
	query endpoint.Endpoint
}

func (c *queryHTTPClient) Query(ctx context.Context, request *QueryRequest) (*emptypb.Empty, error) {
	rep, err := c.query(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*emptypb.Empty), nil
}

func NewQueryHTTPClient(
	scheme string,
	instance string,
	mdw []endpoint.Middleware,
	opts ...http.ClientOption,
) interface {
	Query(ctx context.Context, request *QueryRequest) (*emptypb.Empty, error)
} {
	router := mux.NewRouter()
	router.NewRoute().
		Name("/leo.example.query.v1.Query/Query").
		Methods("GET").
		Path("/v1/query")
	return &queryHTTPClient{
		query: endpointx.Chain(
			http.NewExplicitClient(
				func(ctx context.Context, obj interface{}) (*http1.Request, error) {
					if obj == nil {
						return nil, errors.New("request object is nil")
					}
					req, ok := obj.(*QueryRequest)
					if !ok {
						return nil, fmt.Errorf("invalid request object type, %T", obj)
					}
					_ = req
					var body io.Reader
					var pairs []string
					path, err := router.Get("/leo.example.query.v1.Query/Query").URLPath(pairs...)
					if err != nil {
						return nil, err
					}
					queries := url.Values{}
					queries.Add("bool", strconv.FormatBool(req.GetBool()))
					queries.Add("int32", strconv.FormatInt(int64(req.GetInt32()), 10))
					queries.Add("sint32", strconv.FormatInt(int64(req.GetSint32()), 10))
					queries.Add("uint32", strconv.FormatUint(uint64(req.GetUint32()), 10))
					queries.Add("int64", strconv.FormatInt(req.GetInt64(), 10))
					queries.Add("sint64", strconv.FormatInt(req.GetSint64(), 10))
					queries.Add("uint64", strconv.FormatUint(req.GetUint64(), 10))
					queries.Add("sfixed32", strconv.FormatInt(int64(req.GetSfixed32()), 10))
					queries.Add("fixed32", strconv.FormatUint(uint64(req.GetFixed32()), 10))
					queries.Add("float", strconv.FormatFloat(float64(req.GetFloat()), 'f', -1, 32))
					queries.Add("sfixed64", strconv.FormatInt(req.GetSfixed64(), 10))
					queries.Add("fixed64", strconv.FormatUint(req.GetFixed64(), 10))
					queries.Add("double", strconv.FormatFloat(req.GetDouble(), 'f', -1, 64))
					queries.Add("string", req.GetString_())
					queries.Add("opt_bool", strconv.FormatBool(req.GetOptBool()))
					queries.Add("opt_int32", strconv.FormatInt(int64(req.GetOptInt32()), 10))
					queries.Add("opt_sint32", strconv.FormatInt(int64(req.GetOptSint32()), 10))
					queries.Add("opt_uint32", strconv.FormatUint(uint64(req.GetOptUint32()), 10))
					queries.Add("opt_int64", strconv.FormatInt(req.GetOptInt64(), 10))
					queries.Add("opt_sint64", strconv.FormatInt(req.GetOptSint64(), 10))
					queries.Add("opt_uint64", strconv.FormatUint(req.GetOptUint64(), 10))
					queries.Add("opt_sfixed32", strconv.FormatInt(int64(req.GetOptSfixed32()), 10))
					queries.Add("opt_fixed32", strconv.FormatUint(uint64(req.GetOptFixed32()), 10))
					queries.Add("opt_float", strconv.FormatFloat(float64(req.GetOptFloat()), 'f', -1, 32))
					queries.Add("opt_sfixed64", strconv.FormatInt(req.GetOptSfixed64(), 10))
					queries.Add("opt_fixed64", strconv.FormatUint(req.GetOptFixed64(), 10))
					queries.Add("opt_double", strconv.FormatFloat(req.GetOptDouble(), 'f', -1, 64))
					queries.Add("opt_string", req.GetOptString())
					for _, item := range req.GetRepBool() {
						queries.Add("rep_bool", strconv.FormatBool(item))
					}
					for _, item := range req.GetRepInt32() {
						queries.Add("rep_int32", strconv.FormatInt(int64(item), 10))
					}
					for _, item := range req.GetRepSint32() {
						queries.Add("rep_sint32", strconv.FormatInt(int64(item), 10))
					}
					for _, item := range req.GetRepUint32() {
						queries.Add("rep_uint32", strconv.FormatUint(uint64(item), 10))
					}
					for _, item := range req.GetRepInt64() {
						queries.Add("rep_int64", strconv.FormatInt(item, 10))
					}
					for _, item := range req.GetRepSint64() {
						queries.Add("rep_sint64", strconv.FormatInt(item, 10))
					}
					for _, item := range req.GetRepUint64() {
						queries.Add("rep_uint64", strconv.FormatUint(item, 10))
					}
					for _, item := range req.GetRepSfixed32() {
						queries.Add("rep_sfixed32", strconv.FormatInt(int64(item), 10))
					}
					for _, item := range req.GetRepFixed32() {
						queries.Add("rep_fixed32", strconv.FormatUint(uint64(item), 10))
					}
					for _, item := range req.GetRepFloat() {
						queries.Add("rep_float", strconv.FormatFloat(float64(item), 'f', -1, 32))
					}
					for _, item := range req.GetRepSfixed64() {
						queries.Add("rep_sfixed64", strconv.FormatInt(item, 10))
					}
					for _, item := range req.GetRepFixed64() {
						queries.Add("rep_fixed64", strconv.FormatUint(item, 10))
					}
					for _, item := range req.GetRepDouble() {
						queries.Add("rep_double", strconv.FormatFloat(item, 'f', -1, 64))
					}
					for _, item := range req.GetRepString() {
						queries.Add("rep_string", item)
					}
					queries.Add("wrap_double", strconv.FormatFloat(req.GetWrapDouble().GetValue(), 'f', -1, 64))
					queries.Add("wrap_float", strconv.FormatFloat(float64(req.GetWrapFloat().GetValue()), 'f', -1, 32))
					queries.Add("wrap_int64", strconv.FormatInt(req.GetWrapInt64().GetValue(), 10))
					queries.Add("wrap_uint64", strconv.FormatUint(req.GetWrapUint64().GetValue(), 10))
					queries.Add("wrap_int32", strconv.FormatInt(int64(req.GetWrapInt32().GetValue()), 10))
					queries.Add("wrap_uint32", strconv.FormatUint(uint64(req.GetWrapUint32().GetValue()), 10))
					queries.Add("wrap_bool", strconv.FormatBool(req.GetWrapBool().GetValue()))
					queries.Add("wrap_string", req.GetWrapString().GetValue())
					queries.Add("opt_wrap_double", strconv.FormatFloat(req.GetOptWrapDouble().GetValue(), 'f', -1, 64))
					queries.Add("opt_wrap_float", strconv.FormatFloat(float64(req.GetOptWrapFloat().GetValue()), 'f', -1, 32))
					queries.Add("opt_wrap_int64", strconv.FormatInt(req.GetOptWrapInt64().GetValue(), 10))
					queries.Add("opt_wrap_uint64", strconv.FormatUint(req.GetOptWrapUint64().GetValue(), 10))
					queries.Add("opt_wrap_int32", strconv.FormatInt(int64(req.GetOptWrapInt32().GetValue()), 10))
					queries.Add("opt_wrap_uint32", strconv.FormatUint(uint64(req.GetOptWrapUint32().GetValue()), 10))
					queries.Add("opt_wrap_bool", strconv.FormatBool(req.GetOptWrapBool().GetValue()))
					queries.Add("opt_wrap_string", req.GetOptWrapString().GetValue())
					for _, item := range req.GetRepWrapDouble() {
						queries.Add("rep_wrap_double", strconv.FormatFloat(item.GetValue(), 'f', -1, 64))
					}
					for _, item := range req.GetRepWrapFloat() {
						queries.Add("rep_wrap_float", strconv.FormatFloat(float64(item.GetValue()), 'f', -1, 32))
					}
					for _, item := range req.GetRepWrapInt64() {
						queries.Add("rep_wrap_int64", strconv.FormatInt(item.GetValue(), 10))
					}
					for _, item := range req.GetRepWrapUint64() {
						queries.Add("rep_wrap_uint64", strconv.FormatUint(item.GetValue(), 10))
					}
					for _, item := range req.GetRepWrapInt32() {
						queries.Add("rep_wrap_int32", strconv.FormatInt(int64(item.GetValue()), 10))
					}
					for _, item := range req.GetRepWrapUint32() {
						queries.Add("rep_wrap_uint32", strconv.FormatUint(uint64(item.GetValue()), 10))
					}
					for _, item := range req.GetRepWrapBool() {
						queries.Add("rep_wrap_bool", strconv.FormatBool(item.GetValue()))
					}
					for _, item := range req.GetRepWrapString() {
						queries.Add("rep_wrap_string", item.GetValue())
					}
					queries.Add("status", strconv.FormatInt(int64(req.GetStatus()), 10))
					queries.Add("opt_status", strconv.FormatInt(int64(req.GetOptStatus()), 10))
					for _, item := range req.GetRepStatus() {
						queries.Add("rep_status", strconv.FormatInt(int64(item), 10))
					}
					target := &url.URL{
						Scheme:   scheme,
						Host:     instance,
						Path:     path.Path,
						RawQuery: queries.Encode(),
					}
					r, err := http1.NewRequestWithContext(ctx, "GET", target.String(), body)
					if err != nil {
						return nil, err
					}
					return r, nil
				},
				func(ctx context.Context, r *http1.Response) (interface{}, error) {
					return nil, nil
				},
				opts...,
			).Endpoint(),
			mdw...),
	}
}
