// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.24.3
// source: api/body/body.proto

package body

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	_ "google.golang.org/genproto/googleapis/api/httpbody"
	_ "google.golang.org/genproto/googleapis/rpc/http"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type BodyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bool        bool                    `protobuf:"varint,2,opt,name=bool,proto3" json:"bool,omitempty"`
	Int32       int32                   `protobuf:"varint,3,opt,name=int32,proto3" json:"int32,omitempty"`
	Sint32      int32                   `protobuf:"zigzag32,4,opt,name=sint32,proto3" json:"sint32,omitempty"`
	Uint32      uint32                  `protobuf:"varint,6,opt,name=uint32,proto3" json:"uint32,omitempty"`
	Int64       int64                   `protobuf:"varint,7,opt,name=int64,proto3" json:"int64,omitempty"`
	Sint64      int64                   `protobuf:"zigzag64,8,opt,name=sint64,proto3" json:"sint64,omitempty"`
	Uint64      uint64                  `protobuf:"varint,9,opt,name=uint64,proto3" json:"uint64,omitempty"`
	Sfixed32    int32                   `protobuf:"fixed32,10,opt,name=sfixed32,proto3" json:"sfixed32,omitempty"`
	Fixed32     uint32                  `protobuf:"fixed32,11,opt,name=fixed32,proto3" json:"fixed32,omitempty"`
	Float       float32                 `protobuf:"fixed32,12,opt,name=float,proto3" json:"float,omitempty"`
	Sfixed64    int64                   `protobuf:"fixed64,13,opt,name=sfixed64,proto3" json:"sfixed64,omitempty"`
	Fixed64     uint64                  `protobuf:"fixed64,14,opt,name=fixed64,proto3" json:"fixed64,omitempty"`
	Double      float64                 `protobuf:"fixed64,15,opt,name=double,proto3" json:"double,omitempty"`
	String_     string                  `protobuf:"bytes,16,opt,name=string,proto3" json:"string,omitempty"`
	Bytes       []byte                  `protobuf:"bytes,17,opt,name=bytes,proto3" json:"bytes,omitempty"`
	OptBool     *bool                   `protobuf:"varint,22,opt,name=opt_bool,json=optBool,proto3,oneof" json:"opt_bool,omitempty"`
	OptInt32    *int32                  `protobuf:"varint,23,opt,name=opt_int32,json=optInt32,proto3,oneof" json:"opt_int32,omitempty"`
	OptSint32   *int32                  `protobuf:"zigzag32,24,opt,name=opt_sint32,json=optSint32,proto3,oneof" json:"opt_sint32,omitempty"`
	OptUint32   *uint32                 `protobuf:"varint,26,opt,name=opt_uint32,json=optUint32,proto3,oneof" json:"opt_uint32,omitempty"`
	OptInt64    *int64                  `protobuf:"varint,27,opt,name=opt_int64,json=optInt64,proto3,oneof" json:"opt_int64,omitempty"`
	OptSint64   *int64                  `protobuf:"zigzag64,28,opt,name=opt_sint64,json=optSint64,proto3,oneof" json:"opt_sint64,omitempty"`
	OptUint64   *uint64                 `protobuf:"varint,29,opt,name=opt_uint64,json=optUint64,proto3,oneof" json:"opt_uint64,omitempty"`
	OptSfixed32 *int32                  `protobuf:"fixed32,30,opt,name=opt_sfixed32,json=optSfixed32,proto3,oneof" json:"opt_sfixed32,omitempty"`
	OptFixed32  *uint32                 `protobuf:"fixed32,31,opt,name=opt_fixed32,json=optFixed32,proto3,oneof" json:"opt_fixed32,omitempty"`
	OptFloat    *float32                `protobuf:"fixed32,32,opt,name=opt_float,json=optFloat,proto3,oneof" json:"opt_float,omitempty"`
	OptSfixed64 *int64                  `protobuf:"fixed64,33,opt,name=opt_sfixed64,json=optSfixed64,proto3,oneof" json:"opt_sfixed64,omitempty"`
	OptFixed64  *uint64                 `protobuf:"fixed64,34,opt,name=opt_fixed64,json=optFixed64,proto3,oneof" json:"opt_fixed64,omitempty"`
	OptDouble   *float64                `protobuf:"fixed64,35,opt,name=opt_double,json=optDouble,proto3,oneof" json:"opt_double,omitempty"`
	OptString   *string                 `protobuf:"bytes,36,opt,name=opt_string,json=optString,proto3,oneof" json:"opt_string,omitempty"`
	OptBytes    []byte                  `protobuf:"bytes,37,opt,name=opt_bytes,json=optBytes,proto3,oneof" json:"opt_bytes,omitempty"`
	WrapDouble  *wrapperspb.DoubleValue `protobuf:"bytes,42,opt,name=wrap_double,json=wrapDouble,proto3" json:"wrap_double,omitempty"`
	WrapFloat   *wrapperspb.FloatValue  `protobuf:"bytes,43,opt,name=wrap_float,json=wrapFloat,proto3" json:"wrap_float,omitempty"`
	WrapInt64   *wrapperspb.Int64Value  `protobuf:"bytes,44,opt,name=wrap_int64,json=wrapInt64,proto3" json:"wrap_int64,omitempty"`
	WrapUint64  *wrapperspb.UInt64Value `protobuf:"bytes,45,opt,name=wrap_uint64,json=wrapUint64,proto3" json:"wrap_uint64,omitempty"`
	WrapInt32   *wrapperspb.Int32Value  `protobuf:"bytes,46,opt,name=wrap_int32,json=wrapInt32,proto3" json:"wrap_int32,omitempty"`
	WrapUint32  *wrapperspb.UInt32Value `protobuf:"bytes,47,opt,name=wrap_uint32,json=wrapUint32,proto3" json:"wrap_uint32,omitempty"`
	WrapBool    *wrapperspb.BoolValue   `protobuf:"bytes,48,opt,name=wrap_bool,json=wrapBool,proto3" json:"wrap_bool,omitempty"`
	WrapString  *wrapperspb.StringValue `protobuf:"bytes,49,opt,name=wrap_string,json=wrapString,proto3" json:"wrap_string,omitempty"`
	WrapBytes   *wrapperspb.BytesValue  `protobuf:"bytes,50,opt,name=wrap_bytes,json=wrapBytes,proto3" json:"wrap_bytes,omitempty"`
	RepBool     []bool                  `protobuf:"varint,52,rep,packed,name=rep_bool,json=repBool,proto3" json:"rep_bool,omitempty"`
	RepInt32    []int32                 `protobuf:"varint,53,rep,packed,name=rep_int32,json=repInt32,proto3" json:"rep_int32,omitempty"`
	RepSint32   []int32                 `protobuf:"zigzag32,54,rep,packed,name=rep_sint32,json=repSint32,proto3" json:"rep_sint32,omitempty"`
	RepUint32   []uint32                `protobuf:"varint,56,rep,packed,name=rep_uint32,json=repUint32,proto3" json:"rep_uint32,omitempty"`
	RepInt64    []int64                 `protobuf:"varint,57,rep,packed,name=rep_int64,json=repInt64,proto3" json:"rep_int64,omitempty"`
	RepSint64   []int64                 `protobuf:"zigzag64,58,rep,packed,name=rep_sint64,json=repSint64,proto3" json:"rep_sint64,omitempty"`
	RepUint64   []uint64                `protobuf:"varint,59,rep,packed,name=rep_uint64,json=repUint64,proto3" json:"rep_uint64,omitempty"`
	RepSfixed32 []int32                 `protobuf:"fixed32,60,rep,packed,name=rep_sfixed32,json=repSfixed32,proto3" json:"rep_sfixed32,omitempty"`
	RepFixed32  []uint32                `protobuf:"fixed32,61,rep,packed,name=rep_fixed32,json=repFixed32,proto3" json:"rep_fixed32,omitempty"`
	RepFloat    []float32               `protobuf:"fixed32,62,rep,packed,name=rep_float,json=repFloat,proto3" json:"rep_float,omitempty"`
	RepSfixed64 []int64                 `protobuf:"fixed64,63,rep,packed,name=rep_sfixed64,json=repSfixed64,proto3" json:"rep_sfixed64,omitempty"`
	RepFixed64  []uint64                `protobuf:"fixed64,64,rep,packed,name=rep_fixed64,json=repFixed64,proto3" json:"rep_fixed64,omitempty"`
	RepDouble   []float64               `protobuf:"fixed64,65,rep,packed,name=rep_double,json=repDouble,proto3" json:"rep_double,omitempty"`
	RepString   []string                `protobuf:"bytes,66,rep,name=rep_string,json=repString,proto3" json:"rep_string,omitempty"`
	RepBytes    [][]byte                `protobuf:"bytes,67,rep,name=rep_bytes,json=repBytes,proto3" json:"rep_bytes,omitempty"`
}

func (x *BodyRequest) Reset() {
	*x = BodyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_body_body_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BodyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BodyRequest) ProtoMessage() {}

func (x *BodyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_body_body_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BodyRequest.ProtoReflect.Descriptor instead.
func (*BodyRequest) Descriptor() ([]byte, []int) {
	return file_api_body_body_proto_rawDescGZIP(), []int{0}
}

func (x *BodyRequest) GetBool() bool {
	if x != nil {
		return x.Bool
	}
	return false
}

func (x *BodyRequest) GetInt32() int32 {
	if x != nil {
		return x.Int32
	}
	return 0
}

func (x *BodyRequest) GetSint32() int32 {
	if x != nil {
		return x.Sint32
	}
	return 0
}

func (x *BodyRequest) GetUint32() uint32 {
	if x != nil {
		return x.Uint32
	}
	return 0
}

func (x *BodyRequest) GetInt64() int64 {
	if x != nil {
		return x.Int64
	}
	return 0
}

func (x *BodyRequest) GetSint64() int64 {
	if x != nil {
		return x.Sint64
	}
	return 0
}

func (x *BodyRequest) GetUint64() uint64 {
	if x != nil {
		return x.Uint64
	}
	return 0
}

func (x *BodyRequest) GetSfixed32() int32 {
	if x != nil {
		return x.Sfixed32
	}
	return 0
}

func (x *BodyRequest) GetFixed32() uint32 {
	if x != nil {
		return x.Fixed32
	}
	return 0
}

func (x *BodyRequest) GetFloat() float32 {
	if x != nil {
		return x.Float
	}
	return 0
}

func (x *BodyRequest) GetSfixed64() int64 {
	if x != nil {
		return x.Sfixed64
	}
	return 0
}

func (x *BodyRequest) GetFixed64() uint64 {
	if x != nil {
		return x.Fixed64
	}
	return 0
}

func (x *BodyRequest) GetDouble() float64 {
	if x != nil {
		return x.Double
	}
	return 0
}

func (x *BodyRequest) GetString_() string {
	if x != nil {
		return x.String_
	}
	return ""
}

func (x *BodyRequest) GetBytes() []byte {
	if x != nil {
		return x.Bytes
	}
	return nil
}

func (x *BodyRequest) GetOptBool() bool {
	if x != nil && x.OptBool != nil {
		return *x.OptBool
	}
	return false
}

func (x *BodyRequest) GetOptInt32() int32 {
	if x != nil && x.OptInt32 != nil {
		return *x.OptInt32
	}
	return 0
}

func (x *BodyRequest) GetOptSint32() int32 {
	if x != nil && x.OptSint32 != nil {
		return *x.OptSint32
	}
	return 0
}

func (x *BodyRequest) GetOptUint32() uint32 {
	if x != nil && x.OptUint32 != nil {
		return *x.OptUint32
	}
	return 0
}

func (x *BodyRequest) GetOptInt64() int64 {
	if x != nil && x.OptInt64 != nil {
		return *x.OptInt64
	}
	return 0
}

func (x *BodyRequest) GetOptSint64() int64 {
	if x != nil && x.OptSint64 != nil {
		return *x.OptSint64
	}
	return 0
}

func (x *BodyRequest) GetOptUint64() uint64 {
	if x != nil && x.OptUint64 != nil {
		return *x.OptUint64
	}
	return 0
}

func (x *BodyRequest) GetOptSfixed32() int32 {
	if x != nil && x.OptSfixed32 != nil {
		return *x.OptSfixed32
	}
	return 0
}

func (x *BodyRequest) GetOptFixed32() uint32 {
	if x != nil && x.OptFixed32 != nil {
		return *x.OptFixed32
	}
	return 0
}

func (x *BodyRequest) GetOptFloat() float32 {
	if x != nil && x.OptFloat != nil {
		return *x.OptFloat
	}
	return 0
}

func (x *BodyRequest) GetOptSfixed64() int64 {
	if x != nil && x.OptSfixed64 != nil {
		return *x.OptSfixed64
	}
	return 0
}

func (x *BodyRequest) GetOptFixed64() uint64 {
	if x != nil && x.OptFixed64 != nil {
		return *x.OptFixed64
	}
	return 0
}

func (x *BodyRequest) GetOptDouble() float64 {
	if x != nil && x.OptDouble != nil {
		return *x.OptDouble
	}
	return 0
}

func (x *BodyRequest) GetOptString() string {
	if x != nil && x.OptString != nil {
		return *x.OptString
	}
	return ""
}

func (x *BodyRequest) GetOptBytes() []byte {
	if x != nil {
		return x.OptBytes
	}
	return nil
}

func (x *BodyRequest) GetWrapDouble() *wrapperspb.DoubleValue {
	if x != nil {
		return x.WrapDouble
	}
	return nil
}

func (x *BodyRequest) GetWrapFloat() *wrapperspb.FloatValue {
	if x != nil {
		return x.WrapFloat
	}
	return nil
}

func (x *BodyRequest) GetWrapInt64() *wrapperspb.Int64Value {
	if x != nil {
		return x.WrapInt64
	}
	return nil
}

func (x *BodyRequest) GetWrapUint64() *wrapperspb.UInt64Value {
	if x != nil {
		return x.WrapUint64
	}
	return nil
}

func (x *BodyRequest) GetWrapInt32() *wrapperspb.Int32Value {
	if x != nil {
		return x.WrapInt32
	}
	return nil
}

func (x *BodyRequest) GetWrapUint32() *wrapperspb.UInt32Value {
	if x != nil {
		return x.WrapUint32
	}
	return nil
}

func (x *BodyRequest) GetWrapBool() *wrapperspb.BoolValue {
	if x != nil {
		return x.WrapBool
	}
	return nil
}

func (x *BodyRequest) GetWrapString() *wrapperspb.StringValue {
	if x != nil {
		return x.WrapString
	}
	return nil
}

func (x *BodyRequest) GetWrapBytes() *wrapperspb.BytesValue {
	if x != nil {
		return x.WrapBytes
	}
	return nil
}

func (x *BodyRequest) GetRepBool() []bool {
	if x != nil {
		return x.RepBool
	}
	return nil
}

func (x *BodyRequest) GetRepInt32() []int32 {
	if x != nil {
		return x.RepInt32
	}
	return nil
}

func (x *BodyRequest) GetRepSint32() []int32 {
	if x != nil {
		return x.RepSint32
	}
	return nil
}

func (x *BodyRequest) GetRepUint32() []uint32 {
	if x != nil {
		return x.RepUint32
	}
	return nil
}

func (x *BodyRequest) GetRepInt64() []int64 {
	if x != nil {
		return x.RepInt64
	}
	return nil
}

func (x *BodyRequest) GetRepSint64() []int64 {
	if x != nil {
		return x.RepSint64
	}
	return nil
}

func (x *BodyRequest) GetRepUint64() []uint64 {
	if x != nil {
		return x.RepUint64
	}
	return nil
}

func (x *BodyRequest) GetRepSfixed32() []int32 {
	if x != nil {
		return x.RepSfixed32
	}
	return nil
}

func (x *BodyRequest) GetRepFixed32() []uint32 {
	if x != nil {
		return x.RepFixed32
	}
	return nil
}

func (x *BodyRequest) GetRepFloat() []float32 {
	if x != nil {
		return x.RepFloat
	}
	return nil
}

func (x *BodyRequest) GetRepSfixed64() []int64 {
	if x != nil {
		return x.RepSfixed64
	}
	return nil
}

func (x *BodyRequest) GetRepFixed64() []uint64 {
	if x != nil {
		return x.RepFixed64
	}
	return nil
}

func (x *BodyRequest) GetRepDouble() []float64 {
	if x != nil {
		return x.RepDouble
	}
	return nil
}

func (x *BodyRequest) GetRepString() []string {
	if x != nil {
		return x.RepString
	}
	return nil
}

func (x *BodyRequest) GetRepBytes() [][]byte {
	if x != nil {
		return x.RepBytes
	}
	return nil
}

var File_api_body_body_proto protoreflect.FileDescriptor

var file_api_body_body_proto_rawDesc = []byte{
	0x0a, 0x13, 0x61, 0x70, 0x69, 0x2f, 0x62, 0x6f, 0x64, 0x79, 0x2f, 0x62, 0x6f, 0x64, 0x79, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x13, 0x6c, 0x65, 0x6f, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x2e, 0x64, 0x65, 0x6d, 0x6f, 0x2e, 0x76, 0x31, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74,
	0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x68, 0x74, 0x74, 0x70, 0x62, 0x6f, 0x64, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x15, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x72, 0x70, 0x63, 0x2f, 0x68, 0x74, 0x74,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe8, 0x10, 0x0a, 0x0b, 0x42, 0x6f, 0x64, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x6f, 0x6f, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x62, 0x6f, 0x6f, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x69,
	0x6e, 0x74, 0x33, 0x32, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69, 0x6e, 0x74, 0x33,
	0x32, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x11, 0x52, 0x06, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x69, 0x6e,
	0x74, 0x33, 0x32, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x75, 0x69, 0x6e, 0x74, 0x33,
	0x32, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x69, 0x6e, 0x74, 0x36,
	0x34, 0x18, 0x08, 0x20, 0x01, 0x28, 0x12, 0x52, 0x06, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12,
	0x16, 0x0a, 0x06, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x06, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x66, 0x69, 0x78, 0x65,
	0x64, 0x33, 0x32, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0f, 0x52, 0x08, 0x73, 0x66, 0x69, 0x78, 0x65,
	0x64, 0x33, 0x32, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x07, 0x52, 0x07, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x12, 0x14, 0x0a,
	0x05, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x66, 0x6c,
	0x6f, 0x61, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x10, 0x52, 0x08, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x12,
	0x18, 0x0a, 0x07, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x06,
	0x52, 0x07, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x75,
	0x62, 0x6c, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x64, 0x6f, 0x75, 0x62, 0x6c,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x12,
	0x1e, 0x0a, 0x08, 0x6f, 0x70, 0x74, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x18, 0x16, 0x20, 0x01, 0x28,
	0x08, 0x48, 0x00, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x42, 0x6f, 0x6f, 0x6c, 0x88, 0x01, 0x01, 0x12,
	0x20, 0x0a, 0x09, 0x6f, 0x70, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x17, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x01, 0x52, 0x08, 0x6f, 0x70, 0x74, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x88, 0x01,
	0x01, 0x12, 0x22, 0x0a, 0x0a, 0x6f, 0x70, 0x74, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18,
	0x18, 0x20, 0x01, 0x28, 0x11, 0x48, 0x02, 0x52, 0x09, 0x6f, 0x70, 0x74, 0x53, 0x69, 0x6e, 0x74,
	0x33, 0x32, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x6f, 0x70, 0x74, 0x5f, 0x75, 0x69, 0x6e,
	0x74, 0x33, 0x32, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x03, 0x52, 0x09, 0x6f, 0x70, 0x74,
	0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x6f, 0x70, 0x74,
	0x5f, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x03, 0x48, 0x04, 0x52, 0x08,
	0x6f, 0x70, 0x74, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x6f,
	0x70, 0x74, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x12, 0x48,
	0x05, 0x52, 0x09, 0x6f, 0x70, 0x74, 0x53, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x88, 0x01, 0x01, 0x12,
	0x22, 0x0a, 0x0a, 0x6f, 0x70, 0x74, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x1d, 0x20,
	0x01, 0x28, 0x04, 0x48, 0x06, 0x52, 0x09, 0x6f, 0x70, 0x74, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34,
	0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x6f, 0x70, 0x74, 0x5f, 0x73, 0x66, 0x69, 0x78, 0x65,
	0x64, 0x33, 0x32, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0f, 0x48, 0x07, 0x52, 0x0b, 0x6f, 0x70, 0x74,
	0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x6f,
	0x70, 0x74, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x07,
	0x48, 0x08, 0x52, 0x0a, 0x6f, 0x70, 0x74, 0x46, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x88, 0x01,
	0x01, 0x12, 0x20, 0x0a, 0x09, 0x6f, 0x70, 0x74, 0x5f, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x18, 0x20,
	0x20, 0x01, 0x28, 0x02, 0x48, 0x09, 0x52, 0x08, 0x6f, 0x70, 0x74, 0x46, 0x6c, 0x6f, 0x61, 0x74,
	0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x6f, 0x70, 0x74, 0x5f, 0x73, 0x66, 0x69, 0x78, 0x65,
	0x64, 0x36, 0x34, 0x18, 0x21, 0x20, 0x01, 0x28, 0x10, 0x48, 0x0a, 0x52, 0x0b, 0x6f, 0x70, 0x74,
	0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x6f,
	0x70, 0x74, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x18, 0x22, 0x20, 0x01, 0x28, 0x06,
	0x48, 0x0b, 0x52, 0x0a, 0x6f, 0x70, 0x74, 0x46, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x88, 0x01,
	0x01, 0x12, 0x22, 0x0a, 0x0a, 0x6f, 0x70, 0x74, 0x5f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x18,
	0x23, 0x20, 0x01, 0x28, 0x01, 0x48, 0x0c, 0x52, 0x09, 0x6f, 0x70, 0x74, 0x44, 0x6f, 0x75, 0x62,
	0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x6f, 0x70, 0x74, 0x5f, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x18, 0x24, 0x20, 0x01, 0x28, 0x09, 0x48, 0x0d, 0x52, 0x09, 0x6f, 0x70, 0x74,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x6f, 0x70, 0x74,
	0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x25, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x0e, 0x52, 0x08,
	0x6f, 0x70, 0x74, 0x42, 0x79, 0x74, 0x65, 0x73, 0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a, 0x0b, 0x77,
	0x72, 0x61, 0x70, 0x5f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a,
	0x77, 0x72, 0x61, 0x70, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x12, 0x3a, 0x0a, 0x0a, 0x77, 0x72,
	0x61, 0x70, 0x5f, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x77, 0x72, 0x61,
	0x70, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x12, 0x3a, 0x0a, 0x0a, 0x77, 0x72, 0x61, 0x70, 0x5f, 0x69,
	0x6e, 0x74, 0x36, 0x34, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74,
	0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x77, 0x72, 0x61, 0x70, 0x49, 0x6e, 0x74,
	0x36, 0x34, 0x12, 0x3d, 0x0a, 0x0b, 0x77, 0x72, 0x61, 0x70, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36,
	0x34, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x77, 0x72, 0x61, 0x70, 0x55, 0x69, 0x6e, 0x74, 0x36,
	0x34, 0x12, 0x3a, 0x0a, 0x0a, 0x77, 0x72, 0x61, 0x70, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18,
	0x2e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x09, 0x77, 0x72, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x3d, 0x0a,
	0x0b, 0x77, 0x72, 0x61, 0x70, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x2f, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x0a, 0x77, 0x72, 0x61, 0x70, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x37, 0x0a, 0x09,
	0x77, 0x72, 0x61, 0x70, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x18, 0x30, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x77, 0x72, 0x61,
	0x70, 0x42, 0x6f, 0x6f, 0x6c, 0x12, 0x3d, 0x0a, 0x0b, 0x77, 0x72, 0x61, 0x70, 0x5f, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x18, 0x31, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x77, 0x72, 0x61, 0x70, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x12, 0x3a, 0x0a, 0x0a, 0x77, 0x72, 0x61, 0x70, 0x5f, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x79, 0x74, 0x65, 0x73,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x77, 0x72, 0x61, 0x70, 0x42, 0x79, 0x74, 0x65, 0x73,
	0x12, 0x19, 0x0a, 0x08, 0x72, 0x65, 0x70, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x18, 0x34, 0x20, 0x03,
	0x28, 0x08, 0x52, 0x07, 0x72, 0x65, 0x70, 0x42, 0x6f, 0x6f, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x72,
	0x65, 0x70, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x35, 0x20, 0x03, 0x28, 0x05, 0x52, 0x08,
	0x72, 0x65, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x5f,
	0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x36, 0x20, 0x03, 0x28, 0x11, 0x52, 0x09, 0x72, 0x65,
	0x70, 0x53, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x5f, 0x75,
	0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x38, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x09, 0x72, 0x65, 0x70,
	0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x70, 0x5f, 0x69, 0x6e,
	0x74, 0x36, 0x34, 0x18, 0x39, 0x20, 0x03, 0x28, 0x03, 0x52, 0x08, 0x72, 0x65, 0x70, 0x49, 0x6e,
	0x74, 0x36, 0x34, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x36,
	0x34, 0x18, 0x3a, 0x20, 0x03, 0x28, 0x12, 0x52, 0x09, 0x72, 0x65, 0x70, 0x53, 0x69, 0x6e, 0x74,
	0x36, 0x34, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34,
	0x18, 0x3b, 0x20, 0x03, 0x28, 0x04, 0x52, 0x09, 0x72, 0x65, 0x70, 0x55, 0x69, 0x6e, 0x74, 0x36,
	0x34, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x70, 0x5f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33,
	0x32, 0x18, 0x3c, 0x20, 0x03, 0x28, 0x0f, 0x52, 0x0b, 0x72, 0x65, 0x70, 0x53, 0x66, 0x69, 0x78,
	0x65, 0x64, 0x33, 0x32, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x70, 0x5f, 0x66, 0x69, 0x78, 0x65,
	0x64, 0x33, 0x32, 0x18, 0x3d, 0x20, 0x03, 0x28, 0x07, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x46, 0x69,
	0x78, 0x65, 0x64, 0x33, 0x32, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x70, 0x5f, 0x66, 0x6c, 0x6f,
	0x61, 0x74, 0x18, 0x3e, 0x20, 0x03, 0x28, 0x02, 0x52, 0x08, 0x72, 0x65, 0x70, 0x46, 0x6c, 0x6f,
	0x61, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x70, 0x5f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64,
	0x36, 0x34, 0x18, 0x3f, 0x20, 0x03, 0x28, 0x10, 0x52, 0x0b, 0x72, 0x65, 0x70, 0x53, 0x66, 0x69,
	0x78, 0x65, 0x64, 0x36, 0x34, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x65, 0x70, 0x5f, 0x66, 0x69, 0x78,
	0x65, 0x64, 0x36, 0x34, 0x18, 0x40, 0x20, 0x03, 0x28, 0x06, 0x52, 0x0a, 0x72, 0x65, 0x70, 0x46,
	0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x5f, 0x64, 0x6f,
	0x75, 0x62, 0x6c, 0x65, 0x18, 0x41, 0x20, 0x03, 0x28, 0x01, 0x52, 0x09, 0x72, 0x65, 0x70, 0x44,
	0x6f, 0x75, 0x62, 0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x72, 0x65, 0x70, 0x5f, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x18, 0x42, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x70, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65, 0x70, 0x5f, 0x62, 0x79, 0x74, 0x65,
	0x73, 0x18, 0x43, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x08, 0x72, 0x65, 0x70, 0x42, 0x79, 0x74, 0x65,
	0x73, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6f, 0x70, 0x74, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x42, 0x0c,
	0x0a, 0x0a, 0x5f, 0x6f, 0x70, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x42, 0x0d, 0x0a, 0x0b,
	0x5f, 0x6f, 0x70, 0x74, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x42, 0x0d, 0x0a, 0x0b, 0x5f,
	0x6f, 0x70, 0x74, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6f,
	0x70, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6f, 0x70, 0x74,
	0x5f, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6f, 0x70, 0x74, 0x5f,
	0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6f, 0x70, 0x74, 0x5f, 0x73,
	0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6f, 0x70, 0x74, 0x5f,
	0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6f, 0x70, 0x74, 0x5f,
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6f, 0x70, 0x74, 0x5f, 0x73, 0x66,
	0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6f, 0x70, 0x74, 0x5f, 0x66,
	0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6f, 0x70, 0x74, 0x5f, 0x64,
	0x6f, 0x75, 0x62, 0x6c, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6f, 0x70, 0x74, 0x5f, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6f, 0x70, 0x74, 0x5f, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x32, 0x8a, 0x27, 0x0a, 0x04, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x58, 0x0a, 0x04, 0x42,
	0x6f, 0x6f, 0x6c, 0x12, 0x20, 0x2e, 0x6c, 0x65, 0x6f, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x2e, 0x64, 0x65, 0x6d, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x16, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x10, 0x3a, 0x04, 0x62, 0x6f, 0x6f, 0x6c, 0x1a, 0x08, 0x2f, 0x76, 0x31,
	0x2f, 0x62, 0x6f, 0x6f, 0x6c, 0x12, 0x63, 0x0a, 0x07, 0x4f, 0x70, 0x74, 0x42, 0x6f, 0x6f, 0x6c,
	0x12, 0x20, 0x2e, 0x6c, 0x65, 0x6f, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x64,
	0x65, 0x6d, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x1e, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x18, 0x3a, 0x08, 0x6f, 0x70, 0x74, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x1a, 0x0c, 0x2f, 0x76,
	0x31, 0x2f, 0x6f, 0x70, 0x74, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x12, 0x63, 0x0a, 0x07, 0x52, 0x65,
	0x70, 0x42, 0x6f, 0x6f, 0x6c, 0x12, 0x20, 0x2e, 0x6c, 0x65, 0x6f, 0x2e, 0x65, 0x78, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x2e, 0x64, 0x65, 0x6d, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6f, 0x64, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x1e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x3a, 0x08, 0x72, 0x65, 0x70, 0x5f, 0x62, 0x6f, 0x6f,
	0x6c, 0x1a, 0x0c, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x70, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x12,
	0x66, 0x0a, 0x08, 0x57, 0x72, 0x61, 0x70, 0x42, 0x6f, 0x6f, 0x6c, 0x12, 0x20, 0x2e, 0x6c, 0x65,
	0x6f, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x64, 0x65, 0x6d, 0x6f, 0x2e, 0x76,
	0x31, 0x2e, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x20, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x3a, 0x09, 0x77,
	0x72, 0x61, 0x70, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x1a, 0x0d, 0x2f, 0x76, 0x31, 0x2f, 0x77, 0x72,
	0x61, 0x70, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x12, 0x5b, 0x0a, 0x05, 0x49, 0x6e, 0x74, 0x33, 0x32,
	0x12, 0x20, 0x2e, 0x6c, 0x65, 0x6f, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x64,
	0x65, 0x6d, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x18, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x12, 0x3a, 0x05, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x1a, 0x09, 0x2f, 0x76, 0x31, 0x2f, 0x69,
	0x6e, 0x74, 0x33, 0x32, 0x12, 0x66, 0x0a, 0x08, 0x4f, 0x70, 0x74, 0x49, 0x6e, 0x74, 0x33, 0x32,
	0x12, 0x20, 0x2e, 0x6c, 0x65, 0x6f, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x64,
	0x65, 0x6d, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x20, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x1a, 0x3a, 0x09, 0x6f, 0x70, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x1a, 0x0d, 0x2f,
	0x76, 0x31, 0x2f, 0x6f, 0x70, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x66, 0x0a, 0x08,
	0x52, 0x65, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x20, 0x2e, 0x6c, 0x65, 0x6f, 0x2e, 0x65,
	0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x64, 0x65, 0x6d, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x42,
	0x6f, 0x64, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x20, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x3a, 0x09, 0x72, 0x65, 0x70, 0x5f,
	0x69, 0x6e, 0x74, 0x33, 0x32, 0x1a, 0x0d, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x70, 0x5f, 0x69,
	0x6e, 0x74, 0x33, 0x32, 0x12, 0x69, 0x0a, 0x09, 0x57, 0x72, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33,
	0x32, 0x12, 0x20, 0x2e, 0x6c, 0x65, 0x6f, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e,
	0x64, 0x65, 0x6d, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x22, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x1c, 0x3a, 0x0a, 0x77, 0x72, 0x61, 0x70, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x1a,
	0x0e, 0x2f, 0x76, 0x31, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12,
	0x5e, 0x0a, 0x06, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x20, 0x2e, 0x6c, 0x65, 0x6f, 0x2e,
	0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x64, 0x65, 0x6d, 0x6f, 0x2e, 0x76, 0x31, 0x2e,
	0x42, 0x6f, 0x64, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x1a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14, 0x3a, 0x06, 0x75, 0x69, 0x6e,
	0x74, 0x33, 0x32, 0x1a, 0x0a, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12,
	0x69, 0x0a, 0x09, 0x4f, 0x70, 0x74, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x20, 0x2e, 0x6c,
	0x65, 0x6f, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x64, 0x65, 0x6d, 0x6f, 0x2e,
	0x76, 0x31, 0x2e, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x3a, 0x0a,
	0x6f, 0x70, 0x74, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x1a, 0x0e, 0x2f, 0x76, 0x31, 0x2f,
	0x6f, 0x70, 0x74, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x69, 0x0a, 0x09, 0x52, 0x65,
	0x70, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x20, 0x2e, 0x6c, 0x65, 0x6f, 0x2e, 0x65, 0x78,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x64, 0x65, 0x6d, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6f,
	0x64, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x3a, 0x0a, 0x72, 0x65, 0x70, 0x5f, 0x75,
	0x69, 0x6e, 0x74, 0x33, 0x32, 0x1a, 0x0e, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x70, 0x5f, 0x75,
	0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x6c, 0x0a, 0x0a, 0x57, 0x72, 0x61, 0x70, 0x55, 0x69, 0x6e,
	0x74, 0x33, 0x32, 0x12, 0x20, 0x2e, 0x6c, 0x65, 0x6f, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x2e, 0x64, 0x65, 0x6d, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x24, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x3a, 0x0b, 0x77, 0x72, 0x61, 0x70, 0x5f, 0x75, 0x69, 0x6e, 0x74,
	0x33, 0x32, 0x1a, 0x0f, 0x2f, 0x76, 0x31, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x5f, 0x75, 0x69, 0x6e,
	0x74, 0x33, 0x32, 0x12, 0x61, 0x0a, 0x07, 0x46, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x12, 0x20,
	0x2e, 0x6c, 0x65, 0x6f, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x64, 0x65, 0x6d,
	0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x1c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16,
	0x3a, 0x07, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x1a, 0x0b, 0x2f, 0x76, 0x31, 0x2f, 0x66,
	0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x12, 0x6c, 0x0a, 0x0a, 0x4f, 0x70, 0x74, 0x46, 0x69, 0x78,
	0x65, 0x64, 0x33, 0x32, 0x12, 0x20, 0x2e, 0x6c, 0x65, 0x6f, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x2e, 0x64, 0x65, 0x6d, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6f, 0x64, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x24,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x3a, 0x0b, 0x6f, 0x70, 0x74, 0x5f, 0x66, 0x69, 0x78, 0x65,
	0x64, 0x33, 0x32, 0x1a, 0x0f, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x70, 0x74, 0x5f, 0x66, 0x69, 0x78,
	0x65, 0x64, 0x33, 0x32, 0x12, 0x6c, 0x0a, 0x0a, 0x52, 0x65, 0x70, 0x46, 0x69, 0x78, 0x65, 0x64,
	0x33, 0x32, 0x12, 0x20, 0x2e, 0x6c, 0x65, 0x6f, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x2e, 0x64, 0x65, 0x6d, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x24, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x1e, 0x3a, 0x0b, 0x72, 0x65, 0x70, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33,
	0x32, 0x1a, 0x0f, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x70, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64,
	0x33, 0x32, 0x12, 0x5b, 0x0a, 0x05, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x20, 0x2e, 0x6c, 0x65,
	0x6f, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x64, 0x65, 0x6d, 0x6f, 0x2e, 0x76,
	0x31, 0x2e, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x18, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x12, 0x3a, 0x05, 0x69,
	0x6e, 0x74, 0x36, 0x34, 0x1a, 0x09, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12,
	0x66, 0x0a, 0x08, 0x4f, 0x70, 0x74, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x20, 0x2e, 0x6c, 0x65,
	0x6f, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x64, 0x65, 0x6d, 0x6f, 0x2e, 0x76,
	0x31, 0x2e, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x20, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x3a, 0x09, 0x6f,
	0x70, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x1a, 0x0d, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x70,
	0x74, 0x5f, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x66, 0x0a, 0x08, 0x52, 0x65, 0x70, 0x49, 0x6e,
	0x74, 0x36, 0x34, 0x12, 0x20, 0x2e, 0x6c, 0x65, 0x6f, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x2e, 0x64, 0x65, 0x6d, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x20, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x3a, 0x09, 0x72, 0x65, 0x70, 0x5f, 0x69, 0x6e, 0x74, 0x36, 0x34,
	0x1a, 0x0d, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x70, 0x5f, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12,
	0x69, 0x0a, 0x09, 0x57, 0x72, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x20, 0x2e, 0x6c,
	0x65, 0x6f, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x64, 0x65, 0x6d, 0x6f, 0x2e,
	0x76, 0x31, 0x2e, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x3a, 0x0a,
	0x77, 0x72, 0x61, 0x70, 0x5f, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x1a, 0x0e, 0x2f, 0x76, 0x31, 0x2f,
	0x77, 0x72, 0x61, 0x70, 0x5f, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x5e, 0x0a, 0x06, 0x53, 0x69,
	0x6e, 0x74, 0x36, 0x34, 0x12, 0x20, 0x2e, 0x6c, 0x65, 0x6f, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x2e, 0x64, 0x65, 0x6d, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6f, 0x64, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x1a,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14, 0x3a, 0x06, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x1a, 0x0a,
	0x2f, 0x76, 0x31, 0x2f, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x69, 0x0a, 0x09, 0x4f, 0x70,
	0x74, 0x53, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x20, 0x2e, 0x6c, 0x65, 0x6f, 0x2e, 0x65, 0x78,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x64, 0x65, 0x6d, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6f,
	0x64, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x3a, 0x0a, 0x6f, 0x70, 0x74, 0x5f, 0x73,
	0x69, 0x6e, 0x74, 0x36, 0x34, 0x1a, 0x0e, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x70, 0x74, 0x5f, 0x73,
	0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x69, 0x0a, 0x09, 0x52, 0x65, 0x70, 0x53, 0x69, 0x6e, 0x74,
	0x36, 0x34, 0x12, 0x20, 0x2e, 0x6c, 0x65, 0x6f, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x2e, 0x64, 0x65, 0x6d, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x22, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x1c, 0x3a, 0x0a, 0x72, 0x65, 0x70, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34,
	0x1a, 0x0e, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x70, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34,
	0x12, 0x64, 0x0a, 0x08, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x12, 0x20, 0x2e, 0x6c,
	0x65, 0x6f, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x64, 0x65, 0x6d, 0x6f, 0x2e,
	0x76, 0x31, 0x2e, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x1e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x18, 0x3a, 0x08,
	0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x1a, 0x0c, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x66,
	0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x12, 0x6f, 0x0a, 0x0b, 0x4f, 0x70, 0x74, 0x53, 0x66, 0x69,
	0x78, 0x65, 0x64, 0x36, 0x34, 0x12, 0x20, 0x2e, 0x6c, 0x65, 0x6f, 0x2e, 0x65, 0x78, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x2e, 0x64, 0x65, 0x6d, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6f, 0x64, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x26, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x3a, 0x0c, 0x6f, 0x70, 0x74, 0x5f, 0x73, 0x66, 0x69,
	0x78, 0x65, 0x64, 0x36, 0x34, 0x1a, 0x10, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x70, 0x74, 0x5f, 0x73,
	0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x12, 0x6f, 0x0a, 0x0b, 0x52, 0x65, 0x70, 0x53, 0x66,
	0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x12, 0x20, 0x2e, 0x6c, 0x65, 0x6f, 0x2e, 0x65, 0x78, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x64, 0x65, 0x6d, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6f, 0x64,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x26, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x3a, 0x0c, 0x72, 0x65, 0x70, 0x5f, 0x73, 0x66,
	0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x1a, 0x10, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x70, 0x5f,
	0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x12, 0x5e, 0x0a, 0x06, 0x55, 0x69, 0x6e, 0x74,
	0x36, 0x34, 0x12, 0x20, 0x2e, 0x6c, 0x65, 0x6f, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x2e, 0x64, 0x65, 0x6d, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x1a, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x14, 0x3a, 0x06, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x1a, 0x0a, 0x2f, 0x76,
	0x31, 0x2f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x69, 0x0a, 0x09, 0x4f, 0x70, 0x74, 0x55,
	0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x20, 0x2e, 0x6c, 0x65, 0x6f, 0x2e, 0x65, 0x78, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x2e, 0x64, 0x65, 0x6d, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6f, 0x64, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x3a, 0x0a, 0x6f, 0x70, 0x74, 0x5f, 0x75, 0x69, 0x6e,
	0x74, 0x36, 0x34, 0x1a, 0x0e, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x70, 0x74, 0x5f, 0x75, 0x69, 0x6e,
	0x74, 0x36, 0x34, 0x12, 0x69, 0x0a, 0x09, 0x52, 0x65, 0x70, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34,
	0x12, 0x20, 0x2e, 0x6c, 0x65, 0x6f, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x64,
	0x65, 0x6d, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x1c, 0x3a, 0x0a, 0x72, 0x65, 0x70, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x1a, 0x0e,
	0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x70, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x6c,
	0x0a, 0x0a, 0x57, 0x72, 0x61, 0x70, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x20, 0x2e, 0x6c,
	0x65, 0x6f, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x64, 0x65, 0x6d, 0x6f, 0x2e,
	0x76, 0x31, 0x2e, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x24, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x3a, 0x0b,
	0x77, 0x72, 0x61, 0x70, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x1a, 0x0f, 0x2f, 0x76, 0x31,
	0x2f, 0x77, 0x72, 0x61, 0x70, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x61, 0x0a, 0x07,
	0x46, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x12, 0x20, 0x2e, 0x6c, 0x65, 0x6f, 0x2e, 0x65, 0x78,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x64, 0x65, 0x6d, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6f,
	0x64, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x1c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16, 0x3a, 0x07, 0x66, 0x69, 0x78, 0x65, 0x64,
	0x36, 0x34, 0x1a, 0x0b, 0x2f, 0x76, 0x31, 0x2f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x12,
	0x6c, 0x0a, 0x0a, 0x4f, 0x70, 0x74, 0x46, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x12, 0x20, 0x2e,
	0x6c, 0x65, 0x6f, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x64, 0x65, 0x6d, 0x6f,
	0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x24, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x3a,
	0x0b, 0x6f, 0x70, 0x74, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x1a, 0x0f, 0x2f, 0x76,
	0x31, 0x2f, 0x6f, 0x70, 0x74, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x12, 0x6c, 0x0a,
	0x0a, 0x52, 0x65, 0x70, 0x46, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x12, 0x20, 0x2e, 0x6c, 0x65,
	0x6f, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x64, 0x65, 0x6d, 0x6f, 0x2e, 0x76,
	0x31, 0x2e, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x24, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x3a, 0x0b, 0x72,
	0x65, 0x70, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x1a, 0x0f, 0x2f, 0x76, 0x31, 0x2f,
	0x72, 0x65, 0x70, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x12, 0x5d, 0x0a, 0x07, 0x46,
	0x6c, 0x6f, 0x61, 0x74, 0x33, 0x32, 0x12, 0x20, 0x2e, 0x6c, 0x65, 0x6f, 0x2e, 0x65, 0x78, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x64, 0x65, 0x6d, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6f, 0x64,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x18, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x12, 0x3a, 0x05, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x1a,
	0x09, 0x2f, 0x76, 0x31, 0x2f, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x12, 0x68, 0x0a, 0x0a, 0x4f, 0x70,
	0x74, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x32, 0x12, 0x20, 0x2e, 0x6c, 0x65, 0x6f, 0x2e, 0x65,
	0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x64, 0x65, 0x6d, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x42,
	0x6f, 0x64, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x20, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x3a, 0x09, 0x6f, 0x70, 0x74, 0x5f,
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x1a, 0x0d, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x70, 0x74, 0x5f, 0x66,
	0x6c, 0x6f, 0x61, 0x74, 0x12, 0x68, 0x0a, 0x0a, 0x52, 0x65, 0x70, 0x46, 0x6c, 0x6f, 0x61, 0x74,
	0x33, 0x32, 0x12, 0x20, 0x2e, 0x6c, 0x65, 0x6f, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x2e, 0x64, 0x65, 0x6d, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x20, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x1a, 0x3a, 0x09, 0x72, 0x65, 0x70, 0x5f, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x1a,
	0x0d, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x70, 0x5f, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x12, 0x6b,
	0x0a, 0x0b, 0x57, 0x72, 0x61, 0x70, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x32, 0x12, 0x20, 0x2e,
	0x6c, 0x65, 0x6f, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x64, 0x65, 0x6d, 0x6f,
	0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x3a,
	0x0a, 0x77, 0x72, 0x61, 0x70, 0x5f, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x1a, 0x0e, 0x2f, 0x76, 0x31,
	0x2f, 0x77, 0x72, 0x61, 0x70, 0x5f, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x12, 0x5f, 0x0a, 0x07, 0x46,
	0x6c, 0x6f, 0x61, 0x74, 0x36, 0x34, 0x12, 0x20, 0x2e, 0x6c, 0x65, 0x6f, 0x2e, 0x65, 0x78, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x64, 0x65, 0x6d, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6f, 0x64,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x1a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14, 0x3a, 0x06, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65,
	0x1a, 0x0a, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x12, 0x6a, 0x0a, 0x0a,
	0x4f, 0x70, 0x74, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x36, 0x34, 0x12, 0x20, 0x2e, 0x6c, 0x65, 0x6f,
	0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x64, 0x65, 0x6d, 0x6f, 0x2e, 0x76, 0x31,
	0x2e, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x3a, 0x0a, 0x6f, 0x70,
	0x74, 0x5f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x1a, 0x0e, 0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x70,
	0x74, 0x5f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x12, 0x6a, 0x0a, 0x0a, 0x52, 0x65, 0x70, 0x46,
	0x6c, 0x6f, 0x61, 0x74, 0x36, 0x34, 0x12, 0x20, 0x2e, 0x6c, 0x65, 0x6f, 0x2e, 0x65, 0x78, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x64, 0x65, 0x6d, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6f, 0x64,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x3a, 0x0a, 0x72, 0x65, 0x70, 0x5f, 0x64, 0x6f,
	0x75, 0x62, 0x6c, 0x65, 0x1a, 0x0e, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x70, 0x5f, 0x64, 0x6f,
	0x75, 0x62, 0x6c, 0x65, 0x12, 0x6d, 0x0a, 0x0b, 0x57, 0x72, 0x61, 0x70, 0x46, 0x6c, 0x6f, 0x61,
	0x74, 0x36, 0x34, 0x12, 0x20, 0x2e, 0x6c, 0x65, 0x6f, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x2e, 0x64, 0x65, 0x6d, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x24, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x3a, 0x0b, 0x77, 0x72, 0x61, 0x70, 0x5f, 0x64, 0x6f, 0x75, 0x62,
	0x6c, 0x65, 0x1a, 0x0f, 0x2f, 0x76, 0x31, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x5f, 0x64, 0x6f, 0x75,
	0x62, 0x6c, 0x65, 0x12, 0x5e, 0x0a, 0x06, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x20, 0x2e,
	0x6c, 0x65, 0x6f, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x64, 0x65, 0x6d, 0x6f,
	0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x1a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14, 0x3a,
	0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x1a, 0x0a, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x12, 0x69, 0x0a, 0x09, 0x4f, 0x70, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x12, 0x20, 0x2e, 0x6c, 0x65, 0x6f, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x64,
	0x65, 0x6d, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x1c, 0x3a, 0x0a, 0x6f, 0x70, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x1a, 0x0e,
	0x2f, 0x76, 0x31, 0x2f, 0x6f, 0x70, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x69,
	0x0a, 0x09, 0x52, 0x65, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x20, 0x2e, 0x6c, 0x65,
	0x6f, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x64, 0x65, 0x6d, 0x6f, 0x2e, 0x76,
	0x31, 0x2e, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x22, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1c, 0x3a, 0x0a, 0x72,
	0x65, 0x70, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x1a, 0x0e, 0x2f, 0x76, 0x31, 0x2f, 0x72,
	0x65, 0x70, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x6c, 0x0a, 0x0a, 0x57, 0x72, 0x61,
	0x70, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x20, 0x2e, 0x6c, 0x65, 0x6f, 0x2e, 0x65, 0x78,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x64, 0x65, 0x6d, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6f,
	0x64, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x24, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x3a, 0x0b, 0x77, 0x72, 0x61, 0x70, 0x5f,
	0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x1a, 0x0f, 0x2f, 0x76, 0x31, 0x2f, 0x77, 0x72, 0x61, 0x70,
	0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x5b, 0x0a, 0x05, 0x42, 0x79, 0x74, 0x65, 0x73,
	0x12, 0x20, 0x2e, 0x6c, 0x65, 0x6f, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x64,
	0x65, 0x6d, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x18, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x12, 0x3a, 0x05, 0x62, 0x79, 0x74, 0x65, 0x73, 0x1a, 0x09, 0x2f, 0x76, 0x31, 0x2f, 0x62,
	0x79, 0x74, 0x65, 0x73, 0x12, 0x66, 0x0a, 0x08, 0x4f, 0x70, 0x74, 0x42, 0x79, 0x74, 0x65, 0x73,
	0x12, 0x20, 0x2e, 0x6c, 0x65, 0x6f, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x64,
	0x65, 0x6d, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x20, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x1a, 0x3a, 0x09, 0x6f, 0x70, 0x74, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x1a, 0x0d, 0x2f,
	0x76, 0x31, 0x2f, 0x6f, 0x70, 0x74, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x12, 0x66, 0x0a, 0x08,
	0x52, 0x65, 0x70, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x20, 0x2e, 0x6c, 0x65, 0x6f, 0x2e, 0x65,
	0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x64, 0x65, 0x6d, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x42,
	0x6f, 0x64, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x20, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x3a, 0x09, 0x72, 0x65, 0x70, 0x5f,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x1a, 0x0d, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x65, 0x70, 0x5f, 0x62,
	0x79, 0x74, 0x65, 0x73, 0x12, 0x69, 0x0a, 0x09, 0x57, 0x72, 0x61, 0x70, 0x42, 0x79, 0x74, 0x65,
	0x73, 0x12, 0x20, 0x2e, 0x6c, 0x65, 0x6f, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e,
	0x64, 0x65, 0x6d, 0x6f, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x22, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x1c, 0x3a, 0x0a, 0x77, 0x72, 0x61, 0x70, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x1a,
	0x0e, 0x2f, 0x76, 0x31, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x42,
	0x30, 0x5a, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x6f,
	0x2d, 0x6c, 0x65, 0x6f, 0x2f, 0x6c, 0x65, 0x6f, 0x2f, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x62, 0x6f, 0x64, 0x79, 0x2f, 0x76, 0x31, 0x3b, 0x62, 0x6f, 0x64,
	0x79, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_body_body_proto_rawDescOnce sync.Once
	file_api_body_body_proto_rawDescData = file_api_body_body_proto_rawDesc
)

func file_api_body_body_proto_rawDescGZIP() []byte {
	file_api_body_body_proto_rawDescOnce.Do(func() {
		file_api_body_body_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_body_body_proto_rawDescData)
	})
	return file_api_body_body_proto_rawDescData
}

var file_api_body_body_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_api_body_body_proto_goTypes = []interface{}{
	(*BodyRequest)(nil),            // 0: leo.example.demo.v1.BodyRequest
	(*wrapperspb.DoubleValue)(nil), // 1: google.protobuf.DoubleValue
	(*wrapperspb.FloatValue)(nil),  // 2: google.protobuf.FloatValue
	(*wrapperspb.Int64Value)(nil),  // 3: google.protobuf.Int64Value
	(*wrapperspb.UInt64Value)(nil), // 4: google.protobuf.UInt64Value
	(*wrapperspb.Int32Value)(nil),  // 5: google.protobuf.Int32Value
	(*wrapperspb.UInt32Value)(nil), // 6: google.protobuf.UInt32Value
	(*wrapperspb.BoolValue)(nil),   // 7: google.protobuf.BoolValue
	(*wrapperspb.StringValue)(nil), // 8: google.protobuf.StringValue
	(*wrapperspb.BytesValue)(nil),  // 9: google.protobuf.BytesValue
	(*emptypb.Empty)(nil),          // 10: google.protobuf.Empty
}
var file_api_body_body_proto_depIdxs = []int32{
	1,  // 0: leo.example.demo.v1.BodyRequest.wrap_double:type_name -> google.protobuf.DoubleValue
	2,  // 1: leo.example.demo.v1.BodyRequest.wrap_float:type_name -> google.protobuf.FloatValue
	3,  // 2: leo.example.demo.v1.BodyRequest.wrap_int64:type_name -> google.protobuf.Int64Value
	4,  // 3: leo.example.demo.v1.BodyRequest.wrap_uint64:type_name -> google.protobuf.UInt64Value
	5,  // 4: leo.example.demo.v1.BodyRequest.wrap_int32:type_name -> google.protobuf.Int32Value
	6,  // 5: leo.example.demo.v1.BodyRequest.wrap_uint32:type_name -> google.protobuf.UInt32Value
	7,  // 6: leo.example.demo.v1.BodyRequest.wrap_bool:type_name -> google.protobuf.BoolValue
	8,  // 7: leo.example.demo.v1.BodyRequest.wrap_string:type_name -> google.protobuf.StringValue
	9,  // 8: leo.example.demo.v1.BodyRequest.wrap_bytes:type_name -> google.protobuf.BytesValue
	0,  // 9: leo.example.demo.v1.Body.Bool:input_type -> leo.example.demo.v1.BodyRequest
	0,  // 10: leo.example.demo.v1.Body.OptBool:input_type -> leo.example.demo.v1.BodyRequest
	0,  // 11: leo.example.demo.v1.Body.RepBool:input_type -> leo.example.demo.v1.BodyRequest
	0,  // 12: leo.example.demo.v1.Body.WrapBool:input_type -> leo.example.demo.v1.BodyRequest
	0,  // 13: leo.example.demo.v1.Body.Int32:input_type -> leo.example.demo.v1.BodyRequest
	0,  // 14: leo.example.demo.v1.Body.OptInt32:input_type -> leo.example.demo.v1.BodyRequest
	0,  // 15: leo.example.demo.v1.Body.RepInt32:input_type -> leo.example.demo.v1.BodyRequest
	0,  // 16: leo.example.demo.v1.Body.WrapInt32:input_type -> leo.example.demo.v1.BodyRequest
	0,  // 17: leo.example.demo.v1.Body.Uint32:input_type -> leo.example.demo.v1.BodyRequest
	0,  // 18: leo.example.demo.v1.Body.OptUint32:input_type -> leo.example.demo.v1.BodyRequest
	0,  // 19: leo.example.demo.v1.Body.RepUint32:input_type -> leo.example.demo.v1.BodyRequest
	0,  // 20: leo.example.demo.v1.Body.WrapUint32:input_type -> leo.example.demo.v1.BodyRequest
	0,  // 21: leo.example.demo.v1.Body.Fixed32:input_type -> leo.example.demo.v1.BodyRequest
	0,  // 22: leo.example.demo.v1.Body.OptFixed32:input_type -> leo.example.demo.v1.BodyRequest
	0,  // 23: leo.example.demo.v1.Body.RepFixed32:input_type -> leo.example.demo.v1.BodyRequest
	0,  // 24: leo.example.demo.v1.Body.Int64:input_type -> leo.example.demo.v1.BodyRequest
	0,  // 25: leo.example.demo.v1.Body.OptInt64:input_type -> leo.example.demo.v1.BodyRequest
	0,  // 26: leo.example.demo.v1.Body.RepInt64:input_type -> leo.example.demo.v1.BodyRequest
	0,  // 27: leo.example.demo.v1.Body.WrapInt64:input_type -> leo.example.demo.v1.BodyRequest
	0,  // 28: leo.example.demo.v1.Body.Sint64:input_type -> leo.example.demo.v1.BodyRequest
	0,  // 29: leo.example.demo.v1.Body.OptSint64:input_type -> leo.example.demo.v1.BodyRequest
	0,  // 30: leo.example.demo.v1.Body.RepSint64:input_type -> leo.example.demo.v1.BodyRequest
	0,  // 31: leo.example.demo.v1.Body.Sfixed64:input_type -> leo.example.demo.v1.BodyRequest
	0,  // 32: leo.example.demo.v1.Body.OptSfixed64:input_type -> leo.example.demo.v1.BodyRequest
	0,  // 33: leo.example.demo.v1.Body.RepSfixed64:input_type -> leo.example.demo.v1.BodyRequest
	0,  // 34: leo.example.demo.v1.Body.Uint64:input_type -> leo.example.demo.v1.BodyRequest
	0,  // 35: leo.example.demo.v1.Body.OptUint64:input_type -> leo.example.demo.v1.BodyRequest
	0,  // 36: leo.example.demo.v1.Body.RepUint64:input_type -> leo.example.demo.v1.BodyRequest
	0,  // 37: leo.example.demo.v1.Body.WrapUint64:input_type -> leo.example.demo.v1.BodyRequest
	0,  // 38: leo.example.demo.v1.Body.Fixed64:input_type -> leo.example.demo.v1.BodyRequest
	0,  // 39: leo.example.demo.v1.Body.OptFixed64:input_type -> leo.example.demo.v1.BodyRequest
	0,  // 40: leo.example.demo.v1.Body.RepFixed64:input_type -> leo.example.demo.v1.BodyRequest
	0,  // 41: leo.example.demo.v1.Body.Float32:input_type -> leo.example.demo.v1.BodyRequest
	0,  // 42: leo.example.demo.v1.Body.OptFloat32:input_type -> leo.example.demo.v1.BodyRequest
	0,  // 43: leo.example.demo.v1.Body.RepFloat32:input_type -> leo.example.demo.v1.BodyRequest
	0,  // 44: leo.example.demo.v1.Body.WrapFloat32:input_type -> leo.example.demo.v1.BodyRequest
	0,  // 45: leo.example.demo.v1.Body.Float64:input_type -> leo.example.demo.v1.BodyRequest
	0,  // 46: leo.example.demo.v1.Body.OptFloat64:input_type -> leo.example.demo.v1.BodyRequest
	0,  // 47: leo.example.demo.v1.Body.RepFloat64:input_type -> leo.example.demo.v1.BodyRequest
	0,  // 48: leo.example.demo.v1.Body.WrapFloat64:input_type -> leo.example.demo.v1.BodyRequest
	0,  // 49: leo.example.demo.v1.Body.String:input_type -> leo.example.demo.v1.BodyRequest
	0,  // 50: leo.example.demo.v1.Body.OptString:input_type -> leo.example.demo.v1.BodyRequest
	0,  // 51: leo.example.demo.v1.Body.RepString:input_type -> leo.example.demo.v1.BodyRequest
	0,  // 52: leo.example.demo.v1.Body.WrapString:input_type -> leo.example.demo.v1.BodyRequest
	0,  // 53: leo.example.demo.v1.Body.Bytes:input_type -> leo.example.demo.v1.BodyRequest
	0,  // 54: leo.example.demo.v1.Body.OptBytes:input_type -> leo.example.demo.v1.BodyRequest
	0,  // 55: leo.example.demo.v1.Body.RepBytes:input_type -> leo.example.demo.v1.BodyRequest
	0,  // 56: leo.example.demo.v1.Body.WrapBytes:input_type -> leo.example.demo.v1.BodyRequest
	10, // 57: leo.example.demo.v1.Body.Bool:output_type -> google.protobuf.Empty
	10, // 58: leo.example.demo.v1.Body.OptBool:output_type -> google.protobuf.Empty
	10, // 59: leo.example.demo.v1.Body.RepBool:output_type -> google.protobuf.Empty
	10, // 60: leo.example.demo.v1.Body.WrapBool:output_type -> google.protobuf.Empty
	10, // 61: leo.example.demo.v1.Body.Int32:output_type -> google.protobuf.Empty
	10, // 62: leo.example.demo.v1.Body.OptInt32:output_type -> google.protobuf.Empty
	10, // 63: leo.example.demo.v1.Body.RepInt32:output_type -> google.protobuf.Empty
	10, // 64: leo.example.demo.v1.Body.WrapInt32:output_type -> google.protobuf.Empty
	10, // 65: leo.example.demo.v1.Body.Uint32:output_type -> google.protobuf.Empty
	10, // 66: leo.example.demo.v1.Body.OptUint32:output_type -> google.protobuf.Empty
	10, // 67: leo.example.demo.v1.Body.RepUint32:output_type -> google.protobuf.Empty
	10, // 68: leo.example.demo.v1.Body.WrapUint32:output_type -> google.protobuf.Empty
	10, // 69: leo.example.demo.v1.Body.Fixed32:output_type -> google.protobuf.Empty
	10, // 70: leo.example.demo.v1.Body.OptFixed32:output_type -> google.protobuf.Empty
	10, // 71: leo.example.demo.v1.Body.RepFixed32:output_type -> google.protobuf.Empty
	10, // 72: leo.example.demo.v1.Body.Int64:output_type -> google.protobuf.Empty
	10, // 73: leo.example.demo.v1.Body.OptInt64:output_type -> google.protobuf.Empty
	10, // 74: leo.example.demo.v1.Body.RepInt64:output_type -> google.protobuf.Empty
	10, // 75: leo.example.demo.v1.Body.WrapInt64:output_type -> google.protobuf.Empty
	10, // 76: leo.example.demo.v1.Body.Sint64:output_type -> google.protobuf.Empty
	10, // 77: leo.example.demo.v1.Body.OptSint64:output_type -> google.protobuf.Empty
	10, // 78: leo.example.demo.v1.Body.RepSint64:output_type -> google.protobuf.Empty
	10, // 79: leo.example.demo.v1.Body.Sfixed64:output_type -> google.protobuf.Empty
	10, // 80: leo.example.demo.v1.Body.OptSfixed64:output_type -> google.protobuf.Empty
	10, // 81: leo.example.demo.v1.Body.RepSfixed64:output_type -> google.protobuf.Empty
	10, // 82: leo.example.demo.v1.Body.Uint64:output_type -> google.protobuf.Empty
	10, // 83: leo.example.demo.v1.Body.OptUint64:output_type -> google.protobuf.Empty
	10, // 84: leo.example.demo.v1.Body.RepUint64:output_type -> google.protobuf.Empty
	10, // 85: leo.example.demo.v1.Body.WrapUint64:output_type -> google.protobuf.Empty
	10, // 86: leo.example.demo.v1.Body.Fixed64:output_type -> google.protobuf.Empty
	10, // 87: leo.example.demo.v1.Body.OptFixed64:output_type -> google.protobuf.Empty
	10, // 88: leo.example.demo.v1.Body.RepFixed64:output_type -> google.protobuf.Empty
	10, // 89: leo.example.demo.v1.Body.Float32:output_type -> google.protobuf.Empty
	10, // 90: leo.example.demo.v1.Body.OptFloat32:output_type -> google.protobuf.Empty
	10, // 91: leo.example.demo.v1.Body.RepFloat32:output_type -> google.protobuf.Empty
	10, // 92: leo.example.demo.v1.Body.WrapFloat32:output_type -> google.protobuf.Empty
	10, // 93: leo.example.demo.v1.Body.Float64:output_type -> google.protobuf.Empty
	10, // 94: leo.example.demo.v1.Body.OptFloat64:output_type -> google.protobuf.Empty
	10, // 95: leo.example.demo.v1.Body.RepFloat64:output_type -> google.protobuf.Empty
	10, // 96: leo.example.demo.v1.Body.WrapFloat64:output_type -> google.protobuf.Empty
	10, // 97: leo.example.demo.v1.Body.String:output_type -> google.protobuf.Empty
	10, // 98: leo.example.demo.v1.Body.OptString:output_type -> google.protobuf.Empty
	10, // 99: leo.example.demo.v1.Body.RepString:output_type -> google.protobuf.Empty
	10, // 100: leo.example.demo.v1.Body.WrapString:output_type -> google.protobuf.Empty
	10, // 101: leo.example.demo.v1.Body.Bytes:output_type -> google.protobuf.Empty
	10, // 102: leo.example.demo.v1.Body.OptBytes:output_type -> google.protobuf.Empty
	10, // 103: leo.example.demo.v1.Body.RepBytes:output_type -> google.protobuf.Empty
	10, // 104: leo.example.demo.v1.Body.WrapBytes:output_type -> google.protobuf.Empty
	57, // [57:105] is the sub-list for method output_type
	9,  // [9:57] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_api_body_body_proto_init() }
func file_api_body_body_proto_init() {
	if File_api_body_body_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_api_body_body_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BodyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_api_body_body_proto_msgTypes[0].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_body_body_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_api_body_body_proto_goTypes,
		DependencyIndexes: file_api_body_body_proto_depIdxs,
		MessageInfos:      file_api_body_body_proto_msgTypes,
	}.Build()
	File_api_body_body_proto = out.File
	file_api_body_body_proto_rawDesc = nil
	file_api_body_body_proto_goTypes = nil
	file_api_body_body_proto_depIdxs = nil
}
