// Code generated by protoc-gen-leo-http. DO NOT EDIT.

package body

import (
	bytes "bytes"
	context "context"
	endpoint "github.com/go-kit/kit/endpoint"
	http "github.com/go-kit/kit/transport/http"
	jsonx "github.com/go-leo/gox/encodingx/jsonx"
	endpointx "github.com/go-leo/leo/v3/endpointx"
	statusx "github.com/go-leo/leo/v3/statusx"
	transportx "github.com/go-leo/leo/v3/transportx"
	httpx "github.com/go-leo/leo/v3/transportx/httpx"
	mux "github.com/gorilla/mux"
	httpbody "google.golang.org/genproto/googleapis/api/httpbody"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	io "io"
	http1 "net/http"
	url "net/url"
)

// =========================== http router ===========================

func appendBodyHttpRoutes(router *mux.Router) *mux.Router {
	router.NewRoute().Name("/leo.example.body.v1.Body/StarBody").Methods("POST").Path("/v1/star/body")
	router.NewRoute().Name("/leo.example.body.v1.Body/NamedBody").Methods("POST").Path("/v1/named/body")
	router.NewRoute().Name("/leo.example.body.v1.Body/NonBody").Methods("GET").Path("/v1/user_body")
	router.NewRoute().Name("/leo.example.body.v1.Body/HttpBodyStarBody").Methods("PUT").Path("/v1/http/body/star/body")
	router.NewRoute().Name("/leo.example.body.v1.Body/HttpBodyNamedBody").Methods("PUT").Path("/v1/http/body/named/body")
	return router
}

// =========================== http server ===========================

func AppendBodyHttpRoutes(router *mux.Router, svc BodyService, middlewares ...endpoint.Middleware) *mux.Router {
	endpoints := newBodyServerEndpoints(svc, middlewares...)
	router = appendBodyHttpRoutes(router)
	router.Get("/leo.example.body.v1.Body/StarBody").Handler(_Body_StarBody_HttpServer_Transport(endpoints))
	router.Get("/leo.example.body.v1.Body/NamedBody").Handler(_Body_NamedBody_HttpServer_Transport(endpoints))
	router.Get("/leo.example.body.v1.Body/NonBody").Handler(_Body_NonBody_HttpServer_Transport(endpoints))
	router.Get("/leo.example.body.v1.Body/HttpBodyStarBody").Handler(_Body_HttpBodyStarBody_HttpServer_Transport(endpoints))
	router.Get("/leo.example.body.v1.Body/HttpBodyNamedBody").Handler(_Body_HttpBodyNamedBody_HttpServer_Transport(endpoints))
	return router
}

// =========================== http client ===========================

type bodyHttpClientTransports struct {
	scheme        string
	router        *mux.Router
	clientOptions []http.ClientOption
	middlewares   []endpoint.Middleware
}

func (t *bodyHttpClientTransports) StarBody(ctx context.Context, instance string) (endpoint.Endpoint, io.Closer, error) {
	opts := []http.ClientOption{
		http.ClientBefore(httpx.OutgoingMetadataInjector),
		http.ClientBefore(httpx.OutgoingTimeLimiter),
		http.ClientBefore(httpx.OutgoingStain),
	}
	opts = append(opts, t.clientOptions...)
	client := http.NewExplicitClient(
		_Body_StarBody_HttpClient_RequestEncoder(t.router)(t.scheme, instance),
		_Body_StarBody_HttpClient_ResponseDecoder,
		opts...,
	)
	return endpointx.Chain(client.Endpoint(), t.middlewares...), nil, nil
}

func (t *bodyHttpClientTransports) NamedBody(ctx context.Context, instance string) (endpoint.Endpoint, io.Closer, error) {
	opts := []http.ClientOption{
		http.ClientBefore(httpx.OutgoingMetadataInjector),
		http.ClientBefore(httpx.OutgoingTimeLimiter),
		http.ClientBefore(httpx.OutgoingStain),
	}
	opts = append(opts, t.clientOptions...)
	client := http.NewExplicitClient(
		_Body_NamedBody_HttpClient_RequestEncoder(t.router)(t.scheme, instance),
		_Body_NamedBody_HttpClient_ResponseDecoder,
		opts...,
	)
	return endpointx.Chain(client.Endpoint(), t.middlewares...), nil, nil
}

func (t *bodyHttpClientTransports) NonBody(ctx context.Context, instance string) (endpoint.Endpoint, io.Closer, error) {
	opts := []http.ClientOption{
		http.ClientBefore(httpx.OutgoingMetadataInjector),
		http.ClientBefore(httpx.OutgoingTimeLimiter),
		http.ClientBefore(httpx.OutgoingStain),
	}
	opts = append(opts, t.clientOptions...)
	client := http.NewExplicitClient(
		_Body_NonBody_HttpClient_RequestEncoder(t.router)(t.scheme, instance),
		_Body_NonBody_HttpClient_ResponseDecoder,
		opts...,
	)
	return endpointx.Chain(client.Endpoint(), t.middlewares...), nil, nil
}

func (t *bodyHttpClientTransports) HttpBodyStarBody(ctx context.Context, instance string) (endpoint.Endpoint, io.Closer, error) {
	opts := []http.ClientOption{
		http.ClientBefore(httpx.OutgoingMetadataInjector),
		http.ClientBefore(httpx.OutgoingTimeLimiter),
		http.ClientBefore(httpx.OutgoingStain),
	}
	opts = append(opts, t.clientOptions...)
	client := http.NewExplicitClient(
		_Body_HttpBodyStarBody_HttpClient_RequestEncoder(t.router)(t.scheme, instance),
		_Body_HttpBodyStarBody_HttpClient_ResponseDecoder,
		opts...,
	)
	return endpointx.Chain(client.Endpoint(), t.middlewares...), nil, nil
}

func (t *bodyHttpClientTransports) HttpBodyNamedBody(ctx context.Context, instance string) (endpoint.Endpoint, io.Closer, error) {
	opts := []http.ClientOption{
		http.ClientBefore(httpx.OutgoingMetadataInjector),
		http.ClientBefore(httpx.OutgoingTimeLimiter),
		http.ClientBefore(httpx.OutgoingStain),
	}
	opts = append(opts, t.clientOptions...)
	client := http.NewExplicitClient(
		_Body_HttpBodyNamedBody_HttpClient_RequestEncoder(t.router)(t.scheme, instance),
		_Body_HttpBodyNamedBody_HttpClient_ResponseDecoder,
		opts...,
	)
	return endpointx.Chain(client.Endpoint(), t.middlewares...), nil, nil
}

func newBodyHttpClientTransports(scheme string, clientOptions []http.ClientOption, middlewares []endpoint.Middleware) BodyClientTransportsV2 {
	return &bodyHttpClientTransports{
		scheme:        scheme,
		router:        appendBodyHttpRoutes(mux.NewRouter()),
		clientOptions: clientOptions,
		middlewares:   middlewares,
	}
}

type bodyHttpClient struct {
	endpoints BodyEndpoints
}

func (c *bodyHttpClient) StarBody(ctx context.Context, request *User) (*emptypb.Empty, error) {
	ctx = endpointx.InjectName(ctx, "/leo.example.body.v1.Body/StarBody")
	ctx = transportx.InjectName(ctx, httpx.HttpClient)
	rep, err := c.endpoints.StarBody(ctx)(ctx, request)
	if err != nil {
		return nil, statusx.From(err)
	}
	return rep.(*emptypb.Empty), nil
}

func (c *bodyHttpClient) NamedBody(ctx context.Context, request *UserRequest) (*emptypb.Empty, error) {
	ctx = endpointx.InjectName(ctx, "/leo.example.body.v1.Body/NamedBody")
	ctx = transportx.InjectName(ctx, httpx.HttpClient)
	rep, err := c.endpoints.NamedBody(ctx)(ctx, request)
	if err != nil {
		return nil, statusx.From(err)
	}
	return rep.(*emptypb.Empty), nil
}

func (c *bodyHttpClient) NonBody(ctx context.Context, request *emptypb.Empty) (*emptypb.Empty, error) {
	ctx = endpointx.InjectName(ctx, "/leo.example.body.v1.Body/NonBody")
	ctx = transportx.InjectName(ctx, httpx.HttpClient)
	rep, err := c.endpoints.NonBody(ctx)(ctx, request)
	if err != nil {
		return nil, statusx.From(err)
	}
	return rep.(*emptypb.Empty), nil
}

func (c *bodyHttpClient) HttpBodyStarBody(ctx context.Context, request *httpbody.HttpBody) (*emptypb.Empty, error) {
	ctx = endpointx.InjectName(ctx, "/leo.example.body.v1.Body/HttpBodyStarBody")
	ctx = transportx.InjectName(ctx, httpx.HttpClient)
	rep, err := c.endpoints.HttpBodyStarBody(ctx)(ctx, request)
	if err != nil {
		return nil, statusx.From(err)
	}
	return rep.(*emptypb.Empty), nil
}

func (c *bodyHttpClient) HttpBodyNamedBody(ctx context.Context, request *HttpBody) (*emptypb.Empty, error) {
	ctx = endpointx.InjectName(ctx, "/leo.example.body.v1.Body/HttpBodyNamedBody")
	ctx = transportx.InjectName(ctx, httpx.HttpClient)
	rep, err := c.endpoints.HttpBodyNamedBody(ctx)(ctx, request)
	if err != nil {
		return nil, statusx.From(err)
	}
	return rep.(*emptypb.Empty), nil
}

func NewBodyHttpClient(transports BodyClientTransports, middlewares ...endpoint.Middleware) BodyService {
	endpoints := newBodyClientEndpoints(transports, middlewares...)
	return &bodyHttpClient{endpoints: endpoints}
}

// =========================== http transport ===========================

func _Body_StarBody_HttpServer_Transport(endpoints BodyEndpoints) *http.Server {
	return http.NewServer(
		endpoints.StarBody(context.TODO()),
		_Body_StarBody_HttpServer_RequestDecoder,
		_Body_StarBody_HttpServer_ResponseEncoder,
		http.ServerBefore(httpx.EndpointInjector("/leo.example.body.v1.Body/StarBody")),
		http.ServerBefore(httpx.TransportInjector(httpx.HttpServer)),
		http.ServerBefore(httpx.IncomingMetadataInjector),
		http.ServerBefore(httpx.IncomingTimeLimiter),
		http.ServerFinalizer(httpx.CancelInvoker),
		http.ServerErrorEncoder(httpx.ErrorEncoder),
	)
}

func _Body_StarBody_HttpClient_Transport(target string, router *mux.Router, options ...httpx.ClientTransportOption) func() (transportx.ClientTransport, error) {
	return func() (transportx.ClientTransport, error) {
		return httpx.NewClientTransport(
			target,
			httpx.ClientFactory(
				_Body_StarBody_HttpClient_RequestEncoder(router),
				_Body_StarBody_HttpClient_ResponseDecoder,
				http.ClientBefore(httpx.OutgoingMetadataInjector),
				http.ClientBefore(httpx.OutgoingTimeLimiter),
				http.ClientBefore(httpx.OutgoingStain),
			),
			options...,
		)
	}
}

func _Body_NamedBody_HttpServer_Transport(endpoints BodyEndpoints) *http.Server {
	return http.NewServer(
		endpoints.NamedBody(context.TODO()),
		_Body_NamedBody_HttpServer_RequestDecoder,
		_Body_NamedBody_HttpServer_ResponseEncoder,
		http.ServerBefore(httpx.EndpointInjector("/leo.example.body.v1.Body/NamedBody")),
		http.ServerBefore(httpx.TransportInjector(httpx.HttpServer)),
		http.ServerBefore(httpx.IncomingMetadataInjector),
		http.ServerBefore(httpx.IncomingTimeLimiter),
		http.ServerFinalizer(httpx.CancelInvoker),
		http.ServerErrorEncoder(httpx.ErrorEncoder),
	)
}

func _Body_NamedBody_HttpClient_Transport(target string, router *mux.Router, options ...httpx.ClientTransportOption) func() (transportx.ClientTransport, error) {
	return func() (transportx.ClientTransport, error) {
		return httpx.NewClientTransport(
			target,
			httpx.ClientFactory(
				_Body_NamedBody_HttpClient_RequestEncoder(router),
				_Body_NamedBody_HttpClient_ResponseDecoder,
				http.ClientBefore(httpx.OutgoingMetadataInjector),
				http.ClientBefore(httpx.OutgoingTimeLimiter),
				http.ClientBefore(httpx.OutgoingStain),
			),
			options...,
		)
	}
}

func _Body_NonBody_HttpServer_Transport(endpoints BodyEndpoints) *http.Server {
	return http.NewServer(
		endpoints.NonBody(context.TODO()),
		_Body_NonBody_HttpServer_RequestDecoder,
		_Body_NonBody_HttpServer_ResponseEncoder,
		http.ServerBefore(httpx.EndpointInjector("/leo.example.body.v1.Body/NonBody")),
		http.ServerBefore(httpx.TransportInjector(httpx.HttpServer)),
		http.ServerBefore(httpx.IncomingMetadataInjector),
		http.ServerBefore(httpx.IncomingTimeLimiter),
		http.ServerFinalizer(httpx.CancelInvoker),
		http.ServerErrorEncoder(httpx.ErrorEncoder),
	)
}

func _Body_NonBody_HttpClient_Transport(target string, router *mux.Router, options ...httpx.ClientTransportOption) func() (transportx.ClientTransport, error) {
	return func() (transportx.ClientTransport, error) {
		return httpx.NewClientTransport(
			target,
			httpx.ClientFactory(
				_Body_NonBody_HttpClient_RequestEncoder(router),
				_Body_NonBody_HttpClient_ResponseDecoder,
				http.ClientBefore(httpx.OutgoingMetadataInjector),
				http.ClientBefore(httpx.OutgoingTimeLimiter),
				http.ClientBefore(httpx.OutgoingStain),
			),
			options...,
		)
	}
}

func _Body_HttpBodyStarBody_HttpServer_Transport(endpoints BodyEndpoints) *http.Server {
	return http.NewServer(
		endpoints.HttpBodyStarBody(context.TODO()),
		_Body_HttpBodyStarBody_HttpServer_RequestDecoder,
		_Body_HttpBodyStarBody_HttpServer_ResponseEncoder,
		http.ServerBefore(httpx.EndpointInjector("/leo.example.body.v1.Body/HttpBodyStarBody")),
		http.ServerBefore(httpx.TransportInjector(httpx.HttpServer)),
		http.ServerBefore(httpx.IncomingMetadataInjector),
		http.ServerBefore(httpx.IncomingTimeLimiter),
		http.ServerFinalizer(httpx.CancelInvoker),
		http.ServerErrorEncoder(httpx.ErrorEncoder),
	)
}

func _Body_HttpBodyStarBody_HttpClient_Transport(target string, router *mux.Router, options ...httpx.ClientTransportOption) func() (transportx.ClientTransport, error) {
	return func() (transportx.ClientTransport, error) {
		return httpx.NewClientTransport(
			target,
			httpx.ClientFactory(
				_Body_HttpBodyStarBody_HttpClient_RequestEncoder(router),
				_Body_HttpBodyStarBody_HttpClient_ResponseDecoder,
				http.ClientBefore(httpx.OutgoingMetadataInjector),
				http.ClientBefore(httpx.OutgoingTimeLimiter),
				http.ClientBefore(httpx.OutgoingStain),
			),
			options...,
		)
	}
}

func _Body_HttpBodyNamedBody_HttpServer_Transport(endpoints BodyEndpoints) *http.Server {
	return http.NewServer(
		endpoints.HttpBodyNamedBody(context.TODO()),
		_Body_HttpBodyNamedBody_HttpServer_RequestDecoder,
		_Body_HttpBodyNamedBody_HttpServer_ResponseEncoder,
		http.ServerBefore(httpx.EndpointInjector("/leo.example.body.v1.Body/HttpBodyNamedBody")),
		http.ServerBefore(httpx.TransportInjector(httpx.HttpServer)),
		http.ServerBefore(httpx.IncomingMetadataInjector),
		http.ServerBefore(httpx.IncomingTimeLimiter),
		http.ServerFinalizer(httpx.CancelInvoker),
		http.ServerErrorEncoder(httpx.ErrorEncoder),
	)
}

func _Body_HttpBodyNamedBody_HttpClient_Transport(target string, router *mux.Router, options ...httpx.ClientTransportOption) func() (transportx.ClientTransport, error) {
	return func() (transportx.ClientTransport, error) {
		return httpx.NewClientTransport(
			target,
			httpx.ClientFactory(
				_Body_HttpBodyNamedBody_HttpClient_RequestEncoder(router),
				_Body_HttpBodyNamedBody_HttpClient_ResponseDecoder,
				http.ClientBefore(httpx.OutgoingMetadataInjector),
				http.ClientBefore(httpx.OutgoingTimeLimiter),
				http.ClientBefore(httpx.OutgoingStain),
			),
			options...,
		)
	}
}

// =========================== http coder ===========================

func _Body_StarBody_HttpServer_RequestDecoder(ctx context.Context, r *http1.Request) (any, error) {
	req := &User{}
	if err := jsonx.NewDecoder(r.Body).Decode(req); err != nil {
		return nil, statusx.ErrInvalidArgument.With(statusx.Wrap(err))
	}
	return req, nil
}

func _Body_StarBody_HttpClient_RequestEncoder(router *mux.Router) func(scheme string, instance string) http.CreateRequestFunc {
	return func(scheme string, instance string) http.CreateRequestFunc {
		return func(ctx context.Context, obj any) (*http1.Request, error) {
			if obj == nil {
				return nil, statusx.ErrInvalidArgument.With(statusx.Message("request is nil"))
			}
			req, ok := obj.(*User)
			if !ok {
				return nil, statusx.ErrInvalidArgument.With(statusx.Message("invalid request type, %T", obj))
			}
			_ = req
			var body io.Reader
			var bodyBuf bytes.Buffer
			if err := jsonx.NewEncoder(&bodyBuf).Encode(req); err != nil {
				return nil, statusx.ErrInvalidArgument.With(statusx.Wrap(err))
			}
			body = &bodyBuf
			contentType := "application/json; charset=utf-8"
			var pairs []string
			path, err := router.Get("/leo.example.body.v1.Body/StarBody").URLPath(pairs...)
			if err != nil {
				return nil, statusx.ErrInvalidArgument.With(statusx.Wrap(err))
			}
			queries := url.Values{}
			target := &url.URL{
				Scheme:   scheme,
				Host:     instance,
				Path:     path.Path,
				RawQuery: queries.Encode(),
			}
			r, err := http1.NewRequestWithContext(ctx, "POST", target.String(), body)
			if err != nil {
				return nil, statusx.ErrInvalidArgument.With(statusx.Wrap(err))
			}
			r.Header.Set("Content-Type", contentType)
			return r, nil
		}
	}
}

func _Body_StarBody_HttpServer_ResponseEncoder(ctx context.Context, w http1.ResponseWriter, obj any) error {
	resp := obj.(*emptypb.Empty)
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(http1.StatusOK)
	if err := jsonx.NewEncoder(w).Encode(resp); err != nil {
		return statusx.ErrInternal.With(statusx.Wrap(err))
	}
	return nil
}

func _Body_StarBody_HttpClient_ResponseDecoder(ctx context.Context, r *http1.Response) (any, error) {
	if httpx.IsErrorResponse(r) {
		return nil, httpx.ErrorDecoder(ctx, r)
	}
	resp := &emptypb.Empty{}
	if err := jsonx.NewDecoder(r.Body).Decode(resp); err != nil {
		return nil, err
	}
	return resp, nil
}

func _Body_NamedBody_HttpServer_RequestDecoder(ctx context.Context, r *http1.Request) (any, error) {
	req := &UserRequest{}
	if err := jsonx.NewDecoder(r.Body).Decode(&req.User); err != nil {
		return nil, statusx.ErrInvalidArgument.With(statusx.Wrap(err))
	}
	return req, nil
}

func _Body_NamedBody_HttpClient_RequestEncoder(router *mux.Router) func(scheme string, instance string) http.CreateRequestFunc {
	return func(scheme string, instance string) http.CreateRequestFunc {
		return func(ctx context.Context, obj any) (*http1.Request, error) {
			if obj == nil {
				return nil, statusx.ErrInvalidArgument.With(statusx.Message("request is nil"))
			}
			req, ok := obj.(*UserRequest)
			if !ok {
				return nil, statusx.ErrInvalidArgument.With(statusx.Message("invalid request type, %T", obj))
			}
			_ = req
			var body io.Reader
			var bodyBuf bytes.Buffer
			if err := jsonx.NewEncoder(&bodyBuf).Encode(req.GetUser()); err != nil {
				return nil, statusx.ErrInvalidArgument.With(statusx.Wrap(err))
			}
			body = &bodyBuf
			contentType := "application/json; charset=utf-8"
			var pairs []string
			path, err := router.Get("/leo.example.body.v1.Body/NamedBody").URLPath(pairs...)
			if err != nil {
				return nil, statusx.ErrInvalidArgument.With(statusx.Wrap(err))
			}
			queries := url.Values{}
			target := &url.URL{
				Scheme:   scheme,
				Host:     instance,
				Path:     path.Path,
				RawQuery: queries.Encode(),
			}
			r, err := http1.NewRequestWithContext(ctx, "POST", target.String(), body)
			if err != nil {
				return nil, statusx.ErrInvalidArgument.With(statusx.Wrap(err))
			}
			r.Header.Set("Content-Type", contentType)
			return r, nil
		}
	}
}

func _Body_NamedBody_HttpServer_ResponseEncoder(ctx context.Context, w http1.ResponseWriter, obj any) error {
	resp := obj.(*emptypb.Empty)
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(http1.StatusOK)
	if err := jsonx.NewEncoder(w).Encode(resp); err != nil {
		return statusx.ErrInternal.With(statusx.Wrap(err))
	}
	return nil
}

func _Body_NamedBody_HttpClient_ResponseDecoder(ctx context.Context, r *http1.Response) (any, error) {
	if httpx.IsErrorResponse(r) {
		return nil, httpx.ErrorDecoder(ctx, r)
	}
	resp := &emptypb.Empty{}
	if err := jsonx.NewDecoder(r.Body).Decode(resp); err != nil {
		return nil, err
	}
	return resp, nil
}

func _Body_NonBody_HttpServer_RequestDecoder(ctx context.Context, r *http1.Request) (any, error) {
	req := &emptypb.Empty{}
	return req, nil
}

func _Body_NonBody_HttpClient_RequestEncoder(router *mux.Router) func(scheme string, instance string) http.CreateRequestFunc {
	return func(scheme string, instance string) http.CreateRequestFunc {
		return func(ctx context.Context, obj any) (*http1.Request, error) {
			if obj == nil {
				return nil, statusx.ErrInvalidArgument.With(statusx.Message("request is nil"))
			}
			req, ok := obj.(*emptypb.Empty)
			if !ok {
				return nil, statusx.ErrInvalidArgument.With(statusx.Message("invalid request type, %T", obj))
			}
			_ = req
			var body io.Reader
			var pairs []string
			path, err := router.Get("/leo.example.body.v1.Body/NonBody").URLPath(pairs...)
			if err != nil {
				return nil, statusx.ErrInvalidArgument.With(statusx.Wrap(err))
			}
			queries := url.Values{}
			target := &url.URL{
				Scheme:   scheme,
				Host:     instance,
				Path:     path.Path,
				RawQuery: queries.Encode(),
			}
			r, err := http1.NewRequestWithContext(ctx, "GET", target.String(), body)
			if err != nil {
				return nil, statusx.ErrInvalidArgument.With(statusx.Wrap(err))
			}
			return r, nil
		}
	}
}

func _Body_NonBody_HttpServer_ResponseEncoder(ctx context.Context, w http1.ResponseWriter, obj any) error {
	resp := obj.(*emptypb.Empty)
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(http1.StatusOK)
	if err := jsonx.NewEncoder(w).Encode(resp); err != nil {
		return statusx.ErrInternal.With(statusx.Wrap(err))
	}
	return nil
}

func _Body_NonBody_HttpClient_ResponseDecoder(ctx context.Context, r *http1.Response) (any, error) {
	if httpx.IsErrorResponse(r) {
		return nil, httpx.ErrorDecoder(ctx, r)
	}
	resp := &emptypb.Empty{}
	if err := jsonx.NewDecoder(r.Body).Decode(resp); err != nil {
		return nil, err
	}
	return resp, nil
}

func _Body_HttpBodyStarBody_HttpServer_RequestDecoder(ctx context.Context, r *http1.Request) (any, error) {
	req := &httpbody.HttpBody{}
	body, err := io.ReadAll(r.Body)
	if err != nil {
		return nil, statusx.ErrInvalidArgument.With(statusx.Wrap(err))
	}
	req.Data = body
	req.ContentType = r.Header.Get("Content-Type")
	return req, nil
}

func _Body_HttpBodyStarBody_HttpClient_RequestEncoder(router *mux.Router) func(scheme string, instance string) http.CreateRequestFunc {
	return func(scheme string, instance string) http.CreateRequestFunc {
		return func(ctx context.Context, obj any) (*http1.Request, error) {
			if obj == nil {
				return nil, statusx.ErrInvalidArgument.With(statusx.Message("request is nil"))
			}
			req, ok := obj.(*httpbody.HttpBody)
			if !ok {
				return nil, statusx.ErrInvalidArgument.With(statusx.Message("invalid request type, %T", obj))
			}
			_ = req
			var body io.Reader
			body = bytes.NewReader(req.GetData())
			contentType := req.GetContentType()
			var pairs []string
			path, err := router.Get("/leo.example.body.v1.Body/HttpBodyStarBody").URLPath(pairs...)
			if err != nil {
				return nil, statusx.ErrInvalidArgument.With(statusx.Wrap(err))
			}
			queries := url.Values{}
			target := &url.URL{
				Scheme:   scheme,
				Host:     instance,
				Path:     path.Path,
				RawQuery: queries.Encode(),
			}
			r, err := http1.NewRequestWithContext(ctx, "PUT", target.String(), body)
			if err != nil {
				return nil, statusx.ErrInvalidArgument.With(statusx.Wrap(err))
			}
			r.Header.Set("Content-Type", contentType)
			return r, nil
		}
	}
}

func _Body_HttpBodyStarBody_HttpServer_ResponseEncoder(ctx context.Context, w http1.ResponseWriter, obj any) error {
	resp := obj.(*emptypb.Empty)
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(http1.StatusOK)
	if err := jsonx.NewEncoder(w).Encode(resp); err != nil {
		return statusx.ErrInternal.With(statusx.Wrap(err))
	}
	return nil
}

func _Body_HttpBodyStarBody_HttpClient_ResponseDecoder(ctx context.Context, r *http1.Response) (any, error) {
	if httpx.IsErrorResponse(r) {
		return nil, httpx.ErrorDecoder(ctx, r)
	}
	resp := &emptypb.Empty{}
	if err := jsonx.NewDecoder(r.Body).Decode(resp); err != nil {
		return nil, err
	}
	return resp, nil
}

func _Body_HttpBodyNamedBody_HttpServer_RequestDecoder(ctx context.Context, r *http1.Request) (any, error) {
	req := &HttpBody{}
	req.Body = &httpbody.HttpBody{}
	body, err := io.ReadAll(r.Body)
	if err != nil {
		return nil, statusx.ErrInvalidArgument.With(statusx.Wrap(err))
	}
	req.Body.Data = body
	req.Body.ContentType = r.Header.Get("Content-Type")
	return req, nil
}

func _Body_HttpBodyNamedBody_HttpClient_RequestEncoder(router *mux.Router) func(scheme string, instance string) http.CreateRequestFunc {
	return func(scheme string, instance string) http.CreateRequestFunc {
		return func(ctx context.Context, obj any) (*http1.Request, error) {
			if obj == nil {
				return nil, statusx.ErrInvalidArgument.With(statusx.Message("request is nil"))
			}
			req, ok := obj.(*HttpBody)
			if !ok {
				return nil, statusx.ErrInvalidArgument.With(statusx.Message("invalid request type, %T", obj))
			}
			_ = req
			var body io.Reader
			body = bytes.NewReader(req.GetBody().GetData())
			contentType := req.GetBody().GetContentType()
			var pairs []string
			path, err := router.Get("/leo.example.body.v1.Body/HttpBodyNamedBody").URLPath(pairs...)
			if err != nil {
				return nil, statusx.ErrInvalidArgument.With(statusx.Wrap(err))
			}
			queries := url.Values{}
			target := &url.URL{
				Scheme:   scheme,
				Host:     instance,
				Path:     path.Path,
				RawQuery: queries.Encode(),
			}
			r, err := http1.NewRequestWithContext(ctx, "PUT", target.String(), body)
			if err != nil {
				return nil, statusx.ErrInvalidArgument.With(statusx.Wrap(err))
			}
			r.Header.Set("Content-Type", contentType)
			return r, nil
		}
	}
}

func _Body_HttpBodyNamedBody_HttpServer_ResponseEncoder(ctx context.Context, w http1.ResponseWriter, obj any) error {
	resp := obj.(*emptypb.Empty)
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(http1.StatusOK)
	if err := jsonx.NewEncoder(w).Encode(resp); err != nil {
		return statusx.ErrInternal.With(statusx.Wrap(err))
	}
	return nil
}

func _Body_HttpBodyNamedBody_HttpClient_ResponseDecoder(ctx context.Context, r *http1.Response) (any, error) {
	if httpx.IsErrorResponse(r) {
		return nil, httpx.ErrorDecoder(ctx, r)
	}
	resp := &emptypb.Empty{}
	if err := jsonx.NewDecoder(r.Body).Decode(resp); err != nil {
		return nil, err
	}
	return resp, nil
}
