// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package body

import (
	bytes "bytes"
	context "context"
	json "encoding/json"
	errors "errors"
	fmt "fmt"
	endpoint "github.com/go-kit/kit/endpoint"
	http1 "github.com/go-kit/kit/transport/http"
	endpointx "github.com/go-leo/leo/v3/endpointx"
	mux "github.com/gorilla/mux"
	httpbody "google.golang.org/genproto/googleapis/api/httpbody"
	http "google.golang.org/genproto/googleapis/rpc/http"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	io "io"
	http2 "net/http"
	url "net/url"
)

type bodyHTTPClient struct {
	starBody            endpoint.Endpoint
	namedBody           endpoint.Endpoint
	nonBody             endpoint.Endpoint
	httpBodyStarBody    endpoint.Endpoint
	httpBodyNamedBody   endpoint.Endpoint
	httpRequestStarBody endpoint.Endpoint
}

func (c *bodyHTTPClient) StarBody(ctx context.Context, request *User) (*emptypb.Empty, error) {
	rep, err := c.starBody(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*emptypb.Empty), nil
}

func (c *bodyHTTPClient) NamedBody(ctx context.Context, request *UserRequest) (*emptypb.Empty, error) {
	rep, err := c.namedBody(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*emptypb.Empty), nil
}

func (c *bodyHTTPClient) NonBody(ctx context.Context, request *emptypb.Empty) (*emptypb.Empty, error) {
	rep, err := c.nonBody(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*emptypb.Empty), nil
}

func (c *bodyHTTPClient) HttpBodyStarBody(ctx context.Context, request *httpbody.HttpBody) (*emptypb.Empty, error) {
	rep, err := c.httpBodyStarBody(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*emptypb.Empty), nil
}

func (c *bodyHTTPClient) HttpBodyNamedBody(ctx context.Context, request *HttpBody) (*emptypb.Empty, error) {
	rep, err := c.httpBodyNamedBody(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*emptypb.Empty), nil
}

func (c *bodyHTTPClient) HttpRequestStarBody(ctx context.Context, request *http.HttpRequest) (*emptypb.Empty, error) {
	rep, err := c.httpRequestStarBody(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*emptypb.Empty), nil
}

func NewBodyHTTPClient(
	scheme string,
	instance string,
	mdw []endpoint.Middleware,
	opts ...http1.ClientOption,
) interface {
	StarBody(ctx context.Context, request *User) (*emptypb.Empty, error)
	NamedBody(ctx context.Context, request *UserRequest) (*emptypb.Empty, error)
	NonBody(ctx context.Context, request *emptypb.Empty) (*emptypb.Empty, error)
	HttpBodyStarBody(ctx context.Context, request *httpbody.HttpBody) (*emptypb.Empty, error)
	HttpBodyNamedBody(ctx context.Context, request *HttpBody) (*emptypb.Empty, error)
	HttpRequestStarBody(ctx context.Context, request *http.HttpRequest) (*emptypb.Empty, error)
} {
	router := mux.NewRouter()
	router.NewRoute().
		Name("/leo.example.body.v1.Body/StarBody").
		Methods("POST").
		Path("/v1/star/body")
	router.NewRoute().
		Name("/leo.example.body.v1.Body/NamedBody").
		Methods("POST").
		Path("/v1/named/body")
	router.NewRoute().
		Name("/leo.example.body.v1.Body/NonBody").
		Methods("GET").
		Path("/v1/user_body")
	router.NewRoute().
		Name("/leo.example.body.v1.Body/HttpBodyStarBody").
		Methods("PUT").
		Path("/v1/http/body/star/body")
	router.NewRoute().
		Name("/leo.example.body.v1.Body/HttpBodyNamedBody").
		Methods("PUT").
		Path("/v1/http/body/named/body")
	router.NewRoute().
		Name("/leo.example.body.v1.Body/HttpRequestStarBody").
		Methods("PUT").
		Path("/v1/http/request/star/body")
	return &bodyHTTPClient{
		starBody: endpointx.Chain(
			http1.NewExplicitClient(
				func(ctx context.Context, obj interface{}) (*http2.Request, error) {
					if obj == nil {
						return nil, errors.New("request object is nil")
					}
					req, ok := obj.(*User)
					if !ok {
						return nil, fmt.Errorf("invalid request object type, %T", obj)
					}
					_ = req
					var body io.Reader
					var bodyBuf bytes.Buffer
					if err := json.NewEncoder(&bodyBuf).Encode(req); err != nil {
						return nil, err
					}
					body = &bodyBuf
					contentType := "application/json; charset=utf-8"
					var pairs []string
					path, err := router.Get("/leo.example.body.v1.Body/StarBody").URLPath(pairs...)
					if err != nil {
						return nil, err
					}
					queries := url.Values{}
					target := &url.URL{
						Scheme:   scheme,
						Host:     instance,
						Path:     path.Path,
						RawQuery: queries.Encode(),
					}
					r, err := http2.NewRequestWithContext(ctx, "POST", target.String(), body)
					if err != nil {
						return nil, err
					}
					r.Header.Set("Content-Type", contentType)
					return r, nil
				},
				func(ctx context.Context, r *http2.Response) (interface{}, error) {
					return nil, nil
				},
				opts...,
			).Endpoint(),
			mdw...),
		namedBody: endpointx.Chain(
			http1.NewExplicitClient(
				func(ctx context.Context, obj interface{}) (*http2.Request, error) {
					if obj == nil {
						return nil, errors.New("request object is nil")
					}
					req, ok := obj.(*UserRequest)
					if !ok {
						return nil, fmt.Errorf("invalid request object type, %T", obj)
					}
					_ = req
					var body io.Reader
					var bodyBuf bytes.Buffer
					if err := json.NewEncoder(&bodyBuf).Encode(req.GetUser()); err != nil {
						return nil, err
					}
					body = &bodyBuf
					contentType := "application/json; charset=utf-8"
					var pairs []string
					path, err := router.Get("/leo.example.body.v1.Body/NamedBody").URLPath(pairs...)
					if err != nil {
						return nil, err
					}
					queries := url.Values{}
					target := &url.URL{
						Scheme:   scheme,
						Host:     instance,
						Path:     path.Path,
						RawQuery: queries.Encode(),
					}
					r, err := http2.NewRequestWithContext(ctx, "POST", target.String(), body)
					if err != nil {
						return nil, err
					}
					r.Header.Set("Content-Type", contentType)
					return r, nil
				},
				func(ctx context.Context, r *http2.Response) (interface{}, error) {
					return nil, nil
				},
				opts...,
			).Endpoint(),
			mdw...),
		nonBody: endpointx.Chain(
			http1.NewExplicitClient(
				func(ctx context.Context, obj interface{}) (*http2.Request, error) {
					if obj == nil {
						return nil, errors.New("request object is nil")
					}
					req, ok := obj.(*emptypb.Empty)
					if !ok {
						return nil, fmt.Errorf("invalid request object type, %T", obj)
					}
					_ = req
					var body io.Reader
					var pairs []string
					path, err := router.Get("/leo.example.body.v1.Body/NonBody").URLPath(pairs...)
					if err != nil {
						return nil, err
					}
					queries := url.Values{}
					target := &url.URL{
						Scheme:   scheme,
						Host:     instance,
						Path:     path.Path,
						RawQuery: queries.Encode(),
					}
					r, err := http2.NewRequestWithContext(ctx, "GET", target.String(), body)
					if err != nil {
						return nil, err
					}
					return r, nil
				},
				func(ctx context.Context, r *http2.Response) (interface{}, error) {
					return nil, nil
				},
				opts...,
			).Endpoint(),
			mdw...),
		httpBodyStarBody: endpointx.Chain(
			http1.NewExplicitClient(
				func(ctx context.Context, obj interface{}) (*http2.Request, error) {
					if obj == nil {
						return nil, errors.New("request object is nil")
					}
					req, ok := obj.(*httpbody.HttpBody)
					if !ok {
						return nil, fmt.Errorf("invalid request object type, %T", obj)
					}
					_ = req
					var body io.Reader
					body = bytes.NewReader(req.GetData())
					contentType := req.GetContentType()
					var pairs []string
					path, err := router.Get("/leo.example.body.v1.Body/HttpBodyStarBody").URLPath(pairs...)
					if err != nil {
						return nil, err
					}
					queries := url.Values{}
					target := &url.URL{
						Scheme:   scheme,
						Host:     instance,
						Path:     path.Path,
						RawQuery: queries.Encode(),
					}
					r, err := http2.NewRequestWithContext(ctx, "PUT", target.String(), body)
					if err != nil {
						return nil, err
					}
					r.Header.Set("Content-Type", contentType)
					return r, nil
				},
				func(ctx context.Context, r *http2.Response) (interface{}, error) {
					return nil, nil
				},
				opts...,
			).Endpoint(),
			mdw...),
		httpBodyNamedBody: endpointx.Chain(
			http1.NewExplicitClient(
				func(ctx context.Context, obj interface{}) (*http2.Request, error) {
					if obj == nil {
						return nil, errors.New("request object is nil")
					}
					req, ok := obj.(*HttpBody)
					if !ok {
						return nil, fmt.Errorf("invalid request object type, %T", obj)
					}
					_ = req
					var body io.Reader
					body = bytes.NewReader(req.GetBody().GetData())
					contentType := req.GetBody().GetContentType()
					var pairs []string
					path, err := router.Get("/leo.example.body.v1.Body/HttpBodyNamedBody").URLPath(pairs...)
					if err != nil {
						return nil, err
					}
					queries := url.Values{}
					target := &url.URL{
						Scheme:   scheme,
						Host:     instance,
						Path:     path.Path,
						RawQuery: queries.Encode(),
					}
					r, err := http2.NewRequestWithContext(ctx, "PUT", target.String(), body)
					if err != nil {
						return nil, err
					}
					r.Header.Set("Content-Type", contentType)
					return r, nil
				},
				func(ctx context.Context, r *http2.Response) (interface{}, error) {
					return nil, nil
				},
				opts...,
			).Endpoint(),
			mdw...),
		httpRequestStarBody: endpointx.Chain(
			http1.NewExplicitClient(
				func(ctx context.Context, obj interface{}) (*http2.Request, error) {
					if obj == nil {
						return nil, errors.New("request object is nil")
					}
					req, ok := obj.(*http.HttpRequest)
					if !ok {
						return nil, fmt.Errorf("invalid request object type, %T", obj)
					}
					_ = req
					var body io.Reader
					body = bytes.NewReader(req.GetBody())
					r, err := http2.NewRequest(req.GetMethod(), req.GetUri(), body)
					if err != nil {
						return nil, err
					}
					for _, header := range req.GetHeaders() {
						r.Header.Add(header.GetKey(), header.GetValue())
					}
					return r, nil
				},
				func(ctx context.Context, r *http2.Response) (interface{}, error) {
					return nil, nil
				},
				opts...,
			).Endpoint(),
			mdw...),
	}
}
