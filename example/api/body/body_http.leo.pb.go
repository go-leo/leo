// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package body

import (
	bytes "bytes"
	context "context"
	json "encoding/json"
	endpoint "github.com/go-kit/kit/endpoint"
	http "github.com/go-kit/kit/transport/http"
	convx "github.com/go-leo/gox/convx"
	endpointx "github.com/go-leo/leo/v3/endpointx"
	mux "github.com/gorilla/mux"
	protojson "google.golang.org/protobuf/encoding/protojson"
	proto "google.golang.org/protobuf/proto"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	io "io"
	http1 "net/http"
	strconv "strconv"
	strings "strings"
)

func NewBodyHTTPServer(
	endpoints interface {
		Bool() endpoint.Endpoint
		OptBool() endpoint.Endpoint
		RepBool() endpoint.Endpoint
		WrapBool() endpoint.Endpoint
		Int32() endpoint.Endpoint
		OptInt32() endpoint.Endpoint
		RepInt32() endpoint.Endpoint
		WrapInt32() endpoint.Endpoint
		Uint32() endpoint.Endpoint
		OptUint32() endpoint.Endpoint
		RepUint32() endpoint.Endpoint
		WrapUint32() endpoint.Endpoint
		Fixed32() endpoint.Endpoint
		OptFixed32() endpoint.Endpoint
		RepFixed32() endpoint.Endpoint
		Int64() endpoint.Endpoint
		OptInt64() endpoint.Endpoint
		RepInt64() endpoint.Endpoint
		WrapInt64() endpoint.Endpoint
		Sint64() endpoint.Endpoint
		OptSint64() endpoint.Endpoint
		RepSint64() endpoint.Endpoint
		Sfixed64() endpoint.Endpoint
		OptSfixed64() endpoint.Endpoint
		RepSfixed64() endpoint.Endpoint
		Uint64() endpoint.Endpoint
		OptUint64() endpoint.Endpoint
		RepUint64() endpoint.Endpoint
		WrapUint64() endpoint.Endpoint
		Fixed64() endpoint.Endpoint
		OptFixed64() endpoint.Endpoint
		RepFixed64() endpoint.Endpoint
		Float32() endpoint.Endpoint
		OptFloat32() endpoint.Endpoint
		RepFloat32() endpoint.Endpoint
		WrapFloat32() endpoint.Endpoint
		Float64() endpoint.Endpoint
		OptFloat64() endpoint.Endpoint
		RepFloat64() endpoint.Endpoint
		WrapFloat64() endpoint.Endpoint
		String() endpoint.Endpoint
		OptString() endpoint.Endpoint
		RepString() endpoint.Endpoint
		WrapString() endpoint.Endpoint
		Bytes() endpoint.Endpoint
		OptBytes() endpoint.Endpoint
		RepBytes() endpoint.Endpoint
		WrapBytes() endpoint.Endpoint
	},
	mdw []endpoint.Middleware,
	opts ...http.ServerOption,
) http1.Handler {
	r := mux.NewRouter()
	r.Name("/leo.example.demo.v1.Body/Bool").
		Methods("PUT").
		Path("/v1/bool").
		Handler(http.NewServer(
			endpointx.Chain(endpoints.Bool(), mdw...),
			func(ctx context.Context, r *http1.Request) (any, error) {
				req := &BodyRequest{}
				body, err := io.ReadAll(r.Body)
				if err != nil {
					return nil, err
				}
				if v, err := strconv.ParseBool(string(body)); err != nil {
					return nil, err
				} else {
					req.Bool = v
				}
				queries := r.URL.Query()
				if v, err := strconv.ParseInt(queries.Get("int32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Int32 = int32(v)
				}
				if v, err := strconv.ParseInt(queries.Get("sint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Sint32 = int32(v)
				}
				if v, err := strconv.ParseUint(queries.Get("uint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Uint32 = uint32(v)
				}
				if v, err := strconv.ParseInt(queries.Get("int64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Int64 = v
				}
				if v, err := strconv.ParseInt(queries.Get("sint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Sint64 = v
				}
				if v, err := strconv.ParseUint(queries.Get("uint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Uint64 = v
				}
				if v, err := strconv.ParseInt(queries.Get("sfixed32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Sfixed32 = int32(v)
				}
				if v, err := strconv.ParseUint(queries.Get("fixed32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Fixed32 = uint32(v)
				}
				if v, err := strconv.ParseFloat(queries.Get("float"), 32); err != nil {
					return nil, err
				} else {
					req.Float = float32(v)
				}
				if v, err := strconv.ParseInt(queries.Get("sfixed64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Sfixed64 = v
				}
				if v, err := strconv.ParseUint(queries.Get("fixed64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Fixed64 = v
				}
				if v, err := strconv.ParseFloat(queries.Get("double"), 32); err != nil {
					return nil, err
				} else {
					req.Double = v
				}
				req.String_ = queries.Get("string")
				req.Bytes = []byte(queries.Get("bytes"))
				if v, err := strconv.ParseBool(queries.Get("opt_bool")); err != nil {
					return nil, err
				} else {
					req.OptBool = proto.Bool(v)
				}
				if v, err := strconv.ParseInt(queries.Get("opt_int32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptInt32 = proto.Int32(int32(v))
				}
				if v, err := strconv.ParseInt(queries.Get("opt_sint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptSint32 = proto.Int32(int32(v))
				}
				if v, err := strconv.ParseUint(queries.Get("opt_uint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptUint32 = proto.Uint32(uint32(v))
				}
				if v, err := strconv.ParseInt(queries.Get("opt_int64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptInt64 = proto.Int64(v)
				}
				if v, err := strconv.ParseInt(queries.Get("opt_sint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptSint64 = proto.Int64(v)
				}
				if v, err := strconv.ParseUint(queries.Get("opt_uint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptUint64 = proto.Uint64(v)
				}
				if v, err := strconv.ParseInt(queries.Get("opt_sfixed32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptSfixed32 = proto.Int32(int32(v))
				}
				if v, err := strconv.ParseUint(queries.Get("opt_fixed32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptFixed32 = proto.Uint32(uint32(v))
				}
				if v, err := strconv.ParseFloat(queries.Get("opt_float"), 32); err != nil {
					return nil, err
				} else {
					req.OptFloat = proto.Float32(float32(v))
				}
				if v, err := strconv.ParseInt(queries.Get("opt_sfixed64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptSfixed64 = proto.Int64(v)
				}
				if v, err := strconv.ParseUint(queries.Get("opt_fixed64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptFixed64 = proto.Uint64(v)
				}
				if v, err := strconv.ParseFloat(queries.Get("opt_double"), 32); err != nil {
					return nil, err
				} else {
					req.OptDouble = proto.Float64(v)
				}
				req.OptString = proto.String(queries.Get("opt_string"))
				req.OptBytes = []byte(queries.Get("opt_bytes"))
				if v, err := strconv.ParseFloat(queries.Get("wrap_double"), 64); err != nil {
					return nil, err
				} else {
					req.WrapDouble = wrapperspb.Double(v)
				}
				if v, err := strconv.ParseFloat(queries.Get("wrap_float"), 32); err != nil {
					return nil, err
				} else {
					req.WrapFloat = wrapperspb.Float(float32(v))
				}
				if v, err := strconv.ParseInt(queries.Get("wrap_int64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.WrapInt64 = wrapperspb.Int64(v)
				}
				if v, err := strconv.ParseUint(queries.Get("wrap_uint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.WrapUint64 = wrapperspb.UInt64(v)
				}
				if v, err := strconv.ParseInt(queries.Get("wrap_int32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.WrapInt32 = wrapperspb.Int32(int32(v))
				}
				if v, err := strconv.ParseUint(queries.Get("wrap_uint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.WrapUint32 = wrapperspb.UInt32(uint32(v))
				}
				if v, err := strconv.ParseBool(queries.Get("wrap_bool")); err != nil {
					return nil, err
				} else {
					req.WrapBool = wrapperspb.Bool(v)
				}
				req.WrapString = wrapperspb.String(queries.Get("wrap_string"))
				req.WrapBytes = wrapperspb.Bytes([]byte(queries.Get("wrap_bytes")))
				if v, err := convx.ParseBoolSlice(queries["rep_bool"]); err != nil {
					return nil, err
				} else {
					req.RepBool = v
				}
				if v, err := convx.ParseIntSlice[int32](queries["rep_int32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepInt32 = v
				}
				if v, err := convx.ParseIntSlice[int32](queries["rep_sint32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepSint32 = v
				}
				if v, err := convx.ParseUintSlice[uint32](queries["rep_uint32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepUint32 = v
				}
				if v, err := convx.ParseIntSlice[int64](queries["rep_int64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepInt64 = v
				}
				if v, err := convx.ParseIntSlice[int64](queries["rep_sint64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepSint64 = v
				}
				if v, err := convx.ParseUintSlice[uint64](queries["rep_uint64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepUint64 = v
				}
				if v, err := convx.ParseIntSlice[int32](queries["rep_sfixed32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepSfixed32 = v
				}
				if v, err := convx.ParseUintSlice[uint32](queries["rep_fixed32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepFixed32 = v
				}
				if v, err := convx.ParseFloatSlice[float32](queries["rep_float"], 32); err != nil {
					return nil, err
				} else {
					req.RepFloat = v
				}
				if v, err := convx.ParseIntSlice[int64](queries["rep_sfixed64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepSfixed64 = v
				}
				if v, err := convx.ParseUintSlice[uint64](queries["rep_fixed64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepFixed64 = v
				}
				if v, err := convx.ParseFloatSlice[float64](queries["rep_double"], 32); err != nil {
					return nil, err
				} else {
					req.RepDouble = v
				}
				req.RepString = queries["rep_string"]
				req.RepBytes = convx.ParseBytesSlice(queries["rep_bytes"])
				return req, nil
			},
			func(ctx context.Context, w http1.ResponseWriter, obj any) error {
				resp := obj.(*emptypb.Empty)
				_ = resp
				w.WriteHeader(http1.StatusOK)
				data, err := protojson.Marshal(resp)
				if err != nil {
					return err
				}
				if _, err := w.Write(data); err != nil {
					return err
				}
				return nil
			},
			opts...,
		))
	r.Name("/leo.example.demo.v1.Body/OptBool").
		Methods("PUT").
		Path("/v1/opt_bool").
		Handler(http.NewServer(
			endpointx.Chain(endpoints.OptBool(), mdw...),
			func(ctx context.Context, r *http1.Request) (any, error) {
				req := &BodyRequest{}
				body, err := io.ReadAll(r.Body)
				if err != nil {
					return nil, err
				}
				if v, err := strconv.ParseBool(string(body)); err != nil {
					return nil, err
				} else {
					req.OptBool = proto.Bool(v)
				}
				queries := r.URL.Query()
				if v, err := strconv.ParseBool(queries.Get("bool")); err != nil {
					return nil, err
				} else {
					req.Bool = v
				}
				if v, err := strconv.ParseInt(queries.Get("int32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Int32 = int32(v)
				}
				if v, err := strconv.ParseInt(queries.Get("sint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Sint32 = int32(v)
				}
				if v, err := strconv.ParseUint(queries.Get("uint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Uint32 = uint32(v)
				}
				if v, err := strconv.ParseInt(queries.Get("int64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Int64 = v
				}
				if v, err := strconv.ParseInt(queries.Get("sint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Sint64 = v
				}
				if v, err := strconv.ParseUint(queries.Get("uint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Uint64 = v
				}
				if v, err := strconv.ParseInt(queries.Get("sfixed32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Sfixed32 = int32(v)
				}
				if v, err := strconv.ParseUint(queries.Get("fixed32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Fixed32 = uint32(v)
				}
				if v, err := strconv.ParseFloat(queries.Get("float"), 32); err != nil {
					return nil, err
				} else {
					req.Float = float32(v)
				}
				if v, err := strconv.ParseInt(queries.Get("sfixed64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Sfixed64 = v
				}
				if v, err := strconv.ParseUint(queries.Get("fixed64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Fixed64 = v
				}
				if v, err := strconv.ParseFloat(queries.Get("double"), 32); err != nil {
					return nil, err
				} else {
					req.Double = v
				}
				req.String_ = queries.Get("string")
				req.Bytes = []byte(queries.Get("bytes"))
				if v, err := strconv.ParseInt(queries.Get("opt_int32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptInt32 = proto.Int32(int32(v))
				}
				if v, err := strconv.ParseInt(queries.Get("opt_sint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptSint32 = proto.Int32(int32(v))
				}
				if v, err := strconv.ParseUint(queries.Get("opt_uint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptUint32 = proto.Uint32(uint32(v))
				}
				if v, err := strconv.ParseInt(queries.Get("opt_int64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptInt64 = proto.Int64(v)
				}
				if v, err := strconv.ParseInt(queries.Get("opt_sint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptSint64 = proto.Int64(v)
				}
				if v, err := strconv.ParseUint(queries.Get("opt_uint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptUint64 = proto.Uint64(v)
				}
				if v, err := strconv.ParseInt(queries.Get("opt_sfixed32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptSfixed32 = proto.Int32(int32(v))
				}
				if v, err := strconv.ParseUint(queries.Get("opt_fixed32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptFixed32 = proto.Uint32(uint32(v))
				}
				if v, err := strconv.ParseFloat(queries.Get("opt_float"), 32); err != nil {
					return nil, err
				} else {
					req.OptFloat = proto.Float32(float32(v))
				}
				if v, err := strconv.ParseInt(queries.Get("opt_sfixed64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptSfixed64 = proto.Int64(v)
				}
				if v, err := strconv.ParseUint(queries.Get("opt_fixed64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptFixed64 = proto.Uint64(v)
				}
				if v, err := strconv.ParseFloat(queries.Get("opt_double"), 32); err != nil {
					return nil, err
				} else {
					req.OptDouble = proto.Float64(v)
				}
				req.OptString = proto.String(queries.Get("opt_string"))
				req.OptBytes = []byte(queries.Get("opt_bytes"))
				if v, err := strconv.ParseFloat(queries.Get("wrap_double"), 64); err != nil {
					return nil, err
				} else {
					req.WrapDouble = wrapperspb.Double(v)
				}
				if v, err := strconv.ParseFloat(queries.Get("wrap_float"), 32); err != nil {
					return nil, err
				} else {
					req.WrapFloat = wrapperspb.Float(float32(v))
				}
				if v, err := strconv.ParseInt(queries.Get("wrap_int64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.WrapInt64 = wrapperspb.Int64(v)
				}
				if v, err := strconv.ParseUint(queries.Get("wrap_uint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.WrapUint64 = wrapperspb.UInt64(v)
				}
				if v, err := strconv.ParseInt(queries.Get("wrap_int32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.WrapInt32 = wrapperspb.Int32(int32(v))
				}
				if v, err := strconv.ParseUint(queries.Get("wrap_uint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.WrapUint32 = wrapperspb.UInt32(uint32(v))
				}
				if v, err := strconv.ParseBool(queries.Get("wrap_bool")); err != nil {
					return nil, err
				} else {
					req.WrapBool = wrapperspb.Bool(v)
				}
				req.WrapString = wrapperspb.String(queries.Get("wrap_string"))
				req.WrapBytes = wrapperspb.Bytes([]byte(queries.Get("wrap_bytes")))
				if v, err := convx.ParseBoolSlice(queries["rep_bool"]); err != nil {
					return nil, err
				} else {
					req.RepBool = v
				}
				if v, err := convx.ParseIntSlice[int32](queries["rep_int32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepInt32 = v
				}
				if v, err := convx.ParseIntSlice[int32](queries["rep_sint32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepSint32 = v
				}
				if v, err := convx.ParseUintSlice[uint32](queries["rep_uint32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepUint32 = v
				}
				if v, err := convx.ParseIntSlice[int64](queries["rep_int64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepInt64 = v
				}
				if v, err := convx.ParseIntSlice[int64](queries["rep_sint64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepSint64 = v
				}
				if v, err := convx.ParseUintSlice[uint64](queries["rep_uint64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepUint64 = v
				}
				if v, err := convx.ParseIntSlice[int32](queries["rep_sfixed32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepSfixed32 = v
				}
				if v, err := convx.ParseUintSlice[uint32](queries["rep_fixed32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepFixed32 = v
				}
				if v, err := convx.ParseFloatSlice[float32](queries["rep_float"], 32); err != nil {
					return nil, err
				} else {
					req.RepFloat = v
				}
				if v, err := convx.ParseIntSlice[int64](queries["rep_sfixed64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepSfixed64 = v
				}
				if v, err := convx.ParseUintSlice[uint64](queries["rep_fixed64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepFixed64 = v
				}
				if v, err := convx.ParseFloatSlice[float64](queries["rep_double"], 32); err != nil {
					return nil, err
				} else {
					req.RepDouble = v
				}
				req.RepString = queries["rep_string"]
				req.RepBytes = convx.ParseBytesSlice(queries["rep_bytes"])
				return req, nil
			},
			func(ctx context.Context, w http1.ResponseWriter, obj any) error {
				resp := obj.(*emptypb.Empty)
				_ = resp
				w.WriteHeader(http1.StatusOK)
				data, err := protojson.Marshal(resp)
				if err != nil {
					return err
				}
				if _, err := w.Write(data); err != nil {
					return err
				}
				return nil
			},
			opts...,
		))
	r.Name("/leo.example.demo.v1.Body/RepBool").
		Methods("PUT").
		Path("/v1/rep_bool").
		Handler(http.NewServer(
			endpointx.Chain(endpoints.RepBool(), mdw...),
			func(ctx context.Context, r *http1.Request) (any, error) {
				req := &BodyRequest{}
				body, err := io.ReadAll(r.Body)
				if err != nil {
					return nil, err
				}
				if v, err := strconv.ParseBool(string(body)); err != nil {
					return nil, err
				} else {
					req.RepBool = v
				}
				queries := r.URL.Query()
				if v, err := strconv.ParseBool(queries.Get("bool")); err != nil {
					return nil, err
				} else {
					req.Bool = v
				}
				if v, err := strconv.ParseInt(queries.Get("int32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Int32 = int32(v)
				}
				if v, err := strconv.ParseInt(queries.Get("sint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Sint32 = int32(v)
				}
				if v, err := strconv.ParseUint(queries.Get("uint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Uint32 = uint32(v)
				}
				if v, err := strconv.ParseInt(queries.Get("int64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Int64 = v
				}
				if v, err := strconv.ParseInt(queries.Get("sint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Sint64 = v
				}
				if v, err := strconv.ParseUint(queries.Get("uint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Uint64 = v
				}
				if v, err := strconv.ParseInt(queries.Get("sfixed32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Sfixed32 = int32(v)
				}
				if v, err := strconv.ParseUint(queries.Get("fixed32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Fixed32 = uint32(v)
				}
				if v, err := strconv.ParseFloat(queries.Get("float"), 32); err != nil {
					return nil, err
				} else {
					req.Float = float32(v)
				}
				if v, err := strconv.ParseInt(queries.Get("sfixed64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Sfixed64 = v
				}
				if v, err := strconv.ParseUint(queries.Get("fixed64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Fixed64 = v
				}
				if v, err := strconv.ParseFloat(queries.Get("double"), 32); err != nil {
					return nil, err
				} else {
					req.Double = v
				}
				req.String_ = queries.Get("string")
				req.Bytes = []byte(queries.Get("bytes"))
				if v, err := strconv.ParseBool(queries.Get("opt_bool")); err != nil {
					return nil, err
				} else {
					req.OptBool = proto.Bool(v)
				}
				if v, err := strconv.ParseInt(queries.Get("opt_int32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptInt32 = proto.Int32(int32(v))
				}
				if v, err := strconv.ParseInt(queries.Get("opt_sint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptSint32 = proto.Int32(int32(v))
				}
				if v, err := strconv.ParseUint(queries.Get("opt_uint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptUint32 = proto.Uint32(uint32(v))
				}
				if v, err := strconv.ParseInt(queries.Get("opt_int64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptInt64 = proto.Int64(v)
				}
				if v, err := strconv.ParseInt(queries.Get("opt_sint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptSint64 = proto.Int64(v)
				}
				if v, err := strconv.ParseUint(queries.Get("opt_uint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptUint64 = proto.Uint64(v)
				}
				if v, err := strconv.ParseInt(queries.Get("opt_sfixed32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptSfixed32 = proto.Int32(int32(v))
				}
				if v, err := strconv.ParseUint(queries.Get("opt_fixed32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptFixed32 = proto.Uint32(uint32(v))
				}
				if v, err := strconv.ParseFloat(queries.Get("opt_float"), 32); err != nil {
					return nil, err
				} else {
					req.OptFloat = proto.Float32(float32(v))
				}
				if v, err := strconv.ParseInt(queries.Get("opt_sfixed64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptSfixed64 = proto.Int64(v)
				}
				if v, err := strconv.ParseUint(queries.Get("opt_fixed64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptFixed64 = proto.Uint64(v)
				}
				if v, err := strconv.ParseFloat(queries.Get("opt_double"), 32); err != nil {
					return nil, err
				} else {
					req.OptDouble = proto.Float64(v)
				}
				req.OptString = proto.String(queries.Get("opt_string"))
				req.OptBytes = []byte(queries.Get("opt_bytes"))
				if v, err := strconv.ParseFloat(queries.Get("wrap_double"), 64); err != nil {
					return nil, err
				} else {
					req.WrapDouble = wrapperspb.Double(v)
				}
				if v, err := strconv.ParseFloat(queries.Get("wrap_float"), 32); err != nil {
					return nil, err
				} else {
					req.WrapFloat = wrapperspb.Float(float32(v))
				}
				if v, err := strconv.ParseInt(queries.Get("wrap_int64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.WrapInt64 = wrapperspb.Int64(v)
				}
				if v, err := strconv.ParseUint(queries.Get("wrap_uint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.WrapUint64 = wrapperspb.UInt64(v)
				}
				if v, err := strconv.ParseInt(queries.Get("wrap_int32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.WrapInt32 = wrapperspb.Int32(int32(v))
				}
				if v, err := strconv.ParseUint(queries.Get("wrap_uint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.WrapUint32 = wrapperspb.UInt32(uint32(v))
				}
				if v, err := strconv.ParseBool(queries.Get("wrap_bool")); err != nil {
					return nil, err
				} else {
					req.WrapBool = wrapperspb.Bool(v)
				}
				req.WrapString = wrapperspb.String(queries.Get("wrap_string"))
				req.WrapBytes = wrapperspb.Bytes([]byte(queries.Get("wrap_bytes")))
				if v, err := convx.ParseIntSlice[int32](queries["rep_int32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepInt32 = v
				}
				if v, err := convx.ParseIntSlice[int32](queries["rep_sint32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepSint32 = v
				}
				if v, err := convx.ParseUintSlice[uint32](queries["rep_uint32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepUint32 = v
				}
				if v, err := convx.ParseIntSlice[int64](queries["rep_int64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepInt64 = v
				}
				if v, err := convx.ParseIntSlice[int64](queries["rep_sint64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepSint64 = v
				}
				if v, err := convx.ParseUintSlice[uint64](queries["rep_uint64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepUint64 = v
				}
				if v, err := convx.ParseIntSlice[int32](queries["rep_sfixed32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepSfixed32 = v
				}
				if v, err := convx.ParseUintSlice[uint32](queries["rep_fixed32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepFixed32 = v
				}
				if v, err := convx.ParseFloatSlice[float32](queries["rep_float"], 32); err != nil {
					return nil, err
				} else {
					req.RepFloat = v
				}
				if v, err := convx.ParseIntSlice[int64](queries["rep_sfixed64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepSfixed64 = v
				}
				if v, err := convx.ParseUintSlice[uint64](queries["rep_fixed64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepFixed64 = v
				}
				if v, err := convx.ParseFloatSlice[float64](queries["rep_double"], 32); err != nil {
					return nil, err
				} else {
					req.RepDouble = v
				}
				req.RepString = queries["rep_string"]
				req.RepBytes = convx.ParseBytesSlice(queries["rep_bytes"])
				return req, nil
			},
			func(ctx context.Context, w http1.ResponseWriter, obj any) error {
				resp := obj.(*emptypb.Empty)
				_ = resp
				w.WriteHeader(http1.StatusOK)
				data, err := protojson.Marshal(resp)
				if err != nil {
					return err
				}
				if _, err := w.Write(data); err != nil {
					return err
				}
				return nil
			},
			opts...,
		))
	r.Name("/leo.example.demo.v1.Body/WrapBool").
		Methods("PUT").
		Path("/v1/wrap_bool").
		Handler(http.NewServer(
			endpointx.Chain(endpoints.WrapBool(), mdw...),
			func(ctx context.Context, r *http1.Request) (any, error) {
				req := &BodyRequest{}
				body, err := io.ReadAll(r.Body)
				if err != nil {
					return nil, err
				}
				if v, err := strconv.ParseBool(string(body)); err != nil {
					return nil, err
				} else {
					req.WrapBool = wrapperspb.Bool(v)
				}
				queries := r.URL.Query()
				if v, err := strconv.ParseBool(queries.Get("bool")); err != nil {
					return nil, err
				} else {
					req.Bool = v
				}
				if v, err := strconv.ParseInt(queries.Get("int32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Int32 = int32(v)
				}
				if v, err := strconv.ParseInt(queries.Get("sint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Sint32 = int32(v)
				}
				if v, err := strconv.ParseUint(queries.Get("uint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Uint32 = uint32(v)
				}
				if v, err := strconv.ParseInt(queries.Get("int64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Int64 = v
				}
				if v, err := strconv.ParseInt(queries.Get("sint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Sint64 = v
				}
				if v, err := strconv.ParseUint(queries.Get("uint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Uint64 = v
				}
				if v, err := strconv.ParseInt(queries.Get("sfixed32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Sfixed32 = int32(v)
				}
				if v, err := strconv.ParseUint(queries.Get("fixed32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Fixed32 = uint32(v)
				}
				if v, err := strconv.ParseFloat(queries.Get("float"), 32); err != nil {
					return nil, err
				} else {
					req.Float = float32(v)
				}
				if v, err := strconv.ParseInt(queries.Get("sfixed64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Sfixed64 = v
				}
				if v, err := strconv.ParseUint(queries.Get("fixed64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Fixed64 = v
				}
				if v, err := strconv.ParseFloat(queries.Get("double"), 32); err != nil {
					return nil, err
				} else {
					req.Double = v
				}
				req.String_ = queries.Get("string")
				req.Bytes = []byte(queries.Get("bytes"))
				if v, err := strconv.ParseBool(queries.Get("opt_bool")); err != nil {
					return nil, err
				} else {
					req.OptBool = proto.Bool(v)
				}
				if v, err := strconv.ParseInt(queries.Get("opt_int32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptInt32 = proto.Int32(int32(v))
				}
				if v, err := strconv.ParseInt(queries.Get("opt_sint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptSint32 = proto.Int32(int32(v))
				}
				if v, err := strconv.ParseUint(queries.Get("opt_uint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptUint32 = proto.Uint32(uint32(v))
				}
				if v, err := strconv.ParseInt(queries.Get("opt_int64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptInt64 = proto.Int64(v)
				}
				if v, err := strconv.ParseInt(queries.Get("opt_sint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptSint64 = proto.Int64(v)
				}
				if v, err := strconv.ParseUint(queries.Get("opt_uint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptUint64 = proto.Uint64(v)
				}
				if v, err := strconv.ParseInt(queries.Get("opt_sfixed32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptSfixed32 = proto.Int32(int32(v))
				}
				if v, err := strconv.ParseUint(queries.Get("opt_fixed32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptFixed32 = proto.Uint32(uint32(v))
				}
				if v, err := strconv.ParseFloat(queries.Get("opt_float"), 32); err != nil {
					return nil, err
				} else {
					req.OptFloat = proto.Float32(float32(v))
				}
				if v, err := strconv.ParseInt(queries.Get("opt_sfixed64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptSfixed64 = proto.Int64(v)
				}
				if v, err := strconv.ParseUint(queries.Get("opt_fixed64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptFixed64 = proto.Uint64(v)
				}
				if v, err := strconv.ParseFloat(queries.Get("opt_double"), 32); err != nil {
					return nil, err
				} else {
					req.OptDouble = proto.Float64(v)
				}
				req.OptString = proto.String(queries.Get("opt_string"))
				req.OptBytes = []byte(queries.Get("opt_bytes"))
				if v, err := strconv.ParseFloat(queries.Get("wrap_double"), 64); err != nil {
					return nil, err
				} else {
					req.WrapDouble = wrapperspb.Double(v)
				}
				if v, err := strconv.ParseFloat(queries.Get("wrap_float"), 32); err != nil {
					return nil, err
				} else {
					req.WrapFloat = wrapperspb.Float(float32(v))
				}
				if v, err := strconv.ParseInt(queries.Get("wrap_int64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.WrapInt64 = wrapperspb.Int64(v)
				}
				if v, err := strconv.ParseUint(queries.Get("wrap_uint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.WrapUint64 = wrapperspb.UInt64(v)
				}
				if v, err := strconv.ParseInt(queries.Get("wrap_int32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.WrapInt32 = wrapperspb.Int32(int32(v))
				}
				if v, err := strconv.ParseUint(queries.Get("wrap_uint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.WrapUint32 = wrapperspb.UInt32(uint32(v))
				}
				req.WrapString = wrapperspb.String(queries.Get("wrap_string"))
				req.WrapBytes = wrapperspb.Bytes([]byte(queries.Get("wrap_bytes")))
				if v, err := convx.ParseBoolSlice(queries["rep_bool"]); err != nil {
					return nil, err
				} else {
					req.RepBool = v
				}
				if v, err := convx.ParseIntSlice[int32](queries["rep_int32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepInt32 = v
				}
				if v, err := convx.ParseIntSlice[int32](queries["rep_sint32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepSint32 = v
				}
				if v, err := convx.ParseUintSlice[uint32](queries["rep_uint32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepUint32 = v
				}
				if v, err := convx.ParseIntSlice[int64](queries["rep_int64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepInt64 = v
				}
				if v, err := convx.ParseIntSlice[int64](queries["rep_sint64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepSint64 = v
				}
				if v, err := convx.ParseUintSlice[uint64](queries["rep_uint64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepUint64 = v
				}
				if v, err := convx.ParseIntSlice[int32](queries["rep_sfixed32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepSfixed32 = v
				}
				if v, err := convx.ParseUintSlice[uint32](queries["rep_fixed32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepFixed32 = v
				}
				if v, err := convx.ParseFloatSlice[float32](queries["rep_float"], 32); err != nil {
					return nil, err
				} else {
					req.RepFloat = v
				}
				if v, err := convx.ParseIntSlice[int64](queries["rep_sfixed64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepSfixed64 = v
				}
				if v, err := convx.ParseUintSlice[uint64](queries["rep_fixed64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepFixed64 = v
				}
				if v, err := convx.ParseFloatSlice[float64](queries["rep_double"], 32); err != nil {
					return nil, err
				} else {
					req.RepDouble = v
				}
				req.RepString = queries["rep_string"]
				req.RepBytes = convx.ParseBytesSlice(queries["rep_bytes"])
				return req, nil
			},
			func(ctx context.Context, w http1.ResponseWriter, obj any) error {
				resp := obj.(*emptypb.Empty)
				_ = resp
				w.WriteHeader(http1.StatusOK)
				data, err := protojson.Marshal(resp)
				if err != nil {
					return err
				}
				if _, err := w.Write(data); err != nil {
					return err
				}
				return nil
			},
			opts...,
		))
	r.Name("/leo.example.demo.v1.Body/Int32").
		Methods("PUT").
		Path("/v1/int32").
		Handler(http.NewServer(
			endpointx.Chain(endpoints.Int32(), mdw...),
			func(ctx context.Context, r *http1.Request) (any, error) {
				req := &BodyRequest{}
				body, err := io.ReadAll(r.Body)
				if err != nil {
					return nil, err
				}
				if v, err := strconv.ParseInt(string(body), 10, 32); err != nil {
					return nil, err
				} else {
					req.Int32 = int32(v)
				}
				queries := r.URL.Query()
				if v, err := strconv.ParseBool(queries.Get("bool")); err != nil {
					return nil, err
				} else {
					req.Bool = v
				}
				if v, err := strconv.ParseInt(queries.Get("sint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Sint32 = int32(v)
				}
				if v, err := strconv.ParseUint(queries.Get("uint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Uint32 = uint32(v)
				}
				if v, err := strconv.ParseInt(queries.Get("int64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Int64 = v
				}
				if v, err := strconv.ParseInt(queries.Get("sint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Sint64 = v
				}
				if v, err := strconv.ParseUint(queries.Get("uint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Uint64 = v
				}
				if v, err := strconv.ParseInt(queries.Get("sfixed32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Sfixed32 = int32(v)
				}
				if v, err := strconv.ParseUint(queries.Get("fixed32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Fixed32 = uint32(v)
				}
				if v, err := strconv.ParseFloat(queries.Get("float"), 32); err != nil {
					return nil, err
				} else {
					req.Float = float32(v)
				}
				if v, err := strconv.ParseInt(queries.Get("sfixed64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Sfixed64 = v
				}
				if v, err := strconv.ParseUint(queries.Get("fixed64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Fixed64 = v
				}
				if v, err := strconv.ParseFloat(queries.Get("double"), 32); err != nil {
					return nil, err
				} else {
					req.Double = v
				}
				req.String_ = queries.Get("string")
				req.Bytes = []byte(queries.Get("bytes"))
				if v, err := strconv.ParseBool(queries.Get("opt_bool")); err != nil {
					return nil, err
				} else {
					req.OptBool = proto.Bool(v)
				}
				if v, err := strconv.ParseInt(queries.Get("opt_int32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptInt32 = proto.Int32(int32(v))
				}
				if v, err := strconv.ParseInt(queries.Get("opt_sint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptSint32 = proto.Int32(int32(v))
				}
				if v, err := strconv.ParseUint(queries.Get("opt_uint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptUint32 = proto.Uint32(uint32(v))
				}
				if v, err := strconv.ParseInt(queries.Get("opt_int64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptInt64 = proto.Int64(v)
				}
				if v, err := strconv.ParseInt(queries.Get("opt_sint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptSint64 = proto.Int64(v)
				}
				if v, err := strconv.ParseUint(queries.Get("opt_uint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptUint64 = proto.Uint64(v)
				}
				if v, err := strconv.ParseInt(queries.Get("opt_sfixed32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptSfixed32 = proto.Int32(int32(v))
				}
				if v, err := strconv.ParseUint(queries.Get("opt_fixed32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptFixed32 = proto.Uint32(uint32(v))
				}
				if v, err := strconv.ParseFloat(queries.Get("opt_float"), 32); err != nil {
					return nil, err
				} else {
					req.OptFloat = proto.Float32(float32(v))
				}
				if v, err := strconv.ParseInt(queries.Get("opt_sfixed64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptSfixed64 = proto.Int64(v)
				}
				if v, err := strconv.ParseUint(queries.Get("opt_fixed64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptFixed64 = proto.Uint64(v)
				}
				if v, err := strconv.ParseFloat(queries.Get("opt_double"), 32); err != nil {
					return nil, err
				} else {
					req.OptDouble = proto.Float64(v)
				}
				req.OptString = proto.String(queries.Get("opt_string"))
				req.OptBytes = []byte(queries.Get("opt_bytes"))
				if v, err := strconv.ParseFloat(queries.Get("wrap_double"), 64); err != nil {
					return nil, err
				} else {
					req.WrapDouble = wrapperspb.Double(v)
				}
				if v, err := strconv.ParseFloat(queries.Get("wrap_float"), 32); err != nil {
					return nil, err
				} else {
					req.WrapFloat = wrapperspb.Float(float32(v))
				}
				if v, err := strconv.ParseInt(queries.Get("wrap_int64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.WrapInt64 = wrapperspb.Int64(v)
				}
				if v, err := strconv.ParseUint(queries.Get("wrap_uint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.WrapUint64 = wrapperspb.UInt64(v)
				}
				if v, err := strconv.ParseInt(queries.Get("wrap_int32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.WrapInt32 = wrapperspb.Int32(int32(v))
				}
				if v, err := strconv.ParseUint(queries.Get("wrap_uint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.WrapUint32 = wrapperspb.UInt32(uint32(v))
				}
				if v, err := strconv.ParseBool(queries.Get("wrap_bool")); err != nil {
					return nil, err
				} else {
					req.WrapBool = wrapperspb.Bool(v)
				}
				req.WrapString = wrapperspb.String(queries.Get("wrap_string"))
				req.WrapBytes = wrapperspb.Bytes([]byte(queries.Get("wrap_bytes")))
				if v, err := convx.ParseBoolSlice(queries["rep_bool"]); err != nil {
					return nil, err
				} else {
					req.RepBool = v
				}
				if v, err := convx.ParseIntSlice[int32](queries["rep_int32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepInt32 = v
				}
				if v, err := convx.ParseIntSlice[int32](queries["rep_sint32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepSint32 = v
				}
				if v, err := convx.ParseUintSlice[uint32](queries["rep_uint32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepUint32 = v
				}
				if v, err := convx.ParseIntSlice[int64](queries["rep_int64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepInt64 = v
				}
				if v, err := convx.ParseIntSlice[int64](queries["rep_sint64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepSint64 = v
				}
				if v, err := convx.ParseUintSlice[uint64](queries["rep_uint64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepUint64 = v
				}
				if v, err := convx.ParseIntSlice[int32](queries["rep_sfixed32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepSfixed32 = v
				}
				if v, err := convx.ParseUintSlice[uint32](queries["rep_fixed32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepFixed32 = v
				}
				if v, err := convx.ParseFloatSlice[float32](queries["rep_float"], 32); err != nil {
					return nil, err
				} else {
					req.RepFloat = v
				}
				if v, err := convx.ParseIntSlice[int64](queries["rep_sfixed64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepSfixed64 = v
				}
				if v, err := convx.ParseUintSlice[uint64](queries["rep_fixed64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepFixed64 = v
				}
				if v, err := convx.ParseFloatSlice[float64](queries["rep_double"], 32); err != nil {
					return nil, err
				} else {
					req.RepDouble = v
				}
				req.RepString = queries["rep_string"]
				req.RepBytes = convx.ParseBytesSlice(queries["rep_bytes"])
				return req, nil
			},
			func(ctx context.Context, w http1.ResponseWriter, obj any) error {
				resp := obj.(*emptypb.Empty)
				_ = resp
				w.WriteHeader(http1.StatusOK)
				data, err := protojson.Marshal(resp)
				if err != nil {
					return err
				}
				if _, err := w.Write(data); err != nil {
					return err
				}
				return nil
			},
			opts...,
		))
	r.Name("/leo.example.demo.v1.Body/OptInt32").
		Methods("PUT").
		Path("/v1/opt_int32").
		Handler(http.NewServer(
			endpointx.Chain(endpoints.OptInt32(), mdw...),
			func(ctx context.Context, r *http1.Request) (any, error) {
				req := &BodyRequest{}
				body, err := io.ReadAll(r.Body)
				if err != nil {
					return nil, err
				}
				if v, err := strconv.ParseInt(string(body), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptInt32 = proto.Int32(int32(v))
				}
				queries := r.URL.Query()
				if v, err := strconv.ParseBool(queries.Get("bool")); err != nil {
					return nil, err
				} else {
					req.Bool = v
				}
				if v, err := strconv.ParseInt(queries.Get("int32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Int32 = int32(v)
				}
				if v, err := strconv.ParseInt(queries.Get("sint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Sint32 = int32(v)
				}
				if v, err := strconv.ParseUint(queries.Get("uint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Uint32 = uint32(v)
				}
				if v, err := strconv.ParseInt(queries.Get("int64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Int64 = v
				}
				if v, err := strconv.ParseInt(queries.Get("sint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Sint64 = v
				}
				if v, err := strconv.ParseUint(queries.Get("uint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Uint64 = v
				}
				if v, err := strconv.ParseInt(queries.Get("sfixed32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Sfixed32 = int32(v)
				}
				if v, err := strconv.ParseUint(queries.Get("fixed32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Fixed32 = uint32(v)
				}
				if v, err := strconv.ParseFloat(queries.Get("float"), 32); err != nil {
					return nil, err
				} else {
					req.Float = float32(v)
				}
				if v, err := strconv.ParseInt(queries.Get("sfixed64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Sfixed64 = v
				}
				if v, err := strconv.ParseUint(queries.Get("fixed64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Fixed64 = v
				}
				if v, err := strconv.ParseFloat(queries.Get("double"), 32); err != nil {
					return nil, err
				} else {
					req.Double = v
				}
				req.String_ = queries.Get("string")
				req.Bytes = []byte(queries.Get("bytes"))
				if v, err := strconv.ParseBool(queries.Get("opt_bool")); err != nil {
					return nil, err
				} else {
					req.OptBool = proto.Bool(v)
				}
				if v, err := strconv.ParseInt(queries.Get("opt_sint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptSint32 = proto.Int32(int32(v))
				}
				if v, err := strconv.ParseUint(queries.Get("opt_uint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptUint32 = proto.Uint32(uint32(v))
				}
				if v, err := strconv.ParseInt(queries.Get("opt_int64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptInt64 = proto.Int64(v)
				}
				if v, err := strconv.ParseInt(queries.Get("opt_sint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptSint64 = proto.Int64(v)
				}
				if v, err := strconv.ParseUint(queries.Get("opt_uint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptUint64 = proto.Uint64(v)
				}
				if v, err := strconv.ParseInt(queries.Get("opt_sfixed32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptSfixed32 = proto.Int32(int32(v))
				}
				if v, err := strconv.ParseUint(queries.Get("opt_fixed32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptFixed32 = proto.Uint32(uint32(v))
				}
				if v, err := strconv.ParseFloat(queries.Get("opt_float"), 32); err != nil {
					return nil, err
				} else {
					req.OptFloat = proto.Float32(float32(v))
				}
				if v, err := strconv.ParseInt(queries.Get("opt_sfixed64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptSfixed64 = proto.Int64(v)
				}
				if v, err := strconv.ParseUint(queries.Get("opt_fixed64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptFixed64 = proto.Uint64(v)
				}
				if v, err := strconv.ParseFloat(queries.Get("opt_double"), 32); err != nil {
					return nil, err
				} else {
					req.OptDouble = proto.Float64(v)
				}
				req.OptString = proto.String(queries.Get("opt_string"))
				req.OptBytes = []byte(queries.Get("opt_bytes"))
				if v, err := strconv.ParseFloat(queries.Get("wrap_double"), 64); err != nil {
					return nil, err
				} else {
					req.WrapDouble = wrapperspb.Double(v)
				}
				if v, err := strconv.ParseFloat(queries.Get("wrap_float"), 32); err != nil {
					return nil, err
				} else {
					req.WrapFloat = wrapperspb.Float(float32(v))
				}
				if v, err := strconv.ParseInt(queries.Get("wrap_int64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.WrapInt64 = wrapperspb.Int64(v)
				}
				if v, err := strconv.ParseUint(queries.Get("wrap_uint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.WrapUint64 = wrapperspb.UInt64(v)
				}
				if v, err := strconv.ParseInt(queries.Get("wrap_int32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.WrapInt32 = wrapperspb.Int32(int32(v))
				}
				if v, err := strconv.ParseUint(queries.Get("wrap_uint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.WrapUint32 = wrapperspb.UInt32(uint32(v))
				}
				if v, err := strconv.ParseBool(queries.Get("wrap_bool")); err != nil {
					return nil, err
				} else {
					req.WrapBool = wrapperspb.Bool(v)
				}
				req.WrapString = wrapperspb.String(queries.Get("wrap_string"))
				req.WrapBytes = wrapperspb.Bytes([]byte(queries.Get("wrap_bytes")))
				if v, err := convx.ParseBoolSlice(queries["rep_bool"]); err != nil {
					return nil, err
				} else {
					req.RepBool = v
				}
				if v, err := convx.ParseIntSlice[int32](queries["rep_int32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepInt32 = v
				}
				if v, err := convx.ParseIntSlice[int32](queries["rep_sint32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepSint32 = v
				}
				if v, err := convx.ParseUintSlice[uint32](queries["rep_uint32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepUint32 = v
				}
				if v, err := convx.ParseIntSlice[int64](queries["rep_int64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepInt64 = v
				}
				if v, err := convx.ParseIntSlice[int64](queries["rep_sint64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepSint64 = v
				}
				if v, err := convx.ParseUintSlice[uint64](queries["rep_uint64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepUint64 = v
				}
				if v, err := convx.ParseIntSlice[int32](queries["rep_sfixed32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepSfixed32 = v
				}
				if v, err := convx.ParseUintSlice[uint32](queries["rep_fixed32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepFixed32 = v
				}
				if v, err := convx.ParseFloatSlice[float32](queries["rep_float"], 32); err != nil {
					return nil, err
				} else {
					req.RepFloat = v
				}
				if v, err := convx.ParseIntSlice[int64](queries["rep_sfixed64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepSfixed64 = v
				}
				if v, err := convx.ParseUintSlice[uint64](queries["rep_fixed64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepFixed64 = v
				}
				if v, err := convx.ParseFloatSlice[float64](queries["rep_double"], 32); err != nil {
					return nil, err
				} else {
					req.RepDouble = v
				}
				req.RepString = queries["rep_string"]
				req.RepBytes = convx.ParseBytesSlice(queries["rep_bytes"])
				return req, nil
			},
			func(ctx context.Context, w http1.ResponseWriter, obj any) error {
				resp := obj.(*emptypb.Empty)
				_ = resp
				w.WriteHeader(http1.StatusOK)
				data, err := protojson.Marshal(resp)
				if err != nil {
					return err
				}
				if _, err := w.Write(data); err != nil {
					return err
				}
				return nil
			},
			opts...,
		))
	r.Name("/leo.example.demo.v1.Body/RepInt32").
		Methods("PUT").
		Path("/v1/rep_int32").
		Handler(http.NewServer(
			endpointx.Chain(endpoints.RepInt32(), mdw...),
			func(ctx context.Context, r *http1.Request) (any, error) {
				req := &BodyRequest{}
				body, err := io.ReadAll(r.Body)
				if err != nil {
					return nil, err
				}
				if v, err := strconv.ParseInt(string(body), 10, 32); err != nil {
					return nil, err
				} else {
					req.RepInt32 = int32(v)
				}
				queries := r.URL.Query()
				if v, err := strconv.ParseBool(queries.Get("bool")); err != nil {
					return nil, err
				} else {
					req.Bool = v
				}
				if v, err := strconv.ParseInt(queries.Get("int32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Int32 = int32(v)
				}
				if v, err := strconv.ParseInt(queries.Get("sint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Sint32 = int32(v)
				}
				if v, err := strconv.ParseUint(queries.Get("uint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Uint32 = uint32(v)
				}
				if v, err := strconv.ParseInt(queries.Get("int64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Int64 = v
				}
				if v, err := strconv.ParseInt(queries.Get("sint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Sint64 = v
				}
				if v, err := strconv.ParseUint(queries.Get("uint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Uint64 = v
				}
				if v, err := strconv.ParseInt(queries.Get("sfixed32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Sfixed32 = int32(v)
				}
				if v, err := strconv.ParseUint(queries.Get("fixed32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Fixed32 = uint32(v)
				}
				if v, err := strconv.ParseFloat(queries.Get("float"), 32); err != nil {
					return nil, err
				} else {
					req.Float = float32(v)
				}
				if v, err := strconv.ParseInt(queries.Get("sfixed64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Sfixed64 = v
				}
				if v, err := strconv.ParseUint(queries.Get("fixed64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Fixed64 = v
				}
				if v, err := strconv.ParseFloat(queries.Get("double"), 32); err != nil {
					return nil, err
				} else {
					req.Double = v
				}
				req.String_ = queries.Get("string")
				req.Bytes = []byte(queries.Get("bytes"))
				if v, err := strconv.ParseBool(queries.Get("opt_bool")); err != nil {
					return nil, err
				} else {
					req.OptBool = proto.Bool(v)
				}
				if v, err := strconv.ParseInt(queries.Get("opt_int32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptInt32 = proto.Int32(int32(v))
				}
				if v, err := strconv.ParseInt(queries.Get("opt_sint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptSint32 = proto.Int32(int32(v))
				}
				if v, err := strconv.ParseUint(queries.Get("opt_uint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptUint32 = proto.Uint32(uint32(v))
				}
				if v, err := strconv.ParseInt(queries.Get("opt_int64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptInt64 = proto.Int64(v)
				}
				if v, err := strconv.ParseInt(queries.Get("opt_sint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptSint64 = proto.Int64(v)
				}
				if v, err := strconv.ParseUint(queries.Get("opt_uint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptUint64 = proto.Uint64(v)
				}
				if v, err := strconv.ParseInt(queries.Get("opt_sfixed32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptSfixed32 = proto.Int32(int32(v))
				}
				if v, err := strconv.ParseUint(queries.Get("opt_fixed32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptFixed32 = proto.Uint32(uint32(v))
				}
				if v, err := strconv.ParseFloat(queries.Get("opt_float"), 32); err != nil {
					return nil, err
				} else {
					req.OptFloat = proto.Float32(float32(v))
				}
				if v, err := strconv.ParseInt(queries.Get("opt_sfixed64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptSfixed64 = proto.Int64(v)
				}
				if v, err := strconv.ParseUint(queries.Get("opt_fixed64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptFixed64 = proto.Uint64(v)
				}
				if v, err := strconv.ParseFloat(queries.Get("opt_double"), 32); err != nil {
					return nil, err
				} else {
					req.OptDouble = proto.Float64(v)
				}
				req.OptString = proto.String(queries.Get("opt_string"))
				req.OptBytes = []byte(queries.Get("opt_bytes"))
				if v, err := strconv.ParseFloat(queries.Get("wrap_double"), 64); err != nil {
					return nil, err
				} else {
					req.WrapDouble = wrapperspb.Double(v)
				}
				if v, err := strconv.ParseFloat(queries.Get("wrap_float"), 32); err != nil {
					return nil, err
				} else {
					req.WrapFloat = wrapperspb.Float(float32(v))
				}
				if v, err := strconv.ParseInt(queries.Get("wrap_int64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.WrapInt64 = wrapperspb.Int64(v)
				}
				if v, err := strconv.ParseUint(queries.Get("wrap_uint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.WrapUint64 = wrapperspb.UInt64(v)
				}
				if v, err := strconv.ParseInt(queries.Get("wrap_int32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.WrapInt32 = wrapperspb.Int32(int32(v))
				}
				if v, err := strconv.ParseUint(queries.Get("wrap_uint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.WrapUint32 = wrapperspb.UInt32(uint32(v))
				}
				if v, err := strconv.ParseBool(queries.Get("wrap_bool")); err != nil {
					return nil, err
				} else {
					req.WrapBool = wrapperspb.Bool(v)
				}
				req.WrapString = wrapperspb.String(queries.Get("wrap_string"))
				req.WrapBytes = wrapperspb.Bytes([]byte(queries.Get("wrap_bytes")))
				if v, err := convx.ParseBoolSlice(queries["rep_bool"]); err != nil {
					return nil, err
				} else {
					req.RepBool = v
				}
				if v, err := convx.ParseIntSlice[int32](queries["rep_sint32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepSint32 = v
				}
				if v, err := convx.ParseUintSlice[uint32](queries["rep_uint32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepUint32 = v
				}
				if v, err := convx.ParseIntSlice[int64](queries["rep_int64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepInt64 = v
				}
				if v, err := convx.ParseIntSlice[int64](queries["rep_sint64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepSint64 = v
				}
				if v, err := convx.ParseUintSlice[uint64](queries["rep_uint64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepUint64 = v
				}
				if v, err := convx.ParseIntSlice[int32](queries["rep_sfixed32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepSfixed32 = v
				}
				if v, err := convx.ParseUintSlice[uint32](queries["rep_fixed32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepFixed32 = v
				}
				if v, err := convx.ParseFloatSlice[float32](queries["rep_float"], 32); err != nil {
					return nil, err
				} else {
					req.RepFloat = v
				}
				if v, err := convx.ParseIntSlice[int64](queries["rep_sfixed64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepSfixed64 = v
				}
				if v, err := convx.ParseUintSlice[uint64](queries["rep_fixed64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepFixed64 = v
				}
				if v, err := convx.ParseFloatSlice[float64](queries["rep_double"], 32); err != nil {
					return nil, err
				} else {
					req.RepDouble = v
				}
				req.RepString = queries["rep_string"]
				req.RepBytes = convx.ParseBytesSlice(queries["rep_bytes"])
				return req, nil
			},
			func(ctx context.Context, w http1.ResponseWriter, obj any) error {
				resp := obj.(*emptypb.Empty)
				_ = resp
				w.WriteHeader(http1.StatusOK)
				data, err := protojson.Marshal(resp)
				if err != nil {
					return err
				}
				if _, err := w.Write(data); err != nil {
					return err
				}
				return nil
			},
			opts...,
		))
	r.Name("/leo.example.demo.v1.Body/WrapInt32").
		Methods("PUT").
		Path("/v1/wrap_int32").
		Handler(http.NewServer(
			endpointx.Chain(endpoints.WrapInt32(), mdw...),
			func(ctx context.Context, r *http1.Request) (any, error) {
				req := &BodyRequest{}
				body, err := io.ReadAll(r.Body)
				if err != nil {
					return nil, err
				}
				if v, err := strconv.ParseInt(string(body), 10, 32); err != nil {
					return nil, err
				} else {
					req.WrapInt32 = wrapperspb.Int32(int32(v))
				}
				queries := r.URL.Query()
				if v, err := strconv.ParseBool(queries.Get("bool")); err != nil {
					return nil, err
				} else {
					req.Bool = v
				}
				if v, err := strconv.ParseInt(queries.Get("int32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Int32 = int32(v)
				}
				if v, err := strconv.ParseInt(queries.Get("sint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Sint32 = int32(v)
				}
				if v, err := strconv.ParseUint(queries.Get("uint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Uint32 = uint32(v)
				}
				if v, err := strconv.ParseInt(queries.Get("int64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Int64 = v
				}
				if v, err := strconv.ParseInt(queries.Get("sint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Sint64 = v
				}
				if v, err := strconv.ParseUint(queries.Get("uint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Uint64 = v
				}
				if v, err := strconv.ParseInt(queries.Get("sfixed32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Sfixed32 = int32(v)
				}
				if v, err := strconv.ParseUint(queries.Get("fixed32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Fixed32 = uint32(v)
				}
				if v, err := strconv.ParseFloat(queries.Get("float"), 32); err != nil {
					return nil, err
				} else {
					req.Float = float32(v)
				}
				if v, err := strconv.ParseInt(queries.Get("sfixed64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Sfixed64 = v
				}
				if v, err := strconv.ParseUint(queries.Get("fixed64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Fixed64 = v
				}
				if v, err := strconv.ParseFloat(queries.Get("double"), 32); err != nil {
					return nil, err
				} else {
					req.Double = v
				}
				req.String_ = queries.Get("string")
				req.Bytes = []byte(queries.Get("bytes"))
				if v, err := strconv.ParseBool(queries.Get("opt_bool")); err != nil {
					return nil, err
				} else {
					req.OptBool = proto.Bool(v)
				}
				if v, err := strconv.ParseInt(queries.Get("opt_int32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptInt32 = proto.Int32(int32(v))
				}
				if v, err := strconv.ParseInt(queries.Get("opt_sint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptSint32 = proto.Int32(int32(v))
				}
				if v, err := strconv.ParseUint(queries.Get("opt_uint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptUint32 = proto.Uint32(uint32(v))
				}
				if v, err := strconv.ParseInt(queries.Get("opt_int64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptInt64 = proto.Int64(v)
				}
				if v, err := strconv.ParseInt(queries.Get("opt_sint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptSint64 = proto.Int64(v)
				}
				if v, err := strconv.ParseUint(queries.Get("opt_uint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptUint64 = proto.Uint64(v)
				}
				if v, err := strconv.ParseInt(queries.Get("opt_sfixed32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptSfixed32 = proto.Int32(int32(v))
				}
				if v, err := strconv.ParseUint(queries.Get("opt_fixed32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptFixed32 = proto.Uint32(uint32(v))
				}
				if v, err := strconv.ParseFloat(queries.Get("opt_float"), 32); err != nil {
					return nil, err
				} else {
					req.OptFloat = proto.Float32(float32(v))
				}
				if v, err := strconv.ParseInt(queries.Get("opt_sfixed64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptSfixed64 = proto.Int64(v)
				}
				if v, err := strconv.ParseUint(queries.Get("opt_fixed64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptFixed64 = proto.Uint64(v)
				}
				if v, err := strconv.ParseFloat(queries.Get("opt_double"), 32); err != nil {
					return nil, err
				} else {
					req.OptDouble = proto.Float64(v)
				}
				req.OptString = proto.String(queries.Get("opt_string"))
				req.OptBytes = []byte(queries.Get("opt_bytes"))
				if v, err := strconv.ParseFloat(queries.Get("wrap_double"), 64); err != nil {
					return nil, err
				} else {
					req.WrapDouble = wrapperspb.Double(v)
				}
				if v, err := strconv.ParseFloat(queries.Get("wrap_float"), 32); err != nil {
					return nil, err
				} else {
					req.WrapFloat = wrapperspb.Float(float32(v))
				}
				if v, err := strconv.ParseInt(queries.Get("wrap_int64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.WrapInt64 = wrapperspb.Int64(v)
				}
				if v, err := strconv.ParseUint(queries.Get("wrap_uint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.WrapUint64 = wrapperspb.UInt64(v)
				}
				if v, err := strconv.ParseUint(queries.Get("wrap_uint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.WrapUint32 = wrapperspb.UInt32(uint32(v))
				}
				if v, err := strconv.ParseBool(queries.Get("wrap_bool")); err != nil {
					return nil, err
				} else {
					req.WrapBool = wrapperspb.Bool(v)
				}
				req.WrapString = wrapperspb.String(queries.Get("wrap_string"))
				req.WrapBytes = wrapperspb.Bytes([]byte(queries.Get("wrap_bytes")))
				if v, err := convx.ParseBoolSlice(queries["rep_bool"]); err != nil {
					return nil, err
				} else {
					req.RepBool = v
				}
				if v, err := convx.ParseIntSlice[int32](queries["rep_int32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepInt32 = v
				}
				if v, err := convx.ParseIntSlice[int32](queries["rep_sint32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepSint32 = v
				}
				if v, err := convx.ParseUintSlice[uint32](queries["rep_uint32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepUint32 = v
				}
				if v, err := convx.ParseIntSlice[int64](queries["rep_int64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepInt64 = v
				}
				if v, err := convx.ParseIntSlice[int64](queries["rep_sint64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepSint64 = v
				}
				if v, err := convx.ParseUintSlice[uint64](queries["rep_uint64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepUint64 = v
				}
				if v, err := convx.ParseIntSlice[int32](queries["rep_sfixed32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepSfixed32 = v
				}
				if v, err := convx.ParseUintSlice[uint32](queries["rep_fixed32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepFixed32 = v
				}
				if v, err := convx.ParseFloatSlice[float32](queries["rep_float"], 32); err != nil {
					return nil, err
				} else {
					req.RepFloat = v
				}
				if v, err := convx.ParseIntSlice[int64](queries["rep_sfixed64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepSfixed64 = v
				}
				if v, err := convx.ParseUintSlice[uint64](queries["rep_fixed64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepFixed64 = v
				}
				if v, err := convx.ParseFloatSlice[float64](queries["rep_double"], 32); err != nil {
					return nil, err
				} else {
					req.RepDouble = v
				}
				req.RepString = queries["rep_string"]
				req.RepBytes = convx.ParseBytesSlice(queries["rep_bytes"])
				return req, nil
			},
			func(ctx context.Context, w http1.ResponseWriter, obj any) error {
				resp := obj.(*emptypb.Empty)
				_ = resp
				w.WriteHeader(http1.StatusOK)
				data, err := protojson.Marshal(resp)
				if err != nil {
					return err
				}
				if _, err := w.Write(data); err != nil {
					return err
				}
				return nil
			},
			opts...,
		))
	r.Name("/leo.example.demo.v1.Body/Uint32").
		Methods("PUT").
		Path("/v1/uint32").
		Handler(http.NewServer(
			endpointx.Chain(endpoints.Uint32(), mdw...),
			func(ctx context.Context, r *http1.Request) (any, error) {
				req := &BodyRequest{}
				body, err := io.ReadAll(r.Body)
				if err != nil {
					return nil, err
				}
				if v, err := strconv.ParseUint(string(body), 10, 32); err != nil {
					return nil, err
				} else {
					req.Uint32 = uint32(v)
				}
				queries := r.URL.Query()
				if v, err := strconv.ParseBool(queries.Get("bool")); err != nil {
					return nil, err
				} else {
					req.Bool = v
				}
				if v, err := strconv.ParseInt(queries.Get("int32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Int32 = int32(v)
				}
				if v, err := strconv.ParseInt(queries.Get("sint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Sint32 = int32(v)
				}
				if v, err := strconv.ParseInt(queries.Get("int64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Int64 = v
				}
				if v, err := strconv.ParseInt(queries.Get("sint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Sint64 = v
				}
				if v, err := strconv.ParseUint(queries.Get("uint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Uint64 = v
				}
				if v, err := strconv.ParseInt(queries.Get("sfixed32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Sfixed32 = int32(v)
				}
				if v, err := strconv.ParseUint(queries.Get("fixed32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Fixed32 = uint32(v)
				}
				if v, err := strconv.ParseFloat(queries.Get("float"), 32); err != nil {
					return nil, err
				} else {
					req.Float = float32(v)
				}
				if v, err := strconv.ParseInt(queries.Get("sfixed64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Sfixed64 = v
				}
				if v, err := strconv.ParseUint(queries.Get("fixed64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Fixed64 = v
				}
				if v, err := strconv.ParseFloat(queries.Get("double"), 32); err != nil {
					return nil, err
				} else {
					req.Double = v
				}
				req.String_ = queries.Get("string")
				req.Bytes = []byte(queries.Get("bytes"))
				if v, err := strconv.ParseBool(queries.Get("opt_bool")); err != nil {
					return nil, err
				} else {
					req.OptBool = proto.Bool(v)
				}
				if v, err := strconv.ParseInt(queries.Get("opt_int32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptInt32 = proto.Int32(int32(v))
				}
				if v, err := strconv.ParseInt(queries.Get("opt_sint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptSint32 = proto.Int32(int32(v))
				}
				if v, err := strconv.ParseUint(queries.Get("opt_uint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptUint32 = proto.Uint32(uint32(v))
				}
				if v, err := strconv.ParseInt(queries.Get("opt_int64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptInt64 = proto.Int64(v)
				}
				if v, err := strconv.ParseInt(queries.Get("opt_sint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptSint64 = proto.Int64(v)
				}
				if v, err := strconv.ParseUint(queries.Get("opt_uint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptUint64 = proto.Uint64(v)
				}
				if v, err := strconv.ParseInt(queries.Get("opt_sfixed32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptSfixed32 = proto.Int32(int32(v))
				}
				if v, err := strconv.ParseUint(queries.Get("opt_fixed32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptFixed32 = proto.Uint32(uint32(v))
				}
				if v, err := strconv.ParseFloat(queries.Get("opt_float"), 32); err != nil {
					return nil, err
				} else {
					req.OptFloat = proto.Float32(float32(v))
				}
				if v, err := strconv.ParseInt(queries.Get("opt_sfixed64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptSfixed64 = proto.Int64(v)
				}
				if v, err := strconv.ParseUint(queries.Get("opt_fixed64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptFixed64 = proto.Uint64(v)
				}
				if v, err := strconv.ParseFloat(queries.Get("opt_double"), 32); err != nil {
					return nil, err
				} else {
					req.OptDouble = proto.Float64(v)
				}
				req.OptString = proto.String(queries.Get("opt_string"))
				req.OptBytes = []byte(queries.Get("opt_bytes"))
				if v, err := strconv.ParseFloat(queries.Get("wrap_double"), 64); err != nil {
					return nil, err
				} else {
					req.WrapDouble = wrapperspb.Double(v)
				}
				if v, err := strconv.ParseFloat(queries.Get("wrap_float"), 32); err != nil {
					return nil, err
				} else {
					req.WrapFloat = wrapperspb.Float(float32(v))
				}
				if v, err := strconv.ParseInt(queries.Get("wrap_int64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.WrapInt64 = wrapperspb.Int64(v)
				}
				if v, err := strconv.ParseUint(queries.Get("wrap_uint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.WrapUint64 = wrapperspb.UInt64(v)
				}
				if v, err := strconv.ParseInt(queries.Get("wrap_int32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.WrapInt32 = wrapperspb.Int32(int32(v))
				}
				if v, err := strconv.ParseUint(queries.Get("wrap_uint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.WrapUint32 = wrapperspb.UInt32(uint32(v))
				}
				if v, err := strconv.ParseBool(queries.Get("wrap_bool")); err != nil {
					return nil, err
				} else {
					req.WrapBool = wrapperspb.Bool(v)
				}
				req.WrapString = wrapperspb.String(queries.Get("wrap_string"))
				req.WrapBytes = wrapperspb.Bytes([]byte(queries.Get("wrap_bytes")))
				if v, err := convx.ParseBoolSlice(queries["rep_bool"]); err != nil {
					return nil, err
				} else {
					req.RepBool = v
				}
				if v, err := convx.ParseIntSlice[int32](queries["rep_int32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepInt32 = v
				}
				if v, err := convx.ParseIntSlice[int32](queries["rep_sint32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepSint32 = v
				}
				if v, err := convx.ParseUintSlice[uint32](queries["rep_uint32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepUint32 = v
				}
				if v, err := convx.ParseIntSlice[int64](queries["rep_int64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepInt64 = v
				}
				if v, err := convx.ParseIntSlice[int64](queries["rep_sint64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepSint64 = v
				}
				if v, err := convx.ParseUintSlice[uint64](queries["rep_uint64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepUint64 = v
				}
				if v, err := convx.ParseIntSlice[int32](queries["rep_sfixed32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepSfixed32 = v
				}
				if v, err := convx.ParseUintSlice[uint32](queries["rep_fixed32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepFixed32 = v
				}
				if v, err := convx.ParseFloatSlice[float32](queries["rep_float"], 32); err != nil {
					return nil, err
				} else {
					req.RepFloat = v
				}
				if v, err := convx.ParseIntSlice[int64](queries["rep_sfixed64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepSfixed64 = v
				}
				if v, err := convx.ParseUintSlice[uint64](queries["rep_fixed64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepFixed64 = v
				}
				if v, err := convx.ParseFloatSlice[float64](queries["rep_double"], 32); err != nil {
					return nil, err
				} else {
					req.RepDouble = v
				}
				req.RepString = queries["rep_string"]
				req.RepBytes = convx.ParseBytesSlice(queries["rep_bytes"])
				return req, nil
			},
			func(ctx context.Context, w http1.ResponseWriter, obj any) error {
				resp := obj.(*emptypb.Empty)
				_ = resp
				w.WriteHeader(http1.StatusOK)
				data, err := protojson.Marshal(resp)
				if err != nil {
					return err
				}
				if _, err := w.Write(data); err != nil {
					return err
				}
				return nil
			},
			opts...,
		))
	r.Name("/leo.example.demo.v1.Body/OptUint32").
		Methods("PUT").
		Path("/v1/opt_uint32").
		Handler(http.NewServer(
			endpointx.Chain(endpoints.OptUint32(), mdw...),
			func(ctx context.Context, r *http1.Request) (any, error) {
				req := &BodyRequest{}
				body, err := io.ReadAll(r.Body)
				if err != nil {
					return nil, err
				}
				if v, err := strconv.ParseUint(string(body), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptUint32 = proto.Uint32(uint32(v))
				}
				queries := r.URL.Query()
				if v, err := strconv.ParseBool(queries.Get("bool")); err != nil {
					return nil, err
				} else {
					req.Bool = v
				}
				if v, err := strconv.ParseInt(queries.Get("int32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Int32 = int32(v)
				}
				if v, err := strconv.ParseInt(queries.Get("sint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Sint32 = int32(v)
				}
				if v, err := strconv.ParseUint(queries.Get("uint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Uint32 = uint32(v)
				}
				if v, err := strconv.ParseInt(queries.Get("int64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Int64 = v
				}
				if v, err := strconv.ParseInt(queries.Get("sint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Sint64 = v
				}
				if v, err := strconv.ParseUint(queries.Get("uint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Uint64 = v
				}
				if v, err := strconv.ParseInt(queries.Get("sfixed32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Sfixed32 = int32(v)
				}
				if v, err := strconv.ParseUint(queries.Get("fixed32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Fixed32 = uint32(v)
				}
				if v, err := strconv.ParseFloat(queries.Get("float"), 32); err != nil {
					return nil, err
				} else {
					req.Float = float32(v)
				}
				if v, err := strconv.ParseInt(queries.Get("sfixed64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Sfixed64 = v
				}
				if v, err := strconv.ParseUint(queries.Get("fixed64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Fixed64 = v
				}
				if v, err := strconv.ParseFloat(queries.Get("double"), 32); err != nil {
					return nil, err
				} else {
					req.Double = v
				}
				req.String_ = queries.Get("string")
				req.Bytes = []byte(queries.Get("bytes"))
				if v, err := strconv.ParseBool(queries.Get("opt_bool")); err != nil {
					return nil, err
				} else {
					req.OptBool = proto.Bool(v)
				}
				if v, err := strconv.ParseInt(queries.Get("opt_int32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptInt32 = proto.Int32(int32(v))
				}
				if v, err := strconv.ParseInt(queries.Get("opt_sint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptSint32 = proto.Int32(int32(v))
				}
				if v, err := strconv.ParseInt(queries.Get("opt_int64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptInt64 = proto.Int64(v)
				}
				if v, err := strconv.ParseInt(queries.Get("opt_sint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptSint64 = proto.Int64(v)
				}
				if v, err := strconv.ParseUint(queries.Get("opt_uint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptUint64 = proto.Uint64(v)
				}
				if v, err := strconv.ParseInt(queries.Get("opt_sfixed32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptSfixed32 = proto.Int32(int32(v))
				}
				if v, err := strconv.ParseUint(queries.Get("opt_fixed32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptFixed32 = proto.Uint32(uint32(v))
				}
				if v, err := strconv.ParseFloat(queries.Get("opt_float"), 32); err != nil {
					return nil, err
				} else {
					req.OptFloat = proto.Float32(float32(v))
				}
				if v, err := strconv.ParseInt(queries.Get("opt_sfixed64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptSfixed64 = proto.Int64(v)
				}
				if v, err := strconv.ParseUint(queries.Get("opt_fixed64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptFixed64 = proto.Uint64(v)
				}
				if v, err := strconv.ParseFloat(queries.Get("opt_double"), 32); err != nil {
					return nil, err
				} else {
					req.OptDouble = proto.Float64(v)
				}
				req.OptString = proto.String(queries.Get("opt_string"))
				req.OptBytes = []byte(queries.Get("opt_bytes"))
				if v, err := strconv.ParseFloat(queries.Get("wrap_double"), 64); err != nil {
					return nil, err
				} else {
					req.WrapDouble = wrapperspb.Double(v)
				}
				if v, err := strconv.ParseFloat(queries.Get("wrap_float"), 32); err != nil {
					return nil, err
				} else {
					req.WrapFloat = wrapperspb.Float(float32(v))
				}
				if v, err := strconv.ParseInt(queries.Get("wrap_int64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.WrapInt64 = wrapperspb.Int64(v)
				}
				if v, err := strconv.ParseUint(queries.Get("wrap_uint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.WrapUint64 = wrapperspb.UInt64(v)
				}
				if v, err := strconv.ParseInt(queries.Get("wrap_int32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.WrapInt32 = wrapperspb.Int32(int32(v))
				}
				if v, err := strconv.ParseUint(queries.Get("wrap_uint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.WrapUint32 = wrapperspb.UInt32(uint32(v))
				}
				if v, err := strconv.ParseBool(queries.Get("wrap_bool")); err != nil {
					return nil, err
				} else {
					req.WrapBool = wrapperspb.Bool(v)
				}
				req.WrapString = wrapperspb.String(queries.Get("wrap_string"))
				req.WrapBytes = wrapperspb.Bytes([]byte(queries.Get("wrap_bytes")))
				if v, err := convx.ParseBoolSlice(queries["rep_bool"]); err != nil {
					return nil, err
				} else {
					req.RepBool = v
				}
				if v, err := convx.ParseIntSlice[int32](queries["rep_int32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepInt32 = v
				}
				if v, err := convx.ParseIntSlice[int32](queries["rep_sint32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepSint32 = v
				}
				if v, err := convx.ParseUintSlice[uint32](queries["rep_uint32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepUint32 = v
				}
				if v, err := convx.ParseIntSlice[int64](queries["rep_int64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepInt64 = v
				}
				if v, err := convx.ParseIntSlice[int64](queries["rep_sint64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepSint64 = v
				}
				if v, err := convx.ParseUintSlice[uint64](queries["rep_uint64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepUint64 = v
				}
				if v, err := convx.ParseIntSlice[int32](queries["rep_sfixed32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepSfixed32 = v
				}
				if v, err := convx.ParseUintSlice[uint32](queries["rep_fixed32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepFixed32 = v
				}
				if v, err := convx.ParseFloatSlice[float32](queries["rep_float"], 32); err != nil {
					return nil, err
				} else {
					req.RepFloat = v
				}
				if v, err := convx.ParseIntSlice[int64](queries["rep_sfixed64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepSfixed64 = v
				}
				if v, err := convx.ParseUintSlice[uint64](queries["rep_fixed64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepFixed64 = v
				}
				if v, err := convx.ParseFloatSlice[float64](queries["rep_double"], 32); err != nil {
					return nil, err
				} else {
					req.RepDouble = v
				}
				req.RepString = queries["rep_string"]
				req.RepBytes = convx.ParseBytesSlice(queries["rep_bytes"])
				return req, nil
			},
			func(ctx context.Context, w http1.ResponseWriter, obj any) error {
				resp := obj.(*emptypb.Empty)
				_ = resp
				w.WriteHeader(http1.StatusOK)
				data, err := protojson.Marshal(resp)
				if err != nil {
					return err
				}
				if _, err := w.Write(data); err != nil {
					return err
				}
				return nil
			},
			opts...,
		))
	r.Name("/leo.example.demo.v1.Body/RepUint32").
		Methods("PUT").
		Path("/v1/rep_uint32").
		Handler(http.NewServer(
			endpointx.Chain(endpoints.RepUint32(), mdw...),
			func(ctx context.Context, r *http1.Request) (any, error) {
				req := &BodyRequest{}
				body, err := io.ReadAll(r.Body)
				if err != nil {
					return nil, err
				}
				if v, err := strconv.ParseUint(string(body), 10, 32); err != nil {
					return nil, err
				} else {
					req.RepUint32 = uint32(v)
				}
				queries := r.URL.Query()
				if v, err := strconv.ParseBool(queries.Get("bool")); err != nil {
					return nil, err
				} else {
					req.Bool = v
				}
				if v, err := strconv.ParseInt(queries.Get("int32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Int32 = int32(v)
				}
				if v, err := strconv.ParseInt(queries.Get("sint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Sint32 = int32(v)
				}
				if v, err := strconv.ParseUint(queries.Get("uint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Uint32 = uint32(v)
				}
				if v, err := strconv.ParseInt(queries.Get("int64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Int64 = v
				}
				if v, err := strconv.ParseInt(queries.Get("sint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Sint64 = v
				}
				if v, err := strconv.ParseUint(queries.Get("uint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Uint64 = v
				}
				if v, err := strconv.ParseInt(queries.Get("sfixed32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Sfixed32 = int32(v)
				}
				if v, err := strconv.ParseUint(queries.Get("fixed32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Fixed32 = uint32(v)
				}
				if v, err := strconv.ParseFloat(queries.Get("float"), 32); err != nil {
					return nil, err
				} else {
					req.Float = float32(v)
				}
				if v, err := strconv.ParseInt(queries.Get("sfixed64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Sfixed64 = v
				}
				if v, err := strconv.ParseUint(queries.Get("fixed64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Fixed64 = v
				}
				if v, err := strconv.ParseFloat(queries.Get("double"), 32); err != nil {
					return nil, err
				} else {
					req.Double = v
				}
				req.String_ = queries.Get("string")
				req.Bytes = []byte(queries.Get("bytes"))
				if v, err := strconv.ParseBool(queries.Get("opt_bool")); err != nil {
					return nil, err
				} else {
					req.OptBool = proto.Bool(v)
				}
				if v, err := strconv.ParseInt(queries.Get("opt_int32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptInt32 = proto.Int32(int32(v))
				}
				if v, err := strconv.ParseInt(queries.Get("opt_sint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptSint32 = proto.Int32(int32(v))
				}
				if v, err := strconv.ParseUint(queries.Get("opt_uint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptUint32 = proto.Uint32(uint32(v))
				}
				if v, err := strconv.ParseInt(queries.Get("opt_int64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptInt64 = proto.Int64(v)
				}
				if v, err := strconv.ParseInt(queries.Get("opt_sint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptSint64 = proto.Int64(v)
				}
				if v, err := strconv.ParseUint(queries.Get("opt_uint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptUint64 = proto.Uint64(v)
				}
				if v, err := strconv.ParseInt(queries.Get("opt_sfixed32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptSfixed32 = proto.Int32(int32(v))
				}
				if v, err := strconv.ParseUint(queries.Get("opt_fixed32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptFixed32 = proto.Uint32(uint32(v))
				}
				if v, err := strconv.ParseFloat(queries.Get("opt_float"), 32); err != nil {
					return nil, err
				} else {
					req.OptFloat = proto.Float32(float32(v))
				}
				if v, err := strconv.ParseInt(queries.Get("opt_sfixed64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptSfixed64 = proto.Int64(v)
				}
				if v, err := strconv.ParseUint(queries.Get("opt_fixed64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptFixed64 = proto.Uint64(v)
				}
				if v, err := strconv.ParseFloat(queries.Get("opt_double"), 32); err != nil {
					return nil, err
				} else {
					req.OptDouble = proto.Float64(v)
				}
				req.OptString = proto.String(queries.Get("opt_string"))
				req.OptBytes = []byte(queries.Get("opt_bytes"))
				if v, err := strconv.ParseFloat(queries.Get("wrap_double"), 64); err != nil {
					return nil, err
				} else {
					req.WrapDouble = wrapperspb.Double(v)
				}
				if v, err := strconv.ParseFloat(queries.Get("wrap_float"), 32); err != nil {
					return nil, err
				} else {
					req.WrapFloat = wrapperspb.Float(float32(v))
				}
				if v, err := strconv.ParseInt(queries.Get("wrap_int64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.WrapInt64 = wrapperspb.Int64(v)
				}
				if v, err := strconv.ParseUint(queries.Get("wrap_uint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.WrapUint64 = wrapperspb.UInt64(v)
				}
				if v, err := strconv.ParseInt(queries.Get("wrap_int32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.WrapInt32 = wrapperspb.Int32(int32(v))
				}
				if v, err := strconv.ParseUint(queries.Get("wrap_uint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.WrapUint32 = wrapperspb.UInt32(uint32(v))
				}
				if v, err := strconv.ParseBool(queries.Get("wrap_bool")); err != nil {
					return nil, err
				} else {
					req.WrapBool = wrapperspb.Bool(v)
				}
				req.WrapString = wrapperspb.String(queries.Get("wrap_string"))
				req.WrapBytes = wrapperspb.Bytes([]byte(queries.Get("wrap_bytes")))
				if v, err := convx.ParseBoolSlice(queries["rep_bool"]); err != nil {
					return nil, err
				} else {
					req.RepBool = v
				}
				if v, err := convx.ParseIntSlice[int32](queries["rep_int32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepInt32 = v
				}
				if v, err := convx.ParseIntSlice[int32](queries["rep_sint32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepSint32 = v
				}
				if v, err := convx.ParseIntSlice[int64](queries["rep_int64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepInt64 = v
				}
				if v, err := convx.ParseIntSlice[int64](queries["rep_sint64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepSint64 = v
				}
				if v, err := convx.ParseUintSlice[uint64](queries["rep_uint64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepUint64 = v
				}
				if v, err := convx.ParseIntSlice[int32](queries["rep_sfixed32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepSfixed32 = v
				}
				if v, err := convx.ParseUintSlice[uint32](queries["rep_fixed32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepFixed32 = v
				}
				if v, err := convx.ParseFloatSlice[float32](queries["rep_float"], 32); err != nil {
					return nil, err
				} else {
					req.RepFloat = v
				}
				if v, err := convx.ParseIntSlice[int64](queries["rep_sfixed64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepSfixed64 = v
				}
				if v, err := convx.ParseUintSlice[uint64](queries["rep_fixed64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepFixed64 = v
				}
				if v, err := convx.ParseFloatSlice[float64](queries["rep_double"], 32); err != nil {
					return nil, err
				} else {
					req.RepDouble = v
				}
				req.RepString = queries["rep_string"]
				req.RepBytes = convx.ParseBytesSlice(queries["rep_bytes"])
				return req, nil
			},
			func(ctx context.Context, w http1.ResponseWriter, obj any) error {
				resp := obj.(*emptypb.Empty)
				_ = resp
				w.WriteHeader(http1.StatusOK)
				data, err := protojson.Marshal(resp)
				if err != nil {
					return err
				}
				if _, err := w.Write(data); err != nil {
					return err
				}
				return nil
			},
			opts...,
		))
	r.Name("/leo.example.demo.v1.Body/WrapUint32").
		Methods("PUT").
		Path("/v1/wrap_uint32").
		Handler(http.NewServer(
			endpointx.Chain(endpoints.WrapUint32(), mdw...),
			func(ctx context.Context, r *http1.Request) (any, error) {
				req := &BodyRequest{}
				body, err := io.ReadAll(r.Body)
				if err != nil {
					return nil, err
				}
				if v, err := strconv.ParseUint(string(body), 10, 32); err != nil {
					return nil, err
				} else {
					req.WrapUint32 = wrapperspb.UInt32(uint32(v))
				}
				queries := r.URL.Query()
				if v, err := strconv.ParseBool(queries.Get("bool")); err != nil {
					return nil, err
				} else {
					req.Bool = v
				}
				if v, err := strconv.ParseInt(queries.Get("int32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Int32 = int32(v)
				}
				if v, err := strconv.ParseInt(queries.Get("sint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Sint32 = int32(v)
				}
				if v, err := strconv.ParseUint(queries.Get("uint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Uint32 = uint32(v)
				}
				if v, err := strconv.ParseInt(queries.Get("int64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Int64 = v
				}
				if v, err := strconv.ParseInt(queries.Get("sint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Sint64 = v
				}
				if v, err := strconv.ParseUint(queries.Get("uint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Uint64 = v
				}
				if v, err := strconv.ParseInt(queries.Get("sfixed32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Sfixed32 = int32(v)
				}
				if v, err := strconv.ParseUint(queries.Get("fixed32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Fixed32 = uint32(v)
				}
				if v, err := strconv.ParseFloat(queries.Get("float"), 32); err != nil {
					return nil, err
				} else {
					req.Float = float32(v)
				}
				if v, err := strconv.ParseInt(queries.Get("sfixed64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Sfixed64 = v
				}
				if v, err := strconv.ParseUint(queries.Get("fixed64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Fixed64 = v
				}
				if v, err := strconv.ParseFloat(queries.Get("double"), 32); err != nil {
					return nil, err
				} else {
					req.Double = v
				}
				req.String_ = queries.Get("string")
				req.Bytes = []byte(queries.Get("bytes"))
				if v, err := strconv.ParseBool(queries.Get("opt_bool")); err != nil {
					return nil, err
				} else {
					req.OptBool = proto.Bool(v)
				}
				if v, err := strconv.ParseInt(queries.Get("opt_int32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptInt32 = proto.Int32(int32(v))
				}
				if v, err := strconv.ParseInt(queries.Get("opt_sint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptSint32 = proto.Int32(int32(v))
				}
				if v, err := strconv.ParseUint(queries.Get("opt_uint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptUint32 = proto.Uint32(uint32(v))
				}
				if v, err := strconv.ParseInt(queries.Get("opt_int64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptInt64 = proto.Int64(v)
				}
				if v, err := strconv.ParseInt(queries.Get("opt_sint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptSint64 = proto.Int64(v)
				}
				if v, err := strconv.ParseUint(queries.Get("opt_uint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptUint64 = proto.Uint64(v)
				}
				if v, err := strconv.ParseInt(queries.Get("opt_sfixed32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptSfixed32 = proto.Int32(int32(v))
				}
				if v, err := strconv.ParseUint(queries.Get("opt_fixed32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptFixed32 = proto.Uint32(uint32(v))
				}
				if v, err := strconv.ParseFloat(queries.Get("opt_float"), 32); err != nil {
					return nil, err
				} else {
					req.OptFloat = proto.Float32(float32(v))
				}
				if v, err := strconv.ParseInt(queries.Get("opt_sfixed64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptSfixed64 = proto.Int64(v)
				}
				if v, err := strconv.ParseUint(queries.Get("opt_fixed64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptFixed64 = proto.Uint64(v)
				}
				if v, err := strconv.ParseFloat(queries.Get("opt_double"), 32); err != nil {
					return nil, err
				} else {
					req.OptDouble = proto.Float64(v)
				}
				req.OptString = proto.String(queries.Get("opt_string"))
				req.OptBytes = []byte(queries.Get("opt_bytes"))
				if v, err := strconv.ParseFloat(queries.Get("wrap_double"), 64); err != nil {
					return nil, err
				} else {
					req.WrapDouble = wrapperspb.Double(v)
				}
				if v, err := strconv.ParseFloat(queries.Get("wrap_float"), 32); err != nil {
					return nil, err
				} else {
					req.WrapFloat = wrapperspb.Float(float32(v))
				}
				if v, err := strconv.ParseInt(queries.Get("wrap_int64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.WrapInt64 = wrapperspb.Int64(v)
				}
				if v, err := strconv.ParseUint(queries.Get("wrap_uint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.WrapUint64 = wrapperspb.UInt64(v)
				}
				if v, err := strconv.ParseInt(queries.Get("wrap_int32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.WrapInt32 = wrapperspb.Int32(int32(v))
				}
				if v, err := strconv.ParseBool(queries.Get("wrap_bool")); err != nil {
					return nil, err
				} else {
					req.WrapBool = wrapperspb.Bool(v)
				}
				req.WrapString = wrapperspb.String(queries.Get("wrap_string"))
				req.WrapBytes = wrapperspb.Bytes([]byte(queries.Get("wrap_bytes")))
				if v, err := convx.ParseBoolSlice(queries["rep_bool"]); err != nil {
					return nil, err
				} else {
					req.RepBool = v
				}
				if v, err := convx.ParseIntSlice[int32](queries["rep_int32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepInt32 = v
				}
				if v, err := convx.ParseIntSlice[int32](queries["rep_sint32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepSint32 = v
				}
				if v, err := convx.ParseUintSlice[uint32](queries["rep_uint32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepUint32 = v
				}
				if v, err := convx.ParseIntSlice[int64](queries["rep_int64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepInt64 = v
				}
				if v, err := convx.ParseIntSlice[int64](queries["rep_sint64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepSint64 = v
				}
				if v, err := convx.ParseUintSlice[uint64](queries["rep_uint64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepUint64 = v
				}
				if v, err := convx.ParseIntSlice[int32](queries["rep_sfixed32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepSfixed32 = v
				}
				if v, err := convx.ParseUintSlice[uint32](queries["rep_fixed32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepFixed32 = v
				}
				if v, err := convx.ParseFloatSlice[float32](queries["rep_float"], 32); err != nil {
					return nil, err
				} else {
					req.RepFloat = v
				}
				if v, err := convx.ParseIntSlice[int64](queries["rep_sfixed64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepSfixed64 = v
				}
				if v, err := convx.ParseUintSlice[uint64](queries["rep_fixed64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepFixed64 = v
				}
				if v, err := convx.ParseFloatSlice[float64](queries["rep_double"], 32); err != nil {
					return nil, err
				} else {
					req.RepDouble = v
				}
				req.RepString = queries["rep_string"]
				req.RepBytes = convx.ParseBytesSlice(queries["rep_bytes"])
				return req, nil
			},
			func(ctx context.Context, w http1.ResponseWriter, obj any) error {
				resp := obj.(*emptypb.Empty)
				_ = resp
				w.WriteHeader(http1.StatusOK)
				data, err := protojson.Marshal(resp)
				if err != nil {
					return err
				}
				if _, err := w.Write(data); err != nil {
					return err
				}
				return nil
			},
			opts...,
		))
	r.Name("/leo.example.demo.v1.Body/Fixed32").
		Methods("PUT").
		Path("/v1/fixed32").
		Handler(http.NewServer(
			endpointx.Chain(endpoints.Fixed32(), mdw...),
			func(ctx context.Context, r *http1.Request) (any, error) {
				req := &BodyRequest{}
				body, err := io.ReadAll(r.Body)
				if err != nil {
					return nil, err
				}
				if v, err := strconv.ParseUint(string(body), 10, 32); err != nil {
					return nil, err
				} else {
					req.Fixed32 = uint32(v)
				}
				queries := r.URL.Query()
				if v, err := strconv.ParseBool(queries.Get("bool")); err != nil {
					return nil, err
				} else {
					req.Bool = v
				}
				if v, err := strconv.ParseInt(queries.Get("int32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Int32 = int32(v)
				}
				if v, err := strconv.ParseInt(queries.Get("sint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Sint32 = int32(v)
				}
				if v, err := strconv.ParseUint(queries.Get("uint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Uint32 = uint32(v)
				}
				if v, err := strconv.ParseInt(queries.Get("int64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Int64 = v
				}
				if v, err := strconv.ParseInt(queries.Get("sint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Sint64 = v
				}
				if v, err := strconv.ParseUint(queries.Get("uint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Uint64 = v
				}
				if v, err := strconv.ParseInt(queries.Get("sfixed32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Sfixed32 = int32(v)
				}
				if v, err := strconv.ParseFloat(queries.Get("float"), 32); err != nil {
					return nil, err
				} else {
					req.Float = float32(v)
				}
				if v, err := strconv.ParseInt(queries.Get("sfixed64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Sfixed64 = v
				}
				if v, err := strconv.ParseUint(queries.Get("fixed64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Fixed64 = v
				}
				if v, err := strconv.ParseFloat(queries.Get("double"), 32); err != nil {
					return nil, err
				} else {
					req.Double = v
				}
				req.String_ = queries.Get("string")
				req.Bytes = []byte(queries.Get("bytes"))
				if v, err := strconv.ParseBool(queries.Get("opt_bool")); err != nil {
					return nil, err
				} else {
					req.OptBool = proto.Bool(v)
				}
				if v, err := strconv.ParseInt(queries.Get("opt_int32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptInt32 = proto.Int32(int32(v))
				}
				if v, err := strconv.ParseInt(queries.Get("opt_sint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptSint32 = proto.Int32(int32(v))
				}
				if v, err := strconv.ParseUint(queries.Get("opt_uint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptUint32 = proto.Uint32(uint32(v))
				}
				if v, err := strconv.ParseInt(queries.Get("opt_int64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptInt64 = proto.Int64(v)
				}
				if v, err := strconv.ParseInt(queries.Get("opt_sint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptSint64 = proto.Int64(v)
				}
				if v, err := strconv.ParseUint(queries.Get("opt_uint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptUint64 = proto.Uint64(v)
				}
				if v, err := strconv.ParseInt(queries.Get("opt_sfixed32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptSfixed32 = proto.Int32(int32(v))
				}
				if v, err := strconv.ParseUint(queries.Get("opt_fixed32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptFixed32 = proto.Uint32(uint32(v))
				}
				if v, err := strconv.ParseFloat(queries.Get("opt_float"), 32); err != nil {
					return nil, err
				} else {
					req.OptFloat = proto.Float32(float32(v))
				}
				if v, err := strconv.ParseInt(queries.Get("opt_sfixed64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptSfixed64 = proto.Int64(v)
				}
				if v, err := strconv.ParseUint(queries.Get("opt_fixed64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptFixed64 = proto.Uint64(v)
				}
				if v, err := strconv.ParseFloat(queries.Get("opt_double"), 32); err != nil {
					return nil, err
				} else {
					req.OptDouble = proto.Float64(v)
				}
				req.OptString = proto.String(queries.Get("opt_string"))
				req.OptBytes = []byte(queries.Get("opt_bytes"))
				if v, err := strconv.ParseFloat(queries.Get("wrap_double"), 64); err != nil {
					return nil, err
				} else {
					req.WrapDouble = wrapperspb.Double(v)
				}
				if v, err := strconv.ParseFloat(queries.Get("wrap_float"), 32); err != nil {
					return nil, err
				} else {
					req.WrapFloat = wrapperspb.Float(float32(v))
				}
				if v, err := strconv.ParseInt(queries.Get("wrap_int64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.WrapInt64 = wrapperspb.Int64(v)
				}
				if v, err := strconv.ParseUint(queries.Get("wrap_uint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.WrapUint64 = wrapperspb.UInt64(v)
				}
				if v, err := strconv.ParseInt(queries.Get("wrap_int32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.WrapInt32 = wrapperspb.Int32(int32(v))
				}
				if v, err := strconv.ParseUint(queries.Get("wrap_uint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.WrapUint32 = wrapperspb.UInt32(uint32(v))
				}
				if v, err := strconv.ParseBool(queries.Get("wrap_bool")); err != nil {
					return nil, err
				} else {
					req.WrapBool = wrapperspb.Bool(v)
				}
				req.WrapString = wrapperspb.String(queries.Get("wrap_string"))
				req.WrapBytes = wrapperspb.Bytes([]byte(queries.Get("wrap_bytes")))
				if v, err := convx.ParseBoolSlice(queries["rep_bool"]); err != nil {
					return nil, err
				} else {
					req.RepBool = v
				}
				if v, err := convx.ParseIntSlice[int32](queries["rep_int32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepInt32 = v
				}
				if v, err := convx.ParseIntSlice[int32](queries["rep_sint32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepSint32 = v
				}
				if v, err := convx.ParseUintSlice[uint32](queries["rep_uint32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepUint32 = v
				}
				if v, err := convx.ParseIntSlice[int64](queries["rep_int64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepInt64 = v
				}
				if v, err := convx.ParseIntSlice[int64](queries["rep_sint64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepSint64 = v
				}
				if v, err := convx.ParseUintSlice[uint64](queries["rep_uint64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepUint64 = v
				}
				if v, err := convx.ParseIntSlice[int32](queries["rep_sfixed32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepSfixed32 = v
				}
				if v, err := convx.ParseUintSlice[uint32](queries["rep_fixed32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepFixed32 = v
				}
				if v, err := convx.ParseFloatSlice[float32](queries["rep_float"], 32); err != nil {
					return nil, err
				} else {
					req.RepFloat = v
				}
				if v, err := convx.ParseIntSlice[int64](queries["rep_sfixed64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepSfixed64 = v
				}
				if v, err := convx.ParseUintSlice[uint64](queries["rep_fixed64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepFixed64 = v
				}
				if v, err := convx.ParseFloatSlice[float64](queries["rep_double"], 32); err != nil {
					return nil, err
				} else {
					req.RepDouble = v
				}
				req.RepString = queries["rep_string"]
				req.RepBytes = convx.ParseBytesSlice(queries["rep_bytes"])
				return req, nil
			},
			func(ctx context.Context, w http1.ResponseWriter, obj any) error {
				resp := obj.(*emptypb.Empty)
				_ = resp
				w.WriteHeader(http1.StatusOK)
				data, err := protojson.Marshal(resp)
				if err != nil {
					return err
				}
				if _, err := w.Write(data); err != nil {
					return err
				}
				return nil
			},
			opts...,
		))
	r.Name("/leo.example.demo.v1.Body/OptFixed32").
		Methods("PUT").
		Path("/v1/opt_fixed32").
		Handler(http.NewServer(
			endpointx.Chain(endpoints.OptFixed32(), mdw...),
			func(ctx context.Context, r *http1.Request) (any, error) {
				req := &BodyRequest{}
				body, err := io.ReadAll(r.Body)
				if err != nil {
					return nil, err
				}
				if v, err := strconv.ParseUint(string(body), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptFixed32 = proto.Uint32(uint32(v))
				}
				queries := r.URL.Query()
				if v, err := strconv.ParseBool(queries.Get("bool")); err != nil {
					return nil, err
				} else {
					req.Bool = v
				}
				if v, err := strconv.ParseInt(queries.Get("int32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Int32 = int32(v)
				}
				if v, err := strconv.ParseInt(queries.Get("sint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Sint32 = int32(v)
				}
				if v, err := strconv.ParseUint(queries.Get("uint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Uint32 = uint32(v)
				}
				if v, err := strconv.ParseInt(queries.Get("int64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Int64 = v
				}
				if v, err := strconv.ParseInt(queries.Get("sint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Sint64 = v
				}
				if v, err := strconv.ParseUint(queries.Get("uint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Uint64 = v
				}
				if v, err := strconv.ParseInt(queries.Get("sfixed32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Sfixed32 = int32(v)
				}
				if v, err := strconv.ParseUint(queries.Get("fixed32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Fixed32 = uint32(v)
				}
				if v, err := strconv.ParseFloat(queries.Get("float"), 32); err != nil {
					return nil, err
				} else {
					req.Float = float32(v)
				}
				if v, err := strconv.ParseInt(queries.Get("sfixed64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Sfixed64 = v
				}
				if v, err := strconv.ParseUint(queries.Get("fixed64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Fixed64 = v
				}
				if v, err := strconv.ParseFloat(queries.Get("double"), 32); err != nil {
					return nil, err
				} else {
					req.Double = v
				}
				req.String_ = queries.Get("string")
				req.Bytes = []byte(queries.Get("bytes"))
				if v, err := strconv.ParseBool(queries.Get("opt_bool")); err != nil {
					return nil, err
				} else {
					req.OptBool = proto.Bool(v)
				}
				if v, err := strconv.ParseInt(queries.Get("opt_int32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptInt32 = proto.Int32(int32(v))
				}
				if v, err := strconv.ParseInt(queries.Get("opt_sint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptSint32 = proto.Int32(int32(v))
				}
				if v, err := strconv.ParseUint(queries.Get("opt_uint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptUint32 = proto.Uint32(uint32(v))
				}
				if v, err := strconv.ParseInt(queries.Get("opt_int64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptInt64 = proto.Int64(v)
				}
				if v, err := strconv.ParseInt(queries.Get("opt_sint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptSint64 = proto.Int64(v)
				}
				if v, err := strconv.ParseUint(queries.Get("opt_uint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptUint64 = proto.Uint64(v)
				}
				if v, err := strconv.ParseInt(queries.Get("opt_sfixed32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptSfixed32 = proto.Int32(int32(v))
				}
				if v, err := strconv.ParseFloat(queries.Get("opt_float"), 32); err != nil {
					return nil, err
				} else {
					req.OptFloat = proto.Float32(float32(v))
				}
				if v, err := strconv.ParseInt(queries.Get("opt_sfixed64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptSfixed64 = proto.Int64(v)
				}
				if v, err := strconv.ParseUint(queries.Get("opt_fixed64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptFixed64 = proto.Uint64(v)
				}
				if v, err := strconv.ParseFloat(queries.Get("opt_double"), 32); err != nil {
					return nil, err
				} else {
					req.OptDouble = proto.Float64(v)
				}
				req.OptString = proto.String(queries.Get("opt_string"))
				req.OptBytes = []byte(queries.Get("opt_bytes"))
				if v, err := strconv.ParseFloat(queries.Get("wrap_double"), 64); err != nil {
					return nil, err
				} else {
					req.WrapDouble = wrapperspb.Double(v)
				}
				if v, err := strconv.ParseFloat(queries.Get("wrap_float"), 32); err != nil {
					return nil, err
				} else {
					req.WrapFloat = wrapperspb.Float(float32(v))
				}
				if v, err := strconv.ParseInt(queries.Get("wrap_int64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.WrapInt64 = wrapperspb.Int64(v)
				}
				if v, err := strconv.ParseUint(queries.Get("wrap_uint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.WrapUint64 = wrapperspb.UInt64(v)
				}
				if v, err := strconv.ParseInt(queries.Get("wrap_int32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.WrapInt32 = wrapperspb.Int32(int32(v))
				}
				if v, err := strconv.ParseUint(queries.Get("wrap_uint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.WrapUint32 = wrapperspb.UInt32(uint32(v))
				}
				if v, err := strconv.ParseBool(queries.Get("wrap_bool")); err != nil {
					return nil, err
				} else {
					req.WrapBool = wrapperspb.Bool(v)
				}
				req.WrapString = wrapperspb.String(queries.Get("wrap_string"))
				req.WrapBytes = wrapperspb.Bytes([]byte(queries.Get("wrap_bytes")))
				if v, err := convx.ParseBoolSlice(queries["rep_bool"]); err != nil {
					return nil, err
				} else {
					req.RepBool = v
				}
				if v, err := convx.ParseIntSlice[int32](queries["rep_int32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepInt32 = v
				}
				if v, err := convx.ParseIntSlice[int32](queries["rep_sint32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepSint32 = v
				}
				if v, err := convx.ParseUintSlice[uint32](queries["rep_uint32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepUint32 = v
				}
				if v, err := convx.ParseIntSlice[int64](queries["rep_int64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepInt64 = v
				}
				if v, err := convx.ParseIntSlice[int64](queries["rep_sint64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepSint64 = v
				}
				if v, err := convx.ParseUintSlice[uint64](queries["rep_uint64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepUint64 = v
				}
				if v, err := convx.ParseIntSlice[int32](queries["rep_sfixed32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepSfixed32 = v
				}
				if v, err := convx.ParseUintSlice[uint32](queries["rep_fixed32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepFixed32 = v
				}
				if v, err := convx.ParseFloatSlice[float32](queries["rep_float"], 32); err != nil {
					return nil, err
				} else {
					req.RepFloat = v
				}
				if v, err := convx.ParseIntSlice[int64](queries["rep_sfixed64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepSfixed64 = v
				}
				if v, err := convx.ParseUintSlice[uint64](queries["rep_fixed64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepFixed64 = v
				}
				if v, err := convx.ParseFloatSlice[float64](queries["rep_double"], 32); err != nil {
					return nil, err
				} else {
					req.RepDouble = v
				}
				req.RepString = queries["rep_string"]
				req.RepBytes = convx.ParseBytesSlice(queries["rep_bytes"])
				return req, nil
			},
			func(ctx context.Context, w http1.ResponseWriter, obj any) error {
				resp := obj.(*emptypb.Empty)
				_ = resp
				w.WriteHeader(http1.StatusOK)
				data, err := protojson.Marshal(resp)
				if err != nil {
					return err
				}
				if _, err := w.Write(data); err != nil {
					return err
				}
				return nil
			},
			opts...,
		))
	r.Name("/leo.example.demo.v1.Body/RepFixed32").
		Methods("PUT").
		Path("/v1/rep_fixed32").
		Handler(http.NewServer(
			endpointx.Chain(endpoints.RepFixed32(), mdw...),
			func(ctx context.Context, r *http1.Request) (any, error) {
				req := &BodyRequest{}
				body, err := io.ReadAll(r.Body)
				if err != nil {
					return nil, err
				}
				if v, err := strconv.ParseUint(string(body), 10, 32); err != nil {
					return nil, err
				} else {
					req.RepFixed32 = uint32(v)
				}
				queries := r.URL.Query()
				if v, err := strconv.ParseBool(queries.Get("bool")); err != nil {
					return nil, err
				} else {
					req.Bool = v
				}
				if v, err := strconv.ParseInt(queries.Get("int32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Int32 = int32(v)
				}
				if v, err := strconv.ParseInt(queries.Get("sint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Sint32 = int32(v)
				}
				if v, err := strconv.ParseUint(queries.Get("uint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Uint32 = uint32(v)
				}
				if v, err := strconv.ParseInt(queries.Get("int64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Int64 = v
				}
				if v, err := strconv.ParseInt(queries.Get("sint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Sint64 = v
				}
				if v, err := strconv.ParseUint(queries.Get("uint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Uint64 = v
				}
				if v, err := strconv.ParseInt(queries.Get("sfixed32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Sfixed32 = int32(v)
				}
				if v, err := strconv.ParseUint(queries.Get("fixed32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Fixed32 = uint32(v)
				}
				if v, err := strconv.ParseFloat(queries.Get("float"), 32); err != nil {
					return nil, err
				} else {
					req.Float = float32(v)
				}
				if v, err := strconv.ParseInt(queries.Get("sfixed64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Sfixed64 = v
				}
				if v, err := strconv.ParseUint(queries.Get("fixed64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Fixed64 = v
				}
				if v, err := strconv.ParseFloat(queries.Get("double"), 32); err != nil {
					return nil, err
				} else {
					req.Double = v
				}
				req.String_ = queries.Get("string")
				req.Bytes = []byte(queries.Get("bytes"))
				if v, err := strconv.ParseBool(queries.Get("opt_bool")); err != nil {
					return nil, err
				} else {
					req.OptBool = proto.Bool(v)
				}
				if v, err := strconv.ParseInt(queries.Get("opt_int32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptInt32 = proto.Int32(int32(v))
				}
				if v, err := strconv.ParseInt(queries.Get("opt_sint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptSint32 = proto.Int32(int32(v))
				}
				if v, err := strconv.ParseUint(queries.Get("opt_uint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptUint32 = proto.Uint32(uint32(v))
				}
				if v, err := strconv.ParseInt(queries.Get("opt_int64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptInt64 = proto.Int64(v)
				}
				if v, err := strconv.ParseInt(queries.Get("opt_sint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptSint64 = proto.Int64(v)
				}
				if v, err := strconv.ParseUint(queries.Get("opt_uint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptUint64 = proto.Uint64(v)
				}
				if v, err := strconv.ParseInt(queries.Get("opt_sfixed32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptSfixed32 = proto.Int32(int32(v))
				}
				if v, err := strconv.ParseUint(queries.Get("opt_fixed32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptFixed32 = proto.Uint32(uint32(v))
				}
				if v, err := strconv.ParseFloat(queries.Get("opt_float"), 32); err != nil {
					return nil, err
				} else {
					req.OptFloat = proto.Float32(float32(v))
				}
				if v, err := strconv.ParseInt(queries.Get("opt_sfixed64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptSfixed64 = proto.Int64(v)
				}
				if v, err := strconv.ParseUint(queries.Get("opt_fixed64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptFixed64 = proto.Uint64(v)
				}
				if v, err := strconv.ParseFloat(queries.Get("opt_double"), 32); err != nil {
					return nil, err
				} else {
					req.OptDouble = proto.Float64(v)
				}
				req.OptString = proto.String(queries.Get("opt_string"))
				req.OptBytes = []byte(queries.Get("opt_bytes"))
				if v, err := strconv.ParseFloat(queries.Get("wrap_double"), 64); err != nil {
					return nil, err
				} else {
					req.WrapDouble = wrapperspb.Double(v)
				}
				if v, err := strconv.ParseFloat(queries.Get("wrap_float"), 32); err != nil {
					return nil, err
				} else {
					req.WrapFloat = wrapperspb.Float(float32(v))
				}
				if v, err := strconv.ParseInt(queries.Get("wrap_int64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.WrapInt64 = wrapperspb.Int64(v)
				}
				if v, err := strconv.ParseUint(queries.Get("wrap_uint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.WrapUint64 = wrapperspb.UInt64(v)
				}
				if v, err := strconv.ParseInt(queries.Get("wrap_int32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.WrapInt32 = wrapperspb.Int32(int32(v))
				}
				if v, err := strconv.ParseUint(queries.Get("wrap_uint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.WrapUint32 = wrapperspb.UInt32(uint32(v))
				}
				if v, err := strconv.ParseBool(queries.Get("wrap_bool")); err != nil {
					return nil, err
				} else {
					req.WrapBool = wrapperspb.Bool(v)
				}
				req.WrapString = wrapperspb.String(queries.Get("wrap_string"))
				req.WrapBytes = wrapperspb.Bytes([]byte(queries.Get("wrap_bytes")))
				if v, err := convx.ParseBoolSlice(queries["rep_bool"]); err != nil {
					return nil, err
				} else {
					req.RepBool = v
				}
				if v, err := convx.ParseIntSlice[int32](queries["rep_int32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepInt32 = v
				}
				if v, err := convx.ParseIntSlice[int32](queries["rep_sint32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepSint32 = v
				}
				if v, err := convx.ParseUintSlice[uint32](queries["rep_uint32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepUint32 = v
				}
				if v, err := convx.ParseIntSlice[int64](queries["rep_int64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepInt64 = v
				}
				if v, err := convx.ParseIntSlice[int64](queries["rep_sint64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepSint64 = v
				}
				if v, err := convx.ParseUintSlice[uint64](queries["rep_uint64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepUint64 = v
				}
				if v, err := convx.ParseIntSlice[int32](queries["rep_sfixed32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepSfixed32 = v
				}
				if v, err := convx.ParseFloatSlice[float32](queries["rep_float"], 32); err != nil {
					return nil, err
				} else {
					req.RepFloat = v
				}
				if v, err := convx.ParseIntSlice[int64](queries["rep_sfixed64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepSfixed64 = v
				}
				if v, err := convx.ParseUintSlice[uint64](queries["rep_fixed64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepFixed64 = v
				}
				if v, err := convx.ParseFloatSlice[float64](queries["rep_double"], 32); err != nil {
					return nil, err
				} else {
					req.RepDouble = v
				}
				req.RepString = queries["rep_string"]
				req.RepBytes = convx.ParseBytesSlice(queries["rep_bytes"])
				return req, nil
			},
			func(ctx context.Context, w http1.ResponseWriter, obj any) error {
				resp := obj.(*emptypb.Empty)
				_ = resp
				w.WriteHeader(http1.StatusOK)
				data, err := protojson.Marshal(resp)
				if err != nil {
					return err
				}
				if _, err := w.Write(data); err != nil {
					return err
				}
				return nil
			},
			opts...,
		))
	r.Name("/leo.example.demo.v1.Body/Int64").
		Methods("PUT").
		Path("/v1/int64").
		Handler(http.NewServer(
			endpointx.Chain(endpoints.Int64(), mdw...),
			func(ctx context.Context, r *http1.Request) (any, error) {
				req := &BodyRequest{}
				body, err := io.ReadAll(r.Body)
				if err != nil {
					return nil, err
				}
				if v, err := strconv.ParseInt(string(body), 10, 64); err != nil {
					return nil, err
				} else {
					req.Int64 = v
				}
				queries := r.URL.Query()
				if v, err := strconv.ParseBool(queries.Get("bool")); err != nil {
					return nil, err
				} else {
					req.Bool = v
				}
				if v, err := strconv.ParseInt(queries.Get("int32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Int32 = int32(v)
				}
				if v, err := strconv.ParseInt(queries.Get("sint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Sint32 = int32(v)
				}
				if v, err := strconv.ParseUint(queries.Get("uint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Uint32 = uint32(v)
				}
				if v, err := strconv.ParseInt(queries.Get("sint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Sint64 = v
				}
				if v, err := strconv.ParseUint(queries.Get("uint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Uint64 = v
				}
				if v, err := strconv.ParseInt(queries.Get("sfixed32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Sfixed32 = int32(v)
				}
				if v, err := strconv.ParseUint(queries.Get("fixed32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Fixed32 = uint32(v)
				}
				if v, err := strconv.ParseFloat(queries.Get("float"), 32); err != nil {
					return nil, err
				} else {
					req.Float = float32(v)
				}
				if v, err := strconv.ParseInt(queries.Get("sfixed64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Sfixed64 = v
				}
				if v, err := strconv.ParseUint(queries.Get("fixed64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Fixed64 = v
				}
				if v, err := strconv.ParseFloat(queries.Get("double"), 32); err != nil {
					return nil, err
				} else {
					req.Double = v
				}
				req.String_ = queries.Get("string")
				req.Bytes = []byte(queries.Get("bytes"))
				if v, err := strconv.ParseBool(queries.Get("opt_bool")); err != nil {
					return nil, err
				} else {
					req.OptBool = proto.Bool(v)
				}
				if v, err := strconv.ParseInt(queries.Get("opt_int32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptInt32 = proto.Int32(int32(v))
				}
				if v, err := strconv.ParseInt(queries.Get("opt_sint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptSint32 = proto.Int32(int32(v))
				}
				if v, err := strconv.ParseUint(queries.Get("opt_uint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptUint32 = proto.Uint32(uint32(v))
				}
				if v, err := strconv.ParseInt(queries.Get("opt_int64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptInt64 = proto.Int64(v)
				}
				if v, err := strconv.ParseInt(queries.Get("opt_sint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptSint64 = proto.Int64(v)
				}
				if v, err := strconv.ParseUint(queries.Get("opt_uint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptUint64 = proto.Uint64(v)
				}
				if v, err := strconv.ParseInt(queries.Get("opt_sfixed32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptSfixed32 = proto.Int32(int32(v))
				}
				if v, err := strconv.ParseUint(queries.Get("opt_fixed32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptFixed32 = proto.Uint32(uint32(v))
				}
				if v, err := strconv.ParseFloat(queries.Get("opt_float"), 32); err != nil {
					return nil, err
				} else {
					req.OptFloat = proto.Float32(float32(v))
				}
				if v, err := strconv.ParseInt(queries.Get("opt_sfixed64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptSfixed64 = proto.Int64(v)
				}
				if v, err := strconv.ParseUint(queries.Get("opt_fixed64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptFixed64 = proto.Uint64(v)
				}
				if v, err := strconv.ParseFloat(queries.Get("opt_double"), 32); err != nil {
					return nil, err
				} else {
					req.OptDouble = proto.Float64(v)
				}
				req.OptString = proto.String(queries.Get("opt_string"))
				req.OptBytes = []byte(queries.Get("opt_bytes"))
				if v, err := strconv.ParseFloat(queries.Get("wrap_double"), 64); err != nil {
					return nil, err
				} else {
					req.WrapDouble = wrapperspb.Double(v)
				}
				if v, err := strconv.ParseFloat(queries.Get("wrap_float"), 32); err != nil {
					return nil, err
				} else {
					req.WrapFloat = wrapperspb.Float(float32(v))
				}
				if v, err := strconv.ParseInt(queries.Get("wrap_int64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.WrapInt64 = wrapperspb.Int64(v)
				}
				if v, err := strconv.ParseUint(queries.Get("wrap_uint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.WrapUint64 = wrapperspb.UInt64(v)
				}
				if v, err := strconv.ParseInt(queries.Get("wrap_int32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.WrapInt32 = wrapperspb.Int32(int32(v))
				}
				if v, err := strconv.ParseUint(queries.Get("wrap_uint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.WrapUint32 = wrapperspb.UInt32(uint32(v))
				}
				if v, err := strconv.ParseBool(queries.Get("wrap_bool")); err != nil {
					return nil, err
				} else {
					req.WrapBool = wrapperspb.Bool(v)
				}
				req.WrapString = wrapperspb.String(queries.Get("wrap_string"))
				req.WrapBytes = wrapperspb.Bytes([]byte(queries.Get("wrap_bytes")))
				if v, err := convx.ParseBoolSlice(queries["rep_bool"]); err != nil {
					return nil, err
				} else {
					req.RepBool = v
				}
				if v, err := convx.ParseIntSlice[int32](queries["rep_int32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepInt32 = v
				}
				if v, err := convx.ParseIntSlice[int32](queries["rep_sint32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepSint32 = v
				}
				if v, err := convx.ParseUintSlice[uint32](queries["rep_uint32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepUint32 = v
				}
				if v, err := convx.ParseIntSlice[int64](queries["rep_int64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepInt64 = v
				}
				if v, err := convx.ParseIntSlice[int64](queries["rep_sint64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepSint64 = v
				}
				if v, err := convx.ParseUintSlice[uint64](queries["rep_uint64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepUint64 = v
				}
				if v, err := convx.ParseIntSlice[int32](queries["rep_sfixed32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepSfixed32 = v
				}
				if v, err := convx.ParseUintSlice[uint32](queries["rep_fixed32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepFixed32 = v
				}
				if v, err := convx.ParseFloatSlice[float32](queries["rep_float"], 32); err != nil {
					return nil, err
				} else {
					req.RepFloat = v
				}
				if v, err := convx.ParseIntSlice[int64](queries["rep_sfixed64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepSfixed64 = v
				}
				if v, err := convx.ParseUintSlice[uint64](queries["rep_fixed64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepFixed64 = v
				}
				if v, err := convx.ParseFloatSlice[float64](queries["rep_double"], 32); err != nil {
					return nil, err
				} else {
					req.RepDouble = v
				}
				req.RepString = queries["rep_string"]
				req.RepBytes = convx.ParseBytesSlice(queries["rep_bytes"])
				return req, nil
			},
			func(ctx context.Context, w http1.ResponseWriter, obj any) error {
				resp := obj.(*emptypb.Empty)
				_ = resp
				w.WriteHeader(http1.StatusOK)
				data, err := protojson.Marshal(resp)
				if err != nil {
					return err
				}
				if _, err := w.Write(data); err != nil {
					return err
				}
				return nil
			},
			opts...,
		))
	r.Name("/leo.example.demo.v1.Body/OptInt64").
		Methods("PUT").
		Path("/v1/opt_int64").
		Handler(http.NewServer(
			endpointx.Chain(endpoints.OptInt64(), mdw...),
			func(ctx context.Context, r *http1.Request) (any, error) {
				req := &BodyRequest{}
				body, err := io.ReadAll(r.Body)
				if err != nil {
					return nil, err
				}
				if v, err := strconv.ParseInt(string(body), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptInt64 = proto.Int64(v)
				}
				queries := r.URL.Query()
				if v, err := strconv.ParseBool(queries.Get("bool")); err != nil {
					return nil, err
				} else {
					req.Bool = v
				}
				if v, err := strconv.ParseInt(queries.Get("int32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Int32 = int32(v)
				}
				if v, err := strconv.ParseInt(queries.Get("sint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Sint32 = int32(v)
				}
				if v, err := strconv.ParseUint(queries.Get("uint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Uint32 = uint32(v)
				}
				if v, err := strconv.ParseInt(queries.Get("int64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Int64 = v
				}
				if v, err := strconv.ParseInt(queries.Get("sint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Sint64 = v
				}
				if v, err := strconv.ParseUint(queries.Get("uint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Uint64 = v
				}
				if v, err := strconv.ParseInt(queries.Get("sfixed32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Sfixed32 = int32(v)
				}
				if v, err := strconv.ParseUint(queries.Get("fixed32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Fixed32 = uint32(v)
				}
				if v, err := strconv.ParseFloat(queries.Get("float"), 32); err != nil {
					return nil, err
				} else {
					req.Float = float32(v)
				}
				if v, err := strconv.ParseInt(queries.Get("sfixed64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Sfixed64 = v
				}
				if v, err := strconv.ParseUint(queries.Get("fixed64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Fixed64 = v
				}
				if v, err := strconv.ParseFloat(queries.Get("double"), 32); err != nil {
					return nil, err
				} else {
					req.Double = v
				}
				req.String_ = queries.Get("string")
				req.Bytes = []byte(queries.Get("bytes"))
				if v, err := strconv.ParseBool(queries.Get("opt_bool")); err != nil {
					return nil, err
				} else {
					req.OptBool = proto.Bool(v)
				}
				if v, err := strconv.ParseInt(queries.Get("opt_int32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptInt32 = proto.Int32(int32(v))
				}
				if v, err := strconv.ParseInt(queries.Get("opt_sint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptSint32 = proto.Int32(int32(v))
				}
				if v, err := strconv.ParseUint(queries.Get("opt_uint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptUint32 = proto.Uint32(uint32(v))
				}
				if v, err := strconv.ParseInt(queries.Get("opt_sint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptSint64 = proto.Int64(v)
				}
				if v, err := strconv.ParseUint(queries.Get("opt_uint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptUint64 = proto.Uint64(v)
				}
				if v, err := strconv.ParseInt(queries.Get("opt_sfixed32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptSfixed32 = proto.Int32(int32(v))
				}
				if v, err := strconv.ParseUint(queries.Get("opt_fixed32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptFixed32 = proto.Uint32(uint32(v))
				}
				if v, err := strconv.ParseFloat(queries.Get("opt_float"), 32); err != nil {
					return nil, err
				} else {
					req.OptFloat = proto.Float32(float32(v))
				}
				if v, err := strconv.ParseInt(queries.Get("opt_sfixed64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptSfixed64 = proto.Int64(v)
				}
				if v, err := strconv.ParseUint(queries.Get("opt_fixed64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptFixed64 = proto.Uint64(v)
				}
				if v, err := strconv.ParseFloat(queries.Get("opt_double"), 32); err != nil {
					return nil, err
				} else {
					req.OptDouble = proto.Float64(v)
				}
				req.OptString = proto.String(queries.Get("opt_string"))
				req.OptBytes = []byte(queries.Get("opt_bytes"))
				if v, err := strconv.ParseFloat(queries.Get("wrap_double"), 64); err != nil {
					return nil, err
				} else {
					req.WrapDouble = wrapperspb.Double(v)
				}
				if v, err := strconv.ParseFloat(queries.Get("wrap_float"), 32); err != nil {
					return nil, err
				} else {
					req.WrapFloat = wrapperspb.Float(float32(v))
				}
				if v, err := strconv.ParseInt(queries.Get("wrap_int64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.WrapInt64 = wrapperspb.Int64(v)
				}
				if v, err := strconv.ParseUint(queries.Get("wrap_uint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.WrapUint64 = wrapperspb.UInt64(v)
				}
				if v, err := strconv.ParseInt(queries.Get("wrap_int32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.WrapInt32 = wrapperspb.Int32(int32(v))
				}
				if v, err := strconv.ParseUint(queries.Get("wrap_uint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.WrapUint32 = wrapperspb.UInt32(uint32(v))
				}
				if v, err := strconv.ParseBool(queries.Get("wrap_bool")); err != nil {
					return nil, err
				} else {
					req.WrapBool = wrapperspb.Bool(v)
				}
				req.WrapString = wrapperspb.String(queries.Get("wrap_string"))
				req.WrapBytes = wrapperspb.Bytes([]byte(queries.Get("wrap_bytes")))
				if v, err := convx.ParseBoolSlice(queries["rep_bool"]); err != nil {
					return nil, err
				} else {
					req.RepBool = v
				}
				if v, err := convx.ParseIntSlice[int32](queries["rep_int32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepInt32 = v
				}
				if v, err := convx.ParseIntSlice[int32](queries["rep_sint32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepSint32 = v
				}
				if v, err := convx.ParseUintSlice[uint32](queries["rep_uint32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepUint32 = v
				}
				if v, err := convx.ParseIntSlice[int64](queries["rep_int64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepInt64 = v
				}
				if v, err := convx.ParseIntSlice[int64](queries["rep_sint64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepSint64 = v
				}
				if v, err := convx.ParseUintSlice[uint64](queries["rep_uint64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepUint64 = v
				}
				if v, err := convx.ParseIntSlice[int32](queries["rep_sfixed32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepSfixed32 = v
				}
				if v, err := convx.ParseUintSlice[uint32](queries["rep_fixed32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepFixed32 = v
				}
				if v, err := convx.ParseFloatSlice[float32](queries["rep_float"], 32); err != nil {
					return nil, err
				} else {
					req.RepFloat = v
				}
				if v, err := convx.ParseIntSlice[int64](queries["rep_sfixed64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepSfixed64 = v
				}
				if v, err := convx.ParseUintSlice[uint64](queries["rep_fixed64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepFixed64 = v
				}
				if v, err := convx.ParseFloatSlice[float64](queries["rep_double"], 32); err != nil {
					return nil, err
				} else {
					req.RepDouble = v
				}
				req.RepString = queries["rep_string"]
				req.RepBytes = convx.ParseBytesSlice(queries["rep_bytes"])
				return req, nil
			},
			func(ctx context.Context, w http1.ResponseWriter, obj any) error {
				resp := obj.(*emptypb.Empty)
				_ = resp
				w.WriteHeader(http1.StatusOK)
				data, err := protojson.Marshal(resp)
				if err != nil {
					return err
				}
				if _, err := w.Write(data); err != nil {
					return err
				}
				return nil
			},
			opts...,
		))
	r.Name("/leo.example.demo.v1.Body/RepInt64").
		Methods("PUT").
		Path("/v1/rep_int64").
		Handler(http.NewServer(
			endpointx.Chain(endpoints.RepInt64(), mdw...),
			func(ctx context.Context, r *http1.Request) (any, error) {
				req := &BodyRequest{}
				body, err := io.ReadAll(r.Body)
				if err != nil {
					return nil, err
				}
				if v, err := strconv.ParseInt(string(body), 10, 64); err != nil {
					return nil, err
				} else {
					req.RepInt64 = v
				}
				queries := r.URL.Query()
				if v, err := strconv.ParseBool(queries.Get("bool")); err != nil {
					return nil, err
				} else {
					req.Bool = v
				}
				if v, err := strconv.ParseInt(queries.Get("int32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Int32 = int32(v)
				}
				if v, err := strconv.ParseInt(queries.Get("sint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Sint32 = int32(v)
				}
				if v, err := strconv.ParseUint(queries.Get("uint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Uint32 = uint32(v)
				}
				if v, err := strconv.ParseInt(queries.Get("int64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Int64 = v
				}
				if v, err := strconv.ParseInt(queries.Get("sint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Sint64 = v
				}
				if v, err := strconv.ParseUint(queries.Get("uint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Uint64 = v
				}
				if v, err := strconv.ParseInt(queries.Get("sfixed32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Sfixed32 = int32(v)
				}
				if v, err := strconv.ParseUint(queries.Get("fixed32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Fixed32 = uint32(v)
				}
				if v, err := strconv.ParseFloat(queries.Get("float"), 32); err != nil {
					return nil, err
				} else {
					req.Float = float32(v)
				}
				if v, err := strconv.ParseInt(queries.Get("sfixed64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Sfixed64 = v
				}
				if v, err := strconv.ParseUint(queries.Get("fixed64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Fixed64 = v
				}
				if v, err := strconv.ParseFloat(queries.Get("double"), 32); err != nil {
					return nil, err
				} else {
					req.Double = v
				}
				req.String_ = queries.Get("string")
				req.Bytes = []byte(queries.Get("bytes"))
				if v, err := strconv.ParseBool(queries.Get("opt_bool")); err != nil {
					return nil, err
				} else {
					req.OptBool = proto.Bool(v)
				}
				if v, err := strconv.ParseInt(queries.Get("opt_int32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptInt32 = proto.Int32(int32(v))
				}
				if v, err := strconv.ParseInt(queries.Get("opt_sint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptSint32 = proto.Int32(int32(v))
				}
				if v, err := strconv.ParseUint(queries.Get("opt_uint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptUint32 = proto.Uint32(uint32(v))
				}
				if v, err := strconv.ParseInt(queries.Get("opt_int64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptInt64 = proto.Int64(v)
				}
				if v, err := strconv.ParseInt(queries.Get("opt_sint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptSint64 = proto.Int64(v)
				}
				if v, err := strconv.ParseUint(queries.Get("opt_uint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptUint64 = proto.Uint64(v)
				}
				if v, err := strconv.ParseInt(queries.Get("opt_sfixed32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptSfixed32 = proto.Int32(int32(v))
				}
				if v, err := strconv.ParseUint(queries.Get("opt_fixed32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptFixed32 = proto.Uint32(uint32(v))
				}
				if v, err := strconv.ParseFloat(queries.Get("opt_float"), 32); err != nil {
					return nil, err
				} else {
					req.OptFloat = proto.Float32(float32(v))
				}
				if v, err := strconv.ParseInt(queries.Get("opt_sfixed64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptSfixed64 = proto.Int64(v)
				}
				if v, err := strconv.ParseUint(queries.Get("opt_fixed64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptFixed64 = proto.Uint64(v)
				}
				if v, err := strconv.ParseFloat(queries.Get("opt_double"), 32); err != nil {
					return nil, err
				} else {
					req.OptDouble = proto.Float64(v)
				}
				req.OptString = proto.String(queries.Get("opt_string"))
				req.OptBytes = []byte(queries.Get("opt_bytes"))
				if v, err := strconv.ParseFloat(queries.Get("wrap_double"), 64); err != nil {
					return nil, err
				} else {
					req.WrapDouble = wrapperspb.Double(v)
				}
				if v, err := strconv.ParseFloat(queries.Get("wrap_float"), 32); err != nil {
					return nil, err
				} else {
					req.WrapFloat = wrapperspb.Float(float32(v))
				}
				if v, err := strconv.ParseInt(queries.Get("wrap_int64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.WrapInt64 = wrapperspb.Int64(v)
				}
				if v, err := strconv.ParseUint(queries.Get("wrap_uint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.WrapUint64 = wrapperspb.UInt64(v)
				}
				if v, err := strconv.ParseInt(queries.Get("wrap_int32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.WrapInt32 = wrapperspb.Int32(int32(v))
				}
				if v, err := strconv.ParseUint(queries.Get("wrap_uint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.WrapUint32 = wrapperspb.UInt32(uint32(v))
				}
				if v, err := strconv.ParseBool(queries.Get("wrap_bool")); err != nil {
					return nil, err
				} else {
					req.WrapBool = wrapperspb.Bool(v)
				}
				req.WrapString = wrapperspb.String(queries.Get("wrap_string"))
				req.WrapBytes = wrapperspb.Bytes([]byte(queries.Get("wrap_bytes")))
				if v, err := convx.ParseBoolSlice(queries["rep_bool"]); err != nil {
					return nil, err
				} else {
					req.RepBool = v
				}
				if v, err := convx.ParseIntSlice[int32](queries["rep_int32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepInt32 = v
				}
				if v, err := convx.ParseIntSlice[int32](queries["rep_sint32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepSint32 = v
				}
				if v, err := convx.ParseUintSlice[uint32](queries["rep_uint32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepUint32 = v
				}
				if v, err := convx.ParseIntSlice[int64](queries["rep_sint64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepSint64 = v
				}
				if v, err := convx.ParseUintSlice[uint64](queries["rep_uint64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepUint64 = v
				}
				if v, err := convx.ParseIntSlice[int32](queries["rep_sfixed32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepSfixed32 = v
				}
				if v, err := convx.ParseUintSlice[uint32](queries["rep_fixed32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepFixed32 = v
				}
				if v, err := convx.ParseFloatSlice[float32](queries["rep_float"], 32); err != nil {
					return nil, err
				} else {
					req.RepFloat = v
				}
				if v, err := convx.ParseIntSlice[int64](queries["rep_sfixed64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepSfixed64 = v
				}
				if v, err := convx.ParseUintSlice[uint64](queries["rep_fixed64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepFixed64 = v
				}
				if v, err := convx.ParseFloatSlice[float64](queries["rep_double"], 32); err != nil {
					return nil, err
				} else {
					req.RepDouble = v
				}
				req.RepString = queries["rep_string"]
				req.RepBytes = convx.ParseBytesSlice(queries["rep_bytes"])
				return req, nil
			},
			func(ctx context.Context, w http1.ResponseWriter, obj any) error {
				resp := obj.(*emptypb.Empty)
				_ = resp
				w.WriteHeader(http1.StatusOK)
				data, err := protojson.Marshal(resp)
				if err != nil {
					return err
				}
				if _, err := w.Write(data); err != nil {
					return err
				}
				return nil
			},
			opts...,
		))
	r.Name("/leo.example.demo.v1.Body/WrapInt64").
		Methods("PUT").
		Path("/v1/wrap_int64").
		Handler(http.NewServer(
			endpointx.Chain(endpoints.WrapInt64(), mdw...),
			func(ctx context.Context, r *http1.Request) (any, error) {
				req := &BodyRequest{}
				body, err := io.ReadAll(r.Body)
				if err != nil {
					return nil, err
				}
				if v, err := strconv.ParseInt(string(body), 10, 64); err != nil {
					return nil, err
				} else {
					req.WrapInt64 = wrapperspb.Int64(v)
				}
				queries := r.URL.Query()
				if v, err := strconv.ParseBool(queries.Get("bool")); err != nil {
					return nil, err
				} else {
					req.Bool = v
				}
				if v, err := strconv.ParseInt(queries.Get("int32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Int32 = int32(v)
				}
				if v, err := strconv.ParseInt(queries.Get("sint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Sint32 = int32(v)
				}
				if v, err := strconv.ParseUint(queries.Get("uint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Uint32 = uint32(v)
				}
				if v, err := strconv.ParseInt(queries.Get("int64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Int64 = v
				}
				if v, err := strconv.ParseInt(queries.Get("sint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Sint64 = v
				}
				if v, err := strconv.ParseUint(queries.Get("uint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Uint64 = v
				}
				if v, err := strconv.ParseInt(queries.Get("sfixed32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Sfixed32 = int32(v)
				}
				if v, err := strconv.ParseUint(queries.Get("fixed32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Fixed32 = uint32(v)
				}
				if v, err := strconv.ParseFloat(queries.Get("float"), 32); err != nil {
					return nil, err
				} else {
					req.Float = float32(v)
				}
				if v, err := strconv.ParseInt(queries.Get("sfixed64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Sfixed64 = v
				}
				if v, err := strconv.ParseUint(queries.Get("fixed64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Fixed64 = v
				}
				if v, err := strconv.ParseFloat(queries.Get("double"), 32); err != nil {
					return nil, err
				} else {
					req.Double = v
				}
				req.String_ = queries.Get("string")
				req.Bytes = []byte(queries.Get("bytes"))
				if v, err := strconv.ParseBool(queries.Get("opt_bool")); err != nil {
					return nil, err
				} else {
					req.OptBool = proto.Bool(v)
				}
				if v, err := strconv.ParseInt(queries.Get("opt_int32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptInt32 = proto.Int32(int32(v))
				}
				if v, err := strconv.ParseInt(queries.Get("opt_sint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptSint32 = proto.Int32(int32(v))
				}
				if v, err := strconv.ParseUint(queries.Get("opt_uint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptUint32 = proto.Uint32(uint32(v))
				}
				if v, err := strconv.ParseInt(queries.Get("opt_int64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptInt64 = proto.Int64(v)
				}
				if v, err := strconv.ParseInt(queries.Get("opt_sint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptSint64 = proto.Int64(v)
				}
				if v, err := strconv.ParseUint(queries.Get("opt_uint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptUint64 = proto.Uint64(v)
				}
				if v, err := strconv.ParseInt(queries.Get("opt_sfixed32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptSfixed32 = proto.Int32(int32(v))
				}
				if v, err := strconv.ParseUint(queries.Get("opt_fixed32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptFixed32 = proto.Uint32(uint32(v))
				}
				if v, err := strconv.ParseFloat(queries.Get("opt_float"), 32); err != nil {
					return nil, err
				} else {
					req.OptFloat = proto.Float32(float32(v))
				}
				if v, err := strconv.ParseInt(queries.Get("opt_sfixed64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptSfixed64 = proto.Int64(v)
				}
				if v, err := strconv.ParseUint(queries.Get("opt_fixed64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptFixed64 = proto.Uint64(v)
				}
				if v, err := strconv.ParseFloat(queries.Get("opt_double"), 32); err != nil {
					return nil, err
				} else {
					req.OptDouble = proto.Float64(v)
				}
				req.OptString = proto.String(queries.Get("opt_string"))
				req.OptBytes = []byte(queries.Get("opt_bytes"))
				if v, err := strconv.ParseFloat(queries.Get("wrap_double"), 64); err != nil {
					return nil, err
				} else {
					req.WrapDouble = wrapperspb.Double(v)
				}
				if v, err := strconv.ParseFloat(queries.Get("wrap_float"), 32); err != nil {
					return nil, err
				} else {
					req.WrapFloat = wrapperspb.Float(float32(v))
				}
				if v, err := strconv.ParseUint(queries.Get("wrap_uint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.WrapUint64 = wrapperspb.UInt64(v)
				}
				if v, err := strconv.ParseInt(queries.Get("wrap_int32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.WrapInt32 = wrapperspb.Int32(int32(v))
				}
				if v, err := strconv.ParseUint(queries.Get("wrap_uint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.WrapUint32 = wrapperspb.UInt32(uint32(v))
				}
				if v, err := strconv.ParseBool(queries.Get("wrap_bool")); err != nil {
					return nil, err
				} else {
					req.WrapBool = wrapperspb.Bool(v)
				}
				req.WrapString = wrapperspb.String(queries.Get("wrap_string"))
				req.WrapBytes = wrapperspb.Bytes([]byte(queries.Get("wrap_bytes")))
				if v, err := convx.ParseBoolSlice(queries["rep_bool"]); err != nil {
					return nil, err
				} else {
					req.RepBool = v
				}
				if v, err := convx.ParseIntSlice[int32](queries["rep_int32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepInt32 = v
				}
				if v, err := convx.ParseIntSlice[int32](queries["rep_sint32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepSint32 = v
				}
				if v, err := convx.ParseUintSlice[uint32](queries["rep_uint32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepUint32 = v
				}
				if v, err := convx.ParseIntSlice[int64](queries["rep_int64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepInt64 = v
				}
				if v, err := convx.ParseIntSlice[int64](queries["rep_sint64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepSint64 = v
				}
				if v, err := convx.ParseUintSlice[uint64](queries["rep_uint64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepUint64 = v
				}
				if v, err := convx.ParseIntSlice[int32](queries["rep_sfixed32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepSfixed32 = v
				}
				if v, err := convx.ParseUintSlice[uint32](queries["rep_fixed32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepFixed32 = v
				}
				if v, err := convx.ParseFloatSlice[float32](queries["rep_float"], 32); err != nil {
					return nil, err
				} else {
					req.RepFloat = v
				}
				if v, err := convx.ParseIntSlice[int64](queries["rep_sfixed64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepSfixed64 = v
				}
				if v, err := convx.ParseUintSlice[uint64](queries["rep_fixed64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepFixed64 = v
				}
				if v, err := convx.ParseFloatSlice[float64](queries["rep_double"], 32); err != nil {
					return nil, err
				} else {
					req.RepDouble = v
				}
				req.RepString = queries["rep_string"]
				req.RepBytes = convx.ParseBytesSlice(queries["rep_bytes"])
				return req, nil
			},
			func(ctx context.Context, w http1.ResponseWriter, obj any) error {
				resp := obj.(*emptypb.Empty)
				_ = resp
				w.WriteHeader(http1.StatusOK)
				data, err := protojson.Marshal(resp)
				if err != nil {
					return err
				}
				if _, err := w.Write(data); err != nil {
					return err
				}
				return nil
			},
			opts...,
		))
	r.Name("/leo.example.demo.v1.Body/Sint64").
		Methods("PUT").
		Path("/v1/sint64").
		Handler(http.NewServer(
			endpointx.Chain(endpoints.Sint64(), mdw...),
			func(ctx context.Context, r *http1.Request) (any, error) {
				req := &BodyRequest{}
				body, err := io.ReadAll(r.Body)
				if err != nil {
					return nil, err
				}
				if v, err := strconv.ParseInt(string(body), 10, 64); err != nil {
					return nil, err
				} else {
					req.Sint64 = v
				}
				queries := r.URL.Query()
				if v, err := strconv.ParseBool(queries.Get("bool")); err != nil {
					return nil, err
				} else {
					req.Bool = v
				}
				if v, err := strconv.ParseInt(queries.Get("int32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Int32 = int32(v)
				}
				if v, err := strconv.ParseInt(queries.Get("sint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Sint32 = int32(v)
				}
				if v, err := strconv.ParseUint(queries.Get("uint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Uint32 = uint32(v)
				}
				if v, err := strconv.ParseInt(queries.Get("int64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Int64 = v
				}
				if v, err := strconv.ParseUint(queries.Get("uint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Uint64 = v
				}
				if v, err := strconv.ParseInt(queries.Get("sfixed32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Sfixed32 = int32(v)
				}
				if v, err := strconv.ParseUint(queries.Get("fixed32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Fixed32 = uint32(v)
				}
				if v, err := strconv.ParseFloat(queries.Get("float"), 32); err != nil {
					return nil, err
				} else {
					req.Float = float32(v)
				}
				if v, err := strconv.ParseInt(queries.Get("sfixed64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Sfixed64 = v
				}
				if v, err := strconv.ParseUint(queries.Get("fixed64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Fixed64 = v
				}
				if v, err := strconv.ParseFloat(queries.Get("double"), 32); err != nil {
					return nil, err
				} else {
					req.Double = v
				}
				req.String_ = queries.Get("string")
				req.Bytes = []byte(queries.Get("bytes"))
				if v, err := strconv.ParseBool(queries.Get("opt_bool")); err != nil {
					return nil, err
				} else {
					req.OptBool = proto.Bool(v)
				}
				if v, err := strconv.ParseInt(queries.Get("opt_int32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptInt32 = proto.Int32(int32(v))
				}
				if v, err := strconv.ParseInt(queries.Get("opt_sint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptSint32 = proto.Int32(int32(v))
				}
				if v, err := strconv.ParseUint(queries.Get("opt_uint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptUint32 = proto.Uint32(uint32(v))
				}
				if v, err := strconv.ParseInt(queries.Get("opt_int64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptInt64 = proto.Int64(v)
				}
				if v, err := strconv.ParseInt(queries.Get("opt_sint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptSint64 = proto.Int64(v)
				}
				if v, err := strconv.ParseUint(queries.Get("opt_uint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptUint64 = proto.Uint64(v)
				}
				if v, err := strconv.ParseInt(queries.Get("opt_sfixed32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptSfixed32 = proto.Int32(int32(v))
				}
				if v, err := strconv.ParseUint(queries.Get("opt_fixed32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptFixed32 = proto.Uint32(uint32(v))
				}
				if v, err := strconv.ParseFloat(queries.Get("opt_float"), 32); err != nil {
					return nil, err
				} else {
					req.OptFloat = proto.Float32(float32(v))
				}
				if v, err := strconv.ParseInt(queries.Get("opt_sfixed64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptSfixed64 = proto.Int64(v)
				}
				if v, err := strconv.ParseUint(queries.Get("opt_fixed64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptFixed64 = proto.Uint64(v)
				}
				if v, err := strconv.ParseFloat(queries.Get("opt_double"), 32); err != nil {
					return nil, err
				} else {
					req.OptDouble = proto.Float64(v)
				}
				req.OptString = proto.String(queries.Get("opt_string"))
				req.OptBytes = []byte(queries.Get("opt_bytes"))
				if v, err := strconv.ParseFloat(queries.Get("wrap_double"), 64); err != nil {
					return nil, err
				} else {
					req.WrapDouble = wrapperspb.Double(v)
				}
				if v, err := strconv.ParseFloat(queries.Get("wrap_float"), 32); err != nil {
					return nil, err
				} else {
					req.WrapFloat = wrapperspb.Float(float32(v))
				}
				if v, err := strconv.ParseInt(queries.Get("wrap_int64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.WrapInt64 = wrapperspb.Int64(v)
				}
				if v, err := strconv.ParseUint(queries.Get("wrap_uint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.WrapUint64 = wrapperspb.UInt64(v)
				}
				if v, err := strconv.ParseInt(queries.Get("wrap_int32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.WrapInt32 = wrapperspb.Int32(int32(v))
				}
				if v, err := strconv.ParseUint(queries.Get("wrap_uint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.WrapUint32 = wrapperspb.UInt32(uint32(v))
				}
				if v, err := strconv.ParseBool(queries.Get("wrap_bool")); err != nil {
					return nil, err
				} else {
					req.WrapBool = wrapperspb.Bool(v)
				}
				req.WrapString = wrapperspb.String(queries.Get("wrap_string"))
				req.WrapBytes = wrapperspb.Bytes([]byte(queries.Get("wrap_bytes")))
				if v, err := convx.ParseBoolSlice(queries["rep_bool"]); err != nil {
					return nil, err
				} else {
					req.RepBool = v
				}
				if v, err := convx.ParseIntSlice[int32](queries["rep_int32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepInt32 = v
				}
				if v, err := convx.ParseIntSlice[int32](queries["rep_sint32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepSint32 = v
				}
				if v, err := convx.ParseUintSlice[uint32](queries["rep_uint32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepUint32 = v
				}
				if v, err := convx.ParseIntSlice[int64](queries["rep_int64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepInt64 = v
				}
				if v, err := convx.ParseIntSlice[int64](queries["rep_sint64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepSint64 = v
				}
				if v, err := convx.ParseUintSlice[uint64](queries["rep_uint64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepUint64 = v
				}
				if v, err := convx.ParseIntSlice[int32](queries["rep_sfixed32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepSfixed32 = v
				}
				if v, err := convx.ParseUintSlice[uint32](queries["rep_fixed32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepFixed32 = v
				}
				if v, err := convx.ParseFloatSlice[float32](queries["rep_float"], 32); err != nil {
					return nil, err
				} else {
					req.RepFloat = v
				}
				if v, err := convx.ParseIntSlice[int64](queries["rep_sfixed64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepSfixed64 = v
				}
				if v, err := convx.ParseUintSlice[uint64](queries["rep_fixed64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepFixed64 = v
				}
				if v, err := convx.ParseFloatSlice[float64](queries["rep_double"], 32); err != nil {
					return nil, err
				} else {
					req.RepDouble = v
				}
				req.RepString = queries["rep_string"]
				req.RepBytes = convx.ParseBytesSlice(queries["rep_bytes"])
				return req, nil
			},
			func(ctx context.Context, w http1.ResponseWriter, obj any) error {
				resp := obj.(*emptypb.Empty)
				_ = resp
				w.WriteHeader(http1.StatusOK)
				data, err := protojson.Marshal(resp)
				if err != nil {
					return err
				}
				if _, err := w.Write(data); err != nil {
					return err
				}
				return nil
			},
			opts...,
		))
	r.Name("/leo.example.demo.v1.Body/OptSint64").
		Methods("PUT").
		Path("/v1/opt_sint64").
		Handler(http.NewServer(
			endpointx.Chain(endpoints.OptSint64(), mdw...),
			func(ctx context.Context, r *http1.Request) (any, error) {
				req := &BodyRequest{}
				body, err := io.ReadAll(r.Body)
				if err != nil {
					return nil, err
				}
				if v, err := strconv.ParseInt(string(body), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptSint64 = proto.Int64(v)
				}
				queries := r.URL.Query()
				if v, err := strconv.ParseBool(queries.Get("bool")); err != nil {
					return nil, err
				} else {
					req.Bool = v
				}
				if v, err := strconv.ParseInt(queries.Get("int32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Int32 = int32(v)
				}
				if v, err := strconv.ParseInt(queries.Get("sint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Sint32 = int32(v)
				}
				if v, err := strconv.ParseUint(queries.Get("uint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Uint32 = uint32(v)
				}
				if v, err := strconv.ParseInt(queries.Get("int64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Int64 = v
				}
				if v, err := strconv.ParseInt(queries.Get("sint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Sint64 = v
				}
				if v, err := strconv.ParseUint(queries.Get("uint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Uint64 = v
				}
				if v, err := strconv.ParseInt(queries.Get("sfixed32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Sfixed32 = int32(v)
				}
				if v, err := strconv.ParseUint(queries.Get("fixed32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Fixed32 = uint32(v)
				}
				if v, err := strconv.ParseFloat(queries.Get("float"), 32); err != nil {
					return nil, err
				} else {
					req.Float = float32(v)
				}
				if v, err := strconv.ParseInt(queries.Get("sfixed64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Sfixed64 = v
				}
				if v, err := strconv.ParseUint(queries.Get("fixed64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Fixed64 = v
				}
				if v, err := strconv.ParseFloat(queries.Get("double"), 32); err != nil {
					return nil, err
				} else {
					req.Double = v
				}
				req.String_ = queries.Get("string")
				req.Bytes = []byte(queries.Get("bytes"))
				if v, err := strconv.ParseBool(queries.Get("opt_bool")); err != nil {
					return nil, err
				} else {
					req.OptBool = proto.Bool(v)
				}
				if v, err := strconv.ParseInt(queries.Get("opt_int32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptInt32 = proto.Int32(int32(v))
				}
				if v, err := strconv.ParseInt(queries.Get("opt_sint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptSint32 = proto.Int32(int32(v))
				}
				if v, err := strconv.ParseUint(queries.Get("opt_uint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptUint32 = proto.Uint32(uint32(v))
				}
				if v, err := strconv.ParseInt(queries.Get("opt_int64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptInt64 = proto.Int64(v)
				}
				if v, err := strconv.ParseUint(queries.Get("opt_uint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptUint64 = proto.Uint64(v)
				}
				if v, err := strconv.ParseInt(queries.Get("opt_sfixed32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptSfixed32 = proto.Int32(int32(v))
				}
				if v, err := strconv.ParseUint(queries.Get("opt_fixed32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptFixed32 = proto.Uint32(uint32(v))
				}
				if v, err := strconv.ParseFloat(queries.Get("opt_float"), 32); err != nil {
					return nil, err
				} else {
					req.OptFloat = proto.Float32(float32(v))
				}
				if v, err := strconv.ParseInt(queries.Get("opt_sfixed64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptSfixed64 = proto.Int64(v)
				}
				if v, err := strconv.ParseUint(queries.Get("opt_fixed64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptFixed64 = proto.Uint64(v)
				}
				if v, err := strconv.ParseFloat(queries.Get("opt_double"), 32); err != nil {
					return nil, err
				} else {
					req.OptDouble = proto.Float64(v)
				}
				req.OptString = proto.String(queries.Get("opt_string"))
				req.OptBytes = []byte(queries.Get("opt_bytes"))
				if v, err := strconv.ParseFloat(queries.Get("wrap_double"), 64); err != nil {
					return nil, err
				} else {
					req.WrapDouble = wrapperspb.Double(v)
				}
				if v, err := strconv.ParseFloat(queries.Get("wrap_float"), 32); err != nil {
					return nil, err
				} else {
					req.WrapFloat = wrapperspb.Float(float32(v))
				}
				if v, err := strconv.ParseInt(queries.Get("wrap_int64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.WrapInt64 = wrapperspb.Int64(v)
				}
				if v, err := strconv.ParseUint(queries.Get("wrap_uint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.WrapUint64 = wrapperspb.UInt64(v)
				}
				if v, err := strconv.ParseInt(queries.Get("wrap_int32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.WrapInt32 = wrapperspb.Int32(int32(v))
				}
				if v, err := strconv.ParseUint(queries.Get("wrap_uint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.WrapUint32 = wrapperspb.UInt32(uint32(v))
				}
				if v, err := strconv.ParseBool(queries.Get("wrap_bool")); err != nil {
					return nil, err
				} else {
					req.WrapBool = wrapperspb.Bool(v)
				}
				req.WrapString = wrapperspb.String(queries.Get("wrap_string"))
				req.WrapBytes = wrapperspb.Bytes([]byte(queries.Get("wrap_bytes")))
				if v, err := convx.ParseBoolSlice(queries["rep_bool"]); err != nil {
					return nil, err
				} else {
					req.RepBool = v
				}
				if v, err := convx.ParseIntSlice[int32](queries["rep_int32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepInt32 = v
				}
				if v, err := convx.ParseIntSlice[int32](queries["rep_sint32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepSint32 = v
				}
				if v, err := convx.ParseUintSlice[uint32](queries["rep_uint32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepUint32 = v
				}
				if v, err := convx.ParseIntSlice[int64](queries["rep_int64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepInt64 = v
				}
				if v, err := convx.ParseIntSlice[int64](queries["rep_sint64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepSint64 = v
				}
				if v, err := convx.ParseUintSlice[uint64](queries["rep_uint64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepUint64 = v
				}
				if v, err := convx.ParseIntSlice[int32](queries["rep_sfixed32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepSfixed32 = v
				}
				if v, err := convx.ParseUintSlice[uint32](queries["rep_fixed32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepFixed32 = v
				}
				if v, err := convx.ParseFloatSlice[float32](queries["rep_float"], 32); err != nil {
					return nil, err
				} else {
					req.RepFloat = v
				}
				if v, err := convx.ParseIntSlice[int64](queries["rep_sfixed64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepSfixed64 = v
				}
				if v, err := convx.ParseUintSlice[uint64](queries["rep_fixed64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepFixed64 = v
				}
				if v, err := convx.ParseFloatSlice[float64](queries["rep_double"], 32); err != nil {
					return nil, err
				} else {
					req.RepDouble = v
				}
				req.RepString = queries["rep_string"]
				req.RepBytes = convx.ParseBytesSlice(queries["rep_bytes"])
				return req, nil
			},
			func(ctx context.Context, w http1.ResponseWriter, obj any) error {
				resp := obj.(*emptypb.Empty)
				_ = resp
				w.WriteHeader(http1.StatusOK)
				data, err := protojson.Marshal(resp)
				if err != nil {
					return err
				}
				if _, err := w.Write(data); err != nil {
					return err
				}
				return nil
			},
			opts...,
		))
	r.Name("/leo.example.demo.v1.Body/RepSint64").
		Methods("PUT").
		Path("/v1/rep_sint64").
		Handler(http.NewServer(
			endpointx.Chain(endpoints.RepSint64(), mdw...),
			func(ctx context.Context, r *http1.Request) (any, error) {
				req := &BodyRequest{}
				body, err := io.ReadAll(r.Body)
				if err != nil {
					return nil, err
				}
				if v, err := strconv.ParseInt(string(body), 10, 64); err != nil {
					return nil, err
				} else {
					req.RepSint64 = v
				}
				queries := r.URL.Query()
				if v, err := strconv.ParseBool(queries.Get("bool")); err != nil {
					return nil, err
				} else {
					req.Bool = v
				}
				if v, err := strconv.ParseInt(queries.Get("int32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Int32 = int32(v)
				}
				if v, err := strconv.ParseInt(queries.Get("sint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Sint32 = int32(v)
				}
				if v, err := strconv.ParseUint(queries.Get("uint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Uint32 = uint32(v)
				}
				if v, err := strconv.ParseInt(queries.Get("int64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Int64 = v
				}
				if v, err := strconv.ParseInt(queries.Get("sint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Sint64 = v
				}
				if v, err := strconv.ParseUint(queries.Get("uint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Uint64 = v
				}
				if v, err := strconv.ParseInt(queries.Get("sfixed32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Sfixed32 = int32(v)
				}
				if v, err := strconv.ParseUint(queries.Get("fixed32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Fixed32 = uint32(v)
				}
				if v, err := strconv.ParseFloat(queries.Get("float"), 32); err != nil {
					return nil, err
				} else {
					req.Float = float32(v)
				}
				if v, err := strconv.ParseInt(queries.Get("sfixed64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Sfixed64 = v
				}
				if v, err := strconv.ParseUint(queries.Get("fixed64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Fixed64 = v
				}
				if v, err := strconv.ParseFloat(queries.Get("double"), 32); err != nil {
					return nil, err
				} else {
					req.Double = v
				}
				req.String_ = queries.Get("string")
				req.Bytes = []byte(queries.Get("bytes"))
				if v, err := strconv.ParseBool(queries.Get("opt_bool")); err != nil {
					return nil, err
				} else {
					req.OptBool = proto.Bool(v)
				}
				if v, err := strconv.ParseInt(queries.Get("opt_int32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptInt32 = proto.Int32(int32(v))
				}
				if v, err := strconv.ParseInt(queries.Get("opt_sint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptSint32 = proto.Int32(int32(v))
				}
				if v, err := strconv.ParseUint(queries.Get("opt_uint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptUint32 = proto.Uint32(uint32(v))
				}
				if v, err := strconv.ParseInt(queries.Get("opt_int64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptInt64 = proto.Int64(v)
				}
				if v, err := strconv.ParseInt(queries.Get("opt_sint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptSint64 = proto.Int64(v)
				}
				if v, err := strconv.ParseUint(queries.Get("opt_uint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptUint64 = proto.Uint64(v)
				}
				if v, err := strconv.ParseInt(queries.Get("opt_sfixed32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptSfixed32 = proto.Int32(int32(v))
				}
				if v, err := strconv.ParseUint(queries.Get("opt_fixed32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptFixed32 = proto.Uint32(uint32(v))
				}
				if v, err := strconv.ParseFloat(queries.Get("opt_float"), 32); err != nil {
					return nil, err
				} else {
					req.OptFloat = proto.Float32(float32(v))
				}
				if v, err := strconv.ParseInt(queries.Get("opt_sfixed64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptSfixed64 = proto.Int64(v)
				}
				if v, err := strconv.ParseUint(queries.Get("opt_fixed64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptFixed64 = proto.Uint64(v)
				}
				if v, err := strconv.ParseFloat(queries.Get("opt_double"), 32); err != nil {
					return nil, err
				} else {
					req.OptDouble = proto.Float64(v)
				}
				req.OptString = proto.String(queries.Get("opt_string"))
				req.OptBytes = []byte(queries.Get("opt_bytes"))
				if v, err := strconv.ParseFloat(queries.Get("wrap_double"), 64); err != nil {
					return nil, err
				} else {
					req.WrapDouble = wrapperspb.Double(v)
				}
				if v, err := strconv.ParseFloat(queries.Get("wrap_float"), 32); err != nil {
					return nil, err
				} else {
					req.WrapFloat = wrapperspb.Float(float32(v))
				}
				if v, err := strconv.ParseInt(queries.Get("wrap_int64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.WrapInt64 = wrapperspb.Int64(v)
				}
				if v, err := strconv.ParseUint(queries.Get("wrap_uint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.WrapUint64 = wrapperspb.UInt64(v)
				}
				if v, err := strconv.ParseInt(queries.Get("wrap_int32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.WrapInt32 = wrapperspb.Int32(int32(v))
				}
				if v, err := strconv.ParseUint(queries.Get("wrap_uint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.WrapUint32 = wrapperspb.UInt32(uint32(v))
				}
				if v, err := strconv.ParseBool(queries.Get("wrap_bool")); err != nil {
					return nil, err
				} else {
					req.WrapBool = wrapperspb.Bool(v)
				}
				req.WrapString = wrapperspb.String(queries.Get("wrap_string"))
				req.WrapBytes = wrapperspb.Bytes([]byte(queries.Get("wrap_bytes")))
				if v, err := convx.ParseBoolSlice(queries["rep_bool"]); err != nil {
					return nil, err
				} else {
					req.RepBool = v
				}
				if v, err := convx.ParseIntSlice[int32](queries["rep_int32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepInt32 = v
				}
				if v, err := convx.ParseIntSlice[int32](queries["rep_sint32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepSint32 = v
				}
				if v, err := convx.ParseUintSlice[uint32](queries["rep_uint32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepUint32 = v
				}
				if v, err := convx.ParseIntSlice[int64](queries["rep_int64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepInt64 = v
				}
				if v, err := convx.ParseUintSlice[uint64](queries["rep_uint64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepUint64 = v
				}
				if v, err := convx.ParseIntSlice[int32](queries["rep_sfixed32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepSfixed32 = v
				}
				if v, err := convx.ParseUintSlice[uint32](queries["rep_fixed32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepFixed32 = v
				}
				if v, err := convx.ParseFloatSlice[float32](queries["rep_float"], 32); err != nil {
					return nil, err
				} else {
					req.RepFloat = v
				}
				if v, err := convx.ParseIntSlice[int64](queries["rep_sfixed64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepSfixed64 = v
				}
				if v, err := convx.ParseUintSlice[uint64](queries["rep_fixed64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepFixed64 = v
				}
				if v, err := convx.ParseFloatSlice[float64](queries["rep_double"], 32); err != nil {
					return nil, err
				} else {
					req.RepDouble = v
				}
				req.RepString = queries["rep_string"]
				req.RepBytes = convx.ParseBytesSlice(queries["rep_bytes"])
				return req, nil
			},
			func(ctx context.Context, w http1.ResponseWriter, obj any) error {
				resp := obj.(*emptypb.Empty)
				_ = resp
				w.WriteHeader(http1.StatusOK)
				data, err := protojson.Marshal(resp)
				if err != nil {
					return err
				}
				if _, err := w.Write(data); err != nil {
					return err
				}
				return nil
			},
			opts...,
		))
	r.Name("/leo.example.demo.v1.Body/Sfixed64").
		Methods("PUT").
		Path("/v1/sfixed64").
		Handler(http.NewServer(
			endpointx.Chain(endpoints.Sfixed64(), mdw...),
			func(ctx context.Context, r *http1.Request) (any, error) {
				req := &BodyRequest{}
				body, err := io.ReadAll(r.Body)
				if err != nil {
					return nil, err
				}
				if v, err := strconv.ParseInt(string(body), 10, 64); err != nil {
					return nil, err
				} else {
					req.Sfixed64 = v
				}
				queries := r.URL.Query()
				if v, err := strconv.ParseBool(queries.Get("bool")); err != nil {
					return nil, err
				} else {
					req.Bool = v
				}
				if v, err := strconv.ParseInt(queries.Get("int32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Int32 = int32(v)
				}
				if v, err := strconv.ParseInt(queries.Get("sint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Sint32 = int32(v)
				}
				if v, err := strconv.ParseUint(queries.Get("uint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Uint32 = uint32(v)
				}
				if v, err := strconv.ParseInt(queries.Get("int64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Int64 = v
				}
				if v, err := strconv.ParseInt(queries.Get("sint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Sint64 = v
				}
				if v, err := strconv.ParseUint(queries.Get("uint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Uint64 = v
				}
				if v, err := strconv.ParseInt(queries.Get("sfixed32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Sfixed32 = int32(v)
				}
				if v, err := strconv.ParseUint(queries.Get("fixed32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Fixed32 = uint32(v)
				}
				if v, err := strconv.ParseFloat(queries.Get("float"), 32); err != nil {
					return nil, err
				} else {
					req.Float = float32(v)
				}
				if v, err := strconv.ParseUint(queries.Get("fixed64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Fixed64 = v
				}
				if v, err := strconv.ParseFloat(queries.Get("double"), 32); err != nil {
					return nil, err
				} else {
					req.Double = v
				}
				req.String_ = queries.Get("string")
				req.Bytes = []byte(queries.Get("bytes"))
				if v, err := strconv.ParseBool(queries.Get("opt_bool")); err != nil {
					return nil, err
				} else {
					req.OptBool = proto.Bool(v)
				}
				if v, err := strconv.ParseInt(queries.Get("opt_int32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptInt32 = proto.Int32(int32(v))
				}
				if v, err := strconv.ParseInt(queries.Get("opt_sint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptSint32 = proto.Int32(int32(v))
				}
				if v, err := strconv.ParseUint(queries.Get("opt_uint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptUint32 = proto.Uint32(uint32(v))
				}
				if v, err := strconv.ParseInt(queries.Get("opt_int64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptInt64 = proto.Int64(v)
				}
				if v, err := strconv.ParseInt(queries.Get("opt_sint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptSint64 = proto.Int64(v)
				}
				if v, err := strconv.ParseUint(queries.Get("opt_uint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptUint64 = proto.Uint64(v)
				}
				if v, err := strconv.ParseInt(queries.Get("opt_sfixed32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptSfixed32 = proto.Int32(int32(v))
				}
				if v, err := strconv.ParseUint(queries.Get("opt_fixed32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptFixed32 = proto.Uint32(uint32(v))
				}
				if v, err := strconv.ParseFloat(queries.Get("opt_float"), 32); err != nil {
					return nil, err
				} else {
					req.OptFloat = proto.Float32(float32(v))
				}
				if v, err := strconv.ParseInt(queries.Get("opt_sfixed64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptSfixed64 = proto.Int64(v)
				}
				if v, err := strconv.ParseUint(queries.Get("opt_fixed64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptFixed64 = proto.Uint64(v)
				}
				if v, err := strconv.ParseFloat(queries.Get("opt_double"), 32); err != nil {
					return nil, err
				} else {
					req.OptDouble = proto.Float64(v)
				}
				req.OptString = proto.String(queries.Get("opt_string"))
				req.OptBytes = []byte(queries.Get("opt_bytes"))
				if v, err := strconv.ParseFloat(queries.Get("wrap_double"), 64); err != nil {
					return nil, err
				} else {
					req.WrapDouble = wrapperspb.Double(v)
				}
				if v, err := strconv.ParseFloat(queries.Get("wrap_float"), 32); err != nil {
					return nil, err
				} else {
					req.WrapFloat = wrapperspb.Float(float32(v))
				}
				if v, err := strconv.ParseInt(queries.Get("wrap_int64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.WrapInt64 = wrapperspb.Int64(v)
				}
				if v, err := strconv.ParseUint(queries.Get("wrap_uint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.WrapUint64 = wrapperspb.UInt64(v)
				}
				if v, err := strconv.ParseInt(queries.Get("wrap_int32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.WrapInt32 = wrapperspb.Int32(int32(v))
				}
				if v, err := strconv.ParseUint(queries.Get("wrap_uint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.WrapUint32 = wrapperspb.UInt32(uint32(v))
				}
				if v, err := strconv.ParseBool(queries.Get("wrap_bool")); err != nil {
					return nil, err
				} else {
					req.WrapBool = wrapperspb.Bool(v)
				}
				req.WrapString = wrapperspb.String(queries.Get("wrap_string"))
				req.WrapBytes = wrapperspb.Bytes([]byte(queries.Get("wrap_bytes")))
				if v, err := convx.ParseBoolSlice(queries["rep_bool"]); err != nil {
					return nil, err
				} else {
					req.RepBool = v
				}
				if v, err := convx.ParseIntSlice[int32](queries["rep_int32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepInt32 = v
				}
				if v, err := convx.ParseIntSlice[int32](queries["rep_sint32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepSint32 = v
				}
				if v, err := convx.ParseUintSlice[uint32](queries["rep_uint32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepUint32 = v
				}
				if v, err := convx.ParseIntSlice[int64](queries["rep_int64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepInt64 = v
				}
				if v, err := convx.ParseIntSlice[int64](queries["rep_sint64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepSint64 = v
				}
				if v, err := convx.ParseUintSlice[uint64](queries["rep_uint64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepUint64 = v
				}
				if v, err := convx.ParseIntSlice[int32](queries["rep_sfixed32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepSfixed32 = v
				}
				if v, err := convx.ParseUintSlice[uint32](queries["rep_fixed32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepFixed32 = v
				}
				if v, err := convx.ParseFloatSlice[float32](queries["rep_float"], 32); err != nil {
					return nil, err
				} else {
					req.RepFloat = v
				}
				if v, err := convx.ParseIntSlice[int64](queries["rep_sfixed64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepSfixed64 = v
				}
				if v, err := convx.ParseUintSlice[uint64](queries["rep_fixed64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepFixed64 = v
				}
				if v, err := convx.ParseFloatSlice[float64](queries["rep_double"], 32); err != nil {
					return nil, err
				} else {
					req.RepDouble = v
				}
				req.RepString = queries["rep_string"]
				req.RepBytes = convx.ParseBytesSlice(queries["rep_bytes"])
				return req, nil
			},
			func(ctx context.Context, w http1.ResponseWriter, obj any) error {
				resp := obj.(*emptypb.Empty)
				_ = resp
				w.WriteHeader(http1.StatusOK)
				data, err := protojson.Marshal(resp)
				if err != nil {
					return err
				}
				if _, err := w.Write(data); err != nil {
					return err
				}
				return nil
			},
			opts...,
		))
	r.Name("/leo.example.demo.v1.Body/OptSfixed64").
		Methods("PUT").
		Path("/v1/opt_sfixed64").
		Handler(http.NewServer(
			endpointx.Chain(endpoints.OptSfixed64(), mdw...),
			func(ctx context.Context, r *http1.Request) (any, error) {
				req := &BodyRequest{}
				body, err := io.ReadAll(r.Body)
				if err != nil {
					return nil, err
				}
				if v, err := strconv.ParseInt(string(body), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptSfixed64 = proto.Int64(v)
				}
				queries := r.URL.Query()
				if v, err := strconv.ParseBool(queries.Get("bool")); err != nil {
					return nil, err
				} else {
					req.Bool = v
				}
				if v, err := strconv.ParseInt(queries.Get("int32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Int32 = int32(v)
				}
				if v, err := strconv.ParseInt(queries.Get("sint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Sint32 = int32(v)
				}
				if v, err := strconv.ParseUint(queries.Get("uint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Uint32 = uint32(v)
				}
				if v, err := strconv.ParseInt(queries.Get("int64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Int64 = v
				}
				if v, err := strconv.ParseInt(queries.Get("sint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Sint64 = v
				}
				if v, err := strconv.ParseUint(queries.Get("uint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Uint64 = v
				}
				if v, err := strconv.ParseInt(queries.Get("sfixed32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Sfixed32 = int32(v)
				}
				if v, err := strconv.ParseUint(queries.Get("fixed32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Fixed32 = uint32(v)
				}
				if v, err := strconv.ParseFloat(queries.Get("float"), 32); err != nil {
					return nil, err
				} else {
					req.Float = float32(v)
				}
				if v, err := strconv.ParseInt(queries.Get("sfixed64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Sfixed64 = v
				}
				if v, err := strconv.ParseUint(queries.Get("fixed64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Fixed64 = v
				}
				if v, err := strconv.ParseFloat(queries.Get("double"), 32); err != nil {
					return nil, err
				} else {
					req.Double = v
				}
				req.String_ = queries.Get("string")
				req.Bytes = []byte(queries.Get("bytes"))
				if v, err := strconv.ParseBool(queries.Get("opt_bool")); err != nil {
					return nil, err
				} else {
					req.OptBool = proto.Bool(v)
				}
				if v, err := strconv.ParseInt(queries.Get("opt_int32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptInt32 = proto.Int32(int32(v))
				}
				if v, err := strconv.ParseInt(queries.Get("opt_sint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptSint32 = proto.Int32(int32(v))
				}
				if v, err := strconv.ParseUint(queries.Get("opt_uint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptUint32 = proto.Uint32(uint32(v))
				}
				if v, err := strconv.ParseInt(queries.Get("opt_int64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptInt64 = proto.Int64(v)
				}
				if v, err := strconv.ParseInt(queries.Get("opt_sint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptSint64 = proto.Int64(v)
				}
				if v, err := strconv.ParseUint(queries.Get("opt_uint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptUint64 = proto.Uint64(v)
				}
				if v, err := strconv.ParseInt(queries.Get("opt_sfixed32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptSfixed32 = proto.Int32(int32(v))
				}
				if v, err := strconv.ParseUint(queries.Get("opt_fixed32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptFixed32 = proto.Uint32(uint32(v))
				}
				if v, err := strconv.ParseFloat(queries.Get("opt_float"), 32); err != nil {
					return nil, err
				} else {
					req.OptFloat = proto.Float32(float32(v))
				}
				if v, err := strconv.ParseUint(queries.Get("opt_fixed64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptFixed64 = proto.Uint64(v)
				}
				if v, err := strconv.ParseFloat(queries.Get("opt_double"), 32); err != nil {
					return nil, err
				} else {
					req.OptDouble = proto.Float64(v)
				}
				req.OptString = proto.String(queries.Get("opt_string"))
				req.OptBytes = []byte(queries.Get("opt_bytes"))
				if v, err := strconv.ParseFloat(queries.Get("wrap_double"), 64); err != nil {
					return nil, err
				} else {
					req.WrapDouble = wrapperspb.Double(v)
				}
				if v, err := strconv.ParseFloat(queries.Get("wrap_float"), 32); err != nil {
					return nil, err
				} else {
					req.WrapFloat = wrapperspb.Float(float32(v))
				}
				if v, err := strconv.ParseInt(queries.Get("wrap_int64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.WrapInt64 = wrapperspb.Int64(v)
				}
				if v, err := strconv.ParseUint(queries.Get("wrap_uint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.WrapUint64 = wrapperspb.UInt64(v)
				}
				if v, err := strconv.ParseInt(queries.Get("wrap_int32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.WrapInt32 = wrapperspb.Int32(int32(v))
				}
				if v, err := strconv.ParseUint(queries.Get("wrap_uint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.WrapUint32 = wrapperspb.UInt32(uint32(v))
				}
				if v, err := strconv.ParseBool(queries.Get("wrap_bool")); err != nil {
					return nil, err
				} else {
					req.WrapBool = wrapperspb.Bool(v)
				}
				req.WrapString = wrapperspb.String(queries.Get("wrap_string"))
				req.WrapBytes = wrapperspb.Bytes([]byte(queries.Get("wrap_bytes")))
				if v, err := convx.ParseBoolSlice(queries["rep_bool"]); err != nil {
					return nil, err
				} else {
					req.RepBool = v
				}
				if v, err := convx.ParseIntSlice[int32](queries["rep_int32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepInt32 = v
				}
				if v, err := convx.ParseIntSlice[int32](queries["rep_sint32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepSint32 = v
				}
				if v, err := convx.ParseUintSlice[uint32](queries["rep_uint32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepUint32 = v
				}
				if v, err := convx.ParseIntSlice[int64](queries["rep_int64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepInt64 = v
				}
				if v, err := convx.ParseIntSlice[int64](queries["rep_sint64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepSint64 = v
				}
				if v, err := convx.ParseUintSlice[uint64](queries["rep_uint64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepUint64 = v
				}
				if v, err := convx.ParseIntSlice[int32](queries["rep_sfixed32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepSfixed32 = v
				}
				if v, err := convx.ParseUintSlice[uint32](queries["rep_fixed32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepFixed32 = v
				}
				if v, err := convx.ParseFloatSlice[float32](queries["rep_float"], 32); err != nil {
					return nil, err
				} else {
					req.RepFloat = v
				}
				if v, err := convx.ParseIntSlice[int64](queries["rep_sfixed64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepSfixed64 = v
				}
				if v, err := convx.ParseUintSlice[uint64](queries["rep_fixed64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepFixed64 = v
				}
				if v, err := convx.ParseFloatSlice[float64](queries["rep_double"], 32); err != nil {
					return nil, err
				} else {
					req.RepDouble = v
				}
				req.RepString = queries["rep_string"]
				req.RepBytes = convx.ParseBytesSlice(queries["rep_bytes"])
				return req, nil
			},
			func(ctx context.Context, w http1.ResponseWriter, obj any) error {
				resp := obj.(*emptypb.Empty)
				_ = resp
				w.WriteHeader(http1.StatusOK)
				data, err := protojson.Marshal(resp)
				if err != nil {
					return err
				}
				if _, err := w.Write(data); err != nil {
					return err
				}
				return nil
			},
			opts...,
		))
	r.Name("/leo.example.demo.v1.Body/RepSfixed64").
		Methods("PUT").
		Path("/v1/rep_sfixed64").
		Handler(http.NewServer(
			endpointx.Chain(endpoints.RepSfixed64(), mdw...),
			func(ctx context.Context, r *http1.Request) (any, error) {
				req := &BodyRequest{}
				body, err := io.ReadAll(r.Body)
				if err != nil {
					return nil, err
				}
				if v, err := strconv.ParseInt(string(body), 10, 64); err != nil {
					return nil, err
				} else {
					req.RepSfixed64 = v
				}
				queries := r.URL.Query()
				if v, err := strconv.ParseBool(queries.Get("bool")); err != nil {
					return nil, err
				} else {
					req.Bool = v
				}
				if v, err := strconv.ParseInt(queries.Get("int32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Int32 = int32(v)
				}
				if v, err := strconv.ParseInt(queries.Get("sint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Sint32 = int32(v)
				}
				if v, err := strconv.ParseUint(queries.Get("uint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Uint32 = uint32(v)
				}
				if v, err := strconv.ParseInt(queries.Get("int64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Int64 = v
				}
				if v, err := strconv.ParseInt(queries.Get("sint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Sint64 = v
				}
				if v, err := strconv.ParseUint(queries.Get("uint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Uint64 = v
				}
				if v, err := strconv.ParseInt(queries.Get("sfixed32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Sfixed32 = int32(v)
				}
				if v, err := strconv.ParseUint(queries.Get("fixed32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Fixed32 = uint32(v)
				}
				if v, err := strconv.ParseFloat(queries.Get("float"), 32); err != nil {
					return nil, err
				} else {
					req.Float = float32(v)
				}
				if v, err := strconv.ParseInt(queries.Get("sfixed64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Sfixed64 = v
				}
				if v, err := strconv.ParseUint(queries.Get("fixed64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Fixed64 = v
				}
				if v, err := strconv.ParseFloat(queries.Get("double"), 32); err != nil {
					return nil, err
				} else {
					req.Double = v
				}
				req.String_ = queries.Get("string")
				req.Bytes = []byte(queries.Get("bytes"))
				if v, err := strconv.ParseBool(queries.Get("opt_bool")); err != nil {
					return nil, err
				} else {
					req.OptBool = proto.Bool(v)
				}
				if v, err := strconv.ParseInt(queries.Get("opt_int32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptInt32 = proto.Int32(int32(v))
				}
				if v, err := strconv.ParseInt(queries.Get("opt_sint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptSint32 = proto.Int32(int32(v))
				}
				if v, err := strconv.ParseUint(queries.Get("opt_uint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptUint32 = proto.Uint32(uint32(v))
				}
				if v, err := strconv.ParseInt(queries.Get("opt_int64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptInt64 = proto.Int64(v)
				}
				if v, err := strconv.ParseInt(queries.Get("opt_sint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptSint64 = proto.Int64(v)
				}
				if v, err := strconv.ParseUint(queries.Get("opt_uint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptUint64 = proto.Uint64(v)
				}
				if v, err := strconv.ParseInt(queries.Get("opt_sfixed32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptSfixed32 = proto.Int32(int32(v))
				}
				if v, err := strconv.ParseUint(queries.Get("opt_fixed32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptFixed32 = proto.Uint32(uint32(v))
				}
				if v, err := strconv.ParseFloat(queries.Get("opt_float"), 32); err != nil {
					return nil, err
				} else {
					req.OptFloat = proto.Float32(float32(v))
				}
				if v, err := strconv.ParseInt(queries.Get("opt_sfixed64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptSfixed64 = proto.Int64(v)
				}
				if v, err := strconv.ParseUint(queries.Get("opt_fixed64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptFixed64 = proto.Uint64(v)
				}
				if v, err := strconv.ParseFloat(queries.Get("opt_double"), 32); err != nil {
					return nil, err
				} else {
					req.OptDouble = proto.Float64(v)
				}
				req.OptString = proto.String(queries.Get("opt_string"))
				req.OptBytes = []byte(queries.Get("opt_bytes"))
				if v, err := strconv.ParseFloat(queries.Get("wrap_double"), 64); err != nil {
					return nil, err
				} else {
					req.WrapDouble = wrapperspb.Double(v)
				}
				if v, err := strconv.ParseFloat(queries.Get("wrap_float"), 32); err != nil {
					return nil, err
				} else {
					req.WrapFloat = wrapperspb.Float(float32(v))
				}
				if v, err := strconv.ParseInt(queries.Get("wrap_int64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.WrapInt64 = wrapperspb.Int64(v)
				}
				if v, err := strconv.ParseUint(queries.Get("wrap_uint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.WrapUint64 = wrapperspb.UInt64(v)
				}
				if v, err := strconv.ParseInt(queries.Get("wrap_int32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.WrapInt32 = wrapperspb.Int32(int32(v))
				}
				if v, err := strconv.ParseUint(queries.Get("wrap_uint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.WrapUint32 = wrapperspb.UInt32(uint32(v))
				}
				if v, err := strconv.ParseBool(queries.Get("wrap_bool")); err != nil {
					return nil, err
				} else {
					req.WrapBool = wrapperspb.Bool(v)
				}
				req.WrapString = wrapperspb.String(queries.Get("wrap_string"))
				req.WrapBytes = wrapperspb.Bytes([]byte(queries.Get("wrap_bytes")))
				if v, err := convx.ParseBoolSlice(queries["rep_bool"]); err != nil {
					return nil, err
				} else {
					req.RepBool = v
				}
				if v, err := convx.ParseIntSlice[int32](queries["rep_int32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepInt32 = v
				}
				if v, err := convx.ParseIntSlice[int32](queries["rep_sint32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepSint32 = v
				}
				if v, err := convx.ParseUintSlice[uint32](queries["rep_uint32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepUint32 = v
				}
				if v, err := convx.ParseIntSlice[int64](queries["rep_int64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepInt64 = v
				}
				if v, err := convx.ParseIntSlice[int64](queries["rep_sint64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepSint64 = v
				}
				if v, err := convx.ParseUintSlice[uint64](queries["rep_uint64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepUint64 = v
				}
				if v, err := convx.ParseIntSlice[int32](queries["rep_sfixed32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepSfixed32 = v
				}
				if v, err := convx.ParseUintSlice[uint32](queries["rep_fixed32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepFixed32 = v
				}
				if v, err := convx.ParseFloatSlice[float32](queries["rep_float"], 32); err != nil {
					return nil, err
				} else {
					req.RepFloat = v
				}
				if v, err := convx.ParseUintSlice[uint64](queries["rep_fixed64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepFixed64 = v
				}
				if v, err := convx.ParseFloatSlice[float64](queries["rep_double"], 32); err != nil {
					return nil, err
				} else {
					req.RepDouble = v
				}
				req.RepString = queries["rep_string"]
				req.RepBytes = convx.ParseBytesSlice(queries["rep_bytes"])
				return req, nil
			},
			func(ctx context.Context, w http1.ResponseWriter, obj any) error {
				resp := obj.(*emptypb.Empty)
				_ = resp
				w.WriteHeader(http1.StatusOK)
				data, err := protojson.Marshal(resp)
				if err != nil {
					return err
				}
				if _, err := w.Write(data); err != nil {
					return err
				}
				return nil
			},
			opts...,
		))
	r.Name("/leo.example.demo.v1.Body/Uint64").
		Methods("PUT").
		Path("/v1/uint64").
		Handler(http.NewServer(
			endpointx.Chain(endpoints.Uint64(), mdw...),
			func(ctx context.Context, r *http1.Request) (any, error) {
				req := &BodyRequest{}
				body, err := io.ReadAll(r.Body)
				if err != nil {
					return nil, err
				}
				if v, err := strconv.ParseUint(string(body), 10, 64); err != nil {
					return nil, err
				} else {
					req.Uint64 = v
				}
				queries := r.URL.Query()
				if v, err := strconv.ParseBool(queries.Get("bool")); err != nil {
					return nil, err
				} else {
					req.Bool = v
				}
				if v, err := strconv.ParseInt(queries.Get("int32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Int32 = int32(v)
				}
				if v, err := strconv.ParseInt(queries.Get("sint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Sint32 = int32(v)
				}
				if v, err := strconv.ParseUint(queries.Get("uint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Uint32 = uint32(v)
				}
				if v, err := strconv.ParseInt(queries.Get("int64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Int64 = v
				}
				if v, err := strconv.ParseInt(queries.Get("sint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Sint64 = v
				}
				if v, err := strconv.ParseInt(queries.Get("sfixed32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Sfixed32 = int32(v)
				}
				if v, err := strconv.ParseUint(queries.Get("fixed32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Fixed32 = uint32(v)
				}
				if v, err := strconv.ParseFloat(queries.Get("float"), 32); err != nil {
					return nil, err
				} else {
					req.Float = float32(v)
				}
				if v, err := strconv.ParseInt(queries.Get("sfixed64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Sfixed64 = v
				}
				if v, err := strconv.ParseUint(queries.Get("fixed64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Fixed64 = v
				}
				if v, err := strconv.ParseFloat(queries.Get("double"), 32); err != nil {
					return nil, err
				} else {
					req.Double = v
				}
				req.String_ = queries.Get("string")
				req.Bytes = []byte(queries.Get("bytes"))
				if v, err := strconv.ParseBool(queries.Get("opt_bool")); err != nil {
					return nil, err
				} else {
					req.OptBool = proto.Bool(v)
				}
				if v, err := strconv.ParseInt(queries.Get("opt_int32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptInt32 = proto.Int32(int32(v))
				}
				if v, err := strconv.ParseInt(queries.Get("opt_sint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptSint32 = proto.Int32(int32(v))
				}
				if v, err := strconv.ParseUint(queries.Get("opt_uint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptUint32 = proto.Uint32(uint32(v))
				}
				if v, err := strconv.ParseInt(queries.Get("opt_int64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptInt64 = proto.Int64(v)
				}
				if v, err := strconv.ParseInt(queries.Get("opt_sint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptSint64 = proto.Int64(v)
				}
				if v, err := strconv.ParseUint(queries.Get("opt_uint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptUint64 = proto.Uint64(v)
				}
				if v, err := strconv.ParseInt(queries.Get("opt_sfixed32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptSfixed32 = proto.Int32(int32(v))
				}
				if v, err := strconv.ParseUint(queries.Get("opt_fixed32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptFixed32 = proto.Uint32(uint32(v))
				}
				if v, err := strconv.ParseFloat(queries.Get("opt_float"), 32); err != nil {
					return nil, err
				} else {
					req.OptFloat = proto.Float32(float32(v))
				}
				if v, err := strconv.ParseInt(queries.Get("opt_sfixed64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptSfixed64 = proto.Int64(v)
				}
				if v, err := strconv.ParseUint(queries.Get("opt_fixed64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptFixed64 = proto.Uint64(v)
				}
				if v, err := strconv.ParseFloat(queries.Get("opt_double"), 32); err != nil {
					return nil, err
				} else {
					req.OptDouble = proto.Float64(v)
				}
				req.OptString = proto.String(queries.Get("opt_string"))
				req.OptBytes = []byte(queries.Get("opt_bytes"))
				if v, err := strconv.ParseFloat(queries.Get("wrap_double"), 64); err != nil {
					return nil, err
				} else {
					req.WrapDouble = wrapperspb.Double(v)
				}
				if v, err := strconv.ParseFloat(queries.Get("wrap_float"), 32); err != nil {
					return nil, err
				} else {
					req.WrapFloat = wrapperspb.Float(float32(v))
				}
				if v, err := strconv.ParseInt(queries.Get("wrap_int64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.WrapInt64 = wrapperspb.Int64(v)
				}
				if v, err := strconv.ParseUint(queries.Get("wrap_uint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.WrapUint64 = wrapperspb.UInt64(v)
				}
				if v, err := strconv.ParseInt(queries.Get("wrap_int32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.WrapInt32 = wrapperspb.Int32(int32(v))
				}
				if v, err := strconv.ParseUint(queries.Get("wrap_uint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.WrapUint32 = wrapperspb.UInt32(uint32(v))
				}
				if v, err := strconv.ParseBool(queries.Get("wrap_bool")); err != nil {
					return nil, err
				} else {
					req.WrapBool = wrapperspb.Bool(v)
				}
				req.WrapString = wrapperspb.String(queries.Get("wrap_string"))
				req.WrapBytes = wrapperspb.Bytes([]byte(queries.Get("wrap_bytes")))
				if v, err := convx.ParseBoolSlice(queries["rep_bool"]); err != nil {
					return nil, err
				} else {
					req.RepBool = v
				}
				if v, err := convx.ParseIntSlice[int32](queries["rep_int32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepInt32 = v
				}
				if v, err := convx.ParseIntSlice[int32](queries["rep_sint32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepSint32 = v
				}
				if v, err := convx.ParseUintSlice[uint32](queries["rep_uint32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepUint32 = v
				}
				if v, err := convx.ParseIntSlice[int64](queries["rep_int64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepInt64 = v
				}
				if v, err := convx.ParseIntSlice[int64](queries["rep_sint64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepSint64 = v
				}
				if v, err := convx.ParseUintSlice[uint64](queries["rep_uint64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepUint64 = v
				}
				if v, err := convx.ParseIntSlice[int32](queries["rep_sfixed32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepSfixed32 = v
				}
				if v, err := convx.ParseUintSlice[uint32](queries["rep_fixed32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepFixed32 = v
				}
				if v, err := convx.ParseFloatSlice[float32](queries["rep_float"], 32); err != nil {
					return nil, err
				} else {
					req.RepFloat = v
				}
				if v, err := convx.ParseIntSlice[int64](queries["rep_sfixed64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepSfixed64 = v
				}
				if v, err := convx.ParseUintSlice[uint64](queries["rep_fixed64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepFixed64 = v
				}
				if v, err := convx.ParseFloatSlice[float64](queries["rep_double"], 32); err != nil {
					return nil, err
				} else {
					req.RepDouble = v
				}
				req.RepString = queries["rep_string"]
				req.RepBytes = convx.ParseBytesSlice(queries["rep_bytes"])
				return req, nil
			},
			func(ctx context.Context, w http1.ResponseWriter, obj any) error {
				resp := obj.(*emptypb.Empty)
				_ = resp
				w.WriteHeader(http1.StatusOK)
				data, err := protojson.Marshal(resp)
				if err != nil {
					return err
				}
				if _, err := w.Write(data); err != nil {
					return err
				}
				return nil
			},
			opts...,
		))
	r.Name("/leo.example.demo.v1.Body/OptUint64").
		Methods("PUT").
		Path("/v1/opt_uint64").
		Handler(http.NewServer(
			endpointx.Chain(endpoints.OptUint64(), mdw...),
			func(ctx context.Context, r *http1.Request) (any, error) {
				req := &BodyRequest{}
				body, err := io.ReadAll(r.Body)
				if err != nil {
					return nil, err
				}
				if v, err := strconv.ParseUint(string(body), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptUint64 = proto.Uint64(v)
				}
				queries := r.URL.Query()
				if v, err := strconv.ParseBool(queries.Get("bool")); err != nil {
					return nil, err
				} else {
					req.Bool = v
				}
				if v, err := strconv.ParseInt(queries.Get("int32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Int32 = int32(v)
				}
				if v, err := strconv.ParseInt(queries.Get("sint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Sint32 = int32(v)
				}
				if v, err := strconv.ParseUint(queries.Get("uint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Uint32 = uint32(v)
				}
				if v, err := strconv.ParseInt(queries.Get("int64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Int64 = v
				}
				if v, err := strconv.ParseInt(queries.Get("sint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Sint64 = v
				}
				if v, err := strconv.ParseUint(queries.Get("uint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Uint64 = v
				}
				if v, err := strconv.ParseInt(queries.Get("sfixed32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Sfixed32 = int32(v)
				}
				if v, err := strconv.ParseUint(queries.Get("fixed32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Fixed32 = uint32(v)
				}
				if v, err := strconv.ParseFloat(queries.Get("float"), 32); err != nil {
					return nil, err
				} else {
					req.Float = float32(v)
				}
				if v, err := strconv.ParseInt(queries.Get("sfixed64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Sfixed64 = v
				}
				if v, err := strconv.ParseUint(queries.Get("fixed64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Fixed64 = v
				}
				if v, err := strconv.ParseFloat(queries.Get("double"), 32); err != nil {
					return nil, err
				} else {
					req.Double = v
				}
				req.String_ = queries.Get("string")
				req.Bytes = []byte(queries.Get("bytes"))
				if v, err := strconv.ParseBool(queries.Get("opt_bool")); err != nil {
					return nil, err
				} else {
					req.OptBool = proto.Bool(v)
				}
				if v, err := strconv.ParseInt(queries.Get("opt_int32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptInt32 = proto.Int32(int32(v))
				}
				if v, err := strconv.ParseInt(queries.Get("opt_sint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptSint32 = proto.Int32(int32(v))
				}
				if v, err := strconv.ParseUint(queries.Get("opt_uint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptUint32 = proto.Uint32(uint32(v))
				}
				if v, err := strconv.ParseInt(queries.Get("opt_int64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptInt64 = proto.Int64(v)
				}
				if v, err := strconv.ParseInt(queries.Get("opt_sint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptSint64 = proto.Int64(v)
				}
				if v, err := strconv.ParseInt(queries.Get("opt_sfixed32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptSfixed32 = proto.Int32(int32(v))
				}
				if v, err := strconv.ParseUint(queries.Get("opt_fixed32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptFixed32 = proto.Uint32(uint32(v))
				}
				if v, err := strconv.ParseFloat(queries.Get("opt_float"), 32); err != nil {
					return nil, err
				} else {
					req.OptFloat = proto.Float32(float32(v))
				}
				if v, err := strconv.ParseInt(queries.Get("opt_sfixed64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptSfixed64 = proto.Int64(v)
				}
				if v, err := strconv.ParseUint(queries.Get("opt_fixed64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptFixed64 = proto.Uint64(v)
				}
				if v, err := strconv.ParseFloat(queries.Get("opt_double"), 32); err != nil {
					return nil, err
				} else {
					req.OptDouble = proto.Float64(v)
				}
				req.OptString = proto.String(queries.Get("opt_string"))
				req.OptBytes = []byte(queries.Get("opt_bytes"))
				if v, err := strconv.ParseFloat(queries.Get("wrap_double"), 64); err != nil {
					return nil, err
				} else {
					req.WrapDouble = wrapperspb.Double(v)
				}
				if v, err := strconv.ParseFloat(queries.Get("wrap_float"), 32); err != nil {
					return nil, err
				} else {
					req.WrapFloat = wrapperspb.Float(float32(v))
				}
				if v, err := strconv.ParseInt(queries.Get("wrap_int64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.WrapInt64 = wrapperspb.Int64(v)
				}
				if v, err := strconv.ParseUint(queries.Get("wrap_uint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.WrapUint64 = wrapperspb.UInt64(v)
				}
				if v, err := strconv.ParseInt(queries.Get("wrap_int32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.WrapInt32 = wrapperspb.Int32(int32(v))
				}
				if v, err := strconv.ParseUint(queries.Get("wrap_uint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.WrapUint32 = wrapperspb.UInt32(uint32(v))
				}
				if v, err := strconv.ParseBool(queries.Get("wrap_bool")); err != nil {
					return nil, err
				} else {
					req.WrapBool = wrapperspb.Bool(v)
				}
				req.WrapString = wrapperspb.String(queries.Get("wrap_string"))
				req.WrapBytes = wrapperspb.Bytes([]byte(queries.Get("wrap_bytes")))
				if v, err := convx.ParseBoolSlice(queries["rep_bool"]); err != nil {
					return nil, err
				} else {
					req.RepBool = v
				}
				if v, err := convx.ParseIntSlice[int32](queries["rep_int32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepInt32 = v
				}
				if v, err := convx.ParseIntSlice[int32](queries["rep_sint32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepSint32 = v
				}
				if v, err := convx.ParseUintSlice[uint32](queries["rep_uint32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepUint32 = v
				}
				if v, err := convx.ParseIntSlice[int64](queries["rep_int64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepInt64 = v
				}
				if v, err := convx.ParseIntSlice[int64](queries["rep_sint64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepSint64 = v
				}
				if v, err := convx.ParseUintSlice[uint64](queries["rep_uint64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepUint64 = v
				}
				if v, err := convx.ParseIntSlice[int32](queries["rep_sfixed32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepSfixed32 = v
				}
				if v, err := convx.ParseUintSlice[uint32](queries["rep_fixed32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepFixed32 = v
				}
				if v, err := convx.ParseFloatSlice[float32](queries["rep_float"], 32); err != nil {
					return nil, err
				} else {
					req.RepFloat = v
				}
				if v, err := convx.ParseIntSlice[int64](queries["rep_sfixed64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepSfixed64 = v
				}
				if v, err := convx.ParseUintSlice[uint64](queries["rep_fixed64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepFixed64 = v
				}
				if v, err := convx.ParseFloatSlice[float64](queries["rep_double"], 32); err != nil {
					return nil, err
				} else {
					req.RepDouble = v
				}
				req.RepString = queries["rep_string"]
				req.RepBytes = convx.ParseBytesSlice(queries["rep_bytes"])
				return req, nil
			},
			func(ctx context.Context, w http1.ResponseWriter, obj any) error {
				resp := obj.(*emptypb.Empty)
				_ = resp
				w.WriteHeader(http1.StatusOK)
				data, err := protojson.Marshal(resp)
				if err != nil {
					return err
				}
				if _, err := w.Write(data); err != nil {
					return err
				}
				return nil
			},
			opts...,
		))
	r.Name("/leo.example.demo.v1.Body/RepUint64").
		Methods("PUT").
		Path("/v1/rep_uint64").
		Handler(http.NewServer(
			endpointx.Chain(endpoints.RepUint64(), mdw...),
			func(ctx context.Context, r *http1.Request) (any, error) {
				req := &BodyRequest{}
				body, err := io.ReadAll(r.Body)
				if err != nil {
					return nil, err
				}
				if v, err := strconv.ParseUint(string(body), 10, 64); err != nil {
					return nil, err
				} else {
					req.RepUint64 = v
				}
				queries := r.URL.Query()
				if v, err := strconv.ParseBool(queries.Get("bool")); err != nil {
					return nil, err
				} else {
					req.Bool = v
				}
				if v, err := strconv.ParseInt(queries.Get("int32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Int32 = int32(v)
				}
				if v, err := strconv.ParseInt(queries.Get("sint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Sint32 = int32(v)
				}
				if v, err := strconv.ParseUint(queries.Get("uint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Uint32 = uint32(v)
				}
				if v, err := strconv.ParseInt(queries.Get("int64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Int64 = v
				}
				if v, err := strconv.ParseInt(queries.Get("sint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Sint64 = v
				}
				if v, err := strconv.ParseUint(queries.Get("uint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Uint64 = v
				}
				if v, err := strconv.ParseInt(queries.Get("sfixed32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Sfixed32 = int32(v)
				}
				if v, err := strconv.ParseUint(queries.Get("fixed32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Fixed32 = uint32(v)
				}
				if v, err := strconv.ParseFloat(queries.Get("float"), 32); err != nil {
					return nil, err
				} else {
					req.Float = float32(v)
				}
				if v, err := strconv.ParseInt(queries.Get("sfixed64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Sfixed64 = v
				}
				if v, err := strconv.ParseUint(queries.Get("fixed64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Fixed64 = v
				}
				if v, err := strconv.ParseFloat(queries.Get("double"), 32); err != nil {
					return nil, err
				} else {
					req.Double = v
				}
				req.String_ = queries.Get("string")
				req.Bytes = []byte(queries.Get("bytes"))
				if v, err := strconv.ParseBool(queries.Get("opt_bool")); err != nil {
					return nil, err
				} else {
					req.OptBool = proto.Bool(v)
				}
				if v, err := strconv.ParseInt(queries.Get("opt_int32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptInt32 = proto.Int32(int32(v))
				}
				if v, err := strconv.ParseInt(queries.Get("opt_sint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptSint32 = proto.Int32(int32(v))
				}
				if v, err := strconv.ParseUint(queries.Get("opt_uint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptUint32 = proto.Uint32(uint32(v))
				}
				if v, err := strconv.ParseInt(queries.Get("opt_int64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptInt64 = proto.Int64(v)
				}
				if v, err := strconv.ParseInt(queries.Get("opt_sint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptSint64 = proto.Int64(v)
				}
				if v, err := strconv.ParseUint(queries.Get("opt_uint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptUint64 = proto.Uint64(v)
				}
				if v, err := strconv.ParseInt(queries.Get("opt_sfixed32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptSfixed32 = proto.Int32(int32(v))
				}
				if v, err := strconv.ParseUint(queries.Get("opt_fixed32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptFixed32 = proto.Uint32(uint32(v))
				}
				if v, err := strconv.ParseFloat(queries.Get("opt_float"), 32); err != nil {
					return nil, err
				} else {
					req.OptFloat = proto.Float32(float32(v))
				}
				if v, err := strconv.ParseInt(queries.Get("opt_sfixed64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptSfixed64 = proto.Int64(v)
				}
				if v, err := strconv.ParseUint(queries.Get("opt_fixed64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptFixed64 = proto.Uint64(v)
				}
				if v, err := strconv.ParseFloat(queries.Get("opt_double"), 32); err != nil {
					return nil, err
				} else {
					req.OptDouble = proto.Float64(v)
				}
				req.OptString = proto.String(queries.Get("opt_string"))
				req.OptBytes = []byte(queries.Get("opt_bytes"))
				if v, err := strconv.ParseFloat(queries.Get("wrap_double"), 64); err != nil {
					return nil, err
				} else {
					req.WrapDouble = wrapperspb.Double(v)
				}
				if v, err := strconv.ParseFloat(queries.Get("wrap_float"), 32); err != nil {
					return nil, err
				} else {
					req.WrapFloat = wrapperspb.Float(float32(v))
				}
				if v, err := strconv.ParseInt(queries.Get("wrap_int64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.WrapInt64 = wrapperspb.Int64(v)
				}
				if v, err := strconv.ParseUint(queries.Get("wrap_uint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.WrapUint64 = wrapperspb.UInt64(v)
				}
				if v, err := strconv.ParseInt(queries.Get("wrap_int32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.WrapInt32 = wrapperspb.Int32(int32(v))
				}
				if v, err := strconv.ParseUint(queries.Get("wrap_uint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.WrapUint32 = wrapperspb.UInt32(uint32(v))
				}
				if v, err := strconv.ParseBool(queries.Get("wrap_bool")); err != nil {
					return nil, err
				} else {
					req.WrapBool = wrapperspb.Bool(v)
				}
				req.WrapString = wrapperspb.String(queries.Get("wrap_string"))
				req.WrapBytes = wrapperspb.Bytes([]byte(queries.Get("wrap_bytes")))
				if v, err := convx.ParseBoolSlice(queries["rep_bool"]); err != nil {
					return nil, err
				} else {
					req.RepBool = v
				}
				if v, err := convx.ParseIntSlice[int32](queries["rep_int32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepInt32 = v
				}
				if v, err := convx.ParseIntSlice[int32](queries["rep_sint32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepSint32 = v
				}
				if v, err := convx.ParseUintSlice[uint32](queries["rep_uint32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepUint32 = v
				}
				if v, err := convx.ParseIntSlice[int64](queries["rep_int64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepInt64 = v
				}
				if v, err := convx.ParseIntSlice[int64](queries["rep_sint64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepSint64 = v
				}
				if v, err := convx.ParseIntSlice[int32](queries["rep_sfixed32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepSfixed32 = v
				}
				if v, err := convx.ParseUintSlice[uint32](queries["rep_fixed32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepFixed32 = v
				}
				if v, err := convx.ParseFloatSlice[float32](queries["rep_float"], 32); err != nil {
					return nil, err
				} else {
					req.RepFloat = v
				}
				if v, err := convx.ParseIntSlice[int64](queries["rep_sfixed64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepSfixed64 = v
				}
				if v, err := convx.ParseUintSlice[uint64](queries["rep_fixed64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepFixed64 = v
				}
				if v, err := convx.ParseFloatSlice[float64](queries["rep_double"], 32); err != nil {
					return nil, err
				} else {
					req.RepDouble = v
				}
				req.RepString = queries["rep_string"]
				req.RepBytes = convx.ParseBytesSlice(queries["rep_bytes"])
				return req, nil
			},
			func(ctx context.Context, w http1.ResponseWriter, obj any) error {
				resp := obj.(*emptypb.Empty)
				_ = resp
				w.WriteHeader(http1.StatusOK)
				data, err := protojson.Marshal(resp)
				if err != nil {
					return err
				}
				if _, err := w.Write(data); err != nil {
					return err
				}
				return nil
			},
			opts...,
		))
	r.Name("/leo.example.demo.v1.Body/WrapUint64").
		Methods("PUT").
		Path("/v1/wrap_uint64").
		Handler(http.NewServer(
			endpointx.Chain(endpoints.WrapUint64(), mdw...),
			func(ctx context.Context, r *http1.Request) (any, error) {
				req := &BodyRequest{}
				body, err := io.ReadAll(r.Body)
				if err != nil {
					return nil, err
				}
				if v, err := strconv.ParseUint(string(body), 10, 64); err != nil {
					return nil, err
				} else {
					req.WrapUint64 = wrapperspb.UInt64(v)
				}
				queries := r.URL.Query()
				if v, err := strconv.ParseBool(queries.Get("bool")); err != nil {
					return nil, err
				} else {
					req.Bool = v
				}
				if v, err := strconv.ParseInt(queries.Get("int32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Int32 = int32(v)
				}
				if v, err := strconv.ParseInt(queries.Get("sint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Sint32 = int32(v)
				}
				if v, err := strconv.ParseUint(queries.Get("uint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Uint32 = uint32(v)
				}
				if v, err := strconv.ParseInt(queries.Get("int64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Int64 = v
				}
				if v, err := strconv.ParseInt(queries.Get("sint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Sint64 = v
				}
				if v, err := strconv.ParseUint(queries.Get("uint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Uint64 = v
				}
				if v, err := strconv.ParseInt(queries.Get("sfixed32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Sfixed32 = int32(v)
				}
				if v, err := strconv.ParseUint(queries.Get("fixed32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Fixed32 = uint32(v)
				}
				if v, err := strconv.ParseFloat(queries.Get("float"), 32); err != nil {
					return nil, err
				} else {
					req.Float = float32(v)
				}
				if v, err := strconv.ParseInt(queries.Get("sfixed64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Sfixed64 = v
				}
				if v, err := strconv.ParseUint(queries.Get("fixed64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Fixed64 = v
				}
				if v, err := strconv.ParseFloat(queries.Get("double"), 32); err != nil {
					return nil, err
				} else {
					req.Double = v
				}
				req.String_ = queries.Get("string")
				req.Bytes = []byte(queries.Get("bytes"))
				if v, err := strconv.ParseBool(queries.Get("opt_bool")); err != nil {
					return nil, err
				} else {
					req.OptBool = proto.Bool(v)
				}
				if v, err := strconv.ParseInt(queries.Get("opt_int32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptInt32 = proto.Int32(int32(v))
				}
				if v, err := strconv.ParseInt(queries.Get("opt_sint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptSint32 = proto.Int32(int32(v))
				}
				if v, err := strconv.ParseUint(queries.Get("opt_uint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptUint32 = proto.Uint32(uint32(v))
				}
				if v, err := strconv.ParseInt(queries.Get("opt_int64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptInt64 = proto.Int64(v)
				}
				if v, err := strconv.ParseInt(queries.Get("opt_sint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptSint64 = proto.Int64(v)
				}
				if v, err := strconv.ParseUint(queries.Get("opt_uint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptUint64 = proto.Uint64(v)
				}
				if v, err := strconv.ParseInt(queries.Get("opt_sfixed32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptSfixed32 = proto.Int32(int32(v))
				}
				if v, err := strconv.ParseUint(queries.Get("opt_fixed32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptFixed32 = proto.Uint32(uint32(v))
				}
				if v, err := strconv.ParseFloat(queries.Get("opt_float"), 32); err != nil {
					return nil, err
				} else {
					req.OptFloat = proto.Float32(float32(v))
				}
				if v, err := strconv.ParseInt(queries.Get("opt_sfixed64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptSfixed64 = proto.Int64(v)
				}
				if v, err := strconv.ParseUint(queries.Get("opt_fixed64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptFixed64 = proto.Uint64(v)
				}
				if v, err := strconv.ParseFloat(queries.Get("opt_double"), 32); err != nil {
					return nil, err
				} else {
					req.OptDouble = proto.Float64(v)
				}
				req.OptString = proto.String(queries.Get("opt_string"))
				req.OptBytes = []byte(queries.Get("opt_bytes"))
				if v, err := strconv.ParseFloat(queries.Get("wrap_double"), 64); err != nil {
					return nil, err
				} else {
					req.WrapDouble = wrapperspb.Double(v)
				}
				if v, err := strconv.ParseFloat(queries.Get("wrap_float"), 32); err != nil {
					return nil, err
				} else {
					req.WrapFloat = wrapperspb.Float(float32(v))
				}
				if v, err := strconv.ParseInt(queries.Get("wrap_int64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.WrapInt64 = wrapperspb.Int64(v)
				}
				if v, err := strconv.ParseInt(queries.Get("wrap_int32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.WrapInt32 = wrapperspb.Int32(int32(v))
				}
				if v, err := strconv.ParseUint(queries.Get("wrap_uint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.WrapUint32 = wrapperspb.UInt32(uint32(v))
				}
				if v, err := strconv.ParseBool(queries.Get("wrap_bool")); err != nil {
					return nil, err
				} else {
					req.WrapBool = wrapperspb.Bool(v)
				}
				req.WrapString = wrapperspb.String(queries.Get("wrap_string"))
				req.WrapBytes = wrapperspb.Bytes([]byte(queries.Get("wrap_bytes")))
				if v, err := convx.ParseBoolSlice(queries["rep_bool"]); err != nil {
					return nil, err
				} else {
					req.RepBool = v
				}
				if v, err := convx.ParseIntSlice[int32](queries["rep_int32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepInt32 = v
				}
				if v, err := convx.ParseIntSlice[int32](queries["rep_sint32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepSint32 = v
				}
				if v, err := convx.ParseUintSlice[uint32](queries["rep_uint32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepUint32 = v
				}
				if v, err := convx.ParseIntSlice[int64](queries["rep_int64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepInt64 = v
				}
				if v, err := convx.ParseIntSlice[int64](queries["rep_sint64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepSint64 = v
				}
				if v, err := convx.ParseUintSlice[uint64](queries["rep_uint64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepUint64 = v
				}
				if v, err := convx.ParseIntSlice[int32](queries["rep_sfixed32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepSfixed32 = v
				}
				if v, err := convx.ParseUintSlice[uint32](queries["rep_fixed32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepFixed32 = v
				}
				if v, err := convx.ParseFloatSlice[float32](queries["rep_float"], 32); err != nil {
					return nil, err
				} else {
					req.RepFloat = v
				}
				if v, err := convx.ParseIntSlice[int64](queries["rep_sfixed64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepSfixed64 = v
				}
				if v, err := convx.ParseUintSlice[uint64](queries["rep_fixed64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepFixed64 = v
				}
				if v, err := convx.ParseFloatSlice[float64](queries["rep_double"], 32); err != nil {
					return nil, err
				} else {
					req.RepDouble = v
				}
				req.RepString = queries["rep_string"]
				req.RepBytes = convx.ParseBytesSlice(queries["rep_bytes"])
				return req, nil
			},
			func(ctx context.Context, w http1.ResponseWriter, obj any) error {
				resp := obj.(*emptypb.Empty)
				_ = resp
				w.WriteHeader(http1.StatusOK)
				data, err := protojson.Marshal(resp)
				if err != nil {
					return err
				}
				if _, err := w.Write(data); err != nil {
					return err
				}
				return nil
			},
			opts...,
		))
	r.Name("/leo.example.demo.v1.Body/Fixed64").
		Methods("PUT").
		Path("/v1/fixed64").
		Handler(http.NewServer(
			endpointx.Chain(endpoints.Fixed64(), mdw...),
			func(ctx context.Context, r *http1.Request) (any, error) {
				req := &BodyRequest{}
				body, err := io.ReadAll(r.Body)
				if err != nil {
					return nil, err
				}
				if v, err := strconv.ParseUint(string(body), 10, 64); err != nil {
					return nil, err
				} else {
					req.Fixed64 = v
				}
				queries := r.URL.Query()
				if v, err := strconv.ParseBool(queries.Get("bool")); err != nil {
					return nil, err
				} else {
					req.Bool = v
				}
				if v, err := strconv.ParseInt(queries.Get("int32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Int32 = int32(v)
				}
				if v, err := strconv.ParseInt(queries.Get("sint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Sint32 = int32(v)
				}
				if v, err := strconv.ParseUint(queries.Get("uint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Uint32 = uint32(v)
				}
				if v, err := strconv.ParseInt(queries.Get("int64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Int64 = v
				}
				if v, err := strconv.ParseInt(queries.Get("sint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Sint64 = v
				}
				if v, err := strconv.ParseUint(queries.Get("uint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Uint64 = v
				}
				if v, err := strconv.ParseInt(queries.Get("sfixed32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Sfixed32 = int32(v)
				}
				if v, err := strconv.ParseUint(queries.Get("fixed32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Fixed32 = uint32(v)
				}
				if v, err := strconv.ParseFloat(queries.Get("float"), 32); err != nil {
					return nil, err
				} else {
					req.Float = float32(v)
				}
				if v, err := strconv.ParseInt(queries.Get("sfixed64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Sfixed64 = v
				}
				if v, err := strconv.ParseFloat(queries.Get("double"), 32); err != nil {
					return nil, err
				} else {
					req.Double = v
				}
				req.String_ = queries.Get("string")
				req.Bytes = []byte(queries.Get("bytes"))
				if v, err := strconv.ParseBool(queries.Get("opt_bool")); err != nil {
					return nil, err
				} else {
					req.OptBool = proto.Bool(v)
				}
				if v, err := strconv.ParseInt(queries.Get("opt_int32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptInt32 = proto.Int32(int32(v))
				}
				if v, err := strconv.ParseInt(queries.Get("opt_sint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptSint32 = proto.Int32(int32(v))
				}
				if v, err := strconv.ParseUint(queries.Get("opt_uint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptUint32 = proto.Uint32(uint32(v))
				}
				if v, err := strconv.ParseInt(queries.Get("opt_int64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptInt64 = proto.Int64(v)
				}
				if v, err := strconv.ParseInt(queries.Get("opt_sint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptSint64 = proto.Int64(v)
				}
				if v, err := strconv.ParseUint(queries.Get("opt_uint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptUint64 = proto.Uint64(v)
				}
				if v, err := strconv.ParseInt(queries.Get("opt_sfixed32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptSfixed32 = proto.Int32(int32(v))
				}
				if v, err := strconv.ParseUint(queries.Get("opt_fixed32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptFixed32 = proto.Uint32(uint32(v))
				}
				if v, err := strconv.ParseFloat(queries.Get("opt_float"), 32); err != nil {
					return nil, err
				} else {
					req.OptFloat = proto.Float32(float32(v))
				}
				if v, err := strconv.ParseInt(queries.Get("opt_sfixed64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptSfixed64 = proto.Int64(v)
				}
				if v, err := strconv.ParseUint(queries.Get("opt_fixed64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptFixed64 = proto.Uint64(v)
				}
				if v, err := strconv.ParseFloat(queries.Get("opt_double"), 32); err != nil {
					return nil, err
				} else {
					req.OptDouble = proto.Float64(v)
				}
				req.OptString = proto.String(queries.Get("opt_string"))
				req.OptBytes = []byte(queries.Get("opt_bytes"))
				if v, err := strconv.ParseFloat(queries.Get("wrap_double"), 64); err != nil {
					return nil, err
				} else {
					req.WrapDouble = wrapperspb.Double(v)
				}
				if v, err := strconv.ParseFloat(queries.Get("wrap_float"), 32); err != nil {
					return nil, err
				} else {
					req.WrapFloat = wrapperspb.Float(float32(v))
				}
				if v, err := strconv.ParseInt(queries.Get("wrap_int64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.WrapInt64 = wrapperspb.Int64(v)
				}
				if v, err := strconv.ParseUint(queries.Get("wrap_uint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.WrapUint64 = wrapperspb.UInt64(v)
				}
				if v, err := strconv.ParseInt(queries.Get("wrap_int32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.WrapInt32 = wrapperspb.Int32(int32(v))
				}
				if v, err := strconv.ParseUint(queries.Get("wrap_uint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.WrapUint32 = wrapperspb.UInt32(uint32(v))
				}
				if v, err := strconv.ParseBool(queries.Get("wrap_bool")); err != nil {
					return nil, err
				} else {
					req.WrapBool = wrapperspb.Bool(v)
				}
				req.WrapString = wrapperspb.String(queries.Get("wrap_string"))
				req.WrapBytes = wrapperspb.Bytes([]byte(queries.Get("wrap_bytes")))
				if v, err := convx.ParseBoolSlice(queries["rep_bool"]); err != nil {
					return nil, err
				} else {
					req.RepBool = v
				}
				if v, err := convx.ParseIntSlice[int32](queries["rep_int32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepInt32 = v
				}
				if v, err := convx.ParseIntSlice[int32](queries["rep_sint32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepSint32 = v
				}
				if v, err := convx.ParseUintSlice[uint32](queries["rep_uint32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepUint32 = v
				}
				if v, err := convx.ParseIntSlice[int64](queries["rep_int64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepInt64 = v
				}
				if v, err := convx.ParseIntSlice[int64](queries["rep_sint64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepSint64 = v
				}
				if v, err := convx.ParseUintSlice[uint64](queries["rep_uint64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepUint64 = v
				}
				if v, err := convx.ParseIntSlice[int32](queries["rep_sfixed32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepSfixed32 = v
				}
				if v, err := convx.ParseUintSlice[uint32](queries["rep_fixed32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepFixed32 = v
				}
				if v, err := convx.ParseFloatSlice[float32](queries["rep_float"], 32); err != nil {
					return nil, err
				} else {
					req.RepFloat = v
				}
				if v, err := convx.ParseIntSlice[int64](queries["rep_sfixed64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepSfixed64 = v
				}
				if v, err := convx.ParseUintSlice[uint64](queries["rep_fixed64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepFixed64 = v
				}
				if v, err := convx.ParseFloatSlice[float64](queries["rep_double"], 32); err != nil {
					return nil, err
				} else {
					req.RepDouble = v
				}
				req.RepString = queries["rep_string"]
				req.RepBytes = convx.ParseBytesSlice(queries["rep_bytes"])
				return req, nil
			},
			func(ctx context.Context, w http1.ResponseWriter, obj any) error {
				resp := obj.(*emptypb.Empty)
				_ = resp
				w.WriteHeader(http1.StatusOK)
				data, err := protojson.Marshal(resp)
				if err != nil {
					return err
				}
				if _, err := w.Write(data); err != nil {
					return err
				}
				return nil
			},
			opts...,
		))
	r.Name("/leo.example.demo.v1.Body/OptFixed64").
		Methods("PUT").
		Path("/v1/opt_fixed64").
		Handler(http.NewServer(
			endpointx.Chain(endpoints.OptFixed64(), mdw...),
			func(ctx context.Context, r *http1.Request) (any, error) {
				req := &BodyRequest{}
				body, err := io.ReadAll(r.Body)
				if err != nil {
					return nil, err
				}
				if v, err := strconv.ParseUint(string(body), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptFixed64 = proto.Uint64(v)
				}
				queries := r.URL.Query()
				if v, err := strconv.ParseBool(queries.Get("bool")); err != nil {
					return nil, err
				} else {
					req.Bool = v
				}
				if v, err := strconv.ParseInt(queries.Get("int32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Int32 = int32(v)
				}
				if v, err := strconv.ParseInt(queries.Get("sint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Sint32 = int32(v)
				}
				if v, err := strconv.ParseUint(queries.Get("uint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Uint32 = uint32(v)
				}
				if v, err := strconv.ParseInt(queries.Get("int64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Int64 = v
				}
				if v, err := strconv.ParseInt(queries.Get("sint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Sint64 = v
				}
				if v, err := strconv.ParseUint(queries.Get("uint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Uint64 = v
				}
				if v, err := strconv.ParseInt(queries.Get("sfixed32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Sfixed32 = int32(v)
				}
				if v, err := strconv.ParseUint(queries.Get("fixed32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Fixed32 = uint32(v)
				}
				if v, err := strconv.ParseFloat(queries.Get("float"), 32); err != nil {
					return nil, err
				} else {
					req.Float = float32(v)
				}
				if v, err := strconv.ParseInt(queries.Get("sfixed64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Sfixed64 = v
				}
				if v, err := strconv.ParseUint(queries.Get("fixed64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Fixed64 = v
				}
				if v, err := strconv.ParseFloat(queries.Get("double"), 32); err != nil {
					return nil, err
				} else {
					req.Double = v
				}
				req.String_ = queries.Get("string")
				req.Bytes = []byte(queries.Get("bytes"))
				if v, err := strconv.ParseBool(queries.Get("opt_bool")); err != nil {
					return nil, err
				} else {
					req.OptBool = proto.Bool(v)
				}
				if v, err := strconv.ParseInt(queries.Get("opt_int32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptInt32 = proto.Int32(int32(v))
				}
				if v, err := strconv.ParseInt(queries.Get("opt_sint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptSint32 = proto.Int32(int32(v))
				}
				if v, err := strconv.ParseUint(queries.Get("opt_uint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptUint32 = proto.Uint32(uint32(v))
				}
				if v, err := strconv.ParseInt(queries.Get("opt_int64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptInt64 = proto.Int64(v)
				}
				if v, err := strconv.ParseInt(queries.Get("opt_sint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptSint64 = proto.Int64(v)
				}
				if v, err := strconv.ParseUint(queries.Get("opt_uint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptUint64 = proto.Uint64(v)
				}
				if v, err := strconv.ParseInt(queries.Get("opt_sfixed32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptSfixed32 = proto.Int32(int32(v))
				}
				if v, err := strconv.ParseUint(queries.Get("opt_fixed32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptFixed32 = proto.Uint32(uint32(v))
				}
				if v, err := strconv.ParseFloat(queries.Get("opt_float"), 32); err != nil {
					return nil, err
				} else {
					req.OptFloat = proto.Float32(float32(v))
				}
				if v, err := strconv.ParseInt(queries.Get("opt_sfixed64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptSfixed64 = proto.Int64(v)
				}
				if v, err := strconv.ParseFloat(queries.Get("opt_double"), 32); err != nil {
					return nil, err
				} else {
					req.OptDouble = proto.Float64(v)
				}
				req.OptString = proto.String(queries.Get("opt_string"))
				req.OptBytes = []byte(queries.Get("opt_bytes"))
				if v, err := strconv.ParseFloat(queries.Get("wrap_double"), 64); err != nil {
					return nil, err
				} else {
					req.WrapDouble = wrapperspb.Double(v)
				}
				if v, err := strconv.ParseFloat(queries.Get("wrap_float"), 32); err != nil {
					return nil, err
				} else {
					req.WrapFloat = wrapperspb.Float(float32(v))
				}
				if v, err := strconv.ParseInt(queries.Get("wrap_int64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.WrapInt64 = wrapperspb.Int64(v)
				}
				if v, err := strconv.ParseUint(queries.Get("wrap_uint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.WrapUint64 = wrapperspb.UInt64(v)
				}
				if v, err := strconv.ParseInt(queries.Get("wrap_int32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.WrapInt32 = wrapperspb.Int32(int32(v))
				}
				if v, err := strconv.ParseUint(queries.Get("wrap_uint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.WrapUint32 = wrapperspb.UInt32(uint32(v))
				}
				if v, err := strconv.ParseBool(queries.Get("wrap_bool")); err != nil {
					return nil, err
				} else {
					req.WrapBool = wrapperspb.Bool(v)
				}
				req.WrapString = wrapperspb.String(queries.Get("wrap_string"))
				req.WrapBytes = wrapperspb.Bytes([]byte(queries.Get("wrap_bytes")))
				if v, err := convx.ParseBoolSlice(queries["rep_bool"]); err != nil {
					return nil, err
				} else {
					req.RepBool = v
				}
				if v, err := convx.ParseIntSlice[int32](queries["rep_int32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepInt32 = v
				}
				if v, err := convx.ParseIntSlice[int32](queries["rep_sint32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepSint32 = v
				}
				if v, err := convx.ParseUintSlice[uint32](queries["rep_uint32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepUint32 = v
				}
				if v, err := convx.ParseIntSlice[int64](queries["rep_int64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepInt64 = v
				}
				if v, err := convx.ParseIntSlice[int64](queries["rep_sint64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepSint64 = v
				}
				if v, err := convx.ParseUintSlice[uint64](queries["rep_uint64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepUint64 = v
				}
				if v, err := convx.ParseIntSlice[int32](queries["rep_sfixed32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepSfixed32 = v
				}
				if v, err := convx.ParseUintSlice[uint32](queries["rep_fixed32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepFixed32 = v
				}
				if v, err := convx.ParseFloatSlice[float32](queries["rep_float"], 32); err != nil {
					return nil, err
				} else {
					req.RepFloat = v
				}
				if v, err := convx.ParseIntSlice[int64](queries["rep_sfixed64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepSfixed64 = v
				}
				if v, err := convx.ParseUintSlice[uint64](queries["rep_fixed64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepFixed64 = v
				}
				if v, err := convx.ParseFloatSlice[float64](queries["rep_double"], 32); err != nil {
					return nil, err
				} else {
					req.RepDouble = v
				}
				req.RepString = queries["rep_string"]
				req.RepBytes = convx.ParseBytesSlice(queries["rep_bytes"])
				return req, nil
			},
			func(ctx context.Context, w http1.ResponseWriter, obj any) error {
				resp := obj.(*emptypb.Empty)
				_ = resp
				w.WriteHeader(http1.StatusOK)
				data, err := protojson.Marshal(resp)
				if err != nil {
					return err
				}
				if _, err := w.Write(data); err != nil {
					return err
				}
				return nil
			},
			opts...,
		))
	r.Name("/leo.example.demo.v1.Body/RepFixed64").
		Methods("PUT").
		Path("/v1/rep_fixed64").
		Handler(http.NewServer(
			endpointx.Chain(endpoints.RepFixed64(), mdw...),
			func(ctx context.Context, r *http1.Request) (any, error) {
				req := &BodyRequest{}
				body, err := io.ReadAll(r.Body)
				if err != nil {
					return nil, err
				}
				if v, err := strconv.ParseUint(string(body), 10, 64); err != nil {
					return nil, err
				} else {
					req.RepFixed64 = v
				}
				queries := r.URL.Query()
				if v, err := strconv.ParseBool(queries.Get("bool")); err != nil {
					return nil, err
				} else {
					req.Bool = v
				}
				if v, err := strconv.ParseInt(queries.Get("int32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Int32 = int32(v)
				}
				if v, err := strconv.ParseInt(queries.Get("sint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Sint32 = int32(v)
				}
				if v, err := strconv.ParseUint(queries.Get("uint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Uint32 = uint32(v)
				}
				if v, err := strconv.ParseInt(queries.Get("int64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Int64 = v
				}
				if v, err := strconv.ParseInt(queries.Get("sint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Sint64 = v
				}
				if v, err := strconv.ParseUint(queries.Get("uint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Uint64 = v
				}
				if v, err := strconv.ParseInt(queries.Get("sfixed32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Sfixed32 = int32(v)
				}
				if v, err := strconv.ParseUint(queries.Get("fixed32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Fixed32 = uint32(v)
				}
				if v, err := strconv.ParseFloat(queries.Get("float"), 32); err != nil {
					return nil, err
				} else {
					req.Float = float32(v)
				}
				if v, err := strconv.ParseInt(queries.Get("sfixed64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Sfixed64 = v
				}
				if v, err := strconv.ParseUint(queries.Get("fixed64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Fixed64 = v
				}
				if v, err := strconv.ParseFloat(queries.Get("double"), 32); err != nil {
					return nil, err
				} else {
					req.Double = v
				}
				req.String_ = queries.Get("string")
				req.Bytes = []byte(queries.Get("bytes"))
				if v, err := strconv.ParseBool(queries.Get("opt_bool")); err != nil {
					return nil, err
				} else {
					req.OptBool = proto.Bool(v)
				}
				if v, err := strconv.ParseInt(queries.Get("opt_int32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptInt32 = proto.Int32(int32(v))
				}
				if v, err := strconv.ParseInt(queries.Get("opt_sint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptSint32 = proto.Int32(int32(v))
				}
				if v, err := strconv.ParseUint(queries.Get("opt_uint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptUint32 = proto.Uint32(uint32(v))
				}
				if v, err := strconv.ParseInt(queries.Get("opt_int64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptInt64 = proto.Int64(v)
				}
				if v, err := strconv.ParseInt(queries.Get("opt_sint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptSint64 = proto.Int64(v)
				}
				if v, err := strconv.ParseUint(queries.Get("opt_uint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptUint64 = proto.Uint64(v)
				}
				if v, err := strconv.ParseInt(queries.Get("opt_sfixed32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptSfixed32 = proto.Int32(int32(v))
				}
				if v, err := strconv.ParseUint(queries.Get("opt_fixed32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptFixed32 = proto.Uint32(uint32(v))
				}
				if v, err := strconv.ParseFloat(queries.Get("opt_float"), 32); err != nil {
					return nil, err
				} else {
					req.OptFloat = proto.Float32(float32(v))
				}
				if v, err := strconv.ParseInt(queries.Get("opt_sfixed64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptSfixed64 = proto.Int64(v)
				}
				if v, err := strconv.ParseUint(queries.Get("opt_fixed64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptFixed64 = proto.Uint64(v)
				}
				if v, err := strconv.ParseFloat(queries.Get("opt_double"), 32); err != nil {
					return nil, err
				} else {
					req.OptDouble = proto.Float64(v)
				}
				req.OptString = proto.String(queries.Get("opt_string"))
				req.OptBytes = []byte(queries.Get("opt_bytes"))
				if v, err := strconv.ParseFloat(queries.Get("wrap_double"), 64); err != nil {
					return nil, err
				} else {
					req.WrapDouble = wrapperspb.Double(v)
				}
				if v, err := strconv.ParseFloat(queries.Get("wrap_float"), 32); err != nil {
					return nil, err
				} else {
					req.WrapFloat = wrapperspb.Float(float32(v))
				}
				if v, err := strconv.ParseInt(queries.Get("wrap_int64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.WrapInt64 = wrapperspb.Int64(v)
				}
				if v, err := strconv.ParseUint(queries.Get("wrap_uint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.WrapUint64 = wrapperspb.UInt64(v)
				}
				if v, err := strconv.ParseInt(queries.Get("wrap_int32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.WrapInt32 = wrapperspb.Int32(int32(v))
				}
				if v, err := strconv.ParseUint(queries.Get("wrap_uint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.WrapUint32 = wrapperspb.UInt32(uint32(v))
				}
				if v, err := strconv.ParseBool(queries.Get("wrap_bool")); err != nil {
					return nil, err
				} else {
					req.WrapBool = wrapperspb.Bool(v)
				}
				req.WrapString = wrapperspb.String(queries.Get("wrap_string"))
				req.WrapBytes = wrapperspb.Bytes([]byte(queries.Get("wrap_bytes")))
				if v, err := convx.ParseBoolSlice(queries["rep_bool"]); err != nil {
					return nil, err
				} else {
					req.RepBool = v
				}
				if v, err := convx.ParseIntSlice[int32](queries["rep_int32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepInt32 = v
				}
				if v, err := convx.ParseIntSlice[int32](queries["rep_sint32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepSint32 = v
				}
				if v, err := convx.ParseUintSlice[uint32](queries["rep_uint32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepUint32 = v
				}
				if v, err := convx.ParseIntSlice[int64](queries["rep_int64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepInt64 = v
				}
				if v, err := convx.ParseIntSlice[int64](queries["rep_sint64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepSint64 = v
				}
				if v, err := convx.ParseUintSlice[uint64](queries["rep_uint64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepUint64 = v
				}
				if v, err := convx.ParseIntSlice[int32](queries["rep_sfixed32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepSfixed32 = v
				}
				if v, err := convx.ParseUintSlice[uint32](queries["rep_fixed32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepFixed32 = v
				}
				if v, err := convx.ParseFloatSlice[float32](queries["rep_float"], 32); err != nil {
					return nil, err
				} else {
					req.RepFloat = v
				}
				if v, err := convx.ParseIntSlice[int64](queries["rep_sfixed64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepSfixed64 = v
				}
				if v, err := convx.ParseFloatSlice[float64](queries["rep_double"], 32); err != nil {
					return nil, err
				} else {
					req.RepDouble = v
				}
				req.RepString = queries["rep_string"]
				req.RepBytes = convx.ParseBytesSlice(queries["rep_bytes"])
				return req, nil
			},
			func(ctx context.Context, w http1.ResponseWriter, obj any) error {
				resp := obj.(*emptypb.Empty)
				_ = resp
				w.WriteHeader(http1.StatusOK)
				data, err := protojson.Marshal(resp)
				if err != nil {
					return err
				}
				if _, err := w.Write(data); err != nil {
					return err
				}
				return nil
			},
			opts...,
		))
	r.Name("/leo.example.demo.v1.Body/Float32").
		Methods("PUT").
		Path("/v1/float").
		Handler(http.NewServer(
			endpointx.Chain(endpoints.Float32(), mdw...),
			func(ctx context.Context, r *http1.Request) (any, error) {
				req := &BodyRequest{}
				body, err := io.ReadAll(r.Body)
				if err != nil {
					return nil, err
				}
				if v, err := strconv.ParseFloat(string(body), 32); err != nil {
					return nil, err
				} else {
					req.Float = float32(v)
				}
				queries := r.URL.Query()
				if v, err := strconv.ParseBool(queries.Get("bool")); err != nil {
					return nil, err
				} else {
					req.Bool = v
				}
				if v, err := strconv.ParseInt(queries.Get("int32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Int32 = int32(v)
				}
				if v, err := strconv.ParseInt(queries.Get("sint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Sint32 = int32(v)
				}
				if v, err := strconv.ParseUint(queries.Get("uint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Uint32 = uint32(v)
				}
				if v, err := strconv.ParseInt(queries.Get("int64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Int64 = v
				}
				if v, err := strconv.ParseInt(queries.Get("sint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Sint64 = v
				}
				if v, err := strconv.ParseUint(queries.Get("uint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Uint64 = v
				}
				if v, err := strconv.ParseInt(queries.Get("sfixed32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Sfixed32 = int32(v)
				}
				if v, err := strconv.ParseUint(queries.Get("fixed32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Fixed32 = uint32(v)
				}
				if v, err := strconv.ParseInt(queries.Get("sfixed64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Sfixed64 = v
				}
				if v, err := strconv.ParseUint(queries.Get("fixed64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Fixed64 = v
				}
				if v, err := strconv.ParseFloat(queries.Get("double"), 32); err != nil {
					return nil, err
				} else {
					req.Double = v
				}
				req.String_ = queries.Get("string")
				req.Bytes = []byte(queries.Get("bytes"))
				if v, err := strconv.ParseBool(queries.Get("opt_bool")); err != nil {
					return nil, err
				} else {
					req.OptBool = proto.Bool(v)
				}
				if v, err := strconv.ParseInt(queries.Get("opt_int32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptInt32 = proto.Int32(int32(v))
				}
				if v, err := strconv.ParseInt(queries.Get("opt_sint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptSint32 = proto.Int32(int32(v))
				}
				if v, err := strconv.ParseUint(queries.Get("opt_uint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptUint32 = proto.Uint32(uint32(v))
				}
				if v, err := strconv.ParseInt(queries.Get("opt_int64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptInt64 = proto.Int64(v)
				}
				if v, err := strconv.ParseInt(queries.Get("opt_sint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptSint64 = proto.Int64(v)
				}
				if v, err := strconv.ParseUint(queries.Get("opt_uint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptUint64 = proto.Uint64(v)
				}
				if v, err := strconv.ParseInt(queries.Get("opt_sfixed32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptSfixed32 = proto.Int32(int32(v))
				}
				if v, err := strconv.ParseUint(queries.Get("opt_fixed32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptFixed32 = proto.Uint32(uint32(v))
				}
				if v, err := strconv.ParseFloat(queries.Get("opt_float"), 32); err != nil {
					return nil, err
				} else {
					req.OptFloat = proto.Float32(float32(v))
				}
				if v, err := strconv.ParseInt(queries.Get("opt_sfixed64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptSfixed64 = proto.Int64(v)
				}
				if v, err := strconv.ParseUint(queries.Get("opt_fixed64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptFixed64 = proto.Uint64(v)
				}
				if v, err := strconv.ParseFloat(queries.Get("opt_double"), 32); err != nil {
					return nil, err
				} else {
					req.OptDouble = proto.Float64(v)
				}
				req.OptString = proto.String(queries.Get("opt_string"))
				req.OptBytes = []byte(queries.Get("opt_bytes"))
				if v, err := strconv.ParseFloat(queries.Get("wrap_double"), 64); err != nil {
					return nil, err
				} else {
					req.WrapDouble = wrapperspb.Double(v)
				}
				if v, err := strconv.ParseFloat(queries.Get("wrap_float"), 32); err != nil {
					return nil, err
				} else {
					req.WrapFloat = wrapperspb.Float(float32(v))
				}
				if v, err := strconv.ParseInt(queries.Get("wrap_int64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.WrapInt64 = wrapperspb.Int64(v)
				}
				if v, err := strconv.ParseUint(queries.Get("wrap_uint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.WrapUint64 = wrapperspb.UInt64(v)
				}
				if v, err := strconv.ParseInt(queries.Get("wrap_int32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.WrapInt32 = wrapperspb.Int32(int32(v))
				}
				if v, err := strconv.ParseUint(queries.Get("wrap_uint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.WrapUint32 = wrapperspb.UInt32(uint32(v))
				}
				if v, err := strconv.ParseBool(queries.Get("wrap_bool")); err != nil {
					return nil, err
				} else {
					req.WrapBool = wrapperspb.Bool(v)
				}
				req.WrapString = wrapperspb.String(queries.Get("wrap_string"))
				req.WrapBytes = wrapperspb.Bytes([]byte(queries.Get("wrap_bytes")))
				if v, err := convx.ParseBoolSlice(queries["rep_bool"]); err != nil {
					return nil, err
				} else {
					req.RepBool = v
				}
				if v, err := convx.ParseIntSlice[int32](queries["rep_int32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepInt32 = v
				}
				if v, err := convx.ParseIntSlice[int32](queries["rep_sint32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepSint32 = v
				}
				if v, err := convx.ParseUintSlice[uint32](queries["rep_uint32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepUint32 = v
				}
				if v, err := convx.ParseIntSlice[int64](queries["rep_int64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepInt64 = v
				}
				if v, err := convx.ParseIntSlice[int64](queries["rep_sint64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepSint64 = v
				}
				if v, err := convx.ParseUintSlice[uint64](queries["rep_uint64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepUint64 = v
				}
				if v, err := convx.ParseIntSlice[int32](queries["rep_sfixed32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepSfixed32 = v
				}
				if v, err := convx.ParseUintSlice[uint32](queries["rep_fixed32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepFixed32 = v
				}
				if v, err := convx.ParseFloatSlice[float32](queries["rep_float"], 32); err != nil {
					return nil, err
				} else {
					req.RepFloat = v
				}
				if v, err := convx.ParseIntSlice[int64](queries["rep_sfixed64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepSfixed64 = v
				}
				if v, err := convx.ParseUintSlice[uint64](queries["rep_fixed64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepFixed64 = v
				}
				if v, err := convx.ParseFloatSlice[float64](queries["rep_double"], 32); err != nil {
					return nil, err
				} else {
					req.RepDouble = v
				}
				req.RepString = queries["rep_string"]
				req.RepBytes = convx.ParseBytesSlice(queries["rep_bytes"])
				return req, nil
			},
			func(ctx context.Context, w http1.ResponseWriter, obj any) error {
				resp := obj.(*emptypb.Empty)
				_ = resp
				w.WriteHeader(http1.StatusOK)
				data, err := protojson.Marshal(resp)
				if err != nil {
					return err
				}
				if _, err := w.Write(data); err != nil {
					return err
				}
				return nil
			},
			opts...,
		))
	r.Name("/leo.example.demo.v1.Body/OptFloat32").
		Methods("PUT").
		Path("/v1/opt_float").
		Handler(http.NewServer(
			endpointx.Chain(endpoints.OptFloat32(), mdw...),
			func(ctx context.Context, r *http1.Request) (any, error) {
				req := &BodyRequest{}
				body, err := io.ReadAll(r.Body)
				if err != nil {
					return nil, err
				}
				if v, err := strconv.ParseFloat(string(body), 32); err != nil {
					return nil, err
				} else {
					req.OptFloat = proto.Float32(float32(v))
				}
				queries := r.URL.Query()
				if v, err := strconv.ParseBool(queries.Get("bool")); err != nil {
					return nil, err
				} else {
					req.Bool = v
				}
				if v, err := strconv.ParseInt(queries.Get("int32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Int32 = int32(v)
				}
				if v, err := strconv.ParseInt(queries.Get("sint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Sint32 = int32(v)
				}
				if v, err := strconv.ParseUint(queries.Get("uint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Uint32 = uint32(v)
				}
				if v, err := strconv.ParseInt(queries.Get("int64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Int64 = v
				}
				if v, err := strconv.ParseInt(queries.Get("sint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Sint64 = v
				}
				if v, err := strconv.ParseUint(queries.Get("uint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Uint64 = v
				}
				if v, err := strconv.ParseInt(queries.Get("sfixed32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Sfixed32 = int32(v)
				}
				if v, err := strconv.ParseUint(queries.Get("fixed32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Fixed32 = uint32(v)
				}
				if v, err := strconv.ParseFloat(queries.Get("float"), 32); err != nil {
					return nil, err
				} else {
					req.Float = float32(v)
				}
				if v, err := strconv.ParseInt(queries.Get("sfixed64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Sfixed64 = v
				}
				if v, err := strconv.ParseUint(queries.Get("fixed64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Fixed64 = v
				}
				if v, err := strconv.ParseFloat(queries.Get("double"), 32); err != nil {
					return nil, err
				} else {
					req.Double = v
				}
				req.String_ = queries.Get("string")
				req.Bytes = []byte(queries.Get("bytes"))
				if v, err := strconv.ParseBool(queries.Get("opt_bool")); err != nil {
					return nil, err
				} else {
					req.OptBool = proto.Bool(v)
				}
				if v, err := strconv.ParseInt(queries.Get("opt_int32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptInt32 = proto.Int32(int32(v))
				}
				if v, err := strconv.ParseInt(queries.Get("opt_sint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptSint32 = proto.Int32(int32(v))
				}
				if v, err := strconv.ParseUint(queries.Get("opt_uint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptUint32 = proto.Uint32(uint32(v))
				}
				if v, err := strconv.ParseInt(queries.Get("opt_int64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptInt64 = proto.Int64(v)
				}
				if v, err := strconv.ParseInt(queries.Get("opt_sint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptSint64 = proto.Int64(v)
				}
				if v, err := strconv.ParseUint(queries.Get("opt_uint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptUint64 = proto.Uint64(v)
				}
				if v, err := strconv.ParseInt(queries.Get("opt_sfixed32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptSfixed32 = proto.Int32(int32(v))
				}
				if v, err := strconv.ParseUint(queries.Get("opt_fixed32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptFixed32 = proto.Uint32(uint32(v))
				}
				if v, err := strconv.ParseInt(queries.Get("opt_sfixed64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptSfixed64 = proto.Int64(v)
				}
				if v, err := strconv.ParseUint(queries.Get("opt_fixed64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptFixed64 = proto.Uint64(v)
				}
				if v, err := strconv.ParseFloat(queries.Get("opt_double"), 32); err != nil {
					return nil, err
				} else {
					req.OptDouble = proto.Float64(v)
				}
				req.OptString = proto.String(queries.Get("opt_string"))
				req.OptBytes = []byte(queries.Get("opt_bytes"))
				if v, err := strconv.ParseFloat(queries.Get("wrap_double"), 64); err != nil {
					return nil, err
				} else {
					req.WrapDouble = wrapperspb.Double(v)
				}
				if v, err := strconv.ParseFloat(queries.Get("wrap_float"), 32); err != nil {
					return nil, err
				} else {
					req.WrapFloat = wrapperspb.Float(float32(v))
				}
				if v, err := strconv.ParseInt(queries.Get("wrap_int64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.WrapInt64 = wrapperspb.Int64(v)
				}
				if v, err := strconv.ParseUint(queries.Get("wrap_uint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.WrapUint64 = wrapperspb.UInt64(v)
				}
				if v, err := strconv.ParseInt(queries.Get("wrap_int32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.WrapInt32 = wrapperspb.Int32(int32(v))
				}
				if v, err := strconv.ParseUint(queries.Get("wrap_uint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.WrapUint32 = wrapperspb.UInt32(uint32(v))
				}
				if v, err := strconv.ParseBool(queries.Get("wrap_bool")); err != nil {
					return nil, err
				} else {
					req.WrapBool = wrapperspb.Bool(v)
				}
				req.WrapString = wrapperspb.String(queries.Get("wrap_string"))
				req.WrapBytes = wrapperspb.Bytes([]byte(queries.Get("wrap_bytes")))
				if v, err := convx.ParseBoolSlice(queries["rep_bool"]); err != nil {
					return nil, err
				} else {
					req.RepBool = v
				}
				if v, err := convx.ParseIntSlice[int32](queries["rep_int32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepInt32 = v
				}
				if v, err := convx.ParseIntSlice[int32](queries["rep_sint32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepSint32 = v
				}
				if v, err := convx.ParseUintSlice[uint32](queries["rep_uint32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepUint32 = v
				}
				if v, err := convx.ParseIntSlice[int64](queries["rep_int64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepInt64 = v
				}
				if v, err := convx.ParseIntSlice[int64](queries["rep_sint64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepSint64 = v
				}
				if v, err := convx.ParseUintSlice[uint64](queries["rep_uint64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepUint64 = v
				}
				if v, err := convx.ParseIntSlice[int32](queries["rep_sfixed32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepSfixed32 = v
				}
				if v, err := convx.ParseUintSlice[uint32](queries["rep_fixed32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepFixed32 = v
				}
				if v, err := convx.ParseFloatSlice[float32](queries["rep_float"], 32); err != nil {
					return nil, err
				} else {
					req.RepFloat = v
				}
				if v, err := convx.ParseIntSlice[int64](queries["rep_sfixed64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepSfixed64 = v
				}
				if v, err := convx.ParseUintSlice[uint64](queries["rep_fixed64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepFixed64 = v
				}
				if v, err := convx.ParseFloatSlice[float64](queries["rep_double"], 32); err != nil {
					return nil, err
				} else {
					req.RepDouble = v
				}
				req.RepString = queries["rep_string"]
				req.RepBytes = convx.ParseBytesSlice(queries["rep_bytes"])
				return req, nil
			},
			func(ctx context.Context, w http1.ResponseWriter, obj any) error {
				resp := obj.(*emptypb.Empty)
				_ = resp
				w.WriteHeader(http1.StatusOK)
				data, err := protojson.Marshal(resp)
				if err != nil {
					return err
				}
				if _, err := w.Write(data); err != nil {
					return err
				}
				return nil
			},
			opts...,
		))
	r.Name("/leo.example.demo.v1.Body/RepFloat32").
		Methods("PUT").
		Path("/v1/rep_float").
		Handler(http.NewServer(
			endpointx.Chain(endpoints.RepFloat32(), mdw...),
			func(ctx context.Context, r *http1.Request) (any, error) {
				req := &BodyRequest{}
				body, err := io.ReadAll(r.Body)
				if err != nil {
					return nil, err
				}
				if v, err := strconv.ParseFloat(string(body), 32); err != nil {
					return nil, err
				} else {
					req.RepFloat = float32(v)
				}
				queries := r.URL.Query()
				if v, err := strconv.ParseBool(queries.Get("bool")); err != nil {
					return nil, err
				} else {
					req.Bool = v
				}
				if v, err := strconv.ParseInt(queries.Get("int32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Int32 = int32(v)
				}
				if v, err := strconv.ParseInt(queries.Get("sint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Sint32 = int32(v)
				}
				if v, err := strconv.ParseUint(queries.Get("uint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Uint32 = uint32(v)
				}
				if v, err := strconv.ParseInt(queries.Get("int64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Int64 = v
				}
				if v, err := strconv.ParseInt(queries.Get("sint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Sint64 = v
				}
				if v, err := strconv.ParseUint(queries.Get("uint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Uint64 = v
				}
				if v, err := strconv.ParseInt(queries.Get("sfixed32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Sfixed32 = int32(v)
				}
				if v, err := strconv.ParseUint(queries.Get("fixed32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Fixed32 = uint32(v)
				}
				if v, err := strconv.ParseFloat(queries.Get("float"), 32); err != nil {
					return nil, err
				} else {
					req.Float = float32(v)
				}
				if v, err := strconv.ParseInt(queries.Get("sfixed64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Sfixed64 = v
				}
				if v, err := strconv.ParseUint(queries.Get("fixed64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Fixed64 = v
				}
				if v, err := strconv.ParseFloat(queries.Get("double"), 32); err != nil {
					return nil, err
				} else {
					req.Double = v
				}
				req.String_ = queries.Get("string")
				req.Bytes = []byte(queries.Get("bytes"))
				if v, err := strconv.ParseBool(queries.Get("opt_bool")); err != nil {
					return nil, err
				} else {
					req.OptBool = proto.Bool(v)
				}
				if v, err := strconv.ParseInt(queries.Get("opt_int32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptInt32 = proto.Int32(int32(v))
				}
				if v, err := strconv.ParseInt(queries.Get("opt_sint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptSint32 = proto.Int32(int32(v))
				}
				if v, err := strconv.ParseUint(queries.Get("opt_uint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptUint32 = proto.Uint32(uint32(v))
				}
				if v, err := strconv.ParseInt(queries.Get("opt_int64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptInt64 = proto.Int64(v)
				}
				if v, err := strconv.ParseInt(queries.Get("opt_sint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptSint64 = proto.Int64(v)
				}
				if v, err := strconv.ParseUint(queries.Get("opt_uint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptUint64 = proto.Uint64(v)
				}
				if v, err := strconv.ParseInt(queries.Get("opt_sfixed32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptSfixed32 = proto.Int32(int32(v))
				}
				if v, err := strconv.ParseUint(queries.Get("opt_fixed32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptFixed32 = proto.Uint32(uint32(v))
				}
				if v, err := strconv.ParseFloat(queries.Get("opt_float"), 32); err != nil {
					return nil, err
				} else {
					req.OptFloat = proto.Float32(float32(v))
				}
				if v, err := strconv.ParseInt(queries.Get("opt_sfixed64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptSfixed64 = proto.Int64(v)
				}
				if v, err := strconv.ParseUint(queries.Get("opt_fixed64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptFixed64 = proto.Uint64(v)
				}
				if v, err := strconv.ParseFloat(queries.Get("opt_double"), 32); err != nil {
					return nil, err
				} else {
					req.OptDouble = proto.Float64(v)
				}
				req.OptString = proto.String(queries.Get("opt_string"))
				req.OptBytes = []byte(queries.Get("opt_bytes"))
				if v, err := strconv.ParseFloat(queries.Get("wrap_double"), 64); err != nil {
					return nil, err
				} else {
					req.WrapDouble = wrapperspb.Double(v)
				}
				if v, err := strconv.ParseFloat(queries.Get("wrap_float"), 32); err != nil {
					return nil, err
				} else {
					req.WrapFloat = wrapperspb.Float(float32(v))
				}
				if v, err := strconv.ParseInt(queries.Get("wrap_int64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.WrapInt64 = wrapperspb.Int64(v)
				}
				if v, err := strconv.ParseUint(queries.Get("wrap_uint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.WrapUint64 = wrapperspb.UInt64(v)
				}
				if v, err := strconv.ParseInt(queries.Get("wrap_int32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.WrapInt32 = wrapperspb.Int32(int32(v))
				}
				if v, err := strconv.ParseUint(queries.Get("wrap_uint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.WrapUint32 = wrapperspb.UInt32(uint32(v))
				}
				if v, err := strconv.ParseBool(queries.Get("wrap_bool")); err != nil {
					return nil, err
				} else {
					req.WrapBool = wrapperspb.Bool(v)
				}
				req.WrapString = wrapperspb.String(queries.Get("wrap_string"))
				req.WrapBytes = wrapperspb.Bytes([]byte(queries.Get("wrap_bytes")))
				if v, err := convx.ParseBoolSlice(queries["rep_bool"]); err != nil {
					return nil, err
				} else {
					req.RepBool = v
				}
				if v, err := convx.ParseIntSlice[int32](queries["rep_int32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepInt32 = v
				}
				if v, err := convx.ParseIntSlice[int32](queries["rep_sint32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepSint32 = v
				}
				if v, err := convx.ParseUintSlice[uint32](queries["rep_uint32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepUint32 = v
				}
				if v, err := convx.ParseIntSlice[int64](queries["rep_int64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepInt64 = v
				}
				if v, err := convx.ParseIntSlice[int64](queries["rep_sint64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepSint64 = v
				}
				if v, err := convx.ParseUintSlice[uint64](queries["rep_uint64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepUint64 = v
				}
				if v, err := convx.ParseIntSlice[int32](queries["rep_sfixed32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepSfixed32 = v
				}
				if v, err := convx.ParseUintSlice[uint32](queries["rep_fixed32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepFixed32 = v
				}
				if v, err := convx.ParseIntSlice[int64](queries["rep_sfixed64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepSfixed64 = v
				}
				if v, err := convx.ParseUintSlice[uint64](queries["rep_fixed64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepFixed64 = v
				}
				if v, err := convx.ParseFloatSlice[float64](queries["rep_double"], 32); err != nil {
					return nil, err
				} else {
					req.RepDouble = v
				}
				req.RepString = queries["rep_string"]
				req.RepBytes = convx.ParseBytesSlice(queries["rep_bytes"])
				return req, nil
			},
			func(ctx context.Context, w http1.ResponseWriter, obj any) error {
				resp := obj.(*emptypb.Empty)
				_ = resp
				w.WriteHeader(http1.StatusOK)
				data, err := protojson.Marshal(resp)
				if err != nil {
					return err
				}
				if _, err := w.Write(data); err != nil {
					return err
				}
				return nil
			},
			opts...,
		))
	r.Name("/leo.example.demo.v1.Body/WrapFloat32").
		Methods("PUT").
		Path("/v1/wrap_float").
		Handler(http.NewServer(
			endpointx.Chain(endpoints.WrapFloat32(), mdw...),
			func(ctx context.Context, r *http1.Request) (any, error) {
				req := &BodyRequest{}
				body, err := io.ReadAll(r.Body)
				if err != nil {
					return nil, err
				}
				if v, err := strconv.ParseFloat(string(body), 32); err != nil {
					return nil, err
				} else {
					req.WrapFloat = wrapperspb.Float(float32(v))
				}
				queries := r.URL.Query()
				if v, err := strconv.ParseBool(queries.Get("bool")); err != nil {
					return nil, err
				} else {
					req.Bool = v
				}
				if v, err := strconv.ParseInt(queries.Get("int32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Int32 = int32(v)
				}
				if v, err := strconv.ParseInt(queries.Get("sint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Sint32 = int32(v)
				}
				if v, err := strconv.ParseUint(queries.Get("uint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Uint32 = uint32(v)
				}
				if v, err := strconv.ParseInt(queries.Get("int64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Int64 = v
				}
				if v, err := strconv.ParseInt(queries.Get("sint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Sint64 = v
				}
				if v, err := strconv.ParseUint(queries.Get("uint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Uint64 = v
				}
				if v, err := strconv.ParseInt(queries.Get("sfixed32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Sfixed32 = int32(v)
				}
				if v, err := strconv.ParseUint(queries.Get("fixed32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Fixed32 = uint32(v)
				}
				if v, err := strconv.ParseFloat(queries.Get("float"), 32); err != nil {
					return nil, err
				} else {
					req.Float = float32(v)
				}
				if v, err := strconv.ParseInt(queries.Get("sfixed64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Sfixed64 = v
				}
				if v, err := strconv.ParseUint(queries.Get("fixed64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Fixed64 = v
				}
				if v, err := strconv.ParseFloat(queries.Get("double"), 32); err != nil {
					return nil, err
				} else {
					req.Double = v
				}
				req.String_ = queries.Get("string")
				req.Bytes = []byte(queries.Get("bytes"))
				if v, err := strconv.ParseBool(queries.Get("opt_bool")); err != nil {
					return nil, err
				} else {
					req.OptBool = proto.Bool(v)
				}
				if v, err := strconv.ParseInt(queries.Get("opt_int32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptInt32 = proto.Int32(int32(v))
				}
				if v, err := strconv.ParseInt(queries.Get("opt_sint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptSint32 = proto.Int32(int32(v))
				}
				if v, err := strconv.ParseUint(queries.Get("opt_uint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptUint32 = proto.Uint32(uint32(v))
				}
				if v, err := strconv.ParseInt(queries.Get("opt_int64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptInt64 = proto.Int64(v)
				}
				if v, err := strconv.ParseInt(queries.Get("opt_sint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptSint64 = proto.Int64(v)
				}
				if v, err := strconv.ParseUint(queries.Get("opt_uint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptUint64 = proto.Uint64(v)
				}
				if v, err := strconv.ParseInt(queries.Get("opt_sfixed32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptSfixed32 = proto.Int32(int32(v))
				}
				if v, err := strconv.ParseUint(queries.Get("opt_fixed32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptFixed32 = proto.Uint32(uint32(v))
				}
				if v, err := strconv.ParseFloat(queries.Get("opt_float"), 32); err != nil {
					return nil, err
				} else {
					req.OptFloat = proto.Float32(float32(v))
				}
				if v, err := strconv.ParseInt(queries.Get("opt_sfixed64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptSfixed64 = proto.Int64(v)
				}
				if v, err := strconv.ParseUint(queries.Get("opt_fixed64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptFixed64 = proto.Uint64(v)
				}
				if v, err := strconv.ParseFloat(queries.Get("opt_double"), 32); err != nil {
					return nil, err
				} else {
					req.OptDouble = proto.Float64(v)
				}
				req.OptString = proto.String(queries.Get("opt_string"))
				req.OptBytes = []byte(queries.Get("opt_bytes"))
				if v, err := strconv.ParseFloat(queries.Get("wrap_double"), 64); err != nil {
					return nil, err
				} else {
					req.WrapDouble = wrapperspb.Double(v)
				}
				if v, err := strconv.ParseInt(queries.Get("wrap_int64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.WrapInt64 = wrapperspb.Int64(v)
				}
				if v, err := strconv.ParseUint(queries.Get("wrap_uint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.WrapUint64 = wrapperspb.UInt64(v)
				}
				if v, err := strconv.ParseInt(queries.Get("wrap_int32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.WrapInt32 = wrapperspb.Int32(int32(v))
				}
				if v, err := strconv.ParseUint(queries.Get("wrap_uint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.WrapUint32 = wrapperspb.UInt32(uint32(v))
				}
				if v, err := strconv.ParseBool(queries.Get("wrap_bool")); err != nil {
					return nil, err
				} else {
					req.WrapBool = wrapperspb.Bool(v)
				}
				req.WrapString = wrapperspb.String(queries.Get("wrap_string"))
				req.WrapBytes = wrapperspb.Bytes([]byte(queries.Get("wrap_bytes")))
				if v, err := convx.ParseBoolSlice(queries["rep_bool"]); err != nil {
					return nil, err
				} else {
					req.RepBool = v
				}
				if v, err := convx.ParseIntSlice[int32](queries["rep_int32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepInt32 = v
				}
				if v, err := convx.ParseIntSlice[int32](queries["rep_sint32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepSint32 = v
				}
				if v, err := convx.ParseUintSlice[uint32](queries["rep_uint32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepUint32 = v
				}
				if v, err := convx.ParseIntSlice[int64](queries["rep_int64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepInt64 = v
				}
				if v, err := convx.ParseIntSlice[int64](queries["rep_sint64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepSint64 = v
				}
				if v, err := convx.ParseUintSlice[uint64](queries["rep_uint64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepUint64 = v
				}
				if v, err := convx.ParseIntSlice[int32](queries["rep_sfixed32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepSfixed32 = v
				}
				if v, err := convx.ParseUintSlice[uint32](queries["rep_fixed32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepFixed32 = v
				}
				if v, err := convx.ParseFloatSlice[float32](queries["rep_float"], 32); err != nil {
					return nil, err
				} else {
					req.RepFloat = v
				}
				if v, err := convx.ParseIntSlice[int64](queries["rep_sfixed64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepSfixed64 = v
				}
				if v, err := convx.ParseUintSlice[uint64](queries["rep_fixed64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepFixed64 = v
				}
				if v, err := convx.ParseFloatSlice[float64](queries["rep_double"], 32); err != nil {
					return nil, err
				} else {
					req.RepDouble = v
				}
				req.RepString = queries["rep_string"]
				req.RepBytes = convx.ParseBytesSlice(queries["rep_bytes"])
				return req, nil
			},
			func(ctx context.Context, w http1.ResponseWriter, obj any) error {
				resp := obj.(*emptypb.Empty)
				_ = resp
				w.WriteHeader(http1.StatusOK)
				data, err := protojson.Marshal(resp)
				if err != nil {
					return err
				}
				if _, err := w.Write(data); err != nil {
					return err
				}
				return nil
			},
			opts...,
		))
	r.Name("/leo.example.demo.v1.Body/Float64").
		Methods("PUT").
		Path("/v1/double").
		Handler(http.NewServer(
			endpointx.Chain(endpoints.Float64(), mdw...),
			func(ctx context.Context, r *http1.Request) (any, error) {
				req := &BodyRequest{}
				body, err := io.ReadAll(r.Body)
				if err != nil {
					return nil, err
				}
				if v, err := strconv.ParseFloat(string(body), 32); err != nil {
					return nil, err
				} else {
					req.Double = v
				}
				queries := r.URL.Query()
				if v, err := strconv.ParseBool(queries.Get("bool")); err != nil {
					return nil, err
				} else {
					req.Bool = v
				}
				if v, err := strconv.ParseInt(queries.Get("int32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Int32 = int32(v)
				}
				if v, err := strconv.ParseInt(queries.Get("sint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Sint32 = int32(v)
				}
				if v, err := strconv.ParseUint(queries.Get("uint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Uint32 = uint32(v)
				}
				if v, err := strconv.ParseInt(queries.Get("int64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Int64 = v
				}
				if v, err := strconv.ParseInt(queries.Get("sint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Sint64 = v
				}
				if v, err := strconv.ParseUint(queries.Get("uint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Uint64 = v
				}
				if v, err := strconv.ParseInt(queries.Get("sfixed32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Sfixed32 = int32(v)
				}
				if v, err := strconv.ParseUint(queries.Get("fixed32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Fixed32 = uint32(v)
				}
				if v, err := strconv.ParseFloat(queries.Get("float"), 32); err != nil {
					return nil, err
				} else {
					req.Float = float32(v)
				}
				if v, err := strconv.ParseInt(queries.Get("sfixed64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Sfixed64 = v
				}
				if v, err := strconv.ParseUint(queries.Get("fixed64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Fixed64 = v
				}
				req.String_ = queries.Get("string")
				req.Bytes = []byte(queries.Get("bytes"))
				if v, err := strconv.ParseBool(queries.Get("opt_bool")); err != nil {
					return nil, err
				} else {
					req.OptBool = proto.Bool(v)
				}
				if v, err := strconv.ParseInt(queries.Get("opt_int32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptInt32 = proto.Int32(int32(v))
				}
				if v, err := strconv.ParseInt(queries.Get("opt_sint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptSint32 = proto.Int32(int32(v))
				}
				if v, err := strconv.ParseUint(queries.Get("opt_uint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptUint32 = proto.Uint32(uint32(v))
				}
				if v, err := strconv.ParseInt(queries.Get("opt_int64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptInt64 = proto.Int64(v)
				}
				if v, err := strconv.ParseInt(queries.Get("opt_sint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptSint64 = proto.Int64(v)
				}
				if v, err := strconv.ParseUint(queries.Get("opt_uint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptUint64 = proto.Uint64(v)
				}
				if v, err := strconv.ParseInt(queries.Get("opt_sfixed32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptSfixed32 = proto.Int32(int32(v))
				}
				if v, err := strconv.ParseUint(queries.Get("opt_fixed32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptFixed32 = proto.Uint32(uint32(v))
				}
				if v, err := strconv.ParseFloat(queries.Get("opt_float"), 32); err != nil {
					return nil, err
				} else {
					req.OptFloat = proto.Float32(float32(v))
				}
				if v, err := strconv.ParseInt(queries.Get("opt_sfixed64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptSfixed64 = proto.Int64(v)
				}
				if v, err := strconv.ParseUint(queries.Get("opt_fixed64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptFixed64 = proto.Uint64(v)
				}
				if v, err := strconv.ParseFloat(queries.Get("opt_double"), 32); err != nil {
					return nil, err
				} else {
					req.OptDouble = proto.Float64(v)
				}
				req.OptString = proto.String(queries.Get("opt_string"))
				req.OptBytes = []byte(queries.Get("opt_bytes"))
				if v, err := strconv.ParseFloat(queries.Get("wrap_double"), 64); err != nil {
					return nil, err
				} else {
					req.WrapDouble = wrapperspb.Double(v)
				}
				if v, err := strconv.ParseFloat(queries.Get("wrap_float"), 32); err != nil {
					return nil, err
				} else {
					req.WrapFloat = wrapperspb.Float(float32(v))
				}
				if v, err := strconv.ParseInt(queries.Get("wrap_int64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.WrapInt64 = wrapperspb.Int64(v)
				}
				if v, err := strconv.ParseUint(queries.Get("wrap_uint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.WrapUint64 = wrapperspb.UInt64(v)
				}
				if v, err := strconv.ParseInt(queries.Get("wrap_int32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.WrapInt32 = wrapperspb.Int32(int32(v))
				}
				if v, err := strconv.ParseUint(queries.Get("wrap_uint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.WrapUint32 = wrapperspb.UInt32(uint32(v))
				}
				if v, err := strconv.ParseBool(queries.Get("wrap_bool")); err != nil {
					return nil, err
				} else {
					req.WrapBool = wrapperspb.Bool(v)
				}
				req.WrapString = wrapperspb.String(queries.Get("wrap_string"))
				req.WrapBytes = wrapperspb.Bytes([]byte(queries.Get("wrap_bytes")))
				if v, err := convx.ParseBoolSlice(queries["rep_bool"]); err != nil {
					return nil, err
				} else {
					req.RepBool = v
				}
				if v, err := convx.ParseIntSlice[int32](queries["rep_int32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepInt32 = v
				}
				if v, err := convx.ParseIntSlice[int32](queries["rep_sint32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepSint32 = v
				}
				if v, err := convx.ParseUintSlice[uint32](queries["rep_uint32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepUint32 = v
				}
				if v, err := convx.ParseIntSlice[int64](queries["rep_int64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepInt64 = v
				}
				if v, err := convx.ParseIntSlice[int64](queries["rep_sint64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepSint64 = v
				}
				if v, err := convx.ParseUintSlice[uint64](queries["rep_uint64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepUint64 = v
				}
				if v, err := convx.ParseIntSlice[int32](queries["rep_sfixed32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepSfixed32 = v
				}
				if v, err := convx.ParseUintSlice[uint32](queries["rep_fixed32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepFixed32 = v
				}
				if v, err := convx.ParseFloatSlice[float32](queries["rep_float"], 32); err != nil {
					return nil, err
				} else {
					req.RepFloat = v
				}
				if v, err := convx.ParseIntSlice[int64](queries["rep_sfixed64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepSfixed64 = v
				}
				if v, err := convx.ParseUintSlice[uint64](queries["rep_fixed64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepFixed64 = v
				}
				if v, err := convx.ParseFloatSlice[float64](queries["rep_double"], 32); err != nil {
					return nil, err
				} else {
					req.RepDouble = v
				}
				req.RepString = queries["rep_string"]
				req.RepBytes = convx.ParseBytesSlice(queries["rep_bytes"])
				return req, nil
			},
			func(ctx context.Context, w http1.ResponseWriter, obj any) error {
				resp := obj.(*emptypb.Empty)
				_ = resp
				w.WriteHeader(http1.StatusOK)
				data, err := protojson.Marshal(resp)
				if err != nil {
					return err
				}
				if _, err := w.Write(data); err != nil {
					return err
				}
				return nil
			},
			opts...,
		))
	r.Name("/leo.example.demo.v1.Body/OptFloat64").
		Methods("PUT").
		Path("/v1/opt_double").
		Handler(http.NewServer(
			endpointx.Chain(endpoints.OptFloat64(), mdw...),
			func(ctx context.Context, r *http1.Request) (any, error) {
				req := &BodyRequest{}
				body, err := io.ReadAll(r.Body)
				if err != nil {
					return nil, err
				}
				if v, err := strconv.ParseFloat(string(body), 32); err != nil {
					return nil, err
				} else {
					req.OptDouble = proto.Float64(v)
				}
				queries := r.URL.Query()
				if v, err := strconv.ParseBool(queries.Get("bool")); err != nil {
					return nil, err
				} else {
					req.Bool = v
				}
				if v, err := strconv.ParseInt(queries.Get("int32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Int32 = int32(v)
				}
				if v, err := strconv.ParseInt(queries.Get("sint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Sint32 = int32(v)
				}
				if v, err := strconv.ParseUint(queries.Get("uint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Uint32 = uint32(v)
				}
				if v, err := strconv.ParseInt(queries.Get("int64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Int64 = v
				}
				if v, err := strconv.ParseInt(queries.Get("sint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Sint64 = v
				}
				if v, err := strconv.ParseUint(queries.Get("uint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Uint64 = v
				}
				if v, err := strconv.ParseInt(queries.Get("sfixed32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Sfixed32 = int32(v)
				}
				if v, err := strconv.ParseUint(queries.Get("fixed32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Fixed32 = uint32(v)
				}
				if v, err := strconv.ParseFloat(queries.Get("float"), 32); err != nil {
					return nil, err
				} else {
					req.Float = float32(v)
				}
				if v, err := strconv.ParseInt(queries.Get("sfixed64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Sfixed64 = v
				}
				if v, err := strconv.ParseUint(queries.Get("fixed64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Fixed64 = v
				}
				if v, err := strconv.ParseFloat(queries.Get("double"), 32); err != nil {
					return nil, err
				} else {
					req.Double = v
				}
				req.String_ = queries.Get("string")
				req.Bytes = []byte(queries.Get("bytes"))
				if v, err := strconv.ParseBool(queries.Get("opt_bool")); err != nil {
					return nil, err
				} else {
					req.OptBool = proto.Bool(v)
				}
				if v, err := strconv.ParseInt(queries.Get("opt_int32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptInt32 = proto.Int32(int32(v))
				}
				if v, err := strconv.ParseInt(queries.Get("opt_sint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptSint32 = proto.Int32(int32(v))
				}
				if v, err := strconv.ParseUint(queries.Get("opt_uint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptUint32 = proto.Uint32(uint32(v))
				}
				if v, err := strconv.ParseInt(queries.Get("opt_int64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptInt64 = proto.Int64(v)
				}
				if v, err := strconv.ParseInt(queries.Get("opt_sint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptSint64 = proto.Int64(v)
				}
				if v, err := strconv.ParseUint(queries.Get("opt_uint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptUint64 = proto.Uint64(v)
				}
				if v, err := strconv.ParseInt(queries.Get("opt_sfixed32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptSfixed32 = proto.Int32(int32(v))
				}
				if v, err := strconv.ParseUint(queries.Get("opt_fixed32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptFixed32 = proto.Uint32(uint32(v))
				}
				if v, err := strconv.ParseFloat(queries.Get("opt_float"), 32); err != nil {
					return nil, err
				} else {
					req.OptFloat = proto.Float32(float32(v))
				}
				if v, err := strconv.ParseInt(queries.Get("opt_sfixed64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptSfixed64 = proto.Int64(v)
				}
				if v, err := strconv.ParseUint(queries.Get("opt_fixed64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptFixed64 = proto.Uint64(v)
				}
				req.OptString = proto.String(queries.Get("opt_string"))
				req.OptBytes = []byte(queries.Get("opt_bytes"))
				if v, err := strconv.ParseFloat(queries.Get("wrap_double"), 64); err != nil {
					return nil, err
				} else {
					req.WrapDouble = wrapperspb.Double(v)
				}
				if v, err := strconv.ParseFloat(queries.Get("wrap_float"), 32); err != nil {
					return nil, err
				} else {
					req.WrapFloat = wrapperspb.Float(float32(v))
				}
				if v, err := strconv.ParseInt(queries.Get("wrap_int64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.WrapInt64 = wrapperspb.Int64(v)
				}
				if v, err := strconv.ParseUint(queries.Get("wrap_uint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.WrapUint64 = wrapperspb.UInt64(v)
				}
				if v, err := strconv.ParseInt(queries.Get("wrap_int32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.WrapInt32 = wrapperspb.Int32(int32(v))
				}
				if v, err := strconv.ParseUint(queries.Get("wrap_uint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.WrapUint32 = wrapperspb.UInt32(uint32(v))
				}
				if v, err := strconv.ParseBool(queries.Get("wrap_bool")); err != nil {
					return nil, err
				} else {
					req.WrapBool = wrapperspb.Bool(v)
				}
				req.WrapString = wrapperspb.String(queries.Get("wrap_string"))
				req.WrapBytes = wrapperspb.Bytes([]byte(queries.Get("wrap_bytes")))
				if v, err := convx.ParseBoolSlice(queries["rep_bool"]); err != nil {
					return nil, err
				} else {
					req.RepBool = v
				}
				if v, err := convx.ParseIntSlice[int32](queries["rep_int32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepInt32 = v
				}
				if v, err := convx.ParseIntSlice[int32](queries["rep_sint32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepSint32 = v
				}
				if v, err := convx.ParseUintSlice[uint32](queries["rep_uint32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepUint32 = v
				}
				if v, err := convx.ParseIntSlice[int64](queries["rep_int64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepInt64 = v
				}
				if v, err := convx.ParseIntSlice[int64](queries["rep_sint64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepSint64 = v
				}
				if v, err := convx.ParseUintSlice[uint64](queries["rep_uint64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepUint64 = v
				}
				if v, err := convx.ParseIntSlice[int32](queries["rep_sfixed32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepSfixed32 = v
				}
				if v, err := convx.ParseUintSlice[uint32](queries["rep_fixed32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepFixed32 = v
				}
				if v, err := convx.ParseFloatSlice[float32](queries["rep_float"], 32); err != nil {
					return nil, err
				} else {
					req.RepFloat = v
				}
				if v, err := convx.ParseIntSlice[int64](queries["rep_sfixed64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepSfixed64 = v
				}
				if v, err := convx.ParseUintSlice[uint64](queries["rep_fixed64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepFixed64 = v
				}
				if v, err := convx.ParseFloatSlice[float64](queries["rep_double"], 32); err != nil {
					return nil, err
				} else {
					req.RepDouble = v
				}
				req.RepString = queries["rep_string"]
				req.RepBytes = convx.ParseBytesSlice(queries["rep_bytes"])
				return req, nil
			},
			func(ctx context.Context, w http1.ResponseWriter, obj any) error {
				resp := obj.(*emptypb.Empty)
				_ = resp
				w.WriteHeader(http1.StatusOK)
				data, err := protojson.Marshal(resp)
				if err != nil {
					return err
				}
				if _, err := w.Write(data); err != nil {
					return err
				}
				return nil
			},
			opts...,
		))
	r.Name("/leo.example.demo.v1.Body/RepFloat64").
		Methods("PUT").
		Path("/v1/rep_double").
		Handler(http.NewServer(
			endpointx.Chain(endpoints.RepFloat64(), mdw...),
			func(ctx context.Context, r *http1.Request) (any, error) {
				req := &BodyRequest{}
				body, err := io.ReadAll(r.Body)
				if err != nil {
					return nil, err
				}
				if v, err := strconv.ParseFloat(string(body), 32); err != nil {
					return nil, err
				} else {
					req.RepDouble = v
				}
				queries := r.URL.Query()
				if v, err := strconv.ParseBool(queries.Get("bool")); err != nil {
					return nil, err
				} else {
					req.Bool = v
				}
				if v, err := strconv.ParseInt(queries.Get("int32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Int32 = int32(v)
				}
				if v, err := strconv.ParseInt(queries.Get("sint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Sint32 = int32(v)
				}
				if v, err := strconv.ParseUint(queries.Get("uint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Uint32 = uint32(v)
				}
				if v, err := strconv.ParseInt(queries.Get("int64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Int64 = v
				}
				if v, err := strconv.ParseInt(queries.Get("sint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Sint64 = v
				}
				if v, err := strconv.ParseUint(queries.Get("uint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Uint64 = v
				}
				if v, err := strconv.ParseInt(queries.Get("sfixed32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Sfixed32 = int32(v)
				}
				if v, err := strconv.ParseUint(queries.Get("fixed32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Fixed32 = uint32(v)
				}
				if v, err := strconv.ParseFloat(queries.Get("float"), 32); err != nil {
					return nil, err
				} else {
					req.Float = float32(v)
				}
				if v, err := strconv.ParseInt(queries.Get("sfixed64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Sfixed64 = v
				}
				if v, err := strconv.ParseUint(queries.Get("fixed64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Fixed64 = v
				}
				if v, err := strconv.ParseFloat(queries.Get("double"), 32); err != nil {
					return nil, err
				} else {
					req.Double = v
				}
				req.String_ = queries.Get("string")
				req.Bytes = []byte(queries.Get("bytes"))
				if v, err := strconv.ParseBool(queries.Get("opt_bool")); err != nil {
					return nil, err
				} else {
					req.OptBool = proto.Bool(v)
				}
				if v, err := strconv.ParseInt(queries.Get("opt_int32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptInt32 = proto.Int32(int32(v))
				}
				if v, err := strconv.ParseInt(queries.Get("opt_sint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptSint32 = proto.Int32(int32(v))
				}
				if v, err := strconv.ParseUint(queries.Get("opt_uint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptUint32 = proto.Uint32(uint32(v))
				}
				if v, err := strconv.ParseInt(queries.Get("opt_int64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptInt64 = proto.Int64(v)
				}
				if v, err := strconv.ParseInt(queries.Get("opt_sint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptSint64 = proto.Int64(v)
				}
				if v, err := strconv.ParseUint(queries.Get("opt_uint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptUint64 = proto.Uint64(v)
				}
				if v, err := strconv.ParseInt(queries.Get("opt_sfixed32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptSfixed32 = proto.Int32(int32(v))
				}
				if v, err := strconv.ParseUint(queries.Get("opt_fixed32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptFixed32 = proto.Uint32(uint32(v))
				}
				if v, err := strconv.ParseFloat(queries.Get("opt_float"), 32); err != nil {
					return nil, err
				} else {
					req.OptFloat = proto.Float32(float32(v))
				}
				if v, err := strconv.ParseInt(queries.Get("opt_sfixed64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptSfixed64 = proto.Int64(v)
				}
				if v, err := strconv.ParseUint(queries.Get("opt_fixed64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptFixed64 = proto.Uint64(v)
				}
				if v, err := strconv.ParseFloat(queries.Get("opt_double"), 32); err != nil {
					return nil, err
				} else {
					req.OptDouble = proto.Float64(v)
				}
				req.OptString = proto.String(queries.Get("opt_string"))
				req.OptBytes = []byte(queries.Get("opt_bytes"))
				if v, err := strconv.ParseFloat(queries.Get("wrap_double"), 64); err != nil {
					return nil, err
				} else {
					req.WrapDouble = wrapperspb.Double(v)
				}
				if v, err := strconv.ParseFloat(queries.Get("wrap_float"), 32); err != nil {
					return nil, err
				} else {
					req.WrapFloat = wrapperspb.Float(float32(v))
				}
				if v, err := strconv.ParseInt(queries.Get("wrap_int64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.WrapInt64 = wrapperspb.Int64(v)
				}
				if v, err := strconv.ParseUint(queries.Get("wrap_uint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.WrapUint64 = wrapperspb.UInt64(v)
				}
				if v, err := strconv.ParseInt(queries.Get("wrap_int32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.WrapInt32 = wrapperspb.Int32(int32(v))
				}
				if v, err := strconv.ParseUint(queries.Get("wrap_uint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.WrapUint32 = wrapperspb.UInt32(uint32(v))
				}
				if v, err := strconv.ParseBool(queries.Get("wrap_bool")); err != nil {
					return nil, err
				} else {
					req.WrapBool = wrapperspb.Bool(v)
				}
				req.WrapString = wrapperspb.String(queries.Get("wrap_string"))
				req.WrapBytes = wrapperspb.Bytes([]byte(queries.Get("wrap_bytes")))
				if v, err := convx.ParseBoolSlice(queries["rep_bool"]); err != nil {
					return nil, err
				} else {
					req.RepBool = v
				}
				if v, err := convx.ParseIntSlice[int32](queries["rep_int32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepInt32 = v
				}
				if v, err := convx.ParseIntSlice[int32](queries["rep_sint32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepSint32 = v
				}
				if v, err := convx.ParseUintSlice[uint32](queries["rep_uint32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepUint32 = v
				}
				if v, err := convx.ParseIntSlice[int64](queries["rep_int64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepInt64 = v
				}
				if v, err := convx.ParseIntSlice[int64](queries["rep_sint64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepSint64 = v
				}
				if v, err := convx.ParseUintSlice[uint64](queries["rep_uint64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepUint64 = v
				}
				if v, err := convx.ParseIntSlice[int32](queries["rep_sfixed32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepSfixed32 = v
				}
				if v, err := convx.ParseUintSlice[uint32](queries["rep_fixed32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepFixed32 = v
				}
				if v, err := convx.ParseFloatSlice[float32](queries["rep_float"], 32); err != nil {
					return nil, err
				} else {
					req.RepFloat = v
				}
				if v, err := convx.ParseIntSlice[int64](queries["rep_sfixed64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepSfixed64 = v
				}
				if v, err := convx.ParseUintSlice[uint64](queries["rep_fixed64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepFixed64 = v
				}
				req.RepString = queries["rep_string"]
				req.RepBytes = convx.ParseBytesSlice(queries["rep_bytes"])
				return req, nil
			},
			func(ctx context.Context, w http1.ResponseWriter, obj any) error {
				resp := obj.(*emptypb.Empty)
				_ = resp
				w.WriteHeader(http1.StatusOK)
				data, err := protojson.Marshal(resp)
				if err != nil {
					return err
				}
				if _, err := w.Write(data); err != nil {
					return err
				}
				return nil
			},
			opts...,
		))
	r.Name("/leo.example.demo.v1.Body/WrapFloat64").
		Methods("PUT").
		Path("/v1/wrap_double").
		Handler(http.NewServer(
			endpointx.Chain(endpoints.WrapFloat64(), mdw...),
			func(ctx context.Context, r *http1.Request) (any, error) {
				req := &BodyRequest{}
				body, err := io.ReadAll(r.Body)
				if err != nil {
					return nil, err
				}
				if v, err := strconv.ParseFloat(string(body), 64); err != nil {
					return nil, err
				} else {
					req.WrapDouble = wrapperspb.Double(v)
				}
				queries := r.URL.Query()
				if v, err := strconv.ParseBool(queries.Get("bool")); err != nil {
					return nil, err
				} else {
					req.Bool = v
				}
				if v, err := strconv.ParseInt(queries.Get("int32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Int32 = int32(v)
				}
				if v, err := strconv.ParseInt(queries.Get("sint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Sint32 = int32(v)
				}
				if v, err := strconv.ParseUint(queries.Get("uint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Uint32 = uint32(v)
				}
				if v, err := strconv.ParseInt(queries.Get("int64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Int64 = v
				}
				if v, err := strconv.ParseInt(queries.Get("sint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Sint64 = v
				}
				if v, err := strconv.ParseUint(queries.Get("uint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Uint64 = v
				}
				if v, err := strconv.ParseInt(queries.Get("sfixed32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Sfixed32 = int32(v)
				}
				if v, err := strconv.ParseUint(queries.Get("fixed32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Fixed32 = uint32(v)
				}
				if v, err := strconv.ParseFloat(queries.Get("float"), 32); err != nil {
					return nil, err
				} else {
					req.Float = float32(v)
				}
				if v, err := strconv.ParseInt(queries.Get("sfixed64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Sfixed64 = v
				}
				if v, err := strconv.ParseUint(queries.Get("fixed64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Fixed64 = v
				}
				if v, err := strconv.ParseFloat(queries.Get("double"), 32); err != nil {
					return nil, err
				} else {
					req.Double = v
				}
				req.String_ = queries.Get("string")
				req.Bytes = []byte(queries.Get("bytes"))
				if v, err := strconv.ParseBool(queries.Get("opt_bool")); err != nil {
					return nil, err
				} else {
					req.OptBool = proto.Bool(v)
				}
				if v, err := strconv.ParseInt(queries.Get("opt_int32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptInt32 = proto.Int32(int32(v))
				}
				if v, err := strconv.ParseInt(queries.Get("opt_sint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptSint32 = proto.Int32(int32(v))
				}
				if v, err := strconv.ParseUint(queries.Get("opt_uint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptUint32 = proto.Uint32(uint32(v))
				}
				if v, err := strconv.ParseInt(queries.Get("opt_int64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptInt64 = proto.Int64(v)
				}
				if v, err := strconv.ParseInt(queries.Get("opt_sint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptSint64 = proto.Int64(v)
				}
				if v, err := strconv.ParseUint(queries.Get("opt_uint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptUint64 = proto.Uint64(v)
				}
				if v, err := strconv.ParseInt(queries.Get("opt_sfixed32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptSfixed32 = proto.Int32(int32(v))
				}
				if v, err := strconv.ParseUint(queries.Get("opt_fixed32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptFixed32 = proto.Uint32(uint32(v))
				}
				if v, err := strconv.ParseFloat(queries.Get("opt_float"), 32); err != nil {
					return nil, err
				} else {
					req.OptFloat = proto.Float32(float32(v))
				}
				if v, err := strconv.ParseInt(queries.Get("opt_sfixed64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptSfixed64 = proto.Int64(v)
				}
				if v, err := strconv.ParseUint(queries.Get("opt_fixed64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptFixed64 = proto.Uint64(v)
				}
				if v, err := strconv.ParseFloat(queries.Get("opt_double"), 32); err != nil {
					return nil, err
				} else {
					req.OptDouble = proto.Float64(v)
				}
				req.OptString = proto.String(queries.Get("opt_string"))
				req.OptBytes = []byte(queries.Get("opt_bytes"))
				if v, err := strconv.ParseFloat(queries.Get("wrap_float"), 32); err != nil {
					return nil, err
				} else {
					req.WrapFloat = wrapperspb.Float(float32(v))
				}
				if v, err := strconv.ParseInt(queries.Get("wrap_int64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.WrapInt64 = wrapperspb.Int64(v)
				}
				if v, err := strconv.ParseUint(queries.Get("wrap_uint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.WrapUint64 = wrapperspb.UInt64(v)
				}
				if v, err := strconv.ParseInt(queries.Get("wrap_int32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.WrapInt32 = wrapperspb.Int32(int32(v))
				}
				if v, err := strconv.ParseUint(queries.Get("wrap_uint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.WrapUint32 = wrapperspb.UInt32(uint32(v))
				}
				if v, err := strconv.ParseBool(queries.Get("wrap_bool")); err != nil {
					return nil, err
				} else {
					req.WrapBool = wrapperspb.Bool(v)
				}
				req.WrapString = wrapperspb.String(queries.Get("wrap_string"))
				req.WrapBytes = wrapperspb.Bytes([]byte(queries.Get("wrap_bytes")))
				if v, err := convx.ParseBoolSlice(queries["rep_bool"]); err != nil {
					return nil, err
				} else {
					req.RepBool = v
				}
				if v, err := convx.ParseIntSlice[int32](queries["rep_int32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepInt32 = v
				}
				if v, err := convx.ParseIntSlice[int32](queries["rep_sint32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepSint32 = v
				}
				if v, err := convx.ParseUintSlice[uint32](queries["rep_uint32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepUint32 = v
				}
				if v, err := convx.ParseIntSlice[int64](queries["rep_int64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepInt64 = v
				}
				if v, err := convx.ParseIntSlice[int64](queries["rep_sint64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepSint64 = v
				}
				if v, err := convx.ParseUintSlice[uint64](queries["rep_uint64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepUint64 = v
				}
				if v, err := convx.ParseIntSlice[int32](queries["rep_sfixed32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepSfixed32 = v
				}
				if v, err := convx.ParseUintSlice[uint32](queries["rep_fixed32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepFixed32 = v
				}
				if v, err := convx.ParseFloatSlice[float32](queries["rep_float"], 32); err != nil {
					return nil, err
				} else {
					req.RepFloat = v
				}
				if v, err := convx.ParseIntSlice[int64](queries["rep_sfixed64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepSfixed64 = v
				}
				if v, err := convx.ParseUintSlice[uint64](queries["rep_fixed64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepFixed64 = v
				}
				if v, err := convx.ParseFloatSlice[float64](queries["rep_double"], 32); err != nil {
					return nil, err
				} else {
					req.RepDouble = v
				}
				req.RepString = queries["rep_string"]
				req.RepBytes = convx.ParseBytesSlice(queries["rep_bytes"])
				return req, nil
			},
			func(ctx context.Context, w http1.ResponseWriter, obj any) error {
				resp := obj.(*emptypb.Empty)
				_ = resp
				w.WriteHeader(http1.StatusOK)
				data, err := protojson.Marshal(resp)
				if err != nil {
					return err
				}
				if _, err := w.Write(data); err != nil {
					return err
				}
				return nil
			},
			opts...,
		))
	r.Name("/leo.example.demo.v1.Body/String").
		Methods("PUT").
		Path("/v1/string").
		Handler(http.NewServer(
			endpointx.Chain(endpoints.String(), mdw...),
			func(ctx context.Context, r *http1.Request) (any, error) {
				req := &BodyRequest{}
				body, err := io.ReadAll(r.Body)
				if err != nil {
					return nil, err
				}
				req.String_ = string(body)
				queries := r.URL.Query()
				if v, err := strconv.ParseBool(queries.Get("bool")); err != nil {
					return nil, err
				} else {
					req.Bool = v
				}
				if v, err := strconv.ParseInt(queries.Get("int32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Int32 = int32(v)
				}
				if v, err := strconv.ParseInt(queries.Get("sint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Sint32 = int32(v)
				}
				if v, err := strconv.ParseUint(queries.Get("uint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Uint32 = uint32(v)
				}
				if v, err := strconv.ParseInt(queries.Get("int64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Int64 = v
				}
				if v, err := strconv.ParseInt(queries.Get("sint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Sint64 = v
				}
				if v, err := strconv.ParseUint(queries.Get("uint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Uint64 = v
				}
				if v, err := strconv.ParseInt(queries.Get("sfixed32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Sfixed32 = int32(v)
				}
				if v, err := strconv.ParseUint(queries.Get("fixed32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Fixed32 = uint32(v)
				}
				if v, err := strconv.ParseFloat(queries.Get("float"), 32); err != nil {
					return nil, err
				} else {
					req.Float = float32(v)
				}
				if v, err := strconv.ParseInt(queries.Get("sfixed64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Sfixed64 = v
				}
				if v, err := strconv.ParseUint(queries.Get("fixed64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Fixed64 = v
				}
				if v, err := strconv.ParseFloat(queries.Get("double"), 32); err != nil {
					return nil, err
				} else {
					req.Double = v
				}
				req.Bytes = []byte(queries.Get("bytes"))
				if v, err := strconv.ParseBool(queries.Get("opt_bool")); err != nil {
					return nil, err
				} else {
					req.OptBool = proto.Bool(v)
				}
				if v, err := strconv.ParseInt(queries.Get("opt_int32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptInt32 = proto.Int32(int32(v))
				}
				if v, err := strconv.ParseInt(queries.Get("opt_sint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptSint32 = proto.Int32(int32(v))
				}
				if v, err := strconv.ParseUint(queries.Get("opt_uint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptUint32 = proto.Uint32(uint32(v))
				}
				if v, err := strconv.ParseInt(queries.Get("opt_int64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptInt64 = proto.Int64(v)
				}
				if v, err := strconv.ParseInt(queries.Get("opt_sint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptSint64 = proto.Int64(v)
				}
				if v, err := strconv.ParseUint(queries.Get("opt_uint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptUint64 = proto.Uint64(v)
				}
				if v, err := strconv.ParseInt(queries.Get("opt_sfixed32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptSfixed32 = proto.Int32(int32(v))
				}
				if v, err := strconv.ParseUint(queries.Get("opt_fixed32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptFixed32 = proto.Uint32(uint32(v))
				}
				if v, err := strconv.ParseFloat(queries.Get("opt_float"), 32); err != nil {
					return nil, err
				} else {
					req.OptFloat = proto.Float32(float32(v))
				}
				if v, err := strconv.ParseInt(queries.Get("opt_sfixed64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptSfixed64 = proto.Int64(v)
				}
				if v, err := strconv.ParseUint(queries.Get("opt_fixed64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptFixed64 = proto.Uint64(v)
				}
				if v, err := strconv.ParseFloat(queries.Get("opt_double"), 32); err != nil {
					return nil, err
				} else {
					req.OptDouble = proto.Float64(v)
				}
				req.OptString = proto.String(queries.Get("opt_string"))
				req.OptBytes = []byte(queries.Get("opt_bytes"))
				if v, err := strconv.ParseFloat(queries.Get("wrap_double"), 64); err != nil {
					return nil, err
				} else {
					req.WrapDouble = wrapperspb.Double(v)
				}
				if v, err := strconv.ParseFloat(queries.Get("wrap_float"), 32); err != nil {
					return nil, err
				} else {
					req.WrapFloat = wrapperspb.Float(float32(v))
				}
				if v, err := strconv.ParseInt(queries.Get("wrap_int64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.WrapInt64 = wrapperspb.Int64(v)
				}
				if v, err := strconv.ParseUint(queries.Get("wrap_uint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.WrapUint64 = wrapperspb.UInt64(v)
				}
				if v, err := strconv.ParseInt(queries.Get("wrap_int32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.WrapInt32 = wrapperspb.Int32(int32(v))
				}
				if v, err := strconv.ParseUint(queries.Get("wrap_uint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.WrapUint32 = wrapperspb.UInt32(uint32(v))
				}
				if v, err := strconv.ParseBool(queries.Get("wrap_bool")); err != nil {
					return nil, err
				} else {
					req.WrapBool = wrapperspb.Bool(v)
				}
				req.WrapString = wrapperspb.String(queries.Get("wrap_string"))
				req.WrapBytes = wrapperspb.Bytes([]byte(queries.Get("wrap_bytes")))
				if v, err := convx.ParseBoolSlice(queries["rep_bool"]); err != nil {
					return nil, err
				} else {
					req.RepBool = v
				}
				if v, err := convx.ParseIntSlice[int32](queries["rep_int32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepInt32 = v
				}
				if v, err := convx.ParseIntSlice[int32](queries["rep_sint32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepSint32 = v
				}
				if v, err := convx.ParseUintSlice[uint32](queries["rep_uint32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepUint32 = v
				}
				if v, err := convx.ParseIntSlice[int64](queries["rep_int64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepInt64 = v
				}
				if v, err := convx.ParseIntSlice[int64](queries["rep_sint64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepSint64 = v
				}
				if v, err := convx.ParseUintSlice[uint64](queries["rep_uint64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepUint64 = v
				}
				if v, err := convx.ParseIntSlice[int32](queries["rep_sfixed32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepSfixed32 = v
				}
				if v, err := convx.ParseUintSlice[uint32](queries["rep_fixed32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepFixed32 = v
				}
				if v, err := convx.ParseFloatSlice[float32](queries["rep_float"], 32); err != nil {
					return nil, err
				} else {
					req.RepFloat = v
				}
				if v, err := convx.ParseIntSlice[int64](queries["rep_sfixed64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepSfixed64 = v
				}
				if v, err := convx.ParseUintSlice[uint64](queries["rep_fixed64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepFixed64 = v
				}
				if v, err := convx.ParseFloatSlice[float64](queries["rep_double"], 32); err != nil {
					return nil, err
				} else {
					req.RepDouble = v
				}
				req.RepString = queries["rep_string"]
				req.RepBytes = convx.ParseBytesSlice(queries["rep_bytes"])
				return req, nil
			},
			func(ctx context.Context, w http1.ResponseWriter, obj any) error {
				resp := obj.(*emptypb.Empty)
				_ = resp
				w.WriteHeader(http1.StatusOK)
				data, err := protojson.Marshal(resp)
				if err != nil {
					return err
				}
				if _, err := w.Write(data); err != nil {
					return err
				}
				return nil
			},
			opts...,
		))
	r.Name("/leo.example.demo.v1.Body/OptString").
		Methods("PUT").
		Path("/v1/opt_string").
		Handler(http.NewServer(
			endpointx.Chain(endpoints.OptString(), mdw...),
			func(ctx context.Context, r *http1.Request) (any, error) {
				req := &BodyRequest{}
				body, err := io.ReadAll(r.Body)
				if err != nil {
					return nil, err
				}
				req.OptString = proto.String(string(body))
				queries := r.URL.Query()
				if v, err := strconv.ParseBool(queries.Get("bool")); err != nil {
					return nil, err
				} else {
					req.Bool = v
				}
				if v, err := strconv.ParseInt(queries.Get("int32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Int32 = int32(v)
				}
				if v, err := strconv.ParseInt(queries.Get("sint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Sint32 = int32(v)
				}
				if v, err := strconv.ParseUint(queries.Get("uint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Uint32 = uint32(v)
				}
				if v, err := strconv.ParseInt(queries.Get("int64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Int64 = v
				}
				if v, err := strconv.ParseInt(queries.Get("sint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Sint64 = v
				}
				if v, err := strconv.ParseUint(queries.Get("uint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Uint64 = v
				}
				if v, err := strconv.ParseInt(queries.Get("sfixed32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Sfixed32 = int32(v)
				}
				if v, err := strconv.ParseUint(queries.Get("fixed32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Fixed32 = uint32(v)
				}
				if v, err := strconv.ParseFloat(queries.Get("float"), 32); err != nil {
					return nil, err
				} else {
					req.Float = float32(v)
				}
				if v, err := strconv.ParseInt(queries.Get("sfixed64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Sfixed64 = v
				}
				if v, err := strconv.ParseUint(queries.Get("fixed64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Fixed64 = v
				}
				if v, err := strconv.ParseFloat(queries.Get("double"), 32); err != nil {
					return nil, err
				} else {
					req.Double = v
				}
				req.String_ = queries.Get("string")
				req.Bytes = []byte(queries.Get("bytes"))
				if v, err := strconv.ParseBool(queries.Get("opt_bool")); err != nil {
					return nil, err
				} else {
					req.OptBool = proto.Bool(v)
				}
				if v, err := strconv.ParseInt(queries.Get("opt_int32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptInt32 = proto.Int32(int32(v))
				}
				if v, err := strconv.ParseInt(queries.Get("opt_sint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptSint32 = proto.Int32(int32(v))
				}
				if v, err := strconv.ParseUint(queries.Get("opt_uint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptUint32 = proto.Uint32(uint32(v))
				}
				if v, err := strconv.ParseInt(queries.Get("opt_int64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptInt64 = proto.Int64(v)
				}
				if v, err := strconv.ParseInt(queries.Get("opt_sint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptSint64 = proto.Int64(v)
				}
				if v, err := strconv.ParseUint(queries.Get("opt_uint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptUint64 = proto.Uint64(v)
				}
				if v, err := strconv.ParseInt(queries.Get("opt_sfixed32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptSfixed32 = proto.Int32(int32(v))
				}
				if v, err := strconv.ParseUint(queries.Get("opt_fixed32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptFixed32 = proto.Uint32(uint32(v))
				}
				if v, err := strconv.ParseFloat(queries.Get("opt_float"), 32); err != nil {
					return nil, err
				} else {
					req.OptFloat = proto.Float32(float32(v))
				}
				if v, err := strconv.ParseInt(queries.Get("opt_sfixed64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptSfixed64 = proto.Int64(v)
				}
				if v, err := strconv.ParseUint(queries.Get("opt_fixed64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptFixed64 = proto.Uint64(v)
				}
				if v, err := strconv.ParseFloat(queries.Get("opt_double"), 32); err != nil {
					return nil, err
				} else {
					req.OptDouble = proto.Float64(v)
				}
				req.OptBytes = []byte(queries.Get("opt_bytes"))
				if v, err := strconv.ParseFloat(queries.Get("wrap_double"), 64); err != nil {
					return nil, err
				} else {
					req.WrapDouble = wrapperspb.Double(v)
				}
				if v, err := strconv.ParseFloat(queries.Get("wrap_float"), 32); err != nil {
					return nil, err
				} else {
					req.WrapFloat = wrapperspb.Float(float32(v))
				}
				if v, err := strconv.ParseInt(queries.Get("wrap_int64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.WrapInt64 = wrapperspb.Int64(v)
				}
				if v, err := strconv.ParseUint(queries.Get("wrap_uint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.WrapUint64 = wrapperspb.UInt64(v)
				}
				if v, err := strconv.ParseInt(queries.Get("wrap_int32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.WrapInt32 = wrapperspb.Int32(int32(v))
				}
				if v, err := strconv.ParseUint(queries.Get("wrap_uint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.WrapUint32 = wrapperspb.UInt32(uint32(v))
				}
				if v, err := strconv.ParseBool(queries.Get("wrap_bool")); err != nil {
					return nil, err
				} else {
					req.WrapBool = wrapperspb.Bool(v)
				}
				req.WrapString = wrapperspb.String(queries.Get("wrap_string"))
				req.WrapBytes = wrapperspb.Bytes([]byte(queries.Get("wrap_bytes")))
				if v, err := convx.ParseBoolSlice(queries["rep_bool"]); err != nil {
					return nil, err
				} else {
					req.RepBool = v
				}
				if v, err := convx.ParseIntSlice[int32](queries["rep_int32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepInt32 = v
				}
				if v, err := convx.ParseIntSlice[int32](queries["rep_sint32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepSint32 = v
				}
				if v, err := convx.ParseUintSlice[uint32](queries["rep_uint32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepUint32 = v
				}
				if v, err := convx.ParseIntSlice[int64](queries["rep_int64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepInt64 = v
				}
				if v, err := convx.ParseIntSlice[int64](queries["rep_sint64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepSint64 = v
				}
				if v, err := convx.ParseUintSlice[uint64](queries["rep_uint64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepUint64 = v
				}
				if v, err := convx.ParseIntSlice[int32](queries["rep_sfixed32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepSfixed32 = v
				}
				if v, err := convx.ParseUintSlice[uint32](queries["rep_fixed32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepFixed32 = v
				}
				if v, err := convx.ParseFloatSlice[float32](queries["rep_float"], 32); err != nil {
					return nil, err
				} else {
					req.RepFloat = v
				}
				if v, err := convx.ParseIntSlice[int64](queries["rep_sfixed64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepSfixed64 = v
				}
				if v, err := convx.ParseUintSlice[uint64](queries["rep_fixed64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepFixed64 = v
				}
				if v, err := convx.ParseFloatSlice[float64](queries["rep_double"], 32); err != nil {
					return nil, err
				} else {
					req.RepDouble = v
				}
				req.RepString = queries["rep_string"]
				req.RepBytes = convx.ParseBytesSlice(queries["rep_bytes"])
				return req, nil
			},
			func(ctx context.Context, w http1.ResponseWriter, obj any) error {
				resp := obj.(*emptypb.Empty)
				_ = resp
				w.WriteHeader(http1.StatusOK)
				data, err := protojson.Marshal(resp)
				if err != nil {
					return err
				}
				if _, err := w.Write(data); err != nil {
					return err
				}
				return nil
			},
			opts...,
		))
	r.Name("/leo.example.demo.v1.Body/RepString").
		Methods("PUT").
		Path("/v1/rep_string").
		Handler(http.NewServer(
			endpointx.Chain(endpoints.RepString(), mdw...),
			func(ctx context.Context, r *http1.Request) (any, error) {
				req := &BodyRequest{}
				body, err := io.ReadAll(r.Body)
				if err != nil {
					return nil, err
				}
				req.RepString = string(body)
				queries := r.URL.Query()
				if v, err := strconv.ParseBool(queries.Get("bool")); err != nil {
					return nil, err
				} else {
					req.Bool = v
				}
				if v, err := strconv.ParseInt(queries.Get("int32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Int32 = int32(v)
				}
				if v, err := strconv.ParseInt(queries.Get("sint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Sint32 = int32(v)
				}
				if v, err := strconv.ParseUint(queries.Get("uint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Uint32 = uint32(v)
				}
				if v, err := strconv.ParseInt(queries.Get("int64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Int64 = v
				}
				if v, err := strconv.ParseInt(queries.Get("sint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Sint64 = v
				}
				if v, err := strconv.ParseUint(queries.Get("uint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Uint64 = v
				}
				if v, err := strconv.ParseInt(queries.Get("sfixed32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Sfixed32 = int32(v)
				}
				if v, err := strconv.ParseUint(queries.Get("fixed32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Fixed32 = uint32(v)
				}
				if v, err := strconv.ParseFloat(queries.Get("float"), 32); err != nil {
					return nil, err
				} else {
					req.Float = float32(v)
				}
				if v, err := strconv.ParseInt(queries.Get("sfixed64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Sfixed64 = v
				}
				if v, err := strconv.ParseUint(queries.Get("fixed64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Fixed64 = v
				}
				if v, err := strconv.ParseFloat(queries.Get("double"), 32); err != nil {
					return nil, err
				} else {
					req.Double = v
				}
				req.String_ = queries.Get("string")
				req.Bytes = []byte(queries.Get("bytes"))
				if v, err := strconv.ParseBool(queries.Get("opt_bool")); err != nil {
					return nil, err
				} else {
					req.OptBool = proto.Bool(v)
				}
				if v, err := strconv.ParseInt(queries.Get("opt_int32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptInt32 = proto.Int32(int32(v))
				}
				if v, err := strconv.ParseInt(queries.Get("opt_sint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptSint32 = proto.Int32(int32(v))
				}
				if v, err := strconv.ParseUint(queries.Get("opt_uint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptUint32 = proto.Uint32(uint32(v))
				}
				if v, err := strconv.ParseInt(queries.Get("opt_int64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptInt64 = proto.Int64(v)
				}
				if v, err := strconv.ParseInt(queries.Get("opt_sint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptSint64 = proto.Int64(v)
				}
				if v, err := strconv.ParseUint(queries.Get("opt_uint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptUint64 = proto.Uint64(v)
				}
				if v, err := strconv.ParseInt(queries.Get("opt_sfixed32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptSfixed32 = proto.Int32(int32(v))
				}
				if v, err := strconv.ParseUint(queries.Get("opt_fixed32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptFixed32 = proto.Uint32(uint32(v))
				}
				if v, err := strconv.ParseFloat(queries.Get("opt_float"), 32); err != nil {
					return nil, err
				} else {
					req.OptFloat = proto.Float32(float32(v))
				}
				if v, err := strconv.ParseInt(queries.Get("opt_sfixed64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptSfixed64 = proto.Int64(v)
				}
				if v, err := strconv.ParseUint(queries.Get("opt_fixed64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptFixed64 = proto.Uint64(v)
				}
				if v, err := strconv.ParseFloat(queries.Get("opt_double"), 32); err != nil {
					return nil, err
				} else {
					req.OptDouble = proto.Float64(v)
				}
				req.OptString = proto.String(queries.Get("opt_string"))
				req.OptBytes = []byte(queries.Get("opt_bytes"))
				if v, err := strconv.ParseFloat(queries.Get("wrap_double"), 64); err != nil {
					return nil, err
				} else {
					req.WrapDouble = wrapperspb.Double(v)
				}
				if v, err := strconv.ParseFloat(queries.Get("wrap_float"), 32); err != nil {
					return nil, err
				} else {
					req.WrapFloat = wrapperspb.Float(float32(v))
				}
				if v, err := strconv.ParseInt(queries.Get("wrap_int64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.WrapInt64 = wrapperspb.Int64(v)
				}
				if v, err := strconv.ParseUint(queries.Get("wrap_uint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.WrapUint64 = wrapperspb.UInt64(v)
				}
				if v, err := strconv.ParseInt(queries.Get("wrap_int32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.WrapInt32 = wrapperspb.Int32(int32(v))
				}
				if v, err := strconv.ParseUint(queries.Get("wrap_uint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.WrapUint32 = wrapperspb.UInt32(uint32(v))
				}
				if v, err := strconv.ParseBool(queries.Get("wrap_bool")); err != nil {
					return nil, err
				} else {
					req.WrapBool = wrapperspb.Bool(v)
				}
				req.WrapString = wrapperspb.String(queries.Get("wrap_string"))
				req.WrapBytes = wrapperspb.Bytes([]byte(queries.Get("wrap_bytes")))
				if v, err := convx.ParseBoolSlice(queries["rep_bool"]); err != nil {
					return nil, err
				} else {
					req.RepBool = v
				}
				if v, err := convx.ParseIntSlice[int32](queries["rep_int32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepInt32 = v
				}
				if v, err := convx.ParseIntSlice[int32](queries["rep_sint32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepSint32 = v
				}
				if v, err := convx.ParseUintSlice[uint32](queries["rep_uint32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepUint32 = v
				}
				if v, err := convx.ParseIntSlice[int64](queries["rep_int64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepInt64 = v
				}
				if v, err := convx.ParseIntSlice[int64](queries["rep_sint64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepSint64 = v
				}
				if v, err := convx.ParseUintSlice[uint64](queries["rep_uint64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepUint64 = v
				}
				if v, err := convx.ParseIntSlice[int32](queries["rep_sfixed32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepSfixed32 = v
				}
				if v, err := convx.ParseUintSlice[uint32](queries["rep_fixed32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepFixed32 = v
				}
				if v, err := convx.ParseFloatSlice[float32](queries["rep_float"], 32); err != nil {
					return nil, err
				} else {
					req.RepFloat = v
				}
				if v, err := convx.ParseIntSlice[int64](queries["rep_sfixed64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepSfixed64 = v
				}
				if v, err := convx.ParseUintSlice[uint64](queries["rep_fixed64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepFixed64 = v
				}
				if v, err := convx.ParseFloatSlice[float64](queries["rep_double"], 32); err != nil {
					return nil, err
				} else {
					req.RepDouble = v
				}
				req.RepBytes = convx.ParseBytesSlice(queries["rep_bytes"])
				return req, nil
			},
			func(ctx context.Context, w http1.ResponseWriter, obj any) error {
				resp := obj.(*emptypb.Empty)
				_ = resp
				w.WriteHeader(http1.StatusOK)
				data, err := protojson.Marshal(resp)
				if err != nil {
					return err
				}
				if _, err := w.Write(data); err != nil {
					return err
				}
				return nil
			},
			opts...,
		))
	r.Name("/leo.example.demo.v1.Body/WrapString").
		Methods("PUT").
		Path("/v1/wrap_string").
		Handler(http.NewServer(
			endpointx.Chain(endpoints.WrapString(), mdw...),
			func(ctx context.Context, r *http1.Request) (any, error) {
				req := &BodyRequest{}
				body, err := io.ReadAll(r.Body)
				if err != nil {
					return nil, err
				}
				req.WrapString = wrapperspb.String(string(body))
				queries := r.URL.Query()
				if v, err := strconv.ParseBool(queries.Get("bool")); err != nil {
					return nil, err
				} else {
					req.Bool = v
				}
				if v, err := strconv.ParseInt(queries.Get("int32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Int32 = int32(v)
				}
				if v, err := strconv.ParseInt(queries.Get("sint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Sint32 = int32(v)
				}
				if v, err := strconv.ParseUint(queries.Get("uint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Uint32 = uint32(v)
				}
				if v, err := strconv.ParseInt(queries.Get("int64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Int64 = v
				}
				if v, err := strconv.ParseInt(queries.Get("sint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Sint64 = v
				}
				if v, err := strconv.ParseUint(queries.Get("uint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Uint64 = v
				}
				if v, err := strconv.ParseInt(queries.Get("sfixed32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Sfixed32 = int32(v)
				}
				if v, err := strconv.ParseUint(queries.Get("fixed32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Fixed32 = uint32(v)
				}
				if v, err := strconv.ParseFloat(queries.Get("float"), 32); err != nil {
					return nil, err
				} else {
					req.Float = float32(v)
				}
				if v, err := strconv.ParseInt(queries.Get("sfixed64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Sfixed64 = v
				}
				if v, err := strconv.ParseUint(queries.Get("fixed64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Fixed64 = v
				}
				if v, err := strconv.ParseFloat(queries.Get("double"), 32); err != nil {
					return nil, err
				} else {
					req.Double = v
				}
				req.String_ = queries.Get("string")
				req.Bytes = []byte(queries.Get("bytes"))
				if v, err := strconv.ParseBool(queries.Get("opt_bool")); err != nil {
					return nil, err
				} else {
					req.OptBool = proto.Bool(v)
				}
				if v, err := strconv.ParseInt(queries.Get("opt_int32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptInt32 = proto.Int32(int32(v))
				}
				if v, err := strconv.ParseInt(queries.Get("opt_sint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptSint32 = proto.Int32(int32(v))
				}
				if v, err := strconv.ParseUint(queries.Get("opt_uint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptUint32 = proto.Uint32(uint32(v))
				}
				if v, err := strconv.ParseInt(queries.Get("opt_int64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptInt64 = proto.Int64(v)
				}
				if v, err := strconv.ParseInt(queries.Get("opt_sint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptSint64 = proto.Int64(v)
				}
				if v, err := strconv.ParseUint(queries.Get("opt_uint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptUint64 = proto.Uint64(v)
				}
				if v, err := strconv.ParseInt(queries.Get("opt_sfixed32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptSfixed32 = proto.Int32(int32(v))
				}
				if v, err := strconv.ParseUint(queries.Get("opt_fixed32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptFixed32 = proto.Uint32(uint32(v))
				}
				if v, err := strconv.ParseFloat(queries.Get("opt_float"), 32); err != nil {
					return nil, err
				} else {
					req.OptFloat = proto.Float32(float32(v))
				}
				if v, err := strconv.ParseInt(queries.Get("opt_sfixed64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptSfixed64 = proto.Int64(v)
				}
				if v, err := strconv.ParseUint(queries.Get("opt_fixed64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptFixed64 = proto.Uint64(v)
				}
				if v, err := strconv.ParseFloat(queries.Get("opt_double"), 32); err != nil {
					return nil, err
				} else {
					req.OptDouble = proto.Float64(v)
				}
				req.OptString = proto.String(queries.Get("opt_string"))
				req.OptBytes = []byte(queries.Get("opt_bytes"))
				if v, err := strconv.ParseFloat(queries.Get("wrap_double"), 64); err != nil {
					return nil, err
				} else {
					req.WrapDouble = wrapperspb.Double(v)
				}
				if v, err := strconv.ParseFloat(queries.Get("wrap_float"), 32); err != nil {
					return nil, err
				} else {
					req.WrapFloat = wrapperspb.Float(float32(v))
				}
				if v, err := strconv.ParseInt(queries.Get("wrap_int64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.WrapInt64 = wrapperspb.Int64(v)
				}
				if v, err := strconv.ParseUint(queries.Get("wrap_uint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.WrapUint64 = wrapperspb.UInt64(v)
				}
				if v, err := strconv.ParseInt(queries.Get("wrap_int32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.WrapInt32 = wrapperspb.Int32(int32(v))
				}
				if v, err := strconv.ParseUint(queries.Get("wrap_uint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.WrapUint32 = wrapperspb.UInt32(uint32(v))
				}
				if v, err := strconv.ParseBool(queries.Get("wrap_bool")); err != nil {
					return nil, err
				} else {
					req.WrapBool = wrapperspb.Bool(v)
				}
				req.WrapBytes = wrapperspb.Bytes([]byte(queries.Get("wrap_bytes")))
				if v, err := convx.ParseBoolSlice(queries["rep_bool"]); err != nil {
					return nil, err
				} else {
					req.RepBool = v
				}
				if v, err := convx.ParseIntSlice[int32](queries["rep_int32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepInt32 = v
				}
				if v, err := convx.ParseIntSlice[int32](queries["rep_sint32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepSint32 = v
				}
				if v, err := convx.ParseUintSlice[uint32](queries["rep_uint32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepUint32 = v
				}
				if v, err := convx.ParseIntSlice[int64](queries["rep_int64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepInt64 = v
				}
				if v, err := convx.ParseIntSlice[int64](queries["rep_sint64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepSint64 = v
				}
				if v, err := convx.ParseUintSlice[uint64](queries["rep_uint64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepUint64 = v
				}
				if v, err := convx.ParseIntSlice[int32](queries["rep_sfixed32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepSfixed32 = v
				}
				if v, err := convx.ParseUintSlice[uint32](queries["rep_fixed32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepFixed32 = v
				}
				if v, err := convx.ParseFloatSlice[float32](queries["rep_float"], 32); err != nil {
					return nil, err
				} else {
					req.RepFloat = v
				}
				if v, err := convx.ParseIntSlice[int64](queries["rep_sfixed64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepSfixed64 = v
				}
				if v, err := convx.ParseUintSlice[uint64](queries["rep_fixed64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepFixed64 = v
				}
				if v, err := convx.ParseFloatSlice[float64](queries["rep_double"], 32); err != nil {
					return nil, err
				} else {
					req.RepDouble = v
				}
				req.RepString = queries["rep_string"]
				req.RepBytes = convx.ParseBytesSlice(queries["rep_bytes"])
				return req, nil
			},
			func(ctx context.Context, w http1.ResponseWriter, obj any) error {
				resp := obj.(*emptypb.Empty)
				_ = resp
				w.WriteHeader(http1.StatusOK)
				data, err := protojson.Marshal(resp)
				if err != nil {
					return err
				}
				if _, err := w.Write(data); err != nil {
					return err
				}
				return nil
			},
			opts...,
		))
	r.Name("/leo.example.demo.v1.Body/Bytes").
		Methods("PUT").
		Path("/v1/bytes").
		Handler(http.NewServer(
			endpointx.Chain(endpoints.Bytes(), mdw...),
			func(ctx context.Context, r *http1.Request) (any, error) {
				req := &BodyRequest{}
				body, err := io.ReadAll(r.Body)
				if err != nil {
					return nil, err
				}
				req.Bytes = []byte(string(body))
				queries := r.URL.Query()
				if v, err := strconv.ParseBool(queries.Get("bool")); err != nil {
					return nil, err
				} else {
					req.Bool = v
				}
				if v, err := strconv.ParseInt(queries.Get("int32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Int32 = int32(v)
				}
				if v, err := strconv.ParseInt(queries.Get("sint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Sint32 = int32(v)
				}
				if v, err := strconv.ParseUint(queries.Get("uint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Uint32 = uint32(v)
				}
				if v, err := strconv.ParseInt(queries.Get("int64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Int64 = v
				}
				if v, err := strconv.ParseInt(queries.Get("sint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Sint64 = v
				}
				if v, err := strconv.ParseUint(queries.Get("uint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Uint64 = v
				}
				if v, err := strconv.ParseInt(queries.Get("sfixed32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Sfixed32 = int32(v)
				}
				if v, err := strconv.ParseUint(queries.Get("fixed32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Fixed32 = uint32(v)
				}
				if v, err := strconv.ParseFloat(queries.Get("float"), 32); err != nil {
					return nil, err
				} else {
					req.Float = float32(v)
				}
				if v, err := strconv.ParseInt(queries.Get("sfixed64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Sfixed64 = v
				}
				if v, err := strconv.ParseUint(queries.Get("fixed64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Fixed64 = v
				}
				if v, err := strconv.ParseFloat(queries.Get("double"), 32); err != nil {
					return nil, err
				} else {
					req.Double = v
				}
				req.String_ = queries.Get("string")
				if v, err := strconv.ParseBool(queries.Get("opt_bool")); err != nil {
					return nil, err
				} else {
					req.OptBool = proto.Bool(v)
				}
				if v, err := strconv.ParseInt(queries.Get("opt_int32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptInt32 = proto.Int32(int32(v))
				}
				if v, err := strconv.ParseInt(queries.Get("opt_sint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptSint32 = proto.Int32(int32(v))
				}
				if v, err := strconv.ParseUint(queries.Get("opt_uint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptUint32 = proto.Uint32(uint32(v))
				}
				if v, err := strconv.ParseInt(queries.Get("opt_int64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptInt64 = proto.Int64(v)
				}
				if v, err := strconv.ParseInt(queries.Get("opt_sint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptSint64 = proto.Int64(v)
				}
				if v, err := strconv.ParseUint(queries.Get("opt_uint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptUint64 = proto.Uint64(v)
				}
				if v, err := strconv.ParseInt(queries.Get("opt_sfixed32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptSfixed32 = proto.Int32(int32(v))
				}
				if v, err := strconv.ParseUint(queries.Get("opt_fixed32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptFixed32 = proto.Uint32(uint32(v))
				}
				if v, err := strconv.ParseFloat(queries.Get("opt_float"), 32); err != nil {
					return nil, err
				} else {
					req.OptFloat = proto.Float32(float32(v))
				}
				if v, err := strconv.ParseInt(queries.Get("opt_sfixed64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptSfixed64 = proto.Int64(v)
				}
				if v, err := strconv.ParseUint(queries.Get("opt_fixed64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptFixed64 = proto.Uint64(v)
				}
				if v, err := strconv.ParseFloat(queries.Get("opt_double"), 32); err != nil {
					return nil, err
				} else {
					req.OptDouble = proto.Float64(v)
				}
				req.OptString = proto.String(queries.Get("opt_string"))
				req.OptBytes = []byte(queries.Get("opt_bytes"))
				if v, err := strconv.ParseFloat(queries.Get("wrap_double"), 64); err != nil {
					return nil, err
				} else {
					req.WrapDouble = wrapperspb.Double(v)
				}
				if v, err := strconv.ParseFloat(queries.Get("wrap_float"), 32); err != nil {
					return nil, err
				} else {
					req.WrapFloat = wrapperspb.Float(float32(v))
				}
				if v, err := strconv.ParseInt(queries.Get("wrap_int64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.WrapInt64 = wrapperspb.Int64(v)
				}
				if v, err := strconv.ParseUint(queries.Get("wrap_uint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.WrapUint64 = wrapperspb.UInt64(v)
				}
				if v, err := strconv.ParseInt(queries.Get("wrap_int32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.WrapInt32 = wrapperspb.Int32(int32(v))
				}
				if v, err := strconv.ParseUint(queries.Get("wrap_uint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.WrapUint32 = wrapperspb.UInt32(uint32(v))
				}
				if v, err := strconv.ParseBool(queries.Get("wrap_bool")); err != nil {
					return nil, err
				} else {
					req.WrapBool = wrapperspb.Bool(v)
				}
				req.WrapString = wrapperspb.String(queries.Get("wrap_string"))
				req.WrapBytes = wrapperspb.Bytes([]byte(queries.Get("wrap_bytes")))
				if v, err := convx.ParseBoolSlice(queries["rep_bool"]); err != nil {
					return nil, err
				} else {
					req.RepBool = v
				}
				if v, err := convx.ParseIntSlice[int32](queries["rep_int32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepInt32 = v
				}
				if v, err := convx.ParseIntSlice[int32](queries["rep_sint32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepSint32 = v
				}
				if v, err := convx.ParseUintSlice[uint32](queries["rep_uint32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepUint32 = v
				}
				if v, err := convx.ParseIntSlice[int64](queries["rep_int64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepInt64 = v
				}
				if v, err := convx.ParseIntSlice[int64](queries["rep_sint64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepSint64 = v
				}
				if v, err := convx.ParseUintSlice[uint64](queries["rep_uint64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepUint64 = v
				}
				if v, err := convx.ParseIntSlice[int32](queries["rep_sfixed32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepSfixed32 = v
				}
				if v, err := convx.ParseUintSlice[uint32](queries["rep_fixed32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepFixed32 = v
				}
				if v, err := convx.ParseFloatSlice[float32](queries["rep_float"], 32); err != nil {
					return nil, err
				} else {
					req.RepFloat = v
				}
				if v, err := convx.ParseIntSlice[int64](queries["rep_sfixed64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepSfixed64 = v
				}
				if v, err := convx.ParseUintSlice[uint64](queries["rep_fixed64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepFixed64 = v
				}
				if v, err := convx.ParseFloatSlice[float64](queries["rep_double"], 32); err != nil {
					return nil, err
				} else {
					req.RepDouble = v
				}
				req.RepString = queries["rep_string"]
				req.RepBytes = convx.ParseBytesSlice(queries["rep_bytes"])
				return req, nil
			},
			func(ctx context.Context, w http1.ResponseWriter, obj any) error {
				resp := obj.(*emptypb.Empty)
				_ = resp
				w.WriteHeader(http1.StatusOK)
				data, err := protojson.Marshal(resp)
				if err != nil {
					return err
				}
				if _, err := w.Write(data); err != nil {
					return err
				}
				return nil
			},
			opts...,
		))
	r.Name("/leo.example.demo.v1.Body/OptBytes").
		Methods("PUT").
		Path("/v1/opt_bytes").
		Handler(http.NewServer(
			endpointx.Chain(endpoints.OptBytes(), mdw...),
			func(ctx context.Context, r *http1.Request) (any, error) {
				req := &BodyRequest{}
				body, err := io.ReadAll(r.Body)
				if err != nil {
					return nil, err
				}
				req.OptBytes = []byte(string(body))
				queries := r.URL.Query()
				if v, err := strconv.ParseBool(queries.Get("bool")); err != nil {
					return nil, err
				} else {
					req.Bool = v
				}
				if v, err := strconv.ParseInt(queries.Get("int32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Int32 = int32(v)
				}
				if v, err := strconv.ParseInt(queries.Get("sint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Sint32 = int32(v)
				}
				if v, err := strconv.ParseUint(queries.Get("uint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Uint32 = uint32(v)
				}
				if v, err := strconv.ParseInt(queries.Get("int64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Int64 = v
				}
				if v, err := strconv.ParseInt(queries.Get("sint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Sint64 = v
				}
				if v, err := strconv.ParseUint(queries.Get("uint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Uint64 = v
				}
				if v, err := strconv.ParseInt(queries.Get("sfixed32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Sfixed32 = int32(v)
				}
				if v, err := strconv.ParseUint(queries.Get("fixed32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Fixed32 = uint32(v)
				}
				if v, err := strconv.ParseFloat(queries.Get("float"), 32); err != nil {
					return nil, err
				} else {
					req.Float = float32(v)
				}
				if v, err := strconv.ParseInt(queries.Get("sfixed64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Sfixed64 = v
				}
				if v, err := strconv.ParseUint(queries.Get("fixed64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Fixed64 = v
				}
				if v, err := strconv.ParseFloat(queries.Get("double"), 32); err != nil {
					return nil, err
				} else {
					req.Double = v
				}
				req.String_ = queries.Get("string")
				req.Bytes = []byte(queries.Get("bytes"))
				if v, err := strconv.ParseBool(queries.Get("opt_bool")); err != nil {
					return nil, err
				} else {
					req.OptBool = proto.Bool(v)
				}
				if v, err := strconv.ParseInt(queries.Get("opt_int32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptInt32 = proto.Int32(int32(v))
				}
				if v, err := strconv.ParseInt(queries.Get("opt_sint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptSint32 = proto.Int32(int32(v))
				}
				if v, err := strconv.ParseUint(queries.Get("opt_uint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptUint32 = proto.Uint32(uint32(v))
				}
				if v, err := strconv.ParseInt(queries.Get("opt_int64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptInt64 = proto.Int64(v)
				}
				if v, err := strconv.ParseInt(queries.Get("opt_sint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptSint64 = proto.Int64(v)
				}
				if v, err := strconv.ParseUint(queries.Get("opt_uint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptUint64 = proto.Uint64(v)
				}
				if v, err := strconv.ParseInt(queries.Get("opt_sfixed32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptSfixed32 = proto.Int32(int32(v))
				}
				if v, err := strconv.ParseUint(queries.Get("opt_fixed32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptFixed32 = proto.Uint32(uint32(v))
				}
				if v, err := strconv.ParseFloat(queries.Get("opt_float"), 32); err != nil {
					return nil, err
				} else {
					req.OptFloat = proto.Float32(float32(v))
				}
				if v, err := strconv.ParseInt(queries.Get("opt_sfixed64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptSfixed64 = proto.Int64(v)
				}
				if v, err := strconv.ParseUint(queries.Get("opt_fixed64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptFixed64 = proto.Uint64(v)
				}
				if v, err := strconv.ParseFloat(queries.Get("opt_double"), 32); err != nil {
					return nil, err
				} else {
					req.OptDouble = proto.Float64(v)
				}
				req.OptString = proto.String(queries.Get("opt_string"))
				if v, err := strconv.ParseFloat(queries.Get("wrap_double"), 64); err != nil {
					return nil, err
				} else {
					req.WrapDouble = wrapperspb.Double(v)
				}
				if v, err := strconv.ParseFloat(queries.Get("wrap_float"), 32); err != nil {
					return nil, err
				} else {
					req.WrapFloat = wrapperspb.Float(float32(v))
				}
				if v, err := strconv.ParseInt(queries.Get("wrap_int64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.WrapInt64 = wrapperspb.Int64(v)
				}
				if v, err := strconv.ParseUint(queries.Get("wrap_uint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.WrapUint64 = wrapperspb.UInt64(v)
				}
				if v, err := strconv.ParseInt(queries.Get("wrap_int32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.WrapInt32 = wrapperspb.Int32(int32(v))
				}
				if v, err := strconv.ParseUint(queries.Get("wrap_uint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.WrapUint32 = wrapperspb.UInt32(uint32(v))
				}
				if v, err := strconv.ParseBool(queries.Get("wrap_bool")); err != nil {
					return nil, err
				} else {
					req.WrapBool = wrapperspb.Bool(v)
				}
				req.WrapString = wrapperspb.String(queries.Get("wrap_string"))
				req.WrapBytes = wrapperspb.Bytes([]byte(queries.Get("wrap_bytes")))
				if v, err := convx.ParseBoolSlice(queries["rep_bool"]); err != nil {
					return nil, err
				} else {
					req.RepBool = v
				}
				if v, err := convx.ParseIntSlice[int32](queries["rep_int32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepInt32 = v
				}
				if v, err := convx.ParseIntSlice[int32](queries["rep_sint32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepSint32 = v
				}
				if v, err := convx.ParseUintSlice[uint32](queries["rep_uint32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepUint32 = v
				}
				if v, err := convx.ParseIntSlice[int64](queries["rep_int64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepInt64 = v
				}
				if v, err := convx.ParseIntSlice[int64](queries["rep_sint64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepSint64 = v
				}
				if v, err := convx.ParseUintSlice[uint64](queries["rep_uint64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepUint64 = v
				}
				if v, err := convx.ParseIntSlice[int32](queries["rep_sfixed32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepSfixed32 = v
				}
				if v, err := convx.ParseUintSlice[uint32](queries["rep_fixed32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepFixed32 = v
				}
				if v, err := convx.ParseFloatSlice[float32](queries["rep_float"], 32); err != nil {
					return nil, err
				} else {
					req.RepFloat = v
				}
				if v, err := convx.ParseIntSlice[int64](queries["rep_sfixed64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepSfixed64 = v
				}
				if v, err := convx.ParseUintSlice[uint64](queries["rep_fixed64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepFixed64 = v
				}
				if v, err := convx.ParseFloatSlice[float64](queries["rep_double"], 32); err != nil {
					return nil, err
				} else {
					req.RepDouble = v
				}
				req.RepString = queries["rep_string"]
				req.RepBytes = convx.ParseBytesSlice(queries["rep_bytes"])
				return req, nil
			},
			func(ctx context.Context, w http1.ResponseWriter, obj any) error {
				resp := obj.(*emptypb.Empty)
				_ = resp
				w.WriteHeader(http1.StatusOK)
				data, err := protojson.Marshal(resp)
				if err != nil {
					return err
				}
				if _, err := w.Write(data); err != nil {
					return err
				}
				return nil
			},
			opts...,
		))
	r.Name("/leo.example.demo.v1.Body/RepBytes").
		Methods("PUT").
		Path("/v1/rep_bytes").
		Handler(http.NewServer(
			endpointx.Chain(endpoints.RepBytes(), mdw...),
			func(ctx context.Context, r *http1.Request) (any, error) {
				req := &BodyRequest{}
				body, err := io.ReadAll(r.Body)
				if err != nil {
					return nil, err
				}
				req.RepBytes = []byte(string(body))
				queries := r.URL.Query()
				if v, err := strconv.ParseBool(queries.Get("bool")); err != nil {
					return nil, err
				} else {
					req.Bool = v
				}
				if v, err := strconv.ParseInt(queries.Get("int32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Int32 = int32(v)
				}
				if v, err := strconv.ParseInt(queries.Get("sint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Sint32 = int32(v)
				}
				if v, err := strconv.ParseUint(queries.Get("uint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Uint32 = uint32(v)
				}
				if v, err := strconv.ParseInt(queries.Get("int64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Int64 = v
				}
				if v, err := strconv.ParseInt(queries.Get("sint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Sint64 = v
				}
				if v, err := strconv.ParseUint(queries.Get("uint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Uint64 = v
				}
				if v, err := strconv.ParseInt(queries.Get("sfixed32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Sfixed32 = int32(v)
				}
				if v, err := strconv.ParseUint(queries.Get("fixed32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Fixed32 = uint32(v)
				}
				if v, err := strconv.ParseFloat(queries.Get("float"), 32); err != nil {
					return nil, err
				} else {
					req.Float = float32(v)
				}
				if v, err := strconv.ParseInt(queries.Get("sfixed64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Sfixed64 = v
				}
				if v, err := strconv.ParseUint(queries.Get("fixed64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Fixed64 = v
				}
				if v, err := strconv.ParseFloat(queries.Get("double"), 32); err != nil {
					return nil, err
				} else {
					req.Double = v
				}
				req.String_ = queries.Get("string")
				req.Bytes = []byte(queries.Get("bytes"))
				if v, err := strconv.ParseBool(queries.Get("opt_bool")); err != nil {
					return nil, err
				} else {
					req.OptBool = proto.Bool(v)
				}
				if v, err := strconv.ParseInt(queries.Get("opt_int32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptInt32 = proto.Int32(int32(v))
				}
				if v, err := strconv.ParseInt(queries.Get("opt_sint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptSint32 = proto.Int32(int32(v))
				}
				if v, err := strconv.ParseUint(queries.Get("opt_uint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptUint32 = proto.Uint32(uint32(v))
				}
				if v, err := strconv.ParseInt(queries.Get("opt_int64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptInt64 = proto.Int64(v)
				}
				if v, err := strconv.ParseInt(queries.Get("opt_sint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptSint64 = proto.Int64(v)
				}
				if v, err := strconv.ParseUint(queries.Get("opt_uint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptUint64 = proto.Uint64(v)
				}
				if v, err := strconv.ParseInt(queries.Get("opt_sfixed32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptSfixed32 = proto.Int32(int32(v))
				}
				if v, err := strconv.ParseUint(queries.Get("opt_fixed32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptFixed32 = proto.Uint32(uint32(v))
				}
				if v, err := strconv.ParseFloat(queries.Get("opt_float"), 32); err != nil {
					return nil, err
				} else {
					req.OptFloat = proto.Float32(float32(v))
				}
				if v, err := strconv.ParseInt(queries.Get("opt_sfixed64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptSfixed64 = proto.Int64(v)
				}
				if v, err := strconv.ParseUint(queries.Get("opt_fixed64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptFixed64 = proto.Uint64(v)
				}
				if v, err := strconv.ParseFloat(queries.Get("opt_double"), 32); err != nil {
					return nil, err
				} else {
					req.OptDouble = proto.Float64(v)
				}
				req.OptString = proto.String(queries.Get("opt_string"))
				req.OptBytes = []byte(queries.Get("opt_bytes"))
				if v, err := strconv.ParseFloat(queries.Get("wrap_double"), 64); err != nil {
					return nil, err
				} else {
					req.WrapDouble = wrapperspb.Double(v)
				}
				if v, err := strconv.ParseFloat(queries.Get("wrap_float"), 32); err != nil {
					return nil, err
				} else {
					req.WrapFloat = wrapperspb.Float(float32(v))
				}
				if v, err := strconv.ParseInt(queries.Get("wrap_int64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.WrapInt64 = wrapperspb.Int64(v)
				}
				if v, err := strconv.ParseUint(queries.Get("wrap_uint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.WrapUint64 = wrapperspb.UInt64(v)
				}
				if v, err := strconv.ParseInt(queries.Get("wrap_int32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.WrapInt32 = wrapperspb.Int32(int32(v))
				}
				if v, err := strconv.ParseUint(queries.Get("wrap_uint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.WrapUint32 = wrapperspb.UInt32(uint32(v))
				}
				if v, err := strconv.ParseBool(queries.Get("wrap_bool")); err != nil {
					return nil, err
				} else {
					req.WrapBool = wrapperspb.Bool(v)
				}
				req.WrapString = wrapperspb.String(queries.Get("wrap_string"))
				req.WrapBytes = wrapperspb.Bytes([]byte(queries.Get("wrap_bytes")))
				if v, err := convx.ParseBoolSlice(queries["rep_bool"]); err != nil {
					return nil, err
				} else {
					req.RepBool = v
				}
				if v, err := convx.ParseIntSlice[int32](queries["rep_int32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepInt32 = v
				}
				if v, err := convx.ParseIntSlice[int32](queries["rep_sint32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepSint32 = v
				}
				if v, err := convx.ParseUintSlice[uint32](queries["rep_uint32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepUint32 = v
				}
				if v, err := convx.ParseIntSlice[int64](queries["rep_int64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepInt64 = v
				}
				if v, err := convx.ParseIntSlice[int64](queries["rep_sint64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepSint64 = v
				}
				if v, err := convx.ParseUintSlice[uint64](queries["rep_uint64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepUint64 = v
				}
				if v, err := convx.ParseIntSlice[int32](queries["rep_sfixed32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepSfixed32 = v
				}
				if v, err := convx.ParseUintSlice[uint32](queries["rep_fixed32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepFixed32 = v
				}
				if v, err := convx.ParseFloatSlice[float32](queries["rep_float"], 32); err != nil {
					return nil, err
				} else {
					req.RepFloat = v
				}
				if v, err := convx.ParseIntSlice[int64](queries["rep_sfixed64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepSfixed64 = v
				}
				if v, err := convx.ParseUintSlice[uint64](queries["rep_fixed64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepFixed64 = v
				}
				if v, err := convx.ParseFloatSlice[float64](queries["rep_double"], 32); err != nil {
					return nil, err
				} else {
					req.RepDouble = v
				}
				req.RepString = queries["rep_string"]
				return req, nil
			},
			func(ctx context.Context, w http1.ResponseWriter, obj any) error {
				resp := obj.(*emptypb.Empty)
				_ = resp
				w.WriteHeader(http1.StatusOK)
				data, err := protojson.Marshal(resp)
				if err != nil {
					return err
				}
				if _, err := w.Write(data); err != nil {
					return err
				}
				return nil
			},
			opts...,
		))
	r.Name("/leo.example.demo.v1.Body/WrapBytes").
		Methods("PUT").
		Path("/v1/wrap_bytes").
		Handler(http.NewServer(
			endpointx.Chain(endpoints.WrapBytes(), mdw...),
			func(ctx context.Context, r *http1.Request) (any, error) {
				req := &BodyRequest{}
				body, err := io.ReadAll(r.Body)
				if err != nil {
					return nil, err
				}
				req.WrapBytes = wrapperspb.Bytes([]byte(string(body)))
				queries := r.URL.Query()
				if v, err := strconv.ParseBool(queries.Get("bool")); err != nil {
					return nil, err
				} else {
					req.Bool = v
				}
				if v, err := strconv.ParseInt(queries.Get("int32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Int32 = int32(v)
				}
				if v, err := strconv.ParseInt(queries.Get("sint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Sint32 = int32(v)
				}
				if v, err := strconv.ParseUint(queries.Get("uint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Uint32 = uint32(v)
				}
				if v, err := strconv.ParseInt(queries.Get("int64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Int64 = v
				}
				if v, err := strconv.ParseInt(queries.Get("sint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Sint64 = v
				}
				if v, err := strconv.ParseUint(queries.Get("uint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Uint64 = v
				}
				if v, err := strconv.ParseInt(queries.Get("sfixed32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Sfixed32 = int32(v)
				}
				if v, err := strconv.ParseUint(queries.Get("fixed32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.Fixed32 = uint32(v)
				}
				if v, err := strconv.ParseFloat(queries.Get("float"), 32); err != nil {
					return nil, err
				} else {
					req.Float = float32(v)
				}
				if v, err := strconv.ParseInt(queries.Get("sfixed64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Sfixed64 = v
				}
				if v, err := strconv.ParseUint(queries.Get("fixed64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.Fixed64 = v
				}
				if v, err := strconv.ParseFloat(queries.Get("double"), 32); err != nil {
					return nil, err
				} else {
					req.Double = v
				}
				req.String_ = queries.Get("string")
				req.Bytes = []byte(queries.Get("bytes"))
				if v, err := strconv.ParseBool(queries.Get("opt_bool")); err != nil {
					return nil, err
				} else {
					req.OptBool = proto.Bool(v)
				}
				if v, err := strconv.ParseInt(queries.Get("opt_int32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptInt32 = proto.Int32(int32(v))
				}
				if v, err := strconv.ParseInt(queries.Get("opt_sint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptSint32 = proto.Int32(int32(v))
				}
				if v, err := strconv.ParseUint(queries.Get("opt_uint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptUint32 = proto.Uint32(uint32(v))
				}
				if v, err := strconv.ParseInt(queries.Get("opt_int64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptInt64 = proto.Int64(v)
				}
				if v, err := strconv.ParseInt(queries.Get("opt_sint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptSint64 = proto.Int64(v)
				}
				if v, err := strconv.ParseUint(queries.Get("opt_uint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptUint64 = proto.Uint64(v)
				}
				if v, err := strconv.ParseInt(queries.Get("opt_sfixed32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptSfixed32 = proto.Int32(int32(v))
				}
				if v, err := strconv.ParseUint(queries.Get("opt_fixed32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.OptFixed32 = proto.Uint32(uint32(v))
				}
				if v, err := strconv.ParseFloat(queries.Get("opt_float"), 32); err != nil {
					return nil, err
				} else {
					req.OptFloat = proto.Float32(float32(v))
				}
				if v, err := strconv.ParseInt(queries.Get("opt_sfixed64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptSfixed64 = proto.Int64(v)
				}
				if v, err := strconv.ParseUint(queries.Get("opt_fixed64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.OptFixed64 = proto.Uint64(v)
				}
				if v, err := strconv.ParseFloat(queries.Get("opt_double"), 32); err != nil {
					return nil, err
				} else {
					req.OptDouble = proto.Float64(v)
				}
				req.OptString = proto.String(queries.Get("opt_string"))
				req.OptBytes = []byte(queries.Get("opt_bytes"))
				if v, err := strconv.ParseFloat(queries.Get("wrap_double"), 64); err != nil {
					return nil, err
				} else {
					req.WrapDouble = wrapperspb.Double(v)
				}
				if v, err := strconv.ParseFloat(queries.Get("wrap_float"), 32); err != nil {
					return nil, err
				} else {
					req.WrapFloat = wrapperspb.Float(float32(v))
				}
				if v, err := strconv.ParseInt(queries.Get("wrap_int64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.WrapInt64 = wrapperspb.Int64(v)
				}
				if v, err := strconv.ParseUint(queries.Get("wrap_uint64"), 10, 64); err != nil {
					return nil, err
				} else {
					req.WrapUint64 = wrapperspb.UInt64(v)
				}
				if v, err := strconv.ParseInt(queries.Get("wrap_int32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.WrapInt32 = wrapperspb.Int32(int32(v))
				}
				if v, err := strconv.ParseUint(queries.Get("wrap_uint32"), 10, 32); err != nil {
					return nil, err
				} else {
					req.WrapUint32 = wrapperspb.UInt32(uint32(v))
				}
				if v, err := strconv.ParseBool(queries.Get("wrap_bool")); err != nil {
					return nil, err
				} else {
					req.WrapBool = wrapperspb.Bool(v)
				}
				req.WrapString = wrapperspb.String(queries.Get("wrap_string"))
				if v, err := convx.ParseBoolSlice(queries["rep_bool"]); err != nil {
					return nil, err
				} else {
					req.RepBool = v
				}
				if v, err := convx.ParseIntSlice[int32](queries["rep_int32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepInt32 = v
				}
				if v, err := convx.ParseIntSlice[int32](queries["rep_sint32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepSint32 = v
				}
				if v, err := convx.ParseUintSlice[uint32](queries["rep_uint32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepUint32 = v
				}
				if v, err := convx.ParseIntSlice[int64](queries["rep_int64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepInt64 = v
				}
				if v, err := convx.ParseIntSlice[int64](queries["rep_sint64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepSint64 = v
				}
				if v, err := convx.ParseUintSlice[uint64](queries["rep_uint64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepUint64 = v
				}
				if v, err := convx.ParseIntSlice[int32](queries["rep_sfixed32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepSfixed32 = v
				}
				if v, err := convx.ParseUintSlice[uint32](queries["rep_fixed32"], 10, 32); err != nil {
					return nil, err
				} else {
					req.RepFixed32 = v
				}
				if v, err := convx.ParseFloatSlice[float32](queries["rep_float"], 32); err != nil {
					return nil, err
				} else {
					req.RepFloat = v
				}
				if v, err := convx.ParseIntSlice[int64](queries["rep_sfixed64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepSfixed64 = v
				}
				if v, err := convx.ParseUintSlice[uint64](queries["rep_fixed64"], 10, 64); err != nil {
					return nil, err
				} else {
					req.RepFixed64 = v
				}
				if v, err := convx.ParseFloatSlice[float64](queries["rep_double"], 32); err != nil {
					return nil, err
				} else {
					req.RepDouble = v
				}
				req.RepString = queries["rep_string"]
				req.RepBytes = convx.ParseBytesSlice(queries["rep_bytes"])
				return req, nil
			},
			func(ctx context.Context, w http1.ResponseWriter, obj any) error {
				resp := obj.(*emptypb.Empty)
				_ = resp
				w.WriteHeader(http1.StatusOK)
				data, err := protojson.Marshal(resp)
				if err != nil {
					return err
				}
				if _, err := w.Write(data); err != nil {
					return err
				}
				return nil
			},
			opts...,
		))
	return r
}

type httpBodyClient struct {
	bool        endpoint.Endpoint
	optBool     endpoint.Endpoint
	repBool     endpoint.Endpoint
	wrapBool    endpoint.Endpoint
	int32       endpoint.Endpoint
	optInt32    endpoint.Endpoint
	repInt32    endpoint.Endpoint
	wrapInt32   endpoint.Endpoint
	uint32      endpoint.Endpoint
	optUint32   endpoint.Endpoint
	repUint32   endpoint.Endpoint
	wrapUint32  endpoint.Endpoint
	fixed32     endpoint.Endpoint
	optFixed32  endpoint.Endpoint
	repFixed32  endpoint.Endpoint
	int64       endpoint.Endpoint
	optInt64    endpoint.Endpoint
	repInt64    endpoint.Endpoint
	wrapInt64   endpoint.Endpoint
	sint64      endpoint.Endpoint
	optSint64   endpoint.Endpoint
	repSint64   endpoint.Endpoint
	sfixed64    endpoint.Endpoint
	optSfixed64 endpoint.Endpoint
	repSfixed64 endpoint.Endpoint
	uint64      endpoint.Endpoint
	optUint64   endpoint.Endpoint
	repUint64   endpoint.Endpoint
	wrapUint64  endpoint.Endpoint
	fixed64     endpoint.Endpoint
	optFixed64  endpoint.Endpoint
	repFixed64  endpoint.Endpoint
	float32     endpoint.Endpoint
	optFloat32  endpoint.Endpoint
	repFloat32  endpoint.Endpoint
	wrapFloat32 endpoint.Endpoint
	float64     endpoint.Endpoint
	optFloat64  endpoint.Endpoint
	repFloat64  endpoint.Endpoint
	wrapFloat64 endpoint.Endpoint
	string      endpoint.Endpoint
	optString   endpoint.Endpoint
	repString   endpoint.Endpoint
	wrapString  endpoint.Endpoint
	bytes       endpoint.Endpoint
	optBytes    endpoint.Endpoint
	repBytes    endpoint.Endpoint
	wrapBytes   endpoint.Endpoint
}

func (c *httpBodyClient) Bool(ctx context.Context, request *BodyRequest) (*emptypb.Empty, error) {
	rep, err := c.bool(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*emptypb.Empty), nil
}

func (c *httpBodyClient) OptBool(ctx context.Context, request *BodyRequest) (*emptypb.Empty, error) {
	rep, err := c.optBool(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*emptypb.Empty), nil
}

func (c *httpBodyClient) RepBool(ctx context.Context, request *BodyRequest) (*emptypb.Empty, error) {
	rep, err := c.repBool(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*emptypb.Empty), nil
}

func (c *httpBodyClient) WrapBool(ctx context.Context, request *BodyRequest) (*emptypb.Empty, error) {
	rep, err := c.wrapBool(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*emptypb.Empty), nil
}

func (c *httpBodyClient) Int32(ctx context.Context, request *BodyRequest) (*emptypb.Empty, error) {
	rep, err := c.int32(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*emptypb.Empty), nil
}

func (c *httpBodyClient) OptInt32(ctx context.Context, request *BodyRequest) (*emptypb.Empty, error) {
	rep, err := c.optInt32(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*emptypb.Empty), nil
}

func (c *httpBodyClient) RepInt32(ctx context.Context, request *BodyRequest) (*emptypb.Empty, error) {
	rep, err := c.repInt32(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*emptypb.Empty), nil
}

func (c *httpBodyClient) WrapInt32(ctx context.Context, request *BodyRequest) (*emptypb.Empty, error) {
	rep, err := c.wrapInt32(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*emptypb.Empty), nil
}

func (c *httpBodyClient) Uint32(ctx context.Context, request *BodyRequest) (*emptypb.Empty, error) {
	rep, err := c.uint32(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*emptypb.Empty), nil
}

func (c *httpBodyClient) OptUint32(ctx context.Context, request *BodyRequest) (*emptypb.Empty, error) {
	rep, err := c.optUint32(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*emptypb.Empty), nil
}

func (c *httpBodyClient) RepUint32(ctx context.Context, request *BodyRequest) (*emptypb.Empty, error) {
	rep, err := c.repUint32(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*emptypb.Empty), nil
}

func (c *httpBodyClient) WrapUint32(ctx context.Context, request *BodyRequest) (*emptypb.Empty, error) {
	rep, err := c.wrapUint32(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*emptypb.Empty), nil
}

func (c *httpBodyClient) Fixed32(ctx context.Context, request *BodyRequest) (*emptypb.Empty, error) {
	rep, err := c.fixed32(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*emptypb.Empty), nil
}

func (c *httpBodyClient) OptFixed32(ctx context.Context, request *BodyRequest) (*emptypb.Empty, error) {
	rep, err := c.optFixed32(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*emptypb.Empty), nil
}

func (c *httpBodyClient) RepFixed32(ctx context.Context, request *BodyRequest) (*emptypb.Empty, error) {
	rep, err := c.repFixed32(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*emptypb.Empty), nil
}

func (c *httpBodyClient) Int64(ctx context.Context, request *BodyRequest) (*emptypb.Empty, error) {
	rep, err := c.int64(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*emptypb.Empty), nil
}

func (c *httpBodyClient) OptInt64(ctx context.Context, request *BodyRequest) (*emptypb.Empty, error) {
	rep, err := c.optInt64(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*emptypb.Empty), nil
}

func (c *httpBodyClient) RepInt64(ctx context.Context, request *BodyRequest) (*emptypb.Empty, error) {
	rep, err := c.repInt64(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*emptypb.Empty), nil
}

func (c *httpBodyClient) WrapInt64(ctx context.Context, request *BodyRequest) (*emptypb.Empty, error) {
	rep, err := c.wrapInt64(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*emptypb.Empty), nil
}

func (c *httpBodyClient) Sint64(ctx context.Context, request *BodyRequest) (*emptypb.Empty, error) {
	rep, err := c.sint64(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*emptypb.Empty), nil
}

func (c *httpBodyClient) OptSint64(ctx context.Context, request *BodyRequest) (*emptypb.Empty, error) {
	rep, err := c.optSint64(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*emptypb.Empty), nil
}

func (c *httpBodyClient) RepSint64(ctx context.Context, request *BodyRequest) (*emptypb.Empty, error) {
	rep, err := c.repSint64(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*emptypb.Empty), nil
}

func (c *httpBodyClient) Sfixed64(ctx context.Context, request *BodyRequest) (*emptypb.Empty, error) {
	rep, err := c.sfixed64(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*emptypb.Empty), nil
}

func (c *httpBodyClient) OptSfixed64(ctx context.Context, request *BodyRequest) (*emptypb.Empty, error) {
	rep, err := c.optSfixed64(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*emptypb.Empty), nil
}

func (c *httpBodyClient) RepSfixed64(ctx context.Context, request *BodyRequest) (*emptypb.Empty, error) {
	rep, err := c.repSfixed64(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*emptypb.Empty), nil
}

func (c *httpBodyClient) Uint64(ctx context.Context, request *BodyRequest) (*emptypb.Empty, error) {
	rep, err := c.uint64(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*emptypb.Empty), nil
}

func (c *httpBodyClient) OptUint64(ctx context.Context, request *BodyRequest) (*emptypb.Empty, error) {
	rep, err := c.optUint64(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*emptypb.Empty), nil
}

func (c *httpBodyClient) RepUint64(ctx context.Context, request *BodyRequest) (*emptypb.Empty, error) {
	rep, err := c.repUint64(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*emptypb.Empty), nil
}

func (c *httpBodyClient) WrapUint64(ctx context.Context, request *BodyRequest) (*emptypb.Empty, error) {
	rep, err := c.wrapUint64(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*emptypb.Empty), nil
}

func (c *httpBodyClient) Fixed64(ctx context.Context, request *BodyRequest) (*emptypb.Empty, error) {
	rep, err := c.fixed64(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*emptypb.Empty), nil
}

func (c *httpBodyClient) OptFixed64(ctx context.Context, request *BodyRequest) (*emptypb.Empty, error) {
	rep, err := c.optFixed64(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*emptypb.Empty), nil
}

func (c *httpBodyClient) RepFixed64(ctx context.Context, request *BodyRequest) (*emptypb.Empty, error) {
	rep, err := c.repFixed64(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*emptypb.Empty), nil
}

func (c *httpBodyClient) Float32(ctx context.Context, request *BodyRequest) (*emptypb.Empty, error) {
	rep, err := c.float32(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*emptypb.Empty), nil
}

func (c *httpBodyClient) OptFloat32(ctx context.Context, request *BodyRequest) (*emptypb.Empty, error) {
	rep, err := c.optFloat32(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*emptypb.Empty), nil
}

func (c *httpBodyClient) RepFloat32(ctx context.Context, request *BodyRequest) (*emptypb.Empty, error) {
	rep, err := c.repFloat32(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*emptypb.Empty), nil
}

func (c *httpBodyClient) WrapFloat32(ctx context.Context, request *BodyRequest) (*emptypb.Empty, error) {
	rep, err := c.wrapFloat32(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*emptypb.Empty), nil
}

func (c *httpBodyClient) Float64(ctx context.Context, request *BodyRequest) (*emptypb.Empty, error) {
	rep, err := c.float64(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*emptypb.Empty), nil
}

func (c *httpBodyClient) OptFloat64(ctx context.Context, request *BodyRequest) (*emptypb.Empty, error) {
	rep, err := c.optFloat64(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*emptypb.Empty), nil
}

func (c *httpBodyClient) RepFloat64(ctx context.Context, request *BodyRequest) (*emptypb.Empty, error) {
	rep, err := c.repFloat64(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*emptypb.Empty), nil
}

func (c *httpBodyClient) WrapFloat64(ctx context.Context, request *BodyRequest) (*emptypb.Empty, error) {
	rep, err := c.wrapFloat64(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*emptypb.Empty), nil
}

func (c *httpBodyClient) String(ctx context.Context, request *BodyRequest) (*emptypb.Empty, error) {
	rep, err := c.string(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*emptypb.Empty), nil
}

func (c *httpBodyClient) OptString(ctx context.Context, request *BodyRequest) (*emptypb.Empty, error) {
	rep, err := c.optString(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*emptypb.Empty), nil
}

func (c *httpBodyClient) RepString(ctx context.Context, request *BodyRequest) (*emptypb.Empty, error) {
	rep, err := c.repString(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*emptypb.Empty), nil
}

func (c *httpBodyClient) WrapString(ctx context.Context, request *BodyRequest) (*emptypb.Empty, error) {
	rep, err := c.wrapString(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*emptypb.Empty), nil
}

func (c *httpBodyClient) Bytes(ctx context.Context, request *BodyRequest) (*emptypb.Empty, error) {
	rep, err := c.bytes(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*emptypb.Empty), nil
}

func (c *httpBodyClient) OptBytes(ctx context.Context, request *BodyRequest) (*emptypb.Empty, error) {
	rep, err := c.optBytes(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*emptypb.Empty), nil
}

func (c *httpBodyClient) RepBytes(ctx context.Context, request *BodyRequest) (*emptypb.Empty, error) {
	rep, err := c.repBytes(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*emptypb.Empty), nil
}

func (c *httpBodyClient) WrapBytes(ctx context.Context, request *BodyRequest) (*emptypb.Empty, error) {
	rep, err := c.wrapBytes(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*emptypb.Empty), nil
}

func NewBodyHTTPClient(
	instance string,
	mdw []endpoint.Middleware,
	opts ...http.ClientOption,
) interface {
	Bool(ctx context.Context, request *BodyRequest) (*emptypb.Empty, error)
	OptBool(ctx context.Context, request *BodyRequest) (*emptypb.Empty, error)
	RepBool(ctx context.Context, request *BodyRequest) (*emptypb.Empty, error)
	WrapBool(ctx context.Context, request *BodyRequest) (*emptypb.Empty, error)
	Int32(ctx context.Context, request *BodyRequest) (*emptypb.Empty, error)
	OptInt32(ctx context.Context, request *BodyRequest) (*emptypb.Empty, error)
	RepInt32(ctx context.Context, request *BodyRequest) (*emptypb.Empty, error)
	WrapInt32(ctx context.Context, request *BodyRequest) (*emptypb.Empty, error)
	Uint32(ctx context.Context, request *BodyRequest) (*emptypb.Empty, error)
	OptUint32(ctx context.Context, request *BodyRequest) (*emptypb.Empty, error)
	RepUint32(ctx context.Context, request *BodyRequest) (*emptypb.Empty, error)
	WrapUint32(ctx context.Context, request *BodyRequest) (*emptypb.Empty, error)
	Fixed32(ctx context.Context, request *BodyRequest) (*emptypb.Empty, error)
	OptFixed32(ctx context.Context, request *BodyRequest) (*emptypb.Empty, error)
	RepFixed32(ctx context.Context, request *BodyRequest) (*emptypb.Empty, error)
	Int64(ctx context.Context, request *BodyRequest) (*emptypb.Empty, error)
	OptInt64(ctx context.Context, request *BodyRequest) (*emptypb.Empty, error)
	RepInt64(ctx context.Context, request *BodyRequest) (*emptypb.Empty, error)
	WrapInt64(ctx context.Context, request *BodyRequest) (*emptypb.Empty, error)
	Sint64(ctx context.Context, request *BodyRequest) (*emptypb.Empty, error)
	OptSint64(ctx context.Context, request *BodyRequest) (*emptypb.Empty, error)
	RepSint64(ctx context.Context, request *BodyRequest) (*emptypb.Empty, error)
	Sfixed64(ctx context.Context, request *BodyRequest) (*emptypb.Empty, error)
	OptSfixed64(ctx context.Context, request *BodyRequest) (*emptypb.Empty, error)
	RepSfixed64(ctx context.Context, request *BodyRequest) (*emptypb.Empty, error)
	Uint64(ctx context.Context, request *BodyRequest) (*emptypb.Empty, error)
	OptUint64(ctx context.Context, request *BodyRequest) (*emptypb.Empty, error)
	RepUint64(ctx context.Context, request *BodyRequest) (*emptypb.Empty, error)
	WrapUint64(ctx context.Context, request *BodyRequest) (*emptypb.Empty, error)
	Fixed64(ctx context.Context, request *BodyRequest) (*emptypb.Empty, error)
	OptFixed64(ctx context.Context, request *BodyRequest) (*emptypb.Empty, error)
	RepFixed64(ctx context.Context, request *BodyRequest) (*emptypb.Empty, error)
	Float32(ctx context.Context, request *BodyRequest) (*emptypb.Empty, error)
	OptFloat32(ctx context.Context, request *BodyRequest) (*emptypb.Empty, error)
	RepFloat32(ctx context.Context, request *BodyRequest) (*emptypb.Empty, error)
	WrapFloat32(ctx context.Context, request *BodyRequest) (*emptypb.Empty, error)
	Float64(ctx context.Context, request *BodyRequest) (*emptypb.Empty, error)
	OptFloat64(ctx context.Context, request *BodyRequest) (*emptypb.Empty, error)
	RepFloat64(ctx context.Context, request *BodyRequest) (*emptypb.Empty, error)
	WrapFloat64(ctx context.Context, request *BodyRequest) (*emptypb.Empty, error)
	String(ctx context.Context, request *BodyRequest) (*emptypb.Empty, error)
	OptString(ctx context.Context, request *BodyRequest) (*emptypb.Empty, error)
	RepString(ctx context.Context, request *BodyRequest) (*emptypb.Empty, error)
	WrapString(ctx context.Context, request *BodyRequest) (*emptypb.Empty, error)
	Bytes(ctx context.Context, request *BodyRequest) (*emptypb.Empty, error)
	OptBytes(ctx context.Context, request *BodyRequest) (*emptypb.Empty, error)
	RepBytes(ctx context.Context, request *BodyRequest) (*emptypb.Empty, error)
	WrapBytes(ctx context.Context, request *BodyRequest) (*emptypb.Empty, error)
} {
	r := mux.NewRouter()
	r.Name("/leo.example.demo.v1.Body/Bool").
		Methods("PUT").
		Path("/v1/bool")
	r.Name("/leo.example.demo.v1.Body/OptBool").
		Methods("PUT").
		Path("/v1/opt_bool")
	r.Name("/leo.example.demo.v1.Body/RepBool").
		Methods("PUT").
		Path("/v1/rep_bool")
	r.Name("/leo.example.demo.v1.Body/WrapBool").
		Methods("PUT").
		Path("/v1/wrap_bool")
	r.Name("/leo.example.demo.v1.Body/Int32").
		Methods("PUT").
		Path("/v1/int32")
	r.Name("/leo.example.demo.v1.Body/OptInt32").
		Methods("PUT").
		Path("/v1/opt_int32")
	r.Name("/leo.example.demo.v1.Body/RepInt32").
		Methods("PUT").
		Path("/v1/rep_int32")
	r.Name("/leo.example.demo.v1.Body/WrapInt32").
		Methods("PUT").
		Path("/v1/wrap_int32")
	r.Name("/leo.example.demo.v1.Body/Uint32").
		Methods("PUT").
		Path("/v1/uint32")
	r.Name("/leo.example.demo.v1.Body/OptUint32").
		Methods("PUT").
		Path("/v1/opt_uint32")
	r.Name("/leo.example.demo.v1.Body/RepUint32").
		Methods("PUT").
		Path("/v1/rep_uint32")
	r.Name("/leo.example.demo.v1.Body/WrapUint32").
		Methods("PUT").
		Path("/v1/wrap_uint32")
	r.Name("/leo.example.demo.v1.Body/Fixed32").
		Methods("PUT").
		Path("/v1/fixed32")
	r.Name("/leo.example.demo.v1.Body/OptFixed32").
		Methods("PUT").
		Path("/v1/opt_fixed32")
	r.Name("/leo.example.demo.v1.Body/RepFixed32").
		Methods("PUT").
		Path("/v1/rep_fixed32")
	r.Name("/leo.example.demo.v1.Body/Int64").
		Methods("PUT").
		Path("/v1/int64")
	r.Name("/leo.example.demo.v1.Body/OptInt64").
		Methods("PUT").
		Path("/v1/opt_int64")
	r.Name("/leo.example.demo.v1.Body/RepInt64").
		Methods("PUT").
		Path("/v1/rep_int64")
	r.Name("/leo.example.demo.v1.Body/WrapInt64").
		Methods("PUT").
		Path("/v1/wrap_int64")
	r.Name("/leo.example.demo.v1.Body/Sint64").
		Methods("PUT").
		Path("/v1/sint64")
	r.Name("/leo.example.demo.v1.Body/OptSint64").
		Methods("PUT").
		Path("/v1/opt_sint64")
	r.Name("/leo.example.demo.v1.Body/RepSint64").
		Methods("PUT").
		Path("/v1/rep_sint64")
	r.Name("/leo.example.demo.v1.Body/Sfixed64").
		Methods("PUT").
		Path("/v1/sfixed64")
	r.Name("/leo.example.demo.v1.Body/OptSfixed64").
		Methods("PUT").
		Path("/v1/opt_sfixed64")
	r.Name("/leo.example.demo.v1.Body/RepSfixed64").
		Methods("PUT").
		Path("/v1/rep_sfixed64")
	r.Name("/leo.example.demo.v1.Body/Uint64").
		Methods("PUT").
		Path("/v1/uint64")
	r.Name("/leo.example.demo.v1.Body/OptUint64").
		Methods("PUT").
		Path("/v1/opt_uint64")
	r.Name("/leo.example.demo.v1.Body/RepUint64").
		Methods("PUT").
		Path("/v1/rep_uint64")
	r.Name("/leo.example.demo.v1.Body/WrapUint64").
		Methods("PUT").
		Path("/v1/wrap_uint64")
	r.Name("/leo.example.demo.v1.Body/Fixed64").
		Methods("PUT").
		Path("/v1/fixed64")
	r.Name("/leo.example.demo.v1.Body/OptFixed64").
		Methods("PUT").
		Path("/v1/opt_fixed64")
	r.Name("/leo.example.demo.v1.Body/RepFixed64").
		Methods("PUT").
		Path("/v1/rep_fixed64")
	r.Name("/leo.example.demo.v1.Body/Float32").
		Methods("PUT").
		Path("/v1/float")
	r.Name("/leo.example.demo.v1.Body/OptFloat32").
		Methods("PUT").
		Path("/v1/opt_float")
	r.Name("/leo.example.demo.v1.Body/RepFloat32").
		Methods("PUT").
		Path("/v1/rep_float")
	r.Name("/leo.example.demo.v1.Body/WrapFloat32").
		Methods("PUT").
		Path("/v1/wrap_float")
	r.Name("/leo.example.demo.v1.Body/Float64").
		Methods("PUT").
		Path("/v1/double")
	r.Name("/leo.example.demo.v1.Body/OptFloat64").
		Methods("PUT").
		Path("/v1/opt_double")
	r.Name("/leo.example.demo.v1.Body/RepFloat64").
		Methods("PUT").
		Path("/v1/rep_double")
	r.Name("/leo.example.demo.v1.Body/WrapFloat64").
		Methods("PUT").
		Path("/v1/wrap_double")
	r.Name("/leo.example.demo.v1.Body/String").
		Methods("PUT").
		Path("/v1/string")
	r.Name("/leo.example.demo.v1.Body/OptString").
		Methods("PUT").
		Path("/v1/opt_string")
	r.Name("/leo.example.demo.v1.Body/RepString").
		Methods("PUT").
		Path("/v1/rep_string")
	r.Name("/leo.example.demo.v1.Body/WrapString").
		Methods("PUT").
		Path("/v1/wrap_string")
	r.Name("/leo.example.demo.v1.Body/Bytes").
		Methods("PUT").
		Path("/v1/bytes")
	r.Name("/leo.example.demo.v1.Body/OptBytes").
		Methods("PUT").
		Path("/v1/opt_bytes")
	r.Name("/leo.example.demo.v1.Body/RepBytes").
		Methods("PUT").
		Path("/v1/rep_bytes")
	r.Name("/leo.example.demo.v1.Body/WrapBytes").
		Methods("PUT").
		Path("/v1/wrap_bytes")
	return &httpBodyClient{
		bool: endpointx.Chain(
			http.NewExplicitClient(
				func(ctx context.Context, obj interface{}) (*http1.Request, error) {
					req := obj.(*BodyRequest)
					var method = "PUT"
					var url = "/v1/bool"
					var body io.Reader
					body = strings.NewReader(strconv.FormatBool(req.Bool))
					r, err := http1.NewRequestWithContext(ctx, method, url, body)
					if err != nil {
						return nil, err
					}
					return r, nil
				},
				func(ctx context.Context, r *http1.Response) (interface{}, error) {
					return nil, nil
				},
				opts...,
			).Endpoint(),
			mdw...),
		optBool: endpointx.Chain(
			http.NewExplicitClient(
				func(ctx context.Context, obj interface{}) (*http1.Request, error) {
					req := obj.(*BodyRequest)
					var method = "PUT"
					var url = "/v1/opt_bool"
					var body io.Reader
					if req.OptBool != nil {
						body = strings.NewReader(strconv.FormatBool(*req.OptBool))
					}
					r, err := http1.NewRequestWithContext(ctx, method, url, body)
					if err != nil {
						return nil, err
					}
					return r, nil
				},
				func(ctx context.Context, r *http1.Response) (interface{}, error) {
					return nil, nil
				},
				opts...,
			).Endpoint(),
			mdw...),
		repBool: endpointx.Chain(
			http.NewExplicitClient(
				func(ctx context.Context, obj interface{}) (*http1.Request, error) {
					req := obj.(*BodyRequest)
					var method = "PUT"
					var url = "/v1/rep_bool"
					var body io.Reader
					if req.RepBool != nil {
						if err := json.NewDecoder(body).Decode(req.RepBool); err != nil {
							return nil, err
						}
					}
					r, err := http1.NewRequestWithContext(ctx, method, url, body)
					if err != nil {
						return nil, err
					}
					return r, nil
				},
				func(ctx context.Context, r *http1.Response) (interface{}, error) {
					return nil, nil
				},
				opts...,
			).Endpoint(),
			mdw...),
		wrapBool: endpointx.Chain(
			http.NewExplicitClient(
				func(ctx context.Context, obj interface{}) (*http1.Request, error) {
					req := obj.(*BodyRequest)
					var method = "PUT"
					var url = "/v1/wrap_bool"
					var body io.Reader
					if req.WrapBool != nil {
						body = strings.NewReader(strconv.FormatBool(req.WrapBool.Value))
					}
					r, err := http1.NewRequestWithContext(ctx, method, url, body)
					if err != nil {
						return nil, err
					}
					return r, nil
				},
				func(ctx context.Context, r *http1.Response) (interface{}, error) {
					return nil, nil
				},
				opts...,
			).Endpoint(),
			mdw...),
		int32: endpointx.Chain(
			http.NewExplicitClient(
				func(ctx context.Context, obj interface{}) (*http1.Request, error) {
					req := obj.(*BodyRequest)
					var method = "PUT"
					var url = "/v1/int32"
					var body io.Reader
					body = strings.NewReader(strconv.FormatInt(int64(req.Int32), 10))
					r, err := http1.NewRequestWithContext(ctx, method, url, body)
					if err != nil {
						return nil, err
					}
					return r, nil
				},
				func(ctx context.Context, r *http1.Response) (interface{}, error) {
					return nil, nil
				},
				opts...,
			).Endpoint(),
			mdw...),
		optInt32: endpointx.Chain(
			http.NewExplicitClient(
				func(ctx context.Context, obj interface{}) (*http1.Request, error) {
					req := obj.(*BodyRequest)
					var method = "PUT"
					var url = "/v1/opt_int32"
					var body io.Reader
					if req.OptInt32 != nil {
						body = strings.NewReader(strconv.FormatInt(int64(*req.OptInt32), 10))
					}
					r, err := http1.NewRequestWithContext(ctx, method, url, body)
					if err != nil {
						return nil, err
					}
					return r, nil
				},
				func(ctx context.Context, r *http1.Response) (interface{}, error) {
					return nil, nil
				},
				opts...,
			).Endpoint(),
			mdw...),
		repInt32: endpointx.Chain(
			http.NewExplicitClient(
				func(ctx context.Context, obj interface{}) (*http1.Request, error) {
					req := obj.(*BodyRequest)
					var method = "PUT"
					var url = "/v1/rep_int32"
					var body io.Reader
					if req.RepInt32 != nil {
						if err := json.NewDecoder(body).Decode(req.RepInt32); err != nil {
							return nil, err
						}
					}
					r, err := http1.NewRequestWithContext(ctx, method, url, body)
					if err != nil {
						return nil, err
					}
					return r, nil
				},
				func(ctx context.Context, r *http1.Response) (interface{}, error) {
					return nil, nil
				},
				opts...,
			).Endpoint(),
			mdw...),
		wrapInt32: endpointx.Chain(
			http.NewExplicitClient(
				func(ctx context.Context, obj interface{}) (*http1.Request, error) {
					req := obj.(*BodyRequest)
					var method = "PUT"
					var url = "/v1/wrap_int32"
					var body io.Reader
					if req.WrapInt32 != nil {
						body = strings.NewReader(strconv.FormatInt(int64(req.WrapInt32.Value), 10))
					}
					r, err := http1.NewRequestWithContext(ctx, method, url, body)
					if err != nil {
						return nil, err
					}
					return r, nil
				},
				func(ctx context.Context, r *http1.Response) (interface{}, error) {
					return nil, nil
				},
				opts...,
			).Endpoint(),
			mdw...),
		uint32: endpointx.Chain(
			http.NewExplicitClient(
				func(ctx context.Context, obj interface{}) (*http1.Request, error) {
					req := obj.(*BodyRequest)
					var method = "PUT"
					var url = "/v1/uint32"
					var body io.Reader
					body = strings.NewReader(strconv.FormatUint(uint64(req.Uint32), 10))
					r, err := http1.NewRequestWithContext(ctx, method, url, body)
					if err != nil {
						return nil, err
					}
					return r, nil
				},
				func(ctx context.Context, r *http1.Response) (interface{}, error) {
					return nil, nil
				},
				opts...,
			).Endpoint(),
			mdw...),
		optUint32: endpointx.Chain(
			http.NewExplicitClient(
				func(ctx context.Context, obj interface{}) (*http1.Request, error) {
					req := obj.(*BodyRequest)
					var method = "PUT"
					var url = "/v1/opt_uint32"
					var body io.Reader
					if req.OptUint32 != nil {
						body = strings.NewReader(strconv.FormatUint(uint64(*req.OptUint32), 10))
					}
					r, err := http1.NewRequestWithContext(ctx, method, url, body)
					if err != nil {
						return nil, err
					}
					return r, nil
				},
				func(ctx context.Context, r *http1.Response) (interface{}, error) {
					return nil, nil
				},
				opts...,
			).Endpoint(),
			mdw...),
		repUint32: endpointx.Chain(
			http.NewExplicitClient(
				func(ctx context.Context, obj interface{}) (*http1.Request, error) {
					req := obj.(*BodyRequest)
					var method = "PUT"
					var url = "/v1/rep_uint32"
					var body io.Reader
					if req.RepUint32 != nil {
						if err := json.NewDecoder(body).Decode(req.RepUint32); err != nil {
							return nil, err
						}
					}
					r, err := http1.NewRequestWithContext(ctx, method, url, body)
					if err != nil {
						return nil, err
					}
					return r, nil
				},
				func(ctx context.Context, r *http1.Response) (interface{}, error) {
					return nil, nil
				},
				opts...,
			).Endpoint(),
			mdw...),
		wrapUint32: endpointx.Chain(
			http.NewExplicitClient(
				func(ctx context.Context, obj interface{}) (*http1.Request, error) {
					req := obj.(*BodyRequest)
					var method = "PUT"
					var url = "/v1/wrap_uint32"
					var body io.Reader
					if req.WrapUint32 != nil {
						body = strings.NewReader(strconv.FormatUint(uint64(req.WrapUint32.Value), 10))
					}
					r, err := http1.NewRequestWithContext(ctx, method, url, body)
					if err != nil {
						return nil, err
					}
					return r, nil
				},
				func(ctx context.Context, r *http1.Response) (interface{}, error) {
					return nil, nil
				},
				opts...,
			).Endpoint(),
			mdw...),
		fixed32: endpointx.Chain(
			http.NewExplicitClient(
				func(ctx context.Context, obj interface{}) (*http1.Request, error) {
					req := obj.(*BodyRequest)
					var method = "PUT"
					var url = "/v1/fixed32"
					var body io.Reader
					body = strings.NewReader(strconv.FormatUint(uint64(req.Fixed32), 10))
					r, err := http1.NewRequestWithContext(ctx, method, url, body)
					if err != nil {
						return nil, err
					}
					return r, nil
				},
				func(ctx context.Context, r *http1.Response) (interface{}, error) {
					return nil, nil
				},
				opts...,
			).Endpoint(),
			mdw...),
		optFixed32: endpointx.Chain(
			http.NewExplicitClient(
				func(ctx context.Context, obj interface{}) (*http1.Request, error) {
					req := obj.(*BodyRequest)
					var method = "PUT"
					var url = "/v1/opt_fixed32"
					var body io.Reader
					if req.OptFixed32 != nil {
						body = strings.NewReader(strconv.FormatUint(uint64(*req.OptFixed32), 10))
					}
					r, err := http1.NewRequestWithContext(ctx, method, url, body)
					if err != nil {
						return nil, err
					}
					return r, nil
				},
				func(ctx context.Context, r *http1.Response) (interface{}, error) {
					return nil, nil
				},
				opts...,
			).Endpoint(),
			mdw...),
		repFixed32: endpointx.Chain(
			http.NewExplicitClient(
				func(ctx context.Context, obj interface{}) (*http1.Request, error) {
					req := obj.(*BodyRequest)
					var method = "PUT"
					var url = "/v1/rep_fixed32"
					var body io.Reader
					if req.RepFixed32 != nil {
						if err := json.NewDecoder(body).Decode(req.RepFixed32); err != nil {
							return nil, err
						}
					}
					r, err := http1.NewRequestWithContext(ctx, method, url, body)
					if err != nil {
						return nil, err
					}
					return r, nil
				},
				func(ctx context.Context, r *http1.Response) (interface{}, error) {
					return nil, nil
				},
				opts...,
			).Endpoint(),
			mdw...),
		int64: endpointx.Chain(
			http.NewExplicitClient(
				func(ctx context.Context, obj interface{}) (*http1.Request, error) {
					req := obj.(*BodyRequest)
					var method = "PUT"
					var url = "/v1/int64"
					var body io.Reader
					body = strings.NewReader(strconv.FormatInt(req.Int64, 10))
					r, err := http1.NewRequestWithContext(ctx, method, url, body)
					if err != nil {
						return nil, err
					}
					return r, nil
				},
				func(ctx context.Context, r *http1.Response) (interface{}, error) {
					return nil, nil
				},
				opts...,
			).Endpoint(),
			mdw...),
		optInt64: endpointx.Chain(
			http.NewExplicitClient(
				func(ctx context.Context, obj interface{}) (*http1.Request, error) {
					req := obj.(*BodyRequest)
					var method = "PUT"
					var url = "/v1/opt_int64"
					var body io.Reader
					if req.OptInt64 != nil {
						body = strings.NewReader(strconv.FormatInt(*req.OptInt64, 10))
					}
					r, err := http1.NewRequestWithContext(ctx, method, url, body)
					if err != nil {
						return nil, err
					}
					return r, nil
				},
				func(ctx context.Context, r *http1.Response) (interface{}, error) {
					return nil, nil
				},
				opts...,
			).Endpoint(),
			mdw...),
		repInt64: endpointx.Chain(
			http.NewExplicitClient(
				func(ctx context.Context, obj interface{}) (*http1.Request, error) {
					req := obj.(*BodyRequest)
					var method = "PUT"
					var url = "/v1/rep_int64"
					var body io.Reader
					if req.RepInt64 != nil {
						if err := json.NewDecoder(body).Decode(req.RepInt64); err != nil {
							return nil, err
						}
					}
					r, err := http1.NewRequestWithContext(ctx, method, url, body)
					if err != nil {
						return nil, err
					}
					return r, nil
				},
				func(ctx context.Context, r *http1.Response) (interface{}, error) {
					return nil, nil
				},
				opts...,
			).Endpoint(),
			mdw...),
		wrapInt64: endpointx.Chain(
			http.NewExplicitClient(
				func(ctx context.Context, obj interface{}) (*http1.Request, error) {
					req := obj.(*BodyRequest)
					var method = "PUT"
					var url = "/v1/wrap_int64"
					var body io.Reader
					if req.WrapInt64 != nil {
						body = strings.NewReader(strconv.FormatInt(req.WrapInt64.Value, 10))
					}
					r, err := http1.NewRequestWithContext(ctx, method, url, body)
					if err != nil {
						return nil, err
					}
					return r, nil
				},
				func(ctx context.Context, r *http1.Response) (interface{}, error) {
					return nil, nil
				},
				opts...,
			).Endpoint(),
			mdw...),
		sint64: endpointx.Chain(
			http.NewExplicitClient(
				func(ctx context.Context, obj interface{}) (*http1.Request, error) {
					req := obj.(*BodyRequest)
					var method = "PUT"
					var url = "/v1/sint64"
					var body io.Reader
					body = strings.NewReader(strconv.FormatInt(req.Sint64, 10))
					r, err := http1.NewRequestWithContext(ctx, method, url, body)
					if err != nil {
						return nil, err
					}
					return r, nil
				},
				func(ctx context.Context, r *http1.Response) (interface{}, error) {
					return nil, nil
				},
				opts...,
			).Endpoint(),
			mdw...),
		optSint64: endpointx.Chain(
			http.NewExplicitClient(
				func(ctx context.Context, obj interface{}) (*http1.Request, error) {
					req := obj.(*BodyRequest)
					var method = "PUT"
					var url = "/v1/opt_sint64"
					var body io.Reader
					if req.OptSint64 != nil {
						body = strings.NewReader(strconv.FormatInt(*req.OptSint64, 10))
					}
					r, err := http1.NewRequestWithContext(ctx, method, url, body)
					if err != nil {
						return nil, err
					}
					return r, nil
				},
				func(ctx context.Context, r *http1.Response) (interface{}, error) {
					return nil, nil
				},
				opts...,
			).Endpoint(),
			mdw...),
		repSint64: endpointx.Chain(
			http.NewExplicitClient(
				func(ctx context.Context, obj interface{}) (*http1.Request, error) {
					req := obj.(*BodyRequest)
					var method = "PUT"
					var url = "/v1/rep_sint64"
					var body io.Reader
					if req.RepSint64 != nil {
						if err := json.NewDecoder(body).Decode(req.RepSint64); err != nil {
							return nil, err
						}
					}
					r, err := http1.NewRequestWithContext(ctx, method, url, body)
					if err != nil {
						return nil, err
					}
					return r, nil
				},
				func(ctx context.Context, r *http1.Response) (interface{}, error) {
					return nil, nil
				},
				opts...,
			).Endpoint(),
			mdw...),
		sfixed64: endpointx.Chain(
			http.NewExplicitClient(
				func(ctx context.Context, obj interface{}) (*http1.Request, error) {
					req := obj.(*BodyRequest)
					var method = "PUT"
					var url = "/v1/sfixed64"
					var body io.Reader
					body = strings.NewReader(strconv.FormatInt(req.Sfixed64, 10))
					r, err := http1.NewRequestWithContext(ctx, method, url, body)
					if err != nil {
						return nil, err
					}
					return r, nil
				},
				func(ctx context.Context, r *http1.Response) (interface{}, error) {
					return nil, nil
				},
				opts...,
			).Endpoint(),
			mdw...),
		optSfixed64: endpointx.Chain(
			http.NewExplicitClient(
				func(ctx context.Context, obj interface{}) (*http1.Request, error) {
					req := obj.(*BodyRequest)
					var method = "PUT"
					var url = "/v1/opt_sfixed64"
					var body io.Reader
					if req.OptSfixed64 != nil {
						body = strings.NewReader(strconv.FormatInt(*req.OptSfixed64, 10))
					}
					r, err := http1.NewRequestWithContext(ctx, method, url, body)
					if err != nil {
						return nil, err
					}
					return r, nil
				},
				func(ctx context.Context, r *http1.Response) (interface{}, error) {
					return nil, nil
				},
				opts...,
			).Endpoint(),
			mdw...),
		repSfixed64: endpointx.Chain(
			http.NewExplicitClient(
				func(ctx context.Context, obj interface{}) (*http1.Request, error) {
					req := obj.(*BodyRequest)
					var method = "PUT"
					var url = "/v1/rep_sfixed64"
					var body io.Reader
					if req.RepSfixed64 != nil {
						if err := json.NewDecoder(body).Decode(req.RepSfixed64); err != nil {
							return nil, err
						}
					}
					r, err := http1.NewRequestWithContext(ctx, method, url, body)
					if err != nil {
						return nil, err
					}
					return r, nil
				},
				func(ctx context.Context, r *http1.Response) (interface{}, error) {
					return nil, nil
				},
				opts...,
			).Endpoint(),
			mdw...),
		uint64: endpointx.Chain(
			http.NewExplicitClient(
				func(ctx context.Context, obj interface{}) (*http1.Request, error) {
					req := obj.(*BodyRequest)
					var method = "PUT"
					var url = "/v1/uint64"
					var body io.Reader
					body = strings.NewReader(strconv.FormatUint(req.Uint64, 10))
					r, err := http1.NewRequestWithContext(ctx, method, url, body)
					if err != nil {
						return nil, err
					}
					return r, nil
				},
				func(ctx context.Context, r *http1.Response) (interface{}, error) {
					return nil, nil
				},
				opts...,
			).Endpoint(),
			mdw...),
		optUint64: endpointx.Chain(
			http.NewExplicitClient(
				func(ctx context.Context, obj interface{}) (*http1.Request, error) {
					req := obj.(*BodyRequest)
					var method = "PUT"
					var url = "/v1/opt_uint64"
					var body io.Reader
					if req.OptUint64 != nil {
						body = strings.NewReader(strconv.FormatUint(*req.OptUint64, 10))
					}
					r, err := http1.NewRequestWithContext(ctx, method, url, body)
					if err != nil {
						return nil, err
					}
					return r, nil
				},
				func(ctx context.Context, r *http1.Response) (interface{}, error) {
					return nil, nil
				},
				opts...,
			).Endpoint(),
			mdw...),
		repUint64: endpointx.Chain(
			http.NewExplicitClient(
				func(ctx context.Context, obj interface{}) (*http1.Request, error) {
					req := obj.(*BodyRequest)
					var method = "PUT"
					var url = "/v1/rep_uint64"
					var body io.Reader
					if req.RepUint64 != nil {
						if err := json.NewDecoder(body).Decode(req.RepUint64); err != nil {
							return nil, err
						}
					}
					r, err := http1.NewRequestWithContext(ctx, method, url, body)
					if err != nil {
						return nil, err
					}
					return r, nil
				},
				func(ctx context.Context, r *http1.Response) (interface{}, error) {
					return nil, nil
				},
				opts...,
			).Endpoint(),
			mdw...),
		wrapUint64: endpointx.Chain(
			http.NewExplicitClient(
				func(ctx context.Context, obj interface{}) (*http1.Request, error) {
					req := obj.(*BodyRequest)
					var method = "PUT"
					var url = "/v1/wrap_uint64"
					var body io.Reader
					if req.WrapUint64 != nil {
						body = strings.NewReader(strconv.FormatUint(req.WrapUint64.Value, 10))
					}
					r, err := http1.NewRequestWithContext(ctx, method, url, body)
					if err != nil {
						return nil, err
					}
					return r, nil
				},
				func(ctx context.Context, r *http1.Response) (interface{}, error) {
					return nil, nil
				},
				opts...,
			).Endpoint(),
			mdw...),
		fixed64: endpointx.Chain(
			http.NewExplicitClient(
				func(ctx context.Context, obj interface{}) (*http1.Request, error) {
					req := obj.(*BodyRequest)
					var method = "PUT"
					var url = "/v1/fixed64"
					var body io.Reader
					body = strings.NewReader(strconv.FormatUint(req.Fixed64, 10))
					r, err := http1.NewRequestWithContext(ctx, method, url, body)
					if err != nil {
						return nil, err
					}
					return r, nil
				},
				func(ctx context.Context, r *http1.Response) (interface{}, error) {
					return nil, nil
				},
				opts...,
			).Endpoint(),
			mdw...),
		optFixed64: endpointx.Chain(
			http.NewExplicitClient(
				func(ctx context.Context, obj interface{}) (*http1.Request, error) {
					req := obj.(*BodyRequest)
					var method = "PUT"
					var url = "/v1/opt_fixed64"
					var body io.Reader
					if req.OptFixed64 != nil {
						body = strings.NewReader(strconv.FormatUint(*req.OptFixed64, 10))
					}
					r, err := http1.NewRequestWithContext(ctx, method, url, body)
					if err != nil {
						return nil, err
					}
					return r, nil
				},
				func(ctx context.Context, r *http1.Response) (interface{}, error) {
					return nil, nil
				},
				opts...,
			).Endpoint(),
			mdw...),
		repFixed64: endpointx.Chain(
			http.NewExplicitClient(
				func(ctx context.Context, obj interface{}) (*http1.Request, error) {
					req := obj.(*BodyRequest)
					var method = "PUT"
					var url = "/v1/rep_fixed64"
					var body io.Reader
					if req.RepFixed64 != nil {
						if err := json.NewDecoder(body).Decode(req.RepFixed64); err != nil {
							return nil, err
						}
					}
					r, err := http1.NewRequestWithContext(ctx, method, url, body)
					if err != nil {
						return nil, err
					}
					return r, nil
				},
				func(ctx context.Context, r *http1.Response) (interface{}, error) {
					return nil, nil
				},
				opts...,
			).Endpoint(),
			mdw...),
		float32: endpointx.Chain(
			http.NewExplicitClient(
				func(ctx context.Context, obj interface{}) (*http1.Request, error) {
					req := obj.(*BodyRequest)
					var method = "PUT"
					var url = "/v1/float"
					var body io.Reader
					body = strings.NewReader(strconv.FormatFloat(float64(req.Float), 'f', -1, 32))
					r, err := http1.NewRequestWithContext(ctx, method, url, body)
					if err != nil {
						return nil, err
					}
					return r, nil
				},
				func(ctx context.Context, r *http1.Response) (interface{}, error) {
					return nil, nil
				},
				opts...,
			).Endpoint(),
			mdw...),
		optFloat32: endpointx.Chain(
			http.NewExplicitClient(
				func(ctx context.Context, obj interface{}) (*http1.Request, error) {
					req := obj.(*BodyRequest)
					var method = "PUT"
					var url = "/v1/opt_float"
					var body io.Reader
					if req.OptFloat != nil {
						body = strings.NewReader(strconv.FormatFloat(float64(*req.OptFloat), 'f', -1, 32))
					}
					r, err := http1.NewRequestWithContext(ctx, method, url, body)
					if err != nil {
						return nil, err
					}
					return r, nil
				},
				func(ctx context.Context, r *http1.Response) (interface{}, error) {
					return nil, nil
				},
				opts...,
			).Endpoint(),
			mdw...),
		repFloat32: endpointx.Chain(
			http.NewExplicitClient(
				func(ctx context.Context, obj interface{}) (*http1.Request, error) {
					req := obj.(*BodyRequest)
					var method = "PUT"
					var url = "/v1/rep_float"
					var body io.Reader
					if req.RepFloat != nil {
						if err := json.NewDecoder(body).Decode(req.RepFloat); err != nil {
							return nil, err
						}
					}
					r, err := http1.NewRequestWithContext(ctx, method, url, body)
					if err != nil {
						return nil, err
					}
					return r, nil
				},
				func(ctx context.Context, r *http1.Response) (interface{}, error) {
					return nil, nil
				},
				opts...,
			).Endpoint(),
			mdw...),
		wrapFloat32: endpointx.Chain(
			http.NewExplicitClient(
				func(ctx context.Context, obj interface{}) (*http1.Request, error) {
					req := obj.(*BodyRequest)
					var method = "PUT"
					var url = "/v1/wrap_float"
					var body io.Reader
					if req.WrapFloat != nil {
						body = strings.NewReader(strconv.FormatFloat(float64(req.WrapFloat.Value), 'f', -1, 32))
					}
					r, err := http1.NewRequestWithContext(ctx, method, url, body)
					if err != nil {
						return nil, err
					}
					return r, nil
				},
				func(ctx context.Context, r *http1.Response) (interface{}, error) {
					return nil, nil
				},
				opts...,
			).Endpoint(),
			mdw...),
		float64: endpointx.Chain(
			http.NewExplicitClient(
				func(ctx context.Context, obj interface{}) (*http1.Request, error) {
					req := obj.(*BodyRequest)
					var method = "PUT"
					var url = "/v1/double"
					var body io.Reader
					body = strings.NewReader(strconv.FormatFloat(req.Double, 'f', -1, 64))
					r, err := http1.NewRequestWithContext(ctx, method, url, body)
					if err != nil {
						return nil, err
					}
					return r, nil
				},
				func(ctx context.Context, r *http1.Response) (interface{}, error) {
					return nil, nil
				},
				opts...,
			).Endpoint(),
			mdw...),
		optFloat64: endpointx.Chain(
			http.NewExplicitClient(
				func(ctx context.Context, obj interface{}) (*http1.Request, error) {
					req := obj.(*BodyRequest)
					var method = "PUT"
					var url = "/v1/opt_double"
					var body io.Reader
					if req.OptDouble != nil {
						body = strings.NewReader(strconv.FormatFloat(*req.OptDouble, 'f', -1, 64))
					}
					r, err := http1.NewRequestWithContext(ctx, method, url, body)
					if err != nil {
						return nil, err
					}
					return r, nil
				},
				func(ctx context.Context, r *http1.Response) (interface{}, error) {
					return nil, nil
				},
				opts...,
			).Endpoint(),
			mdw...),
		repFloat64: endpointx.Chain(
			http.NewExplicitClient(
				func(ctx context.Context, obj interface{}) (*http1.Request, error) {
					req := obj.(*BodyRequest)
					var method = "PUT"
					var url = "/v1/rep_double"
					var body io.Reader
					if req.RepDouble != nil {
						if err := json.NewDecoder(body).Decode(req.RepDouble); err != nil {
							return nil, err
						}
					}
					r, err := http1.NewRequestWithContext(ctx, method, url, body)
					if err != nil {
						return nil, err
					}
					return r, nil
				},
				func(ctx context.Context, r *http1.Response) (interface{}, error) {
					return nil, nil
				},
				opts...,
			).Endpoint(),
			mdw...),
		wrapFloat64: endpointx.Chain(
			http.NewExplicitClient(
				func(ctx context.Context, obj interface{}) (*http1.Request, error) {
					req := obj.(*BodyRequest)
					var method = "PUT"
					var url = "/v1/wrap_double"
					var body io.Reader
					if req.WrapDouble != nil {
						body = strings.NewReader(strconv.FormatFloat(req.WrapDouble.Value, 'f', -1, 64))
					}
					r, err := http1.NewRequestWithContext(ctx, method, url, body)
					if err != nil {
						return nil, err
					}
					return r, nil
				},
				func(ctx context.Context, r *http1.Response) (interface{}, error) {
					return nil, nil
				},
				opts...,
			).Endpoint(),
			mdw...),
		string: endpointx.Chain(
			http.NewExplicitClient(
				func(ctx context.Context, obj interface{}) (*http1.Request, error) {
					req := obj.(*BodyRequest)
					var method = "PUT"
					var url = "/v1/string"
					var body io.Reader
					body = strings.NewReader(req.String_)
					r, err := http1.NewRequestWithContext(ctx, method, url, body)
					if err != nil {
						return nil, err
					}
					return r, nil
				},
				func(ctx context.Context, r *http1.Response) (interface{}, error) {
					return nil, nil
				},
				opts...,
			).Endpoint(),
			mdw...),
		optString: endpointx.Chain(
			http.NewExplicitClient(
				func(ctx context.Context, obj interface{}) (*http1.Request, error) {
					req := obj.(*BodyRequest)
					var method = "PUT"
					var url = "/v1/opt_string"
					var body io.Reader
					if req.OptString != nil {
						body = strings.NewReader(*req.OptString)
					}
					r, err := http1.NewRequestWithContext(ctx, method, url, body)
					if err != nil {
						return nil, err
					}
					return r, nil
				},
				func(ctx context.Context, r *http1.Response) (interface{}, error) {
					return nil, nil
				},
				opts...,
			).Endpoint(),
			mdw...),
		repString: endpointx.Chain(
			http.NewExplicitClient(
				func(ctx context.Context, obj interface{}) (*http1.Request, error) {
					req := obj.(*BodyRequest)
					var method = "PUT"
					var url = "/v1/rep_string"
					var body io.Reader
					if req.RepString != nil {
						if err := json.NewDecoder(body).Decode(req.RepString); err != nil {
							return nil, err
						}
					}
					r, err := http1.NewRequestWithContext(ctx, method, url, body)
					if err != nil {
						return nil, err
					}
					return r, nil
				},
				func(ctx context.Context, r *http1.Response) (interface{}, error) {
					return nil, nil
				},
				opts...,
			).Endpoint(),
			mdw...),
		wrapString: endpointx.Chain(
			http.NewExplicitClient(
				func(ctx context.Context, obj interface{}) (*http1.Request, error) {
					req := obj.(*BodyRequest)
					var method = "PUT"
					var url = "/v1/wrap_string"
					var body io.Reader
					if req.WrapString != nil {
						body = strings.NewReader(req.WrapString.Value)
					}
					r, err := http1.NewRequestWithContext(ctx, method, url, body)
					if err != nil {
						return nil, err
					}
					return r, nil
				},
				func(ctx context.Context, r *http1.Response) (interface{}, error) {
					return nil, nil
				},
				opts...,
			).Endpoint(),
			mdw...),
		bytes: endpointx.Chain(
			http.NewExplicitClient(
				func(ctx context.Context, obj interface{}) (*http1.Request, error) {
					req := obj.(*BodyRequest)
					var method = "PUT"
					var url = "/v1/bytes"
					var body io.Reader
					body = bytes.NewReader(req.Bytes)
					r, err := http1.NewRequestWithContext(ctx, method, url, body)
					if err != nil {
						return nil, err
					}
					return r, nil
				},
				func(ctx context.Context, r *http1.Response) (interface{}, error) {
					return nil, nil
				},
				opts...,
			).Endpoint(),
			mdw...),
		optBytes: endpointx.Chain(
			http.NewExplicitClient(
				func(ctx context.Context, obj interface{}) (*http1.Request, error) {
					req := obj.(*BodyRequest)
					var method = "PUT"
					var url = "/v1/opt_bytes"
					var body io.Reader
					body = bytes.NewReader(req.OptBytes)
					r, err := http1.NewRequestWithContext(ctx, method, url, body)
					if err != nil {
						return nil, err
					}
					return r, nil
				},
				func(ctx context.Context, r *http1.Response) (interface{}, error) {
					return nil, nil
				},
				opts...,
			).Endpoint(),
			mdw...),
		repBytes: endpointx.Chain(
			http.NewExplicitClient(
				func(ctx context.Context, obj interface{}) (*http1.Request, error) {
					req := obj.(*BodyRequest)
					var method = "PUT"
					var url = "/v1/rep_bytes"
					var body io.Reader
					if req.RepBytes != nil {
						if err := json.NewDecoder(body).Decode(req.RepBytes); err != nil {
							return nil, err
						}
					}
					r, err := http1.NewRequestWithContext(ctx, method, url, body)
					if err != nil {
						return nil, err
					}
					return r, nil
				},
				func(ctx context.Context, r *http1.Response) (interface{}, error) {
					return nil, nil
				},
				opts...,
			).Endpoint(),
			mdw...),
		wrapBytes: endpointx.Chain(
			http.NewExplicitClient(
				func(ctx context.Context, obj interface{}) (*http1.Request, error) {
					req := obj.(*BodyRequest)
					var method = "PUT"
					var url = "/v1/wrap_bytes"
					var body io.Reader
					if req.WrapBytes != nil {
						body = bytes.NewReader(req.WrapBytes.Value)
					}
					r, err := http1.NewRequestWithContext(ctx, method, url, body)
					if err != nil {
						return nil, err
					}
					return r, nil
				},
				func(ctx context.Context, r *http1.Response) (interface{}, error) {
					return nil, nil
				},
				opts...,
			).Endpoint(),
			mdw...),
	}
}
