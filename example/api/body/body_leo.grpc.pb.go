// Code generated by protoc-gen-leo-grpc. DO NOT EDIT.

package body

import (
	context "context"
	endpoint "github.com/go-kit/kit/endpoint"
	grpc "github.com/go-kit/kit/transport/grpc"
	errorx "github.com/go-leo/gox/errorx"
	endpointx "github.com/go-leo/leo/v3/endpointx"
	statusx "github.com/go-leo/leo/v3/statusx"
	transportx "github.com/go-leo/leo/v3/transportx"
	grpcx "github.com/go-leo/leo/v3/transportx/grpcx"
	httpbody "google.golang.org/genproto/googleapis/api/httpbody"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// =========================== grpc server ===========================

type BodyGrpcServerTransports interface {
	StarBody() *grpc.Server
	NamedBody() *grpc.Server
	NonBody() *grpc.Server
	HttpBodyStarBody() *grpc.Server
	HttpBodyNamedBody() *grpc.Server
}

type bodyGrpcServerTransports struct {
	starBody          *grpc.Server
	namedBody         *grpc.Server
	nonBody           *grpc.Server
	httpBodyStarBody  *grpc.Server
	httpBodyNamedBody *grpc.Server
}

func (t *bodyGrpcServerTransports) StarBody() *grpc.Server {
	return t.starBody
}

func (t *bodyGrpcServerTransports) NamedBody() *grpc.Server {
	return t.namedBody
}

func (t *bodyGrpcServerTransports) NonBody() *grpc.Server {
	return t.nonBody
}

func (t *bodyGrpcServerTransports) HttpBodyStarBody() *grpc.Server {
	return t.httpBodyStarBody
}

func (t *bodyGrpcServerTransports) HttpBodyNamedBody() *grpc.Server {
	return t.httpBodyNamedBody
}

func newBodyGrpcServerTransports(endpoints BodyEndpoints) BodyGrpcServerTransports {
	return &bodyGrpcServerTransports{
		starBody:          _Body_StarBody_GrpcServer_Transport(endpoints),
		namedBody:         _Body_NamedBody_GrpcServer_Transport(endpoints),
		nonBody:           _Body_NonBody_GrpcServer_Transport(endpoints),
		httpBodyStarBody:  _Body_HttpBodyStarBody_GrpcServer_Transport(endpoints),
		httpBodyNamedBody: _Body_HttpBodyNamedBody_GrpcServer_Transport(endpoints),
	}
}

type bodyGrpcServer struct {
	starBody          *grpc.Server
	namedBody         *grpc.Server
	nonBody           *grpc.Server
	httpBodyStarBody  *grpc.Server
	httpBodyNamedBody *grpc.Server
}

func (s *bodyGrpcServer) StarBody(ctx context.Context, request *User) (*emptypb.Empty, error) {
	ctx, rep, err := s.starBody.ServeGRPC(ctx, request)
	if err != nil {
		return nil, err
	}
	_ = ctx
	return rep.(*emptypb.Empty), nil
}

func (s *bodyGrpcServer) NamedBody(ctx context.Context, request *UserRequest) (*emptypb.Empty, error) {
	ctx, rep, err := s.namedBody.ServeGRPC(ctx, request)
	if err != nil {
		return nil, err
	}
	_ = ctx
	return rep.(*emptypb.Empty), nil
}

func (s *bodyGrpcServer) NonBody(ctx context.Context, request *emptypb.Empty) (*emptypb.Empty, error) {
	ctx, rep, err := s.nonBody.ServeGRPC(ctx, request)
	if err != nil {
		return nil, err
	}
	_ = ctx
	return rep.(*emptypb.Empty), nil
}

func (s *bodyGrpcServer) HttpBodyStarBody(ctx context.Context, request *httpbody.HttpBody) (*emptypb.Empty, error) {
	ctx, rep, err := s.httpBodyStarBody.ServeGRPC(ctx, request)
	if err != nil {
		return nil, err
	}
	_ = ctx
	return rep.(*emptypb.Empty), nil
}

func (s *bodyGrpcServer) HttpBodyNamedBody(ctx context.Context, request *HttpBody) (*emptypb.Empty, error) {
	ctx, rep, err := s.httpBodyNamedBody.ServeGRPC(ctx, request)
	if err != nil {
		return nil, err
	}
	_ = ctx
	return rep.(*emptypb.Empty), nil
}

func NewBodyGrpcServer(svc BodyService, middlewares ...endpoint.Middleware) BodyService {
	endpoints := newBodyServerEndpoints(svc, middlewares...)
	transports := newBodyGrpcServerTransports(endpoints)
	return &bodyGrpcServer{
		starBody:          transports.StarBody(),
		namedBody:         transports.NamedBody(),
		nonBody:           transports.NonBody(),
		httpBodyStarBody:  transports.HttpBodyStarBody(),
		httpBodyNamedBody: transports.HttpBodyNamedBody(),
	}
}

// =========================== grpc client ===========================

type bodyGrpcClientTransports struct {
	starBody          transportx.ClientTransport
	namedBody         transportx.ClientTransport
	nonBody           transportx.ClientTransport
	httpBodyStarBody  transportx.ClientTransport
	httpBodyNamedBody transportx.ClientTransport
}

func (t *bodyGrpcClientTransports) StarBody() transportx.ClientTransport {
	return t.starBody
}

func (t *bodyGrpcClientTransports) NamedBody() transportx.ClientTransport {
	return t.namedBody
}

func (t *bodyGrpcClientTransports) NonBody() transportx.ClientTransport {
	return t.nonBody
}

func (t *bodyGrpcClientTransports) HttpBodyStarBody() transportx.ClientTransport {
	return t.httpBodyStarBody
}

func (t *bodyGrpcClientTransports) HttpBodyNamedBody() transportx.ClientTransport {
	return t.httpBodyNamedBody
}

func NewBodyGrpcClientTransports(target string, options ...transportx.ClientTransportOption) (BodyClientTransports, error) {
	t := &bodyGrpcClientTransports{}
	var err error
	t.starBody, err = errorx.Break[transportx.ClientTransport](err)(_Body_StarBody_GrpcClient_Transport(target, options...))
	t.namedBody, err = errorx.Break[transportx.ClientTransport](err)(_Body_NamedBody_GrpcClient_Transport(target, options...))
	t.nonBody, err = errorx.Break[transportx.ClientTransport](err)(_Body_NonBody_GrpcClient_Transport(target, options...))
	t.httpBodyStarBody, err = errorx.Break[transportx.ClientTransport](err)(_Body_HttpBodyStarBody_GrpcClient_Transport(target, options...))
	t.httpBodyNamedBody, err = errorx.Break[transportx.ClientTransport](err)(_Body_HttpBodyNamedBody_GrpcClient_Transport(target, options...))
	return t, err
}

type bodyGrpcClient struct {
	endpoints BodyEndpoints
}

func (c *bodyGrpcClient) StarBody(ctx context.Context, request *User) (*emptypb.Empty, error) {
	ctx = endpointx.InjectName(ctx, "/leo.example.body.v1.Body/StarBody")
	ctx = transportx.InjectName(ctx, grpcx.GrpcClient)
	rep, err := c.endpoints.StarBody(ctx)(ctx, request)
	if err != nil {
		return nil, statusx.FromGrpcError(err)
	}
	return rep.(*emptypb.Empty), nil
}

func (c *bodyGrpcClient) NamedBody(ctx context.Context, request *UserRequest) (*emptypb.Empty, error) {
	ctx = endpointx.InjectName(ctx, "/leo.example.body.v1.Body/NamedBody")
	ctx = transportx.InjectName(ctx, grpcx.GrpcClient)
	rep, err := c.endpoints.NamedBody(ctx)(ctx, request)
	if err != nil {
		return nil, statusx.FromGrpcError(err)
	}
	return rep.(*emptypb.Empty), nil
}

func (c *bodyGrpcClient) NonBody(ctx context.Context, request *emptypb.Empty) (*emptypb.Empty, error) {
	ctx = endpointx.InjectName(ctx, "/leo.example.body.v1.Body/NonBody")
	ctx = transportx.InjectName(ctx, grpcx.GrpcClient)
	rep, err := c.endpoints.NonBody(ctx)(ctx, request)
	if err != nil {
		return nil, statusx.FromGrpcError(err)
	}
	return rep.(*emptypb.Empty), nil
}

func (c *bodyGrpcClient) HttpBodyStarBody(ctx context.Context, request *httpbody.HttpBody) (*emptypb.Empty, error) {
	ctx = endpointx.InjectName(ctx, "/leo.example.body.v1.Body/HttpBodyStarBody")
	ctx = transportx.InjectName(ctx, grpcx.GrpcClient)
	rep, err := c.endpoints.HttpBodyStarBody(ctx)(ctx, request)
	if err != nil {
		return nil, statusx.FromGrpcError(err)
	}
	return rep.(*emptypb.Empty), nil
}

func (c *bodyGrpcClient) HttpBodyNamedBody(ctx context.Context, request *HttpBody) (*emptypb.Empty, error) {
	ctx = endpointx.InjectName(ctx, "/leo.example.body.v1.Body/HttpBodyNamedBody")
	ctx = transportx.InjectName(ctx, grpcx.GrpcClient)
	rep, err := c.endpoints.HttpBodyNamedBody(ctx)(ctx, request)
	if err != nil {
		return nil, statusx.FromGrpcError(err)
	}
	return rep.(*emptypb.Empty), nil
}

func NewBodyGrpcClient(transports BodyClientTransports, middlewares ...endpoint.Middleware) BodyService {
	endpoints := newBodyClientEndpoints(transports, middlewares...)
	return &bodyGrpcClient{endpoints: endpoints}
}

// =========================== grpc transport ===========================

func _Body_StarBody_GrpcServer_Transport(endpoints BodyEndpoints) *grpc.Server {
	return grpc.NewServer(
		endpoints.StarBody(context.TODO()),
		func(_ context.Context, v any) (any, error) { return v, nil },
		func(_ context.Context, v any) (any, error) { return v, nil },
		grpc.ServerBefore(grpcx.ServerEndpointInjector("/leo.example.body.v1.Body/StarBody")),
		grpc.ServerBefore(grpcx.ServerTransportInjector),
		grpc.ServerBefore(grpcx.IncomingMetadataInjector),
	)
}

func _Body_StarBody_GrpcClient_Transport(target string, options ...transportx.ClientTransportOption) func() (transportx.ClientTransport, error) {
	return func() (transportx.ClientTransport, error) {
		return transportx.NewClientTransport(
			target,
			grpcx.ClientFactory(
				"leo.example.body.v1.Body",
				"StarBody",
				func(_ context.Context, v any) (any, error) { return v, nil },
				func(_ context.Context, v any) (any, error) { return v, nil },
				emptypb.Empty{},
				grpc.ClientBefore(grpcx.OutgoingMetadataInjector),
			),
			options...,
		)
	}
}

func _Body_NamedBody_GrpcServer_Transport(endpoints BodyEndpoints) *grpc.Server {
	return grpc.NewServer(
		endpoints.NamedBody(context.TODO()),
		func(_ context.Context, v any) (any, error) { return v, nil },
		func(_ context.Context, v any) (any, error) { return v, nil },
		grpc.ServerBefore(grpcx.ServerEndpointInjector("/leo.example.body.v1.Body/NamedBody")),
		grpc.ServerBefore(grpcx.ServerTransportInjector),
		grpc.ServerBefore(grpcx.IncomingMetadataInjector),
	)
}

func _Body_NamedBody_GrpcClient_Transport(target string, options ...transportx.ClientTransportOption) func() (transportx.ClientTransport, error) {
	return func() (transportx.ClientTransport, error) {
		return transportx.NewClientTransport(
			target,
			grpcx.ClientFactory(
				"leo.example.body.v1.Body",
				"NamedBody",
				func(_ context.Context, v any) (any, error) { return v, nil },
				func(_ context.Context, v any) (any, error) { return v, nil },
				emptypb.Empty{},
				grpc.ClientBefore(grpcx.OutgoingMetadataInjector),
			),
			options...,
		)
	}
}

func _Body_NonBody_GrpcServer_Transport(endpoints BodyEndpoints) *grpc.Server {
	return grpc.NewServer(
		endpoints.NonBody(context.TODO()),
		func(_ context.Context, v any) (any, error) { return v, nil },
		func(_ context.Context, v any) (any, error) { return v, nil },
		grpc.ServerBefore(grpcx.ServerEndpointInjector("/leo.example.body.v1.Body/NonBody")),
		grpc.ServerBefore(grpcx.ServerTransportInjector),
		grpc.ServerBefore(grpcx.IncomingMetadataInjector),
	)
}

func _Body_NonBody_GrpcClient_Transport(target string, options ...transportx.ClientTransportOption) func() (transportx.ClientTransport, error) {
	return func() (transportx.ClientTransport, error) {
		return transportx.NewClientTransport(
			target,
			grpcx.ClientFactory(
				"leo.example.body.v1.Body",
				"NonBody",
				func(_ context.Context, v any) (any, error) { return v, nil },
				func(_ context.Context, v any) (any, error) { return v, nil },
				emptypb.Empty{},
				grpc.ClientBefore(grpcx.OutgoingMetadataInjector),
			),
			options...,
		)
	}
}

func _Body_HttpBodyStarBody_GrpcServer_Transport(endpoints BodyEndpoints) *grpc.Server {
	return grpc.NewServer(
		endpoints.HttpBodyStarBody(context.TODO()),
		func(_ context.Context, v any) (any, error) { return v, nil },
		func(_ context.Context, v any) (any, error) { return v, nil },
		grpc.ServerBefore(grpcx.ServerEndpointInjector("/leo.example.body.v1.Body/HttpBodyStarBody")),
		grpc.ServerBefore(grpcx.ServerTransportInjector),
		grpc.ServerBefore(grpcx.IncomingMetadataInjector),
	)
}

func _Body_HttpBodyStarBody_GrpcClient_Transport(target string, options ...transportx.ClientTransportOption) func() (transportx.ClientTransport, error) {
	return func() (transportx.ClientTransport, error) {
		return transportx.NewClientTransport(
			target,
			grpcx.ClientFactory(
				"leo.example.body.v1.Body",
				"HttpBodyStarBody",
				func(_ context.Context, v any) (any, error) { return v, nil },
				func(_ context.Context, v any) (any, error) { return v, nil },
				emptypb.Empty{},
				grpc.ClientBefore(grpcx.OutgoingMetadataInjector),
			),
			options...,
		)
	}
}

func _Body_HttpBodyNamedBody_GrpcServer_Transport(endpoints BodyEndpoints) *grpc.Server {
	return grpc.NewServer(
		endpoints.HttpBodyNamedBody(context.TODO()),
		func(_ context.Context, v any) (any, error) { return v, nil },
		func(_ context.Context, v any) (any, error) { return v, nil },
		grpc.ServerBefore(grpcx.ServerEndpointInjector("/leo.example.body.v1.Body/HttpBodyNamedBody")),
		grpc.ServerBefore(grpcx.ServerTransportInjector),
		grpc.ServerBefore(grpcx.IncomingMetadataInjector),
	)
}

func _Body_HttpBodyNamedBody_GrpcClient_Transport(target string, options ...transportx.ClientTransportOption) func() (transportx.ClientTransport, error) {
	return func() (transportx.ClientTransport, error) {
		return transportx.NewClientTransport(
			target,
			grpcx.ClientFactory(
				"leo.example.body.v1.Body",
				"HttpBodyNamedBody",
				func(_ context.Context, v any) (any, error) { return v, nil },
				func(_ context.Context, v any) (any, error) { return v, nil },
				emptypb.Empty{},
				grpc.ClientBefore(grpcx.OutgoingMetadataInjector),
			),
			options...,
		)
	}
}
