// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package body

import (
	context "context"
	endpoint "github.com/go-kit/kit/endpoint"
	grpc "github.com/go-kit/kit/transport/grpc"
	endpointx "github.com/go-leo/leo/v3/endpointx"
	httpbody "google.golang.org/genproto/googleapis/api/httpbody"
	http "google.golang.org/genproto/googleapis/rpc/http"
	grpc1 "google.golang.org/grpc"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// =========================== endpoints ===========================

type BodyService interface {
	StarBody(ctx context.Context, request *User) (*emptypb.Empty, error)
	NamedBody(ctx context.Context, request *UserRequest) (*emptypb.Empty, error)
	NonBody(ctx context.Context, request *emptypb.Empty) (*emptypb.Empty, error)
	HttpBodyStarBody(ctx context.Context, request *httpbody.HttpBody) (*emptypb.Empty, error)
	HttpBodyNamedBody(ctx context.Context, request *HttpBody) (*emptypb.Empty, error)
	HttpRequestStarBody(ctx context.Context, request *http.HttpRequest) (*emptypb.Empty, error)
}

type BodyEndpoints interface {
	StarBody() endpoint.Endpoint
	NamedBody() endpoint.Endpoint
	NonBody() endpoint.Endpoint
	HttpBodyStarBody() endpoint.Endpoint
	HttpBodyNamedBody() endpoint.Endpoint
	HttpRequestStarBody() endpoint.Endpoint
}

type bodyEndpoints struct {
	svc         BodyService
	middlewares []endpoint.Middleware
}

func (e *bodyEndpoints) StarBody() endpoint.Endpoint {
	component := func(ctx context.Context, request any) (any, error) {
		return e.svc.StarBody(ctx, request.(*User))
	}
	return endpointx.Chain(component, e.middlewares...)
}

func (e *bodyEndpoints) NamedBody() endpoint.Endpoint {
	component := func(ctx context.Context, request any) (any, error) {
		return e.svc.NamedBody(ctx, request.(*UserRequest))
	}
	return endpointx.Chain(component, e.middlewares...)
}

func (e *bodyEndpoints) NonBody() endpoint.Endpoint {
	component := func(ctx context.Context, request any) (any, error) {
		return e.svc.NonBody(ctx, request.(*emptypb.Empty))
	}
	return endpointx.Chain(component, e.middlewares...)
}

func (e *bodyEndpoints) HttpBodyStarBody() endpoint.Endpoint {
	component := func(ctx context.Context, request any) (any, error) {
		return e.svc.HttpBodyStarBody(ctx, request.(*httpbody.HttpBody))
	}
	return endpointx.Chain(component, e.middlewares...)
}

func (e *bodyEndpoints) HttpBodyNamedBody() endpoint.Endpoint {
	component := func(ctx context.Context, request any) (any, error) {
		return e.svc.HttpBodyNamedBody(ctx, request.(*HttpBody))
	}
	return endpointx.Chain(component, e.middlewares...)
}

func (e *bodyEndpoints) HttpRequestStarBody() endpoint.Endpoint {
	component := func(ctx context.Context, request any) (any, error) {
		return e.svc.HttpRequestStarBody(ctx, request.(*http.HttpRequest))
	}
	return endpointx.Chain(component, e.middlewares...)
}

func NewBodyEndpoints(svc BodyService, middlewares ...endpoint.Middleware) BodyEndpoints {
	return &bodyEndpoints{svc: svc, middlewares: middlewares}
}

// =========================== cqrs ===========================

// =========================== grpc transports ===========================

type BodyGrpcServerTransports interface {
	StarBody() *grpc.Server
	NamedBody() *grpc.Server
	NonBody() *grpc.Server
	HttpBodyStarBody() *grpc.Server
	HttpBodyNamedBody() *grpc.Server
	HttpRequestStarBody() *grpc.Server
}

type BodyGrpcClientTransports interface {
	StarBody() *grpc.Client
	NamedBody() *grpc.Client
	NonBody() *grpc.Client
	HttpBodyStarBody() *grpc.Client
	HttpBodyNamedBody() *grpc.Client
	HttpRequestStarBody() *grpc.Client
}

type bodyGrpcServerTransports struct {
	starBody            *grpc.Server
	namedBody           *grpc.Server
	nonBody             *grpc.Server
	httpBodyStarBody    *grpc.Server
	httpBodyNamedBody   *grpc.Server
	httpRequestStarBody *grpc.Server
}

func (t *bodyGrpcServerTransports) StarBody() *grpc.Server {
	return t.starBody
}

func (t *bodyGrpcServerTransports) NamedBody() *grpc.Server {
	return t.namedBody
}

func (t *bodyGrpcServerTransports) NonBody() *grpc.Server {
	return t.nonBody
}

func (t *bodyGrpcServerTransports) HttpBodyStarBody() *grpc.Server {
	return t.httpBodyStarBody
}

func (t *bodyGrpcServerTransports) HttpBodyNamedBody() *grpc.Server {
	return t.httpBodyNamedBody
}

func (t *bodyGrpcServerTransports) HttpRequestStarBody() *grpc.Server {
	return t.httpRequestStarBody
}

func NewBodyGrpcServerTransports(endpoints BodyEndpoints, serverOptions ...grpc.ServerOption) BodyGrpcServerTransports {
	return &bodyGrpcServerTransports{
		starBody: grpc.NewServer(
			endpoints.StarBody(),
			func(_ context.Context, v any) (any, error) { return v, nil },
			func(_ context.Context, v any) (any, error) { return v, nil },
			serverOptions...,
		),
		namedBody: grpc.NewServer(
			endpoints.NamedBody(),
			func(_ context.Context, v any) (any, error) { return v, nil },
			func(_ context.Context, v any) (any, error) { return v, nil },
			serverOptions...,
		),
		nonBody: grpc.NewServer(
			endpoints.NonBody(),
			func(_ context.Context, v any) (any, error) { return v, nil },
			func(_ context.Context, v any) (any, error) { return v, nil },
			serverOptions...,
		),
		httpBodyStarBody: grpc.NewServer(
			endpoints.HttpBodyStarBody(),
			func(_ context.Context, v any) (any, error) { return v, nil },
			func(_ context.Context, v any) (any, error) { return v, nil },
			serverOptions...,
		),
		httpBodyNamedBody: grpc.NewServer(
			endpoints.HttpBodyNamedBody(),
			func(_ context.Context, v any) (any, error) { return v, nil },
			func(_ context.Context, v any) (any, error) { return v, nil },
			serverOptions...,
		),
		httpRequestStarBody: grpc.NewServer(
			endpoints.HttpRequestStarBody(),
			func(_ context.Context, v any) (any, error) { return v, nil },
			func(_ context.Context, v any) (any, error) { return v, nil },
			serverOptions...,
		),
	}
}

type bodyGrpcClientTransports struct {
	starBody            *grpc.Client
	namedBody           *grpc.Client
	nonBody             *grpc.Client
	httpBodyStarBody    *grpc.Client
	httpBodyNamedBody   *grpc.Client
	httpRequestStarBody *grpc.Client
}

func (t *bodyGrpcClientTransports) StarBody() *grpc.Client {
	return t.starBody
}

func (t *bodyGrpcClientTransports) NamedBody() *grpc.Client {
	return t.namedBody
}

func (t *bodyGrpcClientTransports) NonBody() *grpc.Client {
	return t.nonBody
}

func (t *bodyGrpcClientTransports) HttpBodyStarBody() *grpc.Client {
	return t.httpBodyStarBody
}

func (t *bodyGrpcClientTransports) HttpBodyNamedBody() *grpc.Client {
	return t.httpBodyNamedBody
}

func (t *bodyGrpcClientTransports) HttpRequestStarBody() *grpc.Client {
	return t.httpRequestStarBody
}

func NewBodyGrpcClientTransports(conn *grpc1.ClientConn, clientOptions ...grpc.ClientOption) BodyGrpcClientTransports {
	return &bodyGrpcClientTransports{
		starBody: grpc.NewClient(
			conn,
			"leo.example.body.v1.Body",
			"StarBody",
			func(_ context.Context, v any) (any, error) { return v, nil },
			func(_ context.Context, v any) (any, error) { return v, nil },
			emptypb.Empty{},
			clientOptions...,
		),
		namedBody: grpc.NewClient(
			conn,
			"leo.example.body.v1.Body",
			"NamedBody",
			func(_ context.Context, v any) (any, error) { return v, nil },
			func(_ context.Context, v any) (any, error) { return v, nil },
			emptypb.Empty{},
			clientOptions...,
		),
		nonBody: grpc.NewClient(
			conn,
			"leo.example.body.v1.Body",
			"NonBody",
			func(_ context.Context, v any) (any, error) { return v, nil },
			func(_ context.Context, v any) (any, error) { return v, nil },
			emptypb.Empty{},
			clientOptions...,
		),
		httpBodyStarBody: grpc.NewClient(
			conn,
			"leo.example.body.v1.Body",
			"HttpBodyStarBody",
			func(_ context.Context, v any) (any, error) { return v, nil },
			func(_ context.Context, v any) (any, error) { return v, nil },
			emptypb.Empty{},
			clientOptions...,
		),
		httpBodyNamedBody: grpc.NewClient(
			conn,
			"leo.example.body.v1.Body",
			"HttpBodyNamedBody",
			func(_ context.Context, v any) (any, error) { return v, nil },
			func(_ context.Context, v any) (any, error) { return v, nil },
			emptypb.Empty{},
			clientOptions...,
		),
		httpRequestStarBody: grpc.NewClient(
			conn,
			"leo.example.body.v1.Body",
			"HttpRequestStarBody",
			func(_ context.Context, v any) (any, error) { return v, nil },
			func(_ context.Context, v any) (any, error) { return v, nil },
			emptypb.Empty{},
			clientOptions...,
		),
	}
}

type bodyGrpcServer struct {
	starBody            *grpc.Server
	namedBody           *grpc.Server
	nonBody             *grpc.Server
	httpBodyStarBody    *grpc.Server
	httpBodyNamedBody   *grpc.Server
	httpRequestStarBody *grpc.Server
}

func (s *bodyGrpcServer) StarBody(ctx context.Context, request *User) (*emptypb.Empty, error) {
	ctx, rep, err := s.starBody.ServeGRPC(ctx, request)
	if err != nil {
		return nil, err
	}
	_ = ctx
	return rep.(*emptypb.Empty), nil
}

func (s *bodyGrpcServer) NamedBody(ctx context.Context, request *UserRequest) (*emptypb.Empty, error) {
	ctx, rep, err := s.namedBody.ServeGRPC(ctx, request)
	if err != nil {
		return nil, err
	}
	_ = ctx
	return rep.(*emptypb.Empty), nil
}

func (s *bodyGrpcServer) NonBody(ctx context.Context, request *emptypb.Empty) (*emptypb.Empty, error) {
	ctx, rep, err := s.nonBody.ServeGRPC(ctx, request)
	if err != nil {
		return nil, err
	}
	_ = ctx
	return rep.(*emptypb.Empty), nil
}

func (s *bodyGrpcServer) HttpBodyStarBody(ctx context.Context, request *httpbody.HttpBody) (*emptypb.Empty, error) {
	ctx, rep, err := s.httpBodyStarBody.ServeGRPC(ctx, request)
	if err != nil {
		return nil, err
	}
	_ = ctx
	return rep.(*emptypb.Empty), nil
}

func (s *bodyGrpcServer) HttpBodyNamedBody(ctx context.Context, request *HttpBody) (*emptypb.Empty, error) {
	ctx, rep, err := s.httpBodyNamedBody.ServeGRPC(ctx, request)
	if err != nil {
		return nil, err
	}
	_ = ctx
	return rep.(*emptypb.Empty), nil
}

func (s *bodyGrpcServer) HttpRequestStarBody(ctx context.Context, request *http.HttpRequest) (*emptypb.Empty, error) {
	ctx, rep, err := s.httpRequestStarBody.ServeGRPC(ctx, request)
	if err != nil {
		return nil, err
	}
	_ = ctx
	return rep.(*emptypb.Empty), nil
}

func NewBodyGrpcServer(transports BodyGrpcServerTransports) BodyService {
	return &bodyGrpcServer{
		starBody:            transports.StarBody(),
		namedBody:           transports.NamedBody(),
		nonBody:             transports.NonBody(),
		httpBodyStarBody:    transports.HttpBodyStarBody(),
		httpBodyNamedBody:   transports.HttpBodyNamedBody(),
		httpRequestStarBody: transports.HttpRequestStarBody(),
	}
}

type bodyGrpcClient struct {
	starBody            endpoint.Endpoint
	namedBody           endpoint.Endpoint
	nonBody             endpoint.Endpoint
	httpBodyStarBody    endpoint.Endpoint
	httpBodyNamedBody   endpoint.Endpoint
	httpRequestStarBody endpoint.Endpoint
}

func (c *bodyGrpcClient) StarBody(ctx context.Context, request *User) (*emptypb.Empty, error) {
	rep, err := c.starBody(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*emptypb.Empty), nil
}

func (c *bodyGrpcClient) NamedBody(ctx context.Context, request *UserRequest) (*emptypb.Empty, error) {
	rep, err := c.namedBody(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*emptypb.Empty), nil
}

func (c *bodyGrpcClient) NonBody(ctx context.Context, request *emptypb.Empty) (*emptypb.Empty, error) {
	rep, err := c.nonBody(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*emptypb.Empty), nil
}

func (c *bodyGrpcClient) HttpBodyStarBody(ctx context.Context, request *httpbody.HttpBody) (*emptypb.Empty, error) {
	rep, err := c.httpBodyStarBody(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*emptypb.Empty), nil
}

func (c *bodyGrpcClient) HttpBodyNamedBody(ctx context.Context, request *HttpBody) (*emptypb.Empty, error) {
	rep, err := c.httpBodyNamedBody(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*emptypb.Empty), nil
}

func (c *bodyGrpcClient) HttpRequestStarBody(ctx context.Context, request *http.HttpRequest) (*emptypb.Empty, error) {
	rep, err := c.httpRequestStarBody(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*emptypb.Empty), nil
}

func NewBodyGrpcClient(transports BodyGrpcClientTransports, middlewares ...endpoint.Middleware) BodyService {
	return &bodyGrpcClient{
		starBody:            endpointx.Chain(transports.StarBody().Endpoint(), middlewares...),
		namedBody:           endpointx.Chain(transports.NamedBody().Endpoint(), middlewares...),
		nonBody:             endpointx.Chain(transports.NonBody().Endpoint(), middlewares...),
		httpBodyStarBody:    endpointx.Chain(transports.HttpBodyStarBody().Endpoint(), middlewares...),
		httpBodyNamedBody:   endpointx.Chain(transports.HttpBodyNamedBody().Endpoint(), middlewares...),
		httpRequestStarBody: endpointx.Chain(transports.HttpRequestStarBody().Endpoint(), middlewares...),
	}
}
