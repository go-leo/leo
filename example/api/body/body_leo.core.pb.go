// Code generated by protoc-gen-leo-core. DO NOT EDIT.

package body

import (
	context "context"
	endpoint "github.com/go-kit/kit/endpoint"
	sd "github.com/go-kit/kit/sd"
	lb "github.com/go-kit/kit/sd/lb"
	log "github.com/go-kit/log"
	lazyloadx "github.com/go-leo/gox/syncx/lazyloadx"
	endpointx "github.com/go-leo/leo/v3/endpointx"
	sdx "github.com/go-leo/leo/v3/sdx"
	lbx "github.com/go-leo/leo/v3/sdx/lbx"
	stainx "github.com/go-leo/leo/v3/sdx/stainx"
	statusx "github.com/go-leo/leo/v3/statusx"
	transportx "github.com/go-leo/leo/v3/transportx"
	httpbody "google.golang.org/genproto/googleapis/api/httpbody"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	io "io"
)

// BodyService is a service
type BodyService interface {
	StarBody(ctx context.Context, request *User) (*emptypb.Empty, error)
	NamedBody(ctx context.Context, request *UserRequest) (*emptypb.Empty, error)
	NonBody(ctx context.Context, request *emptypb.Empty) (*emptypb.Empty, error)
	HttpBodyStarBody(ctx context.Context, request *httpbody.HttpBody) (*emptypb.Empty, error)
	HttpBodyNamedBody(ctx context.Context, request *HttpBody) (*emptypb.Empty, error)
}

// BodyServerEndpoints is server endpoints
type BodyServerEndpoints interface {
	StarBody(ctx context.Context) endpoint.Endpoint
	NamedBody(ctx context.Context) endpoint.Endpoint
	NonBody(ctx context.Context) endpoint.Endpoint
	HttpBodyStarBody(ctx context.Context) endpoint.Endpoint
	HttpBodyNamedBody(ctx context.Context) endpoint.Endpoint
}

// BodyClientEndpoints is client endpoints
type BodyClientEndpoints interface {
	StarBody(ctx context.Context) (endpoint.Endpoint, error)
	NamedBody(ctx context.Context) (endpoint.Endpoint, error)
	NonBody(ctx context.Context) (endpoint.Endpoint, error)
	HttpBodyStarBody(ctx context.Context) (endpoint.Endpoint, error)
	HttpBodyNamedBody(ctx context.Context) (endpoint.Endpoint, error)
}

// BodyClientTransports is client transports
type BodyClientTransports interface {
	StarBody(ctx context.Context, instance string) (endpoint.Endpoint, io.Closer, error)
	NamedBody(ctx context.Context, instance string) (endpoint.Endpoint, io.Closer, error)
	NonBody(ctx context.Context, instance string) (endpoint.Endpoint, io.Closer, error)
	HttpBodyStarBody(ctx context.Context, instance string) (endpoint.Endpoint, io.Closer, error)
	HttpBodyNamedBody(ctx context.Context, instance string) (endpoint.Endpoint, io.Closer, error)
}

// BodyFactories is client factories
type BodyFactories interface {
	StarBody(ctx context.Context) sd.Factory
	NamedBody(ctx context.Context) sd.Factory
	NonBody(ctx context.Context) sd.Factory
	HttpBodyStarBody(ctx context.Context) sd.Factory
	HttpBodyNamedBody(ctx context.Context) sd.Factory
}

// BodyEndpointers is client endpointers
type BodyEndpointers interface {
	StarBody(ctx context.Context, color string) (sd.Endpointer, error)
	NamedBody(ctx context.Context, color string) (sd.Endpointer, error)
	NonBody(ctx context.Context, color string) (sd.Endpointer, error)
	HttpBodyStarBody(ctx context.Context, color string) (sd.Endpointer, error)
	HttpBodyNamedBody(ctx context.Context, color string) (sd.Endpointer, error)
}

// BodyBalancers is client balancers
type BodyBalancers interface {
	StarBody(ctx context.Context) (lb.Balancer, error)
	NamedBody(ctx context.Context) (lb.Balancer, error)
	NonBody(ctx context.Context) (lb.Balancer, error)
	HttpBodyStarBody(ctx context.Context) (lb.Balancer, error)
	HttpBodyNamedBody(ctx context.Context) (lb.Balancer, error)
}

// bodyServerEndpoints implements BodyServerEndpoints
type bodyServerEndpoints struct {
	svc         BodyService
	middlewares []endpoint.Middleware
}

func (e *bodyServerEndpoints) StarBody(context.Context) endpoint.Endpoint {
	component := func(ctx context.Context, request any) (any, error) {
		return e.svc.StarBody(ctx, request.(*User))
	}
	return endpointx.Chain(component, e.middlewares...)
}
func (e *bodyServerEndpoints) NamedBody(context.Context) endpoint.Endpoint {
	component := func(ctx context.Context, request any) (any, error) {
		return e.svc.NamedBody(ctx, request.(*UserRequest))
	}
	return endpointx.Chain(component, e.middlewares...)
}
func (e *bodyServerEndpoints) NonBody(context.Context) endpoint.Endpoint {
	component := func(ctx context.Context, request any) (any, error) {
		return e.svc.NonBody(ctx, request.(*emptypb.Empty))
	}
	return endpointx.Chain(component, e.middlewares...)
}
func (e *bodyServerEndpoints) HttpBodyStarBody(context.Context) endpoint.Endpoint {
	component := func(ctx context.Context, request any) (any, error) {
		return e.svc.HttpBodyStarBody(ctx, request.(*httpbody.HttpBody))
	}
	return endpointx.Chain(component, e.middlewares...)
}
func (e *bodyServerEndpoints) HttpBodyNamedBody(context.Context) endpoint.Endpoint {
	component := func(ctx context.Context, request any) (any, error) {
		return e.svc.HttpBodyNamedBody(ctx, request.(*HttpBody))
	}
	return endpointx.Chain(component, e.middlewares...)
}
func newBodyServerEndpoints(svc BodyService, middlewares ...endpoint.Middleware) BodyServerEndpoints {
	return &bodyServerEndpoints{svc: svc, middlewares: middlewares}
}

// bodyClientEndpoints implements BodyClientEndpoints
type bodyClientEndpoints struct {
	balancers BodyBalancers
}

func (e *bodyClientEndpoints) StarBody(ctx context.Context) (endpoint.Endpoint, error) {
	balancer, err := e.balancers.StarBody(ctx)
	if err != nil {
		return nil, err
	}
	return balancer.Endpoint()
}
func (e *bodyClientEndpoints) NamedBody(ctx context.Context) (endpoint.Endpoint, error) {
	balancer, err := e.balancers.NamedBody(ctx)
	if err != nil {
		return nil, err
	}
	return balancer.Endpoint()
}
func (e *bodyClientEndpoints) NonBody(ctx context.Context) (endpoint.Endpoint, error) {
	balancer, err := e.balancers.NonBody(ctx)
	if err != nil {
		return nil, err
	}
	return balancer.Endpoint()
}
func (e *bodyClientEndpoints) HttpBodyStarBody(ctx context.Context) (endpoint.Endpoint, error) {
	balancer, err := e.balancers.HttpBodyStarBody(ctx)
	if err != nil {
		return nil, err
	}
	return balancer.Endpoint()
}
func (e *bodyClientEndpoints) HttpBodyNamedBody(ctx context.Context) (endpoint.Endpoint, error) {
	balancer, err := e.balancers.HttpBodyNamedBody(ctx)
	if err != nil {
		return nil, err
	}
	return balancer.Endpoint()
}
func newBodyClientEndpoints(
	target string,
	transports BodyClientTransports,
	instancerFactory sdx.InstancerFactory,
	endpointerOptions []sd.EndpointerOption,
	balancerFactory lbx.BalancerFactory,
	logger log.Logger,
) BodyClientEndpoints {
	factories := newBodyFactories(transports)
	endpointers := newBodyEndpointers(target, instancerFactory, factories, logger, endpointerOptions...)
	balancers := newBodyBalancers(balancerFactory, endpointers)
	return &bodyClientEndpoints{balancers: balancers}
}

// bodyFactories implements BodyFactories
type bodyFactories struct {
	transports BodyClientTransports
}

func (f *bodyFactories) StarBody(ctx context.Context) sd.Factory {
	return func(instance string) (endpoint.Endpoint, io.Closer, error) {
		return f.transports.StarBody(ctx, instance)
	}
}
func (f *bodyFactories) NamedBody(ctx context.Context) sd.Factory {
	return func(instance string) (endpoint.Endpoint, io.Closer, error) {
		return f.transports.NamedBody(ctx, instance)
	}
}
func (f *bodyFactories) NonBody(ctx context.Context) sd.Factory {
	return func(instance string) (endpoint.Endpoint, io.Closer, error) {
		return f.transports.NonBody(ctx, instance)
	}
}
func (f *bodyFactories) HttpBodyStarBody(ctx context.Context) sd.Factory {
	return func(instance string) (endpoint.Endpoint, io.Closer, error) {
		return f.transports.HttpBodyStarBody(ctx, instance)
	}
}
func (f *bodyFactories) HttpBodyNamedBody(ctx context.Context) sd.Factory {
	return func(instance string) (endpoint.Endpoint, io.Closer, error) {
		return f.transports.HttpBodyNamedBody(ctx, instance)
	}
}
func newBodyFactories(transports BodyClientTransports) BodyFactories {
	return &bodyFactories{transports: transports}
}

// bodyEndpointers implements BodyEndpointers
type bodyEndpointers struct {
	target           string
	instancerFactory sdx.InstancerFactory
	factories        BodyFactories
	logger           log.Logger
	options          []sd.EndpointerOption
}

func (e *bodyEndpointers) StarBody(ctx context.Context, color string) (sd.Endpointer, error) {
	return sdx.NewEndpointer(ctx, e.target, color, e.instancerFactory, e.factories.StarBody(ctx), e.logger, e.options...)
}
func (e *bodyEndpointers) NamedBody(ctx context.Context, color string) (sd.Endpointer, error) {
	return sdx.NewEndpointer(ctx, e.target, color, e.instancerFactory, e.factories.NamedBody(ctx), e.logger, e.options...)
}
func (e *bodyEndpointers) NonBody(ctx context.Context, color string) (sd.Endpointer, error) {
	return sdx.NewEndpointer(ctx, e.target, color, e.instancerFactory, e.factories.NonBody(ctx), e.logger, e.options...)
}
func (e *bodyEndpointers) HttpBodyStarBody(ctx context.Context, color string) (sd.Endpointer, error) {
	return sdx.NewEndpointer(ctx, e.target, color, e.instancerFactory, e.factories.HttpBodyStarBody(ctx), e.logger, e.options...)
}
func (e *bodyEndpointers) HttpBodyNamedBody(ctx context.Context, color string) (sd.Endpointer, error) {
	return sdx.NewEndpointer(ctx, e.target, color, e.instancerFactory, e.factories.HttpBodyNamedBody(ctx), e.logger, e.options...)
}
func newBodyEndpointers(
	target string,
	instancerFactory sdx.InstancerFactory,
	factories BodyFactories,
	logger log.Logger,
	options ...sd.EndpointerOption,
) BodyEndpointers {
	return &bodyEndpointers{
		target:           target,
		instancerFactory: instancerFactory,
		factories:        factories,
		logger:           logger,
		options:          options,
	}
}

// bodyBalancers implements BodyBalancers
type bodyBalancers struct {
	factory           lbx.BalancerFactory
	endpointer        BodyEndpointers
	starBody          lazyloadx.Group[lb.Balancer]
	namedBody         lazyloadx.Group[lb.Balancer]
	nonBody           lazyloadx.Group[lb.Balancer]
	httpBodyStarBody  lazyloadx.Group[lb.Balancer]
	httpBodyNamedBody lazyloadx.Group[lb.Balancer]
}

func (b *bodyBalancers) StarBody(ctx context.Context) (lb.Balancer, error) {
	color, _ := stainx.ExtractColor(ctx)
	balancer, err, _ := b.starBody.LoadOrNew(color, lbx.NewBalancer(ctx, b.factory, b.endpointer.StarBody))
	return balancer, err
}
func (b *bodyBalancers) NamedBody(ctx context.Context) (lb.Balancer, error) {
	color, _ := stainx.ExtractColor(ctx)
	balancer, err, _ := b.namedBody.LoadOrNew(color, lbx.NewBalancer(ctx, b.factory, b.endpointer.NamedBody))
	return balancer, err
}
func (b *bodyBalancers) NonBody(ctx context.Context) (lb.Balancer, error) {
	color, _ := stainx.ExtractColor(ctx)
	balancer, err, _ := b.nonBody.LoadOrNew(color, lbx.NewBalancer(ctx, b.factory, b.endpointer.NonBody))
	return balancer, err
}
func (b *bodyBalancers) HttpBodyStarBody(ctx context.Context) (lb.Balancer, error) {
	color, _ := stainx.ExtractColor(ctx)
	balancer, err, _ := b.httpBodyStarBody.LoadOrNew(color, lbx.NewBalancer(ctx, b.factory, b.endpointer.HttpBodyStarBody))
	return balancer, err
}
func (b *bodyBalancers) HttpBodyNamedBody(ctx context.Context) (lb.Balancer, error) {
	color, _ := stainx.ExtractColor(ctx)
	balancer, err, _ := b.httpBodyNamedBody.LoadOrNew(color, lbx.NewBalancer(ctx, b.factory, b.endpointer.HttpBodyNamedBody))
	return balancer, err
}
func newBodyBalancers(factory lbx.BalancerFactory, endpointer BodyEndpointers) BodyBalancers {
	return &bodyBalancers{
		factory:           factory,
		endpointer:        endpointer,
		starBody:          lazyloadx.Group[lb.Balancer]{},
		namedBody:         lazyloadx.Group[lb.Balancer]{},
		nonBody:           lazyloadx.Group[lb.Balancer]{},
		httpBodyStarBody:  lazyloadx.Group[lb.Balancer]{},
		httpBodyNamedBody: lazyloadx.Group[lb.Balancer]{},
	}
}

// bodyClientService implements BodyClientService
type bodyClientService struct {
	endpoints     BodyClientEndpoints
	transportName string
}

func (c *bodyClientService) StarBody(ctx context.Context, request *User) (*emptypb.Empty, error) {
	ctx = endpointx.InjectName(ctx, "/leo.example.body.v1.Body/StarBody")
	ctx = transportx.InjectName(ctx, c.transportName)
	endpoint, err := c.endpoints.StarBody(ctx)
	if err != nil {
		return nil, err
	}
	rep, err := endpoint(ctx, request)
	if err != nil {
		return nil, statusx.From(err)
	}
	return rep.(*emptypb.Empty), nil
}
func (c *bodyClientService) NamedBody(ctx context.Context, request *UserRequest) (*emptypb.Empty, error) {
	ctx = endpointx.InjectName(ctx, "/leo.example.body.v1.Body/NamedBody")
	ctx = transportx.InjectName(ctx, c.transportName)
	endpoint, err := c.endpoints.NamedBody(ctx)
	if err != nil {
		return nil, err
	}
	rep, err := endpoint(ctx, request)
	if err != nil {
		return nil, statusx.From(err)
	}
	return rep.(*emptypb.Empty), nil
}
func (c *bodyClientService) NonBody(ctx context.Context, request *emptypb.Empty) (*emptypb.Empty, error) {
	ctx = endpointx.InjectName(ctx, "/leo.example.body.v1.Body/NonBody")
	ctx = transportx.InjectName(ctx, c.transportName)
	endpoint, err := c.endpoints.NonBody(ctx)
	if err != nil {
		return nil, err
	}
	rep, err := endpoint(ctx, request)
	if err != nil {
		return nil, statusx.From(err)
	}
	return rep.(*emptypb.Empty), nil
}
func (c *bodyClientService) HttpBodyStarBody(ctx context.Context, request *httpbody.HttpBody) (*emptypb.Empty, error) {
	ctx = endpointx.InjectName(ctx, "/leo.example.body.v1.Body/HttpBodyStarBody")
	ctx = transportx.InjectName(ctx, c.transportName)
	endpoint, err := c.endpoints.HttpBodyStarBody(ctx)
	if err != nil {
		return nil, err
	}
	rep, err := endpoint(ctx, request)
	if err != nil {
		return nil, statusx.From(err)
	}
	return rep.(*emptypb.Empty), nil
}
func (c *bodyClientService) HttpBodyNamedBody(ctx context.Context, request *HttpBody) (*emptypb.Empty, error) {
	ctx = endpointx.InjectName(ctx, "/leo.example.body.v1.Body/HttpBodyNamedBody")
	ctx = transportx.InjectName(ctx, c.transportName)
	endpoint, err := c.endpoints.HttpBodyNamedBody(ctx)
	if err != nil {
		return nil, err
	}
	rep, err := endpoint(ctx, request)
	if err != nil {
		return nil, statusx.From(err)
	}
	return rep.(*emptypb.Empty), nil
}
func newBodyClientService(endpoints BodyClientEndpoints, transportName string) BodyService {
	return &bodyClientService{endpoints: endpoints, transportName: transportName}
}
