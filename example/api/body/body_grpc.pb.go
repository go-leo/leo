// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.3
// source: api/body/body.proto

package body

import (
	context "context"
	httpbody "google.golang.org/genproto/googleapis/api/httpbody"
	http "google.golang.org/genproto/googleapis/rpc/http"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	structpb "google.golang.org/protobuf/types/known/structpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Body_Bool_FullMethodName                 = "/leo.example.body.v1.Body/Bool"
	Body_OptBool_FullMethodName              = "/leo.example.body.v1.Body/OptBool"
	Body_RepBool_FullMethodName              = "/leo.example.body.v1.Body/RepBool"
	Body_WrapBool_FullMethodName             = "/leo.example.body.v1.Body/WrapBool"
	Body_Int32_FullMethodName                = "/leo.example.body.v1.Body/Int32"
	Body_OptInt32_FullMethodName             = "/leo.example.body.v1.Body/OptInt32"
	Body_RepInt32_FullMethodName             = "/leo.example.body.v1.Body/RepInt32"
	Body_WrapInt32_FullMethodName            = "/leo.example.body.v1.Body/WrapInt32"
	Body_Uint32_FullMethodName               = "/leo.example.body.v1.Body/Uint32"
	Body_OptUint32_FullMethodName            = "/leo.example.body.v1.Body/OptUint32"
	Body_RepUint32_FullMethodName            = "/leo.example.body.v1.Body/RepUint32"
	Body_WrapUint32_FullMethodName           = "/leo.example.body.v1.Body/WrapUint32"
	Body_Fixed32_FullMethodName              = "/leo.example.body.v1.Body/Fixed32"
	Body_OptFixed32_FullMethodName           = "/leo.example.body.v1.Body/OptFixed32"
	Body_RepFixed32_FullMethodName           = "/leo.example.body.v1.Body/RepFixed32"
	Body_Int64_FullMethodName                = "/leo.example.body.v1.Body/Int64"
	Body_OptInt64_FullMethodName             = "/leo.example.body.v1.Body/OptInt64"
	Body_RepInt64_FullMethodName             = "/leo.example.body.v1.Body/RepInt64"
	Body_WrapInt64_FullMethodName            = "/leo.example.body.v1.Body/WrapInt64"
	Body_Sint64_FullMethodName               = "/leo.example.body.v1.Body/Sint64"
	Body_OptSint64_FullMethodName            = "/leo.example.body.v1.Body/OptSint64"
	Body_RepSint64_FullMethodName            = "/leo.example.body.v1.Body/RepSint64"
	Body_Sfixed64_FullMethodName             = "/leo.example.body.v1.Body/Sfixed64"
	Body_OptSfixed64_FullMethodName          = "/leo.example.body.v1.Body/OptSfixed64"
	Body_RepSfixed64_FullMethodName          = "/leo.example.body.v1.Body/RepSfixed64"
	Body_Uint64_FullMethodName               = "/leo.example.body.v1.Body/Uint64"
	Body_OptUint64_FullMethodName            = "/leo.example.body.v1.Body/OptUint64"
	Body_RepUint64_FullMethodName            = "/leo.example.body.v1.Body/RepUint64"
	Body_WrapUint64_FullMethodName           = "/leo.example.body.v1.Body/WrapUint64"
	Body_Fixed64_FullMethodName              = "/leo.example.body.v1.Body/Fixed64"
	Body_OptFixed64_FullMethodName           = "/leo.example.body.v1.Body/OptFixed64"
	Body_RepFixed64_FullMethodName           = "/leo.example.body.v1.Body/RepFixed64"
	Body_Float_FullMethodName                = "/leo.example.body.v1.Body/Float"
	Body_OptFloat_FullMethodName             = "/leo.example.body.v1.Body/OptFloat"
	Body_RepFloat_FullMethodName             = "/leo.example.body.v1.Body/RepFloat"
	Body_WrapFloat_FullMethodName            = "/leo.example.body.v1.Body/WrapFloat"
	Body_Double_FullMethodName               = "/leo.example.body.v1.Body/Double"
	Body_OptDouble_FullMethodName            = "/leo.example.body.v1.Body/OptDouble"
	Body_RepDouble_FullMethodName            = "/leo.example.body.v1.Body/RepDouble"
	Body_WrapDouble_FullMethodName           = "/leo.example.body.v1.Body/WrapDouble"
	Body_String_FullMethodName               = "/leo.example.body.v1.Body/String"
	Body_OptString_FullMethodName            = "/leo.example.body.v1.Body/OptString"
	Body_RepString_FullMethodName            = "/leo.example.body.v1.Body/RepString"
	Body_WrapString_FullMethodName           = "/leo.example.body.v1.Body/WrapString"
	Body_Bytes_FullMethodName                = "/leo.example.body.v1.Body/Bytes"
	Body_OptBytes_FullMethodName             = "/leo.example.body.v1.Body/OptBytes"
	Body_RepBytes_FullMethodName             = "/leo.example.body.v1.Body/RepBytes"
	Body_WrapBytes_FullMethodName            = "/leo.example.body.v1.Body/WrapBytes"
	Body_Enum_FullMethodName                 = "/leo.example.body.v1.Body/Enum"
	Body_OptEnum_FullMethodName              = "/leo.example.body.v1.Body/OptEnum"
	Body_RepEnum_FullMethodName              = "/leo.example.body.v1.Body/RepEnum"
	Body_Dictionary_FullMethodName           = "/leo.example.body.v1.Body/Dictionary"
	Body_HttpBody_FullMethodName             = "/leo.example.body.v1.Body/HttpBody"
	Body_HttpRequest_FullMethodName          = "/leo.example.body.v1.Body/HttpRequest"
	Body_ValueRequest_FullMethodName         = "/leo.example.body.v1.Body/ValueRequest"
	Body_ListValueRequest_FullMethodName     = "/leo.example.body.v1.Body/ListValueRequest"
	Body_StructRequest_FullMethodName        = "/leo.example.body.v1.Body/StructRequest"
	Body_TimestampRequest_FullMethodName     = "/leo.example.body.v1.Body/TimestampRequest"
	Body_DurationRequest_FullMethodName      = "/leo.example.body.v1.Body/DurationRequest"
	Body_OptWrapDoubleRequest_FullMethodName = "/leo.example.body.v1.Body/OptWrapDoubleRequest"
	Body_OptWrapFloatRequest_FullMethodName  = "/leo.example.body.v1.Body/OptWrapFloatRequest"
	Body_OptWrapInt64Request_FullMethodName  = "/leo.example.body.v1.Body/OptWrapInt64Request"
	Body_OptWrapUint64Request_FullMethodName = "/leo.example.body.v1.Body/OptWrapUint64Request"
	Body_OptWrapInt32Request_FullMethodName  = "/leo.example.body.v1.Body/OptWrapInt32Request"
	Body_OptWrapUint32Request_FullMethodName = "/leo.example.body.v1.Body/OptWrapUint32Request"
	Body_OptWrapBoolRequest_FullMethodName   = "/leo.example.body.v1.Body/OptWrapBoolRequest"
	Body_OptWrapStringRequest_FullMethodName = "/leo.example.body.v1.Body/OptWrapStringRequest"
	Body_OptWrapBytesRequest_FullMethodName  = "/leo.example.body.v1.Body/OptWrapBytesRequest"
	Body_RepWrapDoubleRequest_FullMethodName = "/leo.example.body.v1.Body/RepWrapDoubleRequest"
	Body_RepWrapFloatRequest_FullMethodName  = "/leo.example.body.v1.Body/RepWrapFloatRequest"
	Body_RepWrapInt64Request_FullMethodName  = "/leo.example.body.v1.Body/RepWrapInt64Request"
	Body_RepWrapUint64Request_FullMethodName = "/leo.example.body.v1.Body/RepWrapUint64Request"
	Body_RepWrapInt32Request_FullMethodName  = "/leo.example.body.v1.Body/RepWrapInt32Request"
	Body_RepWrapUint32Request_FullMethodName = "/leo.example.body.v1.Body/RepWrapUint32Request"
	Body_RepWrapBoolRequest_FullMethodName   = "/leo.example.body.v1.Body/RepWrapBoolRequest"
	Body_RepWrapStringRequest_FullMethodName = "/leo.example.body.v1.Body/RepWrapStringRequest"
	Body_RepWrapBytesRequest_FullMethodName  = "/leo.example.body.v1.Body/RepWrapBytesRequest"
	Body_UserRequest_FullMethodName          = "/leo.example.body.v1.Body/UserRequest"
	Body_WrapDoubleBody_FullMethodName       = "/leo.example.body.v1.Body/WrapDoubleBody"
	Body_WrapFloatBody_FullMethodName        = "/leo.example.body.v1.Body/WrapFloatBody"
	Body_WrapInt64Body_FullMethodName        = "/leo.example.body.v1.Body/WrapInt64Body"
	Body_WrapUint64Body_FullMethodName       = "/leo.example.body.v1.Body/WrapUint64Body"
	Body_WrapInt32Body_FullMethodName        = "/leo.example.body.v1.Body/WrapInt32Body"
	Body_WrapUint32Body_FullMethodName       = "/leo.example.body.v1.Body/WrapUint32Body"
	Body_WrapBoolBody_FullMethodName         = "/leo.example.body.v1.Body/WrapBoolBody"
	Body_WrapStringBody_FullMethodName       = "/leo.example.body.v1.Body/WrapStringBody"
	Body_WrapBytesBody_FullMethodName        = "/leo.example.body.v1.Body/WrapBytesBody"
	Body_HttpBodyBody_FullMethodName         = "/leo.example.body.v1.Body/HttpBodyBody"
	Body_HttpRequestBody_FullMethodName      = "/leo.example.body.v1.Body/HttpRequestBody"
	Body_ValueBody_FullMethodName            = "/leo.example.body.v1.Body/ValueBody"
	Body_ListValueBody_FullMethodName        = "/leo.example.body.v1.Body/ListValueBody"
	Body_StructBody_FullMethodName           = "/leo.example.body.v1.Body/StructBody"
	Body_TimestampBody_FullMethodName        = "/leo.example.body.v1.Body/TimestampBody"
	Body_DurationBody_FullMethodName         = "/leo.example.body.v1.Body/DurationBody"
	Body_UserBody_FullMethodName             = "/leo.example.body.v1.Body/UserBody"
)

// BodyClient is the client API for Body service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BodyClient interface {
	Bool(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	OptBool(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RepBool(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	WrapBool(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Int32(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	OptInt32(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RepInt32(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	WrapInt32(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Uint32(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	OptUint32(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RepUint32(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	WrapUint32(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Fixed32(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	OptFixed32(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RepFixed32(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Int64(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	OptInt64(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RepInt64(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	WrapInt64(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Sint64(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	OptSint64(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RepSint64(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Sfixed64(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	OptSfixed64(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RepSfixed64(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Uint64(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	OptUint64(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RepUint64(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	WrapUint64(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Fixed64(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	OptFixed64(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RepFixed64(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Float(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	OptFloat(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RepFloat(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	WrapFloat(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Double(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	OptDouble(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RepDouble(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	WrapDouble(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	String(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	OptString(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RepString(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	WrapString(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Bytes(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	OptBytes(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RepBytes(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	WrapBytes(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Enum(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	OptEnum(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RepEnum(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Dictionary(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	HttpBody(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	HttpRequest(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ValueRequest(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListValueRequest(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	StructRequest(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	TimestampRequest(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DurationRequest(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	OptWrapDoubleRequest(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	OptWrapFloatRequest(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	OptWrapInt64Request(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	OptWrapUint64Request(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	OptWrapInt32Request(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	OptWrapUint32Request(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	OptWrapBoolRequest(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	OptWrapStringRequest(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	OptWrapBytesRequest(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RepWrapDoubleRequest(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RepWrapFloatRequest(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RepWrapInt64Request(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RepWrapUint64Request(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RepWrapInt32Request(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RepWrapUint32Request(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RepWrapBoolRequest(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RepWrapStringRequest(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RepWrapBytesRequest(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UserRequest(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	WrapDoubleBody(ctx context.Context, in *wrapperspb.DoubleValue, opts ...grpc.CallOption) (*emptypb.Empty, error)
	WrapFloatBody(ctx context.Context, in *wrapperspb.FloatValue, opts ...grpc.CallOption) (*emptypb.Empty, error)
	WrapInt64Body(ctx context.Context, in *wrapperspb.Int64Value, opts ...grpc.CallOption) (*emptypb.Empty, error)
	WrapUint64Body(ctx context.Context, in *wrapperspb.UInt64Value, opts ...grpc.CallOption) (*emptypb.Empty, error)
	WrapInt32Body(ctx context.Context, in *wrapperspb.Int32Value, opts ...grpc.CallOption) (*emptypb.Empty, error)
	WrapUint32Body(ctx context.Context, in *wrapperspb.UInt32Value, opts ...grpc.CallOption) (*emptypb.Empty, error)
	WrapBoolBody(ctx context.Context, in *wrapperspb.BoolValue, opts ...grpc.CallOption) (*emptypb.Empty, error)
	WrapStringBody(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*emptypb.Empty, error)
	WrapBytesBody(ctx context.Context, in *wrapperspb.BytesValue, opts ...grpc.CallOption) (*emptypb.Empty, error)
	HttpBodyBody(ctx context.Context, in *httpbody.HttpBody, opts ...grpc.CallOption) (*emptypb.Empty, error)
	HttpRequestBody(ctx context.Context, in *http.HttpRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ValueBody(ctx context.Context, in *structpb.Value, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ListValueBody(ctx context.Context, in *structpb.ListValue, opts ...grpc.CallOption) (*emptypb.Empty, error)
	StructBody(ctx context.Context, in *structpb.Struct, opts ...grpc.CallOption) (*emptypb.Empty, error)
	TimestampBody(ctx context.Context, in *timestamppb.Timestamp, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DurationBody(ctx context.Context, in *durationpb.Duration, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UserBody(ctx context.Context, in *User, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type bodyClient struct {
	cc grpc.ClientConnInterface
}

func NewBodyClient(cc grpc.ClientConnInterface) BodyClient {
	return &bodyClient{cc}
}

func (c *bodyClient) Bool(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Body_Bool_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bodyClient) OptBool(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Body_OptBool_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bodyClient) RepBool(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Body_RepBool_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bodyClient) WrapBool(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Body_WrapBool_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bodyClient) Int32(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Body_Int32_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bodyClient) OptInt32(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Body_OptInt32_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bodyClient) RepInt32(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Body_RepInt32_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bodyClient) WrapInt32(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Body_WrapInt32_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bodyClient) Uint32(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Body_Uint32_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bodyClient) OptUint32(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Body_OptUint32_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bodyClient) RepUint32(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Body_RepUint32_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bodyClient) WrapUint32(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Body_WrapUint32_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bodyClient) Fixed32(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Body_Fixed32_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bodyClient) OptFixed32(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Body_OptFixed32_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bodyClient) RepFixed32(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Body_RepFixed32_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bodyClient) Int64(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Body_Int64_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bodyClient) OptInt64(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Body_OptInt64_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bodyClient) RepInt64(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Body_RepInt64_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bodyClient) WrapInt64(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Body_WrapInt64_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bodyClient) Sint64(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Body_Sint64_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bodyClient) OptSint64(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Body_OptSint64_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bodyClient) RepSint64(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Body_RepSint64_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bodyClient) Sfixed64(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Body_Sfixed64_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bodyClient) OptSfixed64(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Body_OptSfixed64_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bodyClient) RepSfixed64(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Body_RepSfixed64_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bodyClient) Uint64(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Body_Uint64_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bodyClient) OptUint64(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Body_OptUint64_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bodyClient) RepUint64(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Body_RepUint64_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bodyClient) WrapUint64(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Body_WrapUint64_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bodyClient) Fixed64(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Body_Fixed64_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bodyClient) OptFixed64(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Body_OptFixed64_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bodyClient) RepFixed64(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Body_RepFixed64_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bodyClient) Float(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Body_Float_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bodyClient) OptFloat(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Body_OptFloat_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bodyClient) RepFloat(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Body_RepFloat_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bodyClient) WrapFloat(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Body_WrapFloat_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bodyClient) Double(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Body_Double_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bodyClient) OptDouble(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Body_OptDouble_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bodyClient) RepDouble(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Body_RepDouble_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bodyClient) WrapDouble(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Body_WrapDouble_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bodyClient) String(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Body_String_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bodyClient) OptString(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Body_OptString_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bodyClient) RepString(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Body_RepString_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bodyClient) WrapString(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Body_WrapString_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bodyClient) Bytes(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Body_Bytes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bodyClient) OptBytes(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Body_OptBytes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bodyClient) RepBytes(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Body_RepBytes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bodyClient) WrapBytes(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Body_WrapBytes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bodyClient) Enum(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Body_Enum_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bodyClient) OptEnum(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Body_OptEnum_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bodyClient) RepEnum(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Body_RepEnum_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bodyClient) Dictionary(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Body_Dictionary_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bodyClient) HttpBody(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Body_HttpBody_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bodyClient) HttpRequest(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Body_HttpRequest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bodyClient) ValueRequest(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Body_ValueRequest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bodyClient) ListValueRequest(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Body_ListValueRequest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bodyClient) StructRequest(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Body_StructRequest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bodyClient) TimestampRequest(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Body_TimestampRequest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bodyClient) DurationRequest(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Body_DurationRequest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bodyClient) OptWrapDoubleRequest(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Body_OptWrapDoubleRequest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bodyClient) OptWrapFloatRequest(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Body_OptWrapFloatRequest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bodyClient) OptWrapInt64Request(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Body_OptWrapInt64Request_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bodyClient) OptWrapUint64Request(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Body_OptWrapUint64Request_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bodyClient) OptWrapInt32Request(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Body_OptWrapInt32Request_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bodyClient) OptWrapUint32Request(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Body_OptWrapUint32Request_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bodyClient) OptWrapBoolRequest(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Body_OptWrapBoolRequest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bodyClient) OptWrapStringRequest(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Body_OptWrapStringRequest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bodyClient) OptWrapBytesRequest(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Body_OptWrapBytesRequest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bodyClient) RepWrapDoubleRequest(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Body_RepWrapDoubleRequest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bodyClient) RepWrapFloatRequest(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Body_RepWrapFloatRequest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bodyClient) RepWrapInt64Request(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Body_RepWrapInt64Request_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bodyClient) RepWrapUint64Request(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Body_RepWrapUint64Request_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bodyClient) RepWrapInt32Request(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Body_RepWrapInt32Request_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bodyClient) RepWrapUint32Request(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Body_RepWrapUint32Request_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bodyClient) RepWrapBoolRequest(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Body_RepWrapBoolRequest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bodyClient) RepWrapStringRequest(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Body_RepWrapStringRequest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bodyClient) RepWrapBytesRequest(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Body_RepWrapBytesRequest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bodyClient) UserRequest(ctx context.Context, in *BodyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Body_UserRequest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bodyClient) WrapDoubleBody(ctx context.Context, in *wrapperspb.DoubleValue, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Body_WrapDoubleBody_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bodyClient) WrapFloatBody(ctx context.Context, in *wrapperspb.FloatValue, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Body_WrapFloatBody_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bodyClient) WrapInt64Body(ctx context.Context, in *wrapperspb.Int64Value, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Body_WrapInt64Body_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bodyClient) WrapUint64Body(ctx context.Context, in *wrapperspb.UInt64Value, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Body_WrapUint64Body_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bodyClient) WrapInt32Body(ctx context.Context, in *wrapperspb.Int32Value, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Body_WrapInt32Body_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bodyClient) WrapUint32Body(ctx context.Context, in *wrapperspb.UInt32Value, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Body_WrapUint32Body_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bodyClient) WrapBoolBody(ctx context.Context, in *wrapperspb.BoolValue, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Body_WrapBoolBody_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bodyClient) WrapStringBody(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Body_WrapStringBody_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bodyClient) WrapBytesBody(ctx context.Context, in *wrapperspb.BytesValue, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Body_WrapBytesBody_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bodyClient) HttpBodyBody(ctx context.Context, in *httpbody.HttpBody, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Body_HttpBodyBody_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bodyClient) HttpRequestBody(ctx context.Context, in *http.HttpRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Body_HttpRequestBody_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bodyClient) ValueBody(ctx context.Context, in *structpb.Value, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Body_ValueBody_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bodyClient) ListValueBody(ctx context.Context, in *structpb.ListValue, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Body_ListValueBody_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bodyClient) StructBody(ctx context.Context, in *structpb.Struct, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Body_StructBody_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bodyClient) TimestampBody(ctx context.Context, in *timestamppb.Timestamp, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Body_TimestampBody_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bodyClient) DurationBody(ctx context.Context, in *durationpb.Duration, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Body_DurationBody_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bodyClient) UserBody(ctx context.Context, in *User, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Body_UserBody_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BodyServer is the server API for Body service.
// All implementations should embed UnimplementedBodyServer
// for forward compatibility
type BodyServer interface {
	Bool(context.Context, *BodyRequest) (*emptypb.Empty, error)
	OptBool(context.Context, *BodyRequest) (*emptypb.Empty, error)
	RepBool(context.Context, *BodyRequest) (*emptypb.Empty, error)
	WrapBool(context.Context, *BodyRequest) (*emptypb.Empty, error)
	Int32(context.Context, *BodyRequest) (*emptypb.Empty, error)
	OptInt32(context.Context, *BodyRequest) (*emptypb.Empty, error)
	RepInt32(context.Context, *BodyRequest) (*emptypb.Empty, error)
	WrapInt32(context.Context, *BodyRequest) (*emptypb.Empty, error)
	Uint32(context.Context, *BodyRequest) (*emptypb.Empty, error)
	OptUint32(context.Context, *BodyRequest) (*emptypb.Empty, error)
	RepUint32(context.Context, *BodyRequest) (*emptypb.Empty, error)
	WrapUint32(context.Context, *BodyRequest) (*emptypb.Empty, error)
	Fixed32(context.Context, *BodyRequest) (*emptypb.Empty, error)
	OptFixed32(context.Context, *BodyRequest) (*emptypb.Empty, error)
	RepFixed32(context.Context, *BodyRequest) (*emptypb.Empty, error)
	Int64(context.Context, *BodyRequest) (*emptypb.Empty, error)
	OptInt64(context.Context, *BodyRequest) (*emptypb.Empty, error)
	RepInt64(context.Context, *BodyRequest) (*emptypb.Empty, error)
	WrapInt64(context.Context, *BodyRequest) (*emptypb.Empty, error)
	Sint64(context.Context, *BodyRequest) (*emptypb.Empty, error)
	OptSint64(context.Context, *BodyRequest) (*emptypb.Empty, error)
	RepSint64(context.Context, *BodyRequest) (*emptypb.Empty, error)
	Sfixed64(context.Context, *BodyRequest) (*emptypb.Empty, error)
	OptSfixed64(context.Context, *BodyRequest) (*emptypb.Empty, error)
	RepSfixed64(context.Context, *BodyRequest) (*emptypb.Empty, error)
	Uint64(context.Context, *BodyRequest) (*emptypb.Empty, error)
	OptUint64(context.Context, *BodyRequest) (*emptypb.Empty, error)
	RepUint64(context.Context, *BodyRequest) (*emptypb.Empty, error)
	WrapUint64(context.Context, *BodyRequest) (*emptypb.Empty, error)
	Fixed64(context.Context, *BodyRequest) (*emptypb.Empty, error)
	OptFixed64(context.Context, *BodyRequest) (*emptypb.Empty, error)
	RepFixed64(context.Context, *BodyRequest) (*emptypb.Empty, error)
	Float(context.Context, *BodyRequest) (*emptypb.Empty, error)
	OptFloat(context.Context, *BodyRequest) (*emptypb.Empty, error)
	RepFloat(context.Context, *BodyRequest) (*emptypb.Empty, error)
	WrapFloat(context.Context, *BodyRequest) (*emptypb.Empty, error)
	Double(context.Context, *BodyRequest) (*emptypb.Empty, error)
	OptDouble(context.Context, *BodyRequest) (*emptypb.Empty, error)
	RepDouble(context.Context, *BodyRequest) (*emptypb.Empty, error)
	WrapDouble(context.Context, *BodyRequest) (*emptypb.Empty, error)
	String(context.Context, *BodyRequest) (*emptypb.Empty, error)
	OptString(context.Context, *BodyRequest) (*emptypb.Empty, error)
	RepString(context.Context, *BodyRequest) (*emptypb.Empty, error)
	WrapString(context.Context, *BodyRequest) (*emptypb.Empty, error)
	Bytes(context.Context, *BodyRequest) (*emptypb.Empty, error)
	OptBytes(context.Context, *BodyRequest) (*emptypb.Empty, error)
	RepBytes(context.Context, *BodyRequest) (*emptypb.Empty, error)
	WrapBytes(context.Context, *BodyRequest) (*emptypb.Empty, error)
	Enum(context.Context, *BodyRequest) (*emptypb.Empty, error)
	OptEnum(context.Context, *BodyRequest) (*emptypb.Empty, error)
	RepEnum(context.Context, *BodyRequest) (*emptypb.Empty, error)
	Dictionary(context.Context, *BodyRequest) (*emptypb.Empty, error)
	HttpBody(context.Context, *BodyRequest) (*emptypb.Empty, error)
	HttpRequest(context.Context, *BodyRequest) (*emptypb.Empty, error)
	ValueRequest(context.Context, *BodyRequest) (*emptypb.Empty, error)
	ListValueRequest(context.Context, *BodyRequest) (*emptypb.Empty, error)
	StructRequest(context.Context, *BodyRequest) (*emptypb.Empty, error)
	TimestampRequest(context.Context, *BodyRequest) (*emptypb.Empty, error)
	DurationRequest(context.Context, *BodyRequest) (*emptypb.Empty, error)
	OptWrapDoubleRequest(context.Context, *BodyRequest) (*emptypb.Empty, error)
	OptWrapFloatRequest(context.Context, *BodyRequest) (*emptypb.Empty, error)
	OptWrapInt64Request(context.Context, *BodyRequest) (*emptypb.Empty, error)
	OptWrapUint64Request(context.Context, *BodyRequest) (*emptypb.Empty, error)
	OptWrapInt32Request(context.Context, *BodyRequest) (*emptypb.Empty, error)
	OptWrapUint32Request(context.Context, *BodyRequest) (*emptypb.Empty, error)
	OptWrapBoolRequest(context.Context, *BodyRequest) (*emptypb.Empty, error)
	OptWrapStringRequest(context.Context, *BodyRequest) (*emptypb.Empty, error)
	OptWrapBytesRequest(context.Context, *BodyRequest) (*emptypb.Empty, error)
	RepWrapDoubleRequest(context.Context, *BodyRequest) (*emptypb.Empty, error)
	RepWrapFloatRequest(context.Context, *BodyRequest) (*emptypb.Empty, error)
	RepWrapInt64Request(context.Context, *BodyRequest) (*emptypb.Empty, error)
	RepWrapUint64Request(context.Context, *BodyRequest) (*emptypb.Empty, error)
	RepWrapInt32Request(context.Context, *BodyRequest) (*emptypb.Empty, error)
	RepWrapUint32Request(context.Context, *BodyRequest) (*emptypb.Empty, error)
	RepWrapBoolRequest(context.Context, *BodyRequest) (*emptypb.Empty, error)
	RepWrapStringRequest(context.Context, *BodyRequest) (*emptypb.Empty, error)
	RepWrapBytesRequest(context.Context, *BodyRequest) (*emptypb.Empty, error)
	UserRequest(context.Context, *BodyRequest) (*emptypb.Empty, error)
	WrapDoubleBody(context.Context, *wrapperspb.DoubleValue) (*emptypb.Empty, error)
	WrapFloatBody(context.Context, *wrapperspb.FloatValue) (*emptypb.Empty, error)
	WrapInt64Body(context.Context, *wrapperspb.Int64Value) (*emptypb.Empty, error)
	WrapUint64Body(context.Context, *wrapperspb.UInt64Value) (*emptypb.Empty, error)
	WrapInt32Body(context.Context, *wrapperspb.Int32Value) (*emptypb.Empty, error)
	WrapUint32Body(context.Context, *wrapperspb.UInt32Value) (*emptypb.Empty, error)
	WrapBoolBody(context.Context, *wrapperspb.BoolValue) (*emptypb.Empty, error)
	WrapStringBody(context.Context, *wrapperspb.StringValue) (*emptypb.Empty, error)
	WrapBytesBody(context.Context, *wrapperspb.BytesValue) (*emptypb.Empty, error)
	HttpBodyBody(context.Context, *httpbody.HttpBody) (*emptypb.Empty, error)
	HttpRequestBody(context.Context, *http.HttpRequest) (*emptypb.Empty, error)
	ValueBody(context.Context, *structpb.Value) (*emptypb.Empty, error)
	ListValueBody(context.Context, *structpb.ListValue) (*emptypb.Empty, error)
	StructBody(context.Context, *structpb.Struct) (*emptypb.Empty, error)
	TimestampBody(context.Context, *timestamppb.Timestamp) (*emptypb.Empty, error)
	DurationBody(context.Context, *durationpb.Duration) (*emptypb.Empty, error)
	UserBody(context.Context, *User) (*emptypb.Empty, error)
}

// UnimplementedBodyServer should be embedded to have forward compatible implementations.
type UnimplementedBodyServer struct {
}

func (UnimplementedBodyServer) Bool(context.Context, *BodyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Bool not implemented")
}
func (UnimplementedBodyServer) OptBool(context.Context, *BodyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OptBool not implemented")
}
func (UnimplementedBodyServer) RepBool(context.Context, *BodyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RepBool not implemented")
}
func (UnimplementedBodyServer) WrapBool(context.Context, *BodyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WrapBool not implemented")
}
func (UnimplementedBodyServer) Int32(context.Context, *BodyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Int32 not implemented")
}
func (UnimplementedBodyServer) OptInt32(context.Context, *BodyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OptInt32 not implemented")
}
func (UnimplementedBodyServer) RepInt32(context.Context, *BodyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RepInt32 not implemented")
}
func (UnimplementedBodyServer) WrapInt32(context.Context, *BodyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WrapInt32 not implemented")
}
func (UnimplementedBodyServer) Uint32(context.Context, *BodyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Uint32 not implemented")
}
func (UnimplementedBodyServer) OptUint32(context.Context, *BodyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OptUint32 not implemented")
}
func (UnimplementedBodyServer) RepUint32(context.Context, *BodyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RepUint32 not implemented")
}
func (UnimplementedBodyServer) WrapUint32(context.Context, *BodyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WrapUint32 not implemented")
}
func (UnimplementedBodyServer) Fixed32(context.Context, *BodyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Fixed32 not implemented")
}
func (UnimplementedBodyServer) OptFixed32(context.Context, *BodyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OptFixed32 not implemented")
}
func (UnimplementedBodyServer) RepFixed32(context.Context, *BodyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RepFixed32 not implemented")
}
func (UnimplementedBodyServer) Int64(context.Context, *BodyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Int64 not implemented")
}
func (UnimplementedBodyServer) OptInt64(context.Context, *BodyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OptInt64 not implemented")
}
func (UnimplementedBodyServer) RepInt64(context.Context, *BodyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RepInt64 not implemented")
}
func (UnimplementedBodyServer) WrapInt64(context.Context, *BodyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WrapInt64 not implemented")
}
func (UnimplementedBodyServer) Sint64(context.Context, *BodyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Sint64 not implemented")
}
func (UnimplementedBodyServer) OptSint64(context.Context, *BodyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OptSint64 not implemented")
}
func (UnimplementedBodyServer) RepSint64(context.Context, *BodyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RepSint64 not implemented")
}
func (UnimplementedBodyServer) Sfixed64(context.Context, *BodyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Sfixed64 not implemented")
}
func (UnimplementedBodyServer) OptSfixed64(context.Context, *BodyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OptSfixed64 not implemented")
}
func (UnimplementedBodyServer) RepSfixed64(context.Context, *BodyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RepSfixed64 not implemented")
}
func (UnimplementedBodyServer) Uint64(context.Context, *BodyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Uint64 not implemented")
}
func (UnimplementedBodyServer) OptUint64(context.Context, *BodyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OptUint64 not implemented")
}
func (UnimplementedBodyServer) RepUint64(context.Context, *BodyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RepUint64 not implemented")
}
func (UnimplementedBodyServer) WrapUint64(context.Context, *BodyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WrapUint64 not implemented")
}
func (UnimplementedBodyServer) Fixed64(context.Context, *BodyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Fixed64 not implemented")
}
func (UnimplementedBodyServer) OptFixed64(context.Context, *BodyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OptFixed64 not implemented")
}
func (UnimplementedBodyServer) RepFixed64(context.Context, *BodyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RepFixed64 not implemented")
}
func (UnimplementedBodyServer) Float(context.Context, *BodyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Float not implemented")
}
func (UnimplementedBodyServer) OptFloat(context.Context, *BodyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OptFloat not implemented")
}
func (UnimplementedBodyServer) RepFloat(context.Context, *BodyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RepFloat not implemented")
}
func (UnimplementedBodyServer) WrapFloat(context.Context, *BodyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WrapFloat not implemented")
}
func (UnimplementedBodyServer) Double(context.Context, *BodyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Double not implemented")
}
func (UnimplementedBodyServer) OptDouble(context.Context, *BodyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OptDouble not implemented")
}
func (UnimplementedBodyServer) RepDouble(context.Context, *BodyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RepDouble not implemented")
}
func (UnimplementedBodyServer) WrapDouble(context.Context, *BodyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WrapDouble not implemented")
}
func (UnimplementedBodyServer) String(context.Context, *BodyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method String not implemented")
}
func (UnimplementedBodyServer) OptString(context.Context, *BodyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OptString not implemented")
}
func (UnimplementedBodyServer) RepString(context.Context, *BodyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RepString not implemented")
}
func (UnimplementedBodyServer) WrapString(context.Context, *BodyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WrapString not implemented")
}
func (UnimplementedBodyServer) Bytes(context.Context, *BodyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Bytes not implemented")
}
func (UnimplementedBodyServer) OptBytes(context.Context, *BodyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OptBytes not implemented")
}
func (UnimplementedBodyServer) RepBytes(context.Context, *BodyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RepBytes not implemented")
}
func (UnimplementedBodyServer) WrapBytes(context.Context, *BodyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WrapBytes not implemented")
}
func (UnimplementedBodyServer) Enum(context.Context, *BodyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Enum not implemented")
}
func (UnimplementedBodyServer) OptEnum(context.Context, *BodyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OptEnum not implemented")
}
func (UnimplementedBodyServer) RepEnum(context.Context, *BodyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RepEnum not implemented")
}
func (UnimplementedBodyServer) Dictionary(context.Context, *BodyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Dictionary not implemented")
}
func (UnimplementedBodyServer) HttpBody(context.Context, *BodyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HttpBody not implemented")
}
func (UnimplementedBodyServer) HttpRequest(context.Context, *BodyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HttpRequest not implemented")
}
func (UnimplementedBodyServer) ValueRequest(context.Context, *BodyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValueRequest not implemented")
}
func (UnimplementedBodyServer) ListValueRequest(context.Context, *BodyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListValueRequest not implemented")
}
func (UnimplementedBodyServer) StructRequest(context.Context, *BodyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StructRequest not implemented")
}
func (UnimplementedBodyServer) TimestampRequest(context.Context, *BodyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TimestampRequest not implemented")
}
func (UnimplementedBodyServer) DurationRequest(context.Context, *BodyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DurationRequest not implemented")
}
func (UnimplementedBodyServer) OptWrapDoubleRequest(context.Context, *BodyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OptWrapDoubleRequest not implemented")
}
func (UnimplementedBodyServer) OptWrapFloatRequest(context.Context, *BodyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OptWrapFloatRequest not implemented")
}
func (UnimplementedBodyServer) OptWrapInt64Request(context.Context, *BodyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OptWrapInt64Request not implemented")
}
func (UnimplementedBodyServer) OptWrapUint64Request(context.Context, *BodyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OptWrapUint64Request not implemented")
}
func (UnimplementedBodyServer) OptWrapInt32Request(context.Context, *BodyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OptWrapInt32Request not implemented")
}
func (UnimplementedBodyServer) OptWrapUint32Request(context.Context, *BodyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OptWrapUint32Request not implemented")
}
func (UnimplementedBodyServer) OptWrapBoolRequest(context.Context, *BodyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OptWrapBoolRequest not implemented")
}
func (UnimplementedBodyServer) OptWrapStringRequest(context.Context, *BodyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OptWrapStringRequest not implemented")
}
func (UnimplementedBodyServer) OptWrapBytesRequest(context.Context, *BodyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OptWrapBytesRequest not implemented")
}
func (UnimplementedBodyServer) RepWrapDoubleRequest(context.Context, *BodyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RepWrapDoubleRequest not implemented")
}
func (UnimplementedBodyServer) RepWrapFloatRequest(context.Context, *BodyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RepWrapFloatRequest not implemented")
}
func (UnimplementedBodyServer) RepWrapInt64Request(context.Context, *BodyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RepWrapInt64Request not implemented")
}
func (UnimplementedBodyServer) RepWrapUint64Request(context.Context, *BodyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RepWrapUint64Request not implemented")
}
func (UnimplementedBodyServer) RepWrapInt32Request(context.Context, *BodyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RepWrapInt32Request not implemented")
}
func (UnimplementedBodyServer) RepWrapUint32Request(context.Context, *BodyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RepWrapUint32Request not implemented")
}
func (UnimplementedBodyServer) RepWrapBoolRequest(context.Context, *BodyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RepWrapBoolRequest not implemented")
}
func (UnimplementedBodyServer) RepWrapStringRequest(context.Context, *BodyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RepWrapStringRequest not implemented")
}
func (UnimplementedBodyServer) RepWrapBytesRequest(context.Context, *BodyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RepWrapBytesRequest not implemented")
}
func (UnimplementedBodyServer) UserRequest(context.Context, *BodyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserRequest not implemented")
}
func (UnimplementedBodyServer) WrapDoubleBody(context.Context, *wrapperspb.DoubleValue) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WrapDoubleBody not implemented")
}
func (UnimplementedBodyServer) WrapFloatBody(context.Context, *wrapperspb.FloatValue) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WrapFloatBody not implemented")
}
func (UnimplementedBodyServer) WrapInt64Body(context.Context, *wrapperspb.Int64Value) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WrapInt64Body not implemented")
}
func (UnimplementedBodyServer) WrapUint64Body(context.Context, *wrapperspb.UInt64Value) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WrapUint64Body not implemented")
}
func (UnimplementedBodyServer) WrapInt32Body(context.Context, *wrapperspb.Int32Value) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WrapInt32Body not implemented")
}
func (UnimplementedBodyServer) WrapUint32Body(context.Context, *wrapperspb.UInt32Value) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WrapUint32Body not implemented")
}
func (UnimplementedBodyServer) WrapBoolBody(context.Context, *wrapperspb.BoolValue) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WrapBoolBody not implemented")
}
func (UnimplementedBodyServer) WrapStringBody(context.Context, *wrapperspb.StringValue) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WrapStringBody not implemented")
}
func (UnimplementedBodyServer) WrapBytesBody(context.Context, *wrapperspb.BytesValue) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WrapBytesBody not implemented")
}
func (UnimplementedBodyServer) HttpBodyBody(context.Context, *httpbody.HttpBody) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HttpBodyBody not implemented")
}
func (UnimplementedBodyServer) HttpRequestBody(context.Context, *http.HttpRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HttpRequestBody not implemented")
}
func (UnimplementedBodyServer) ValueBody(context.Context, *structpb.Value) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValueBody not implemented")
}
func (UnimplementedBodyServer) ListValueBody(context.Context, *structpb.ListValue) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListValueBody not implemented")
}
func (UnimplementedBodyServer) StructBody(context.Context, *structpb.Struct) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StructBody not implemented")
}
func (UnimplementedBodyServer) TimestampBody(context.Context, *timestamppb.Timestamp) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TimestampBody not implemented")
}
func (UnimplementedBodyServer) DurationBody(context.Context, *durationpb.Duration) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DurationBody not implemented")
}
func (UnimplementedBodyServer) UserBody(context.Context, *User) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserBody not implemented")
}

// UnsafeBodyServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BodyServer will
// result in compilation errors.
type UnsafeBodyServer interface {
	mustEmbedUnimplementedBodyServer()
}

func RegisterBodyServer(s grpc.ServiceRegistrar, srv BodyServer) {
	s.RegisterService(&Body_ServiceDesc, srv)
}

func _Body_Bool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BodyServer).Bool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Body_Bool_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BodyServer).Bool(ctx, req.(*BodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Body_OptBool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BodyServer).OptBool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Body_OptBool_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BodyServer).OptBool(ctx, req.(*BodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Body_RepBool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BodyServer).RepBool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Body_RepBool_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BodyServer).RepBool(ctx, req.(*BodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Body_WrapBool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BodyServer).WrapBool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Body_WrapBool_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BodyServer).WrapBool(ctx, req.(*BodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Body_Int32_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BodyServer).Int32(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Body_Int32_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BodyServer).Int32(ctx, req.(*BodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Body_OptInt32_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BodyServer).OptInt32(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Body_OptInt32_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BodyServer).OptInt32(ctx, req.(*BodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Body_RepInt32_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BodyServer).RepInt32(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Body_RepInt32_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BodyServer).RepInt32(ctx, req.(*BodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Body_WrapInt32_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BodyServer).WrapInt32(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Body_WrapInt32_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BodyServer).WrapInt32(ctx, req.(*BodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Body_Uint32_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BodyServer).Uint32(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Body_Uint32_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BodyServer).Uint32(ctx, req.(*BodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Body_OptUint32_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BodyServer).OptUint32(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Body_OptUint32_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BodyServer).OptUint32(ctx, req.(*BodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Body_RepUint32_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BodyServer).RepUint32(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Body_RepUint32_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BodyServer).RepUint32(ctx, req.(*BodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Body_WrapUint32_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BodyServer).WrapUint32(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Body_WrapUint32_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BodyServer).WrapUint32(ctx, req.(*BodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Body_Fixed32_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BodyServer).Fixed32(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Body_Fixed32_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BodyServer).Fixed32(ctx, req.(*BodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Body_OptFixed32_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BodyServer).OptFixed32(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Body_OptFixed32_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BodyServer).OptFixed32(ctx, req.(*BodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Body_RepFixed32_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BodyServer).RepFixed32(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Body_RepFixed32_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BodyServer).RepFixed32(ctx, req.(*BodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Body_Int64_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BodyServer).Int64(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Body_Int64_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BodyServer).Int64(ctx, req.(*BodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Body_OptInt64_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BodyServer).OptInt64(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Body_OptInt64_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BodyServer).OptInt64(ctx, req.(*BodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Body_RepInt64_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BodyServer).RepInt64(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Body_RepInt64_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BodyServer).RepInt64(ctx, req.(*BodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Body_WrapInt64_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BodyServer).WrapInt64(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Body_WrapInt64_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BodyServer).WrapInt64(ctx, req.(*BodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Body_Sint64_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BodyServer).Sint64(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Body_Sint64_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BodyServer).Sint64(ctx, req.(*BodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Body_OptSint64_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BodyServer).OptSint64(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Body_OptSint64_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BodyServer).OptSint64(ctx, req.(*BodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Body_RepSint64_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BodyServer).RepSint64(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Body_RepSint64_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BodyServer).RepSint64(ctx, req.(*BodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Body_Sfixed64_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BodyServer).Sfixed64(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Body_Sfixed64_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BodyServer).Sfixed64(ctx, req.(*BodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Body_OptSfixed64_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BodyServer).OptSfixed64(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Body_OptSfixed64_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BodyServer).OptSfixed64(ctx, req.(*BodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Body_RepSfixed64_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BodyServer).RepSfixed64(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Body_RepSfixed64_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BodyServer).RepSfixed64(ctx, req.(*BodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Body_Uint64_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BodyServer).Uint64(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Body_Uint64_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BodyServer).Uint64(ctx, req.(*BodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Body_OptUint64_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BodyServer).OptUint64(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Body_OptUint64_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BodyServer).OptUint64(ctx, req.(*BodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Body_RepUint64_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BodyServer).RepUint64(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Body_RepUint64_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BodyServer).RepUint64(ctx, req.(*BodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Body_WrapUint64_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BodyServer).WrapUint64(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Body_WrapUint64_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BodyServer).WrapUint64(ctx, req.(*BodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Body_Fixed64_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BodyServer).Fixed64(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Body_Fixed64_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BodyServer).Fixed64(ctx, req.(*BodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Body_OptFixed64_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BodyServer).OptFixed64(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Body_OptFixed64_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BodyServer).OptFixed64(ctx, req.(*BodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Body_RepFixed64_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BodyServer).RepFixed64(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Body_RepFixed64_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BodyServer).RepFixed64(ctx, req.(*BodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Body_Float_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BodyServer).Float(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Body_Float_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BodyServer).Float(ctx, req.(*BodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Body_OptFloat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BodyServer).OptFloat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Body_OptFloat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BodyServer).OptFloat(ctx, req.(*BodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Body_RepFloat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BodyServer).RepFloat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Body_RepFloat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BodyServer).RepFloat(ctx, req.(*BodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Body_WrapFloat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BodyServer).WrapFloat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Body_WrapFloat_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BodyServer).WrapFloat(ctx, req.(*BodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Body_Double_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BodyServer).Double(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Body_Double_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BodyServer).Double(ctx, req.(*BodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Body_OptDouble_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BodyServer).OptDouble(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Body_OptDouble_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BodyServer).OptDouble(ctx, req.(*BodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Body_RepDouble_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BodyServer).RepDouble(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Body_RepDouble_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BodyServer).RepDouble(ctx, req.(*BodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Body_WrapDouble_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BodyServer).WrapDouble(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Body_WrapDouble_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BodyServer).WrapDouble(ctx, req.(*BodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Body_String_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BodyServer).String(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Body_String_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BodyServer).String(ctx, req.(*BodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Body_OptString_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BodyServer).OptString(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Body_OptString_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BodyServer).OptString(ctx, req.(*BodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Body_RepString_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BodyServer).RepString(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Body_RepString_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BodyServer).RepString(ctx, req.(*BodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Body_WrapString_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BodyServer).WrapString(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Body_WrapString_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BodyServer).WrapString(ctx, req.(*BodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Body_Bytes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BodyServer).Bytes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Body_Bytes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BodyServer).Bytes(ctx, req.(*BodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Body_OptBytes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BodyServer).OptBytes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Body_OptBytes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BodyServer).OptBytes(ctx, req.(*BodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Body_RepBytes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BodyServer).RepBytes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Body_RepBytes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BodyServer).RepBytes(ctx, req.(*BodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Body_WrapBytes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BodyServer).WrapBytes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Body_WrapBytes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BodyServer).WrapBytes(ctx, req.(*BodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Body_Enum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BodyServer).Enum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Body_Enum_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BodyServer).Enum(ctx, req.(*BodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Body_OptEnum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BodyServer).OptEnum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Body_OptEnum_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BodyServer).OptEnum(ctx, req.(*BodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Body_RepEnum_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BodyServer).RepEnum(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Body_RepEnum_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BodyServer).RepEnum(ctx, req.(*BodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Body_Dictionary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BodyServer).Dictionary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Body_Dictionary_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BodyServer).Dictionary(ctx, req.(*BodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Body_HttpBody_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BodyServer).HttpBody(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Body_HttpBody_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BodyServer).HttpBody(ctx, req.(*BodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Body_HttpRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BodyServer).HttpRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Body_HttpRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BodyServer).HttpRequest(ctx, req.(*BodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Body_ValueRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BodyServer).ValueRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Body_ValueRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BodyServer).ValueRequest(ctx, req.(*BodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Body_ListValueRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BodyServer).ListValueRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Body_ListValueRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BodyServer).ListValueRequest(ctx, req.(*BodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Body_StructRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BodyServer).StructRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Body_StructRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BodyServer).StructRequest(ctx, req.(*BodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Body_TimestampRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BodyServer).TimestampRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Body_TimestampRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BodyServer).TimestampRequest(ctx, req.(*BodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Body_DurationRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BodyServer).DurationRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Body_DurationRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BodyServer).DurationRequest(ctx, req.(*BodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Body_OptWrapDoubleRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BodyServer).OptWrapDoubleRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Body_OptWrapDoubleRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BodyServer).OptWrapDoubleRequest(ctx, req.(*BodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Body_OptWrapFloatRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BodyServer).OptWrapFloatRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Body_OptWrapFloatRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BodyServer).OptWrapFloatRequest(ctx, req.(*BodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Body_OptWrapInt64Request_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BodyServer).OptWrapInt64Request(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Body_OptWrapInt64Request_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BodyServer).OptWrapInt64Request(ctx, req.(*BodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Body_OptWrapUint64Request_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BodyServer).OptWrapUint64Request(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Body_OptWrapUint64Request_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BodyServer).OptWrapUint64Request(ctx, req.(*BodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Body_OptWrapInt32Request_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BodyServer).OptWrapInt32Request(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Body_OptWrapInt32Request_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BodyServer).OptWrapInt32Request(ctx, req.(*BodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Body_OptWrapUint32Request_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BodyServer).OptWrapUint32Request(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Body_OptWrapUint32Request_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BodyServer).OptWrapUint32Request(ctx, req.(*BodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Body_OptWrapBoolRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BodyServer).OptWrapBoolRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Body_OptWrapBoolRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BodyServer).OptWrapBoolRequest(ctx, req.(*BodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Body_OptWrapStringRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BodyServer).OptWrapStringRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Body_OptWrapStringRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BodyServer).OptWrapStringRequest(ctx, req.(*BodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Body_OptWrapBytesRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BodyServer).OptWrapBytesRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Body_OptWrapBytesRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BodyServer).OptWrapBytesRequest(ctx, req.(*BodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Body_RepWrapDoubleRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BodyServer).RepWrapDoubleRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Body_RepWrapDoubleRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BodyServer).RepWrapDoubleRequest(ctx, req.(*BodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Body_RepWrapFloatRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BodyServer).RepWrapFloatRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Body_RepWrapFloatRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BodyServer).RepWrapFloatRequest(ctx, req.(*BodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Body_RepWrapInt64Request_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BodyServer).RepWrapInt64Request(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Body_RepWrapInt64Request_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BodyServer).RepWrapInt64Request(ctx, req.(*BodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Body_RepWrapUint64Request_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BodyServer).RepWrapUint64Request(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Body_RepWrapUint64Request_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BodyServer).RepWrapUint64Request(ctx, req.(*BodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Body_RepWrapInt32Request_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BodyServer).RepWrapInt32Request(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Body_RepWrapInt32Request_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BodyServer).RepWrapInt32Request(ctx, req.(*BodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Body_RepWrapUint32Request_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BodyServer).RepWrapUint32Request(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Body_RepWrapUint32Request_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BodyServer).RepWrapUint32Request(ctx, req.(*BodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Body_RepWrapBoolRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BodyServer).RepWrapBoolRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Body_RepWrapBoolRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BodyServer).RepWrapBoolRequest(ctx, req.(*BodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Body_RepWrapStringRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BodyServer).RepWrapStringRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Body_RepWrapStringRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BodyServer).RepWrapStringRequest(ctx, req.(*BodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Body_RepWrapBytesRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BodyServer).RepWrapBytesRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Body_RepWrapBytesRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BodyServer).RepWrapBytesRequest(ctx, req.(*BodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Body_UserRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BodyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BodyServer).UserRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Body_UserRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BodyServer).UserRequest(ctx, req.(*BodyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Body_WrapDoubleBody_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.DoubleValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BodyServer).WrapDoubleBody(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Body_WrapDoubleBody_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BodyServer).WrapDoubleBody(ctx, req.(*wrapperspb.DoubleValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _Body_WrapFloatBody_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.FloatValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BodyServer).WrapFloatBody(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Body_WrapFloatBody_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BodyServer).WrapFloatBody(ctx, req.(*wrapperspb.FloatValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _Body_WrapInt64Body_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.Int64Value)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BodyServer).WrapInt64Body(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Body_WrapInt64Body_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BodyServer).WrapInt64Body(ctx, req.(*wrapperspb.Int64Value))
	}
	return interceptor(ctx, in, info, handler)
}

func _Body_WrapUint64Body_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.UInt64Value)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BodyServer).WrapUint64Body(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Body_WrapUint64Body_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BodyServer).WrapUint64Body(ctx, req.(*wrapperspb.UInt64Value))
	}
	return interceptor(ctx, in, info, handler)
}

func _Body_WrapInt32Body_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.Int32Value)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BodyServer).WrapInt32Body(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Body_WrapInt32Body_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BodyServer).WrapInt32Body(ctx, req.(*wrapperspb.Int32Value))
	}
	return interceptor(ctx, in, info, handler)
}

func _Body_WrapUint32Body_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.UInt32Value)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BodyServer).WrapUint32Body(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Body_WrapUint32Body_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BodyServer).WrapUint32Body(ctx, req.(*wrapperspb.UInt32Value))
	}
	return interceptor(ctx, in, info, handler)
}

func _Body_WrapBoolBody_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.BoolValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BodyServer).WrapBoolBody(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Body_WrapBoolBody_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BodyServer).WrapBoolBody(ctx, req.(*wrapperspb.BoolValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _Body_WrapStringBody_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BodyServer).WrapStringBody(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Body_WrapStringBody_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BodyServer).WrapStringBody(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _Body_WrapBytesBody_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.BytesValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BodyServer).WrapBytesBody(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Body_WrapBytesBody_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BodyServer).WrapBytesBody(ctx, req.(*wrapperspb.BytesValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _Body_HttpBodyBody_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(httpbody.HttpBody)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BodyServer).HttpBodyBody(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Body_HttpBodyBody_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BodyServer).HttpBodyBody(ctx, req.(*httpbody.HttpBody))
	}
	return interceptor(ctx, in, info, handler)
}

func _Body_HttpRequestBody_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(http.HttpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BodyServer).HttpRequestBody(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Body_HttpRequestBody_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BodyServer).HttpRequestBody(ctx, req.(*http.HttpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Body_ValueBody_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(structpb.Value)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BodyServer).ValueBody(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Body_ValueBody_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BodyServer).ValueBody(ctx, req.(*structpb.Value))
	}
	return interceptor(ctx, in, info, handler)
}

func _Body_ListValueBody_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(structpb.ListValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BodyServer).ListValueBody(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Body_ListValueBody_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BodyServer).ListValueBody(ctx, req.(*structpb.ListValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _Body_StructBody_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(structpb.Struct)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BodyServer).StructBody(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Body_StructBody_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BodyServer).StructBody(ctx, req.(*structpb.Struct))
	}
	return interceptor(ctx, in, info, handler)
}

func _Body_TimestampBody_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(timestamppb.Timestamp)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BodyServer).TimestampBody(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Body_TimestampBody_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BodyServer).TimestampBody(ctx, req.(*timestamppb.Timestamp))
	}
	return interceptor(ctx, in, info, handler)
}

func _Body_DurationBody_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(durationpb.Duration)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BodyServer).DurationBody(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Body_DurationBody_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BodyServer).DurationBody(ctx, req.(*durationpb.Duration))
	}
	return interceptor(ctx, in, info, handler)
}

func _Body_UserBody_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BodyServer).UserBody(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Body_UserBody_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BodyServer).UserBody(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

// Body_ServiceDesc is the grpc.ServiceDesc for Body service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Body_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "leo.example.body.v1.Body",
	HandlerType: (*BodyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Bool",
			Handler:    _Body_Bool_Handler,
		},
		{
			MethodName: "OptBool",
			Handler:    _Body_OptBool_Handler,
		},
		{
			MethodName: "RepBool",
			Handler:    _Body_RepBool_Handler,
		},
		{
			MethodName: "WrapBool",
			Handler:    _Body_WrapBool_Handler,
		},
		{
			MethodName: "Int32",
			Handler:    _Body_Int32_Handler,
		},
		{
			MethodName: "OptInt32",
			Handler:    _Body_OptInt32_Handler,
		},
		{
			MethodName: "RepInt32",
			Handler:    _Body_RepInt32_Handler,
		},
		{
			MethodName: "WrapInt32",
			Handler:    _Body_WrapInt32_Handler,
		},
		{
			MethodName: "Uint32",
			Handler:    _Body_Uint32_Handler,
		},
		{
			MethodName: "OptUint32",
			Handler:    _Body_OptUint32_Handler,
		},
		{
			MethodName: "RepUint32",
			Handler:    _Body_RepUint32_Handler,
		},
		{
			MethodName: "WrapUint32",
			Handler:    _Body_WrapUint32_Handler,
		},
		{
			MethodName: "Fixed32",
			Handler:    _Body_Fixed32_Handler,
		},
		{
			MethodName: "OptFixed32",
			Handler:    _Body_OptFixed32_Handler,
		},
		{
			MethodName: "RepFixed32",
			Handler:    _Body_RepFixed32_Handler,
		},
		{
			MethodName: "Int64",
			Handler:    _Body_Int64_Handler,
		},
		{
			MethodName: "OptInt64",
			Handler:    _Body_OptInt64_Handler,
		},
		{
			MethodName: "RepInt64",
			Handler:    _Body_RepInt64_Handler,
		},
		{
			MethodName: "WrapInt64",
			Handler:    _Body_WrapInt64_Handler,
		},
		{
			MethodName: "Sint64",
			Handler:    _Body_Sint64_Handler,
		},
		{
			MethodName: "OptSint64",
			Handler:    _Body_OptSint64_Handler,
		},
		{
			MethodName: "RepSint64",
			Handler:    _Body_RepSint64_Handler,
		},
		{
			MethodName: "Sfixed64",
			Handler:    _Body_Sfixed64_Handler,
		},
		{
			MethodName: "OptSfixed64",
			Handler:    _Body_OptSfixed64_Handler,
		},
		{
			MethodName: "RepSfixed64",
			Handler:    _Body_RepSfixed64_Handler,
		},
		{
			MethodName: "Uint64",
			Handler:    _Body_Uint64_Handler,
		},
		{
			MethodName: "OptUint64",
			Handler:    _Body_OptUint64_Handler,
		},
		{
			MethodName: "RepUint64",
			Handler:    _Body_RepUint64_Handler,
		},
		{
			MethodName: "WrapUint64",
			Handler:    _Body_WrapUint64_Handler,
		},
		{
			MethodName: "Fixed64",
			Handler:    _Body_Fixed64_Handler,
		},
		{
			MethodName: "OptFixed64",
			Handler:    _Body_OptFixed64_Handler,
		},
		{
			MethodName: "RepFixed64",
			Handler:    _Body_RepFixed64_Handler,
		},
		{
			MethodName: "Float",
			Handler:    _Body_Float_Handler,
		},
		{
			MethodName: "OptFloat",
			Handler:    _Body_OptFloat_Handler,
		},
		{
			MethodName: "RepFloat",
			Handler:    _Body_RepFloat_Handler,
		},
		{
			MethodName: "WrapFloat",
			Handler:    _Body_WrapFloat_Handler,
		},
		{
			MethodName: "Double",
			Handler:    _Body_Double_Handler,
		},
		{
			MethodName: "OptDouble",
			Handler:    _Body_OptDouble_Handler,
		},
		{
			MethodName: "RepDouble",
			Handler:    _Body_RepDouble_Handler,
		},
		{
			MethodName: "WrapDouble",
			Handler:    _Body_WrapDouble_Handler,
		},
		{
			MethodName: "String",
			Handler:    _Body_String_Handler,
		},
		{
			MethodName: "OptString",
			Handler:    _Body_OptString_Handler,
		},
		{
			MethodName: "RepString",
			Handler:    _Body_RepString_Handler,
		},
		{
			MethodName: "WrapString",
			Handler:    _Body_WrapString_Handler,
		},
		{
			MethodName: "Bytes",
			Handler:    _Body_Bytes_Handler,
		},
		{
			MethodName: "OptBytes",
			Handler:    _Body_OptBytes_Handler,
		},
		{
			MethodName: "RepBytes",
			Handler:    _Body_RepBytes_Handler,
		},
		{
			MethodName: "WrapBytes",
			Handler:    _Body_WrapBytes_Handler,
		},
		{
			MethodName: "Enum",
			Handler:    _Body_Enum_Handler,
		},
		{
			MethodName: "OptEnum",
			Handler:    _Body_OptEnum_Handler,
		},
		{
			MethodName: "RepEnum",
			Handler:    _Body_RepEnum_Handler,
		},
		{
			MethodName: "Dictionary",
			Handler:    _Body_Dictionary_Handler,
		},
		{
			MethodName: "HttpBody",
			Handler:    _Body_HttpBody_Handler,
		},
		{
			MethodName: "HttpRequest",
			Handler:    _Body_HttpRequest_Handler,
		},
		{
			MethodName: "ValueRequest",
			Handler:    _Body_ValueRequest_Handler,
		},
		{
			MethodName: "ListValueRequest",
			Handler:    _Body_ListValueRequest_Handler,
		},
		{
			MethodName: "StructRequest",
			Handler:    _Body_StructRequest_Handler,
		},
		{
			MethodName: "TimestampRequest",
			Handler:    _Body_TimestampRequest_Handler,
		},
		{
			MethodName: "DurationRequest",
			Handler:    _Body_DurationRequest_Handler,
		},
		{
			MethodName: "OptWrapDoubleRequest",
			Handler:    _Body_OptWrapDoubleRequest_Handler,
		},
		{
			MethodName: "OptWrapFloatRequest",
			Handler:    _Body_OptWrapFloatRequest_Handler,
		},
		{
			MethodName: "OptWrapInt64Request",
			Handler:    _Body_OptWrapInt64Request_Handler,
		},
		{
			MethodName: "OptWrapUint64Request",
			Handler:    _Body_OptWrapUint64Request_Handler,
		},
		{
			MethodName: "OptWrapInt32Request",
			Handler:    _Body_OptWrapInt32Request_Handler,
		},
		{
			MethodName: "OptWrapUint32Request",
			Handler:    _Body_OptWrapUint32Request_Handler,
		},
		{
			MethodName: "OptWrapBoolRequest",
			Handler:    _Body_OptWrapBoolRequest_Handler,
		},
		{
			MethodName: "OptWrapStringRequest",
			Handler:    _Body_OptWrapStringRequest_Handler,
		},
		{
			MethodName: "OptWrapBytesRequest",
			Handler:    _Body_OptWrapBytesRequest_Handler,
		},
		{
			MethodName: "RepWrapDoubleRequest",
			Handler:    _Body_RepWrapDoubleRequest_Handler,
		},
		{
			MethodName: "RepWrapFloatRequest",
			Handler:    _Body_RepWrapFloatRequest_Handler,
		},
		{
			MethodName: "RepWrapInt64Request",
			Handler:    _Body_RepWrapInt64Request_Handler,
		},
		{
			MethodName: "RepWrapUint64Request",
			Handler:    _Body_RepWrapUint64Request_Handler,
		},
		{
			MethodName: "RepWrapInt32Request",
			Handler:    _Body_RepWrapInt32Request_Handler,
		},
		{
			MethodName: "RepWrapUint32Request",
			Handler:    _Body_RepWrapUint32Request_Handler,
		},
		{
			MethodName: "RepWrapBoolRequest",
			Handler:    _Body_RepWrapBoolRequest_Handler,
		},
		{
			MethodName: "RepWrapStringRequest",
			Handler:    _Body_RepWrapStringRequest_Handler,
		},
		{
			MethodName: "RepWrapBytesRequest",
			Handler:    _Body_RepWrapBytesRequest_Handler,
		},
		{
			MethodName: "UserRequest",
			Handler:    _Body_UserRequest_Handler,
		},
		{
			MethodName: "WrapDoubleBody",
			Handler:    _Body_WrapDoubleBody_Handler,
		},
		{
			MethodName: "WrapFloatBody",
			Handler:    _Body_WrapFloatBody_Handler,
		},
		{
			MethodName: "WrapInt64Body",
			Handler:    _Body_WrapInt64Body_Handler,
		},
		{
			MethodName: "WrapUint64Body",
			Handler:    _Body_WrapUint64Body_Handler,
		},
		{
			MethodName: "WrapInt32Body",
			Handler:    _Body_WrapInt32Body_Handler,
		},
		{
			MethodName: "WrapUint32Body",
			Handler:    _Body_WrapUint32Body_Handler,
		},
		{
			MethodName: "WrapBoolBody",
			Handler:    _Body_WrapBoolBody_Handler,
		},
		{
			MethodName: "WrapStringBody",
			Handler:    _Body_WrapStringBody_Handler,
		},
		{
			MethodName: "WrapBytesBody",
			Handler:    _Body_WrapBytesBody_Handler,
		},
		{
			MethodName: "HttpBodyBody",
			Handler:    _Body_HttpBodyBody_Handler,
		},
		{
			MethodName: "HttpRequestBody",
			Handler:    _Body_HttpRequestBody_Handler,
		},
		{
			MethodName: "ValueBody",
			Handler:    _Body_ValueBody_Handler,
		},
		{
			MethodName: "ListValueBody",
			Handler:    _Body_ListValueBody_Handler,
		},
		{
			MethodName: "StructBody",
			Handler:    _Body_StructBody_Handler,
		},
		{
			MethodName: "TimestampBody",
			Handler:    _Body_TimestampBody_Handler,
		},
		{
			MethodName: "DurationBody",
			Handler:    _Body_DurationBody_Handler,
		},
		{
			MethodName: "UserBody",
			Handler:    _Body_UserBody_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/body/body.proto",
}
