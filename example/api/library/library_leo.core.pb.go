// Code generated by protoc-gen-leo-core. DO NOT EDIT.

package library

import (
	context "context"
	endpoint "github.com/go-kit/kit/endpoint"
	sd "github.com/go-kit/kit/sd"
	endpointx "github.com/go-leo/leo/v3/endpointx"
	transportx "github.com/go-leo/leo/v3/transportx"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

type LibraryServiceService interface {
	CreateShelf(ctx context.Context, request *CreateShelfRequest) (*Shelf, error)
	GetShelf(ctx context.Context, request *GetShelfRequest) (*Shelf, error)
	ListShelves(ctx context.Context, request *ListShelvesRequest) (*ListShelvesResponse, error)
	DeleteShelf(ctx context.Context, request *DeleteShelfRequest) (*emptypb.Empty, error)
	MergeShelves(ctx context.Context, request *MergeShelvesRequest) (*Shelf, error)
	CreateBook(ctx context.Context, request *CreateBookRequest) (*Book, error)
	GetBook(ctx context.Context, request *GetBookRequest) (*Book, error)
	ListBooks(ctx context.Context, request *ListBooksRequest) (*ListBooksResponse, error)
	DeleteBook(ctx context.Context, request *DeleteBookRequest) (*emptypb.Empty, error)
	UpdateBook(ctx context.Context, request *UpdateBookRequest) (*Book, error)
	MoveBook(ctx context.Context, request *MoveBookRequest) (*Book, error)
}

type LibraryServiceEndpoints interface {
	CreateShelf(ctx context.Context) endpoint.Endpoint
	GetShelf(ctx context.Context) endpoint.Endpoint
	ListShelves(ctx context.Context) endpoint.Endpoint
	DeleteShelf(ctx context.Context) endpoint.Endpoint
	MergeShelves(ctx context.Context) endpoint.Endpoint
	CreateBook(ctx context.Context) endpoint.Endpoint
	GetBook(ctx context.Context) endpoint.Endpoint
	ListBooks(ctx context.Context) endpoint.Endpoint
	DeleteBook(ctx context.Context) endpoint.Endpoint
	UpdateBook(ctx context.Context) endpoint.Endpoint
	MoveBook(ctx context.Context) endpoint.Endpoint
}

type LibraryServiceClientTransports interface {
	CreateShelf() transportx.ClientTransport
	GetShelf() transportx.ClientTransport
	ListShelves() transportx.ClientTransport
	DeleteShelf() transportx.ClientTransport
	MergeShelves() transportx.ClientTransport
	CreateBook() transportx.ClientTransport
	GetBook() transportx.ClientTransport
	ListBooks() transportx.ClientTransport
	DeleteBook() transportx.ClientTransport
	UpdateBook() transportx.ClientTransport
	MoveBook() transportx.ClientTransport
}

type LibraryServiceFactories interface {
	CreateShelf(middlewares ...endpoint.Middleware) sd.Factory
	GetShelf(middlewares ...endpoint.Middleware) sd.Factory
	ListShelves(middlewares ...endpoint.Middleware) sd.Factory
	DeleteShelf(middlewares ...endpoint.Middleware) sd.Factory
	MergeShelves(middlewares ...endpoint.Middleware) sd.Factory
	CreateBook(middlewares ...endpoint.Middleware) sd.Factory
	GetBook(middlewares ...endpoint.Middleware) sd.Factory
	ListBooks(middlewares ...endpoint.Middleware) sd.Factory
	DeleteBook(middlewares ...endpoint.Middleware) sd.Factory
	UpdateBook(middlewares ...endpoint.Middleware) sd.Factory
	MoveBook(middlewares ...endpoint.Middleware) sd.Factory
}

type LibraryServiceEndpointers interface {
	CreateShelf() sd.Endpointer
	GetShelf() sd.Endpointer
	ListShelves() sd.Endpointer
	DeleteShelf() sd.Endpointer
	MergeShelves() sd.Endpointer
	CreateBook() sd.Endpointer
	GetBook() sd.Endpointer
	ListBooks() sd.Endpointer
	DeleteBook() sd.Endpointer
	UpdateBook() sd.Endpointer
	MoveBook() sd.Endpointer
}

type libraryServiceServerEndpoints struct {
	svc         LibraryServiceService
	middlewares []endpoint.Middleware
}

func (e *libraryServiceServerEndpoints) CreateShelf(context.Context) endpoint.Endpoint {
	component := func(ctx context.Context, request any) (any, error) {
		return e.svc.CreateShelf(ctx, request.(*CreateShelfRequest))
	}
	return endpointx.Chain(component, e.middlewares...)
}

func (e *libraryServiceServerEndpoints) GetShelf(context.Context) endpoint.Endpoint {
	component := func(ctx context.Context, request any) (any, error) {
		return e.svc.GetShelf(ctx, request.(*GetShelfRequest))
	}
	return endpointx.Chain(component, e.middlewares...)
}

func (e *libraryServiceServerEndpoints) ListShelves(context.Context) endpoint.Endpoint {
	component := func(ctx context.Context, request any) (any, error) {
		return e.svc.ListShelves(ctx, request.(*ListShelvesRequest))
	}
	return endpointx.Chain(component, e.middlewares...)
}

func (e *libraryServiceServerEndpoints) DeleteShelf(context.Context) endpoint.Endpoint {
	component := func(ctx context.Context, request any) (any, error) {
		return e.svc.DeleteShelf(ctx, request.(*DeleteShelfRequest))
	}
	return endpointx.Chain(component, e.middlewares...)
}

func (e *libraryServiceServerEndpoints) MergeShelves(context.Context) endpoint.Endpoint {
	component := func(ctx context.Context, request any) (any, error) {
		return e.svc.MergeShelves(ctx, request.(*MergeShelvesRequest))
	}
	return endpointx.Chain(component, e.middlewares...)
}

func (e *libraryServiceServerEndpoints) CreateBook(context.Context) endpoint.Endpoint {
	component := func(ctx context.Context, request any) (any, error) {
		return e.svc.CreateBook(ctx, request.(*CreateBookRequest))
	}
	return endpointx.Chain(component, e.middlewares...)
}

func (e *libraryServiceServerEndpoints) GetBook(context.Context) endpoint.Endpoint {
	component := func(ctx context.Context, request any) (any, error) {
		return e.svc.GetBook(ctx, request.(*GetBookRequest))
	}
	return endpointx.Chain(component, e.middlewares...)
}

func (e *libraryServiceServerEndpoints) ListBooks(context.Context) endpoint.Endpoint {
	component := func(ctx context.Context, request any) (any, error) {
		return e.svc.ListBooks(ctx, request.(*ListBooksRequest))
	}
	return endpointx.Chain(component, e.middlewares...)
}

func (e *libraryServiceServerEndpoints) DeleteBook(context.Context) endpoint.Endpoint {
	component := func(ctx context.Context, request any) (any, error) {
		return e.svc.DeleteBook(ctx, request.(*DeleteBookRequest))
	}
	return endpointx.Chain(component, e.middlewares...)
}

func (e *libraryServiceServerEndpoints) UpdateBook(context.Context) endpoint.Endpoint {
	component := func(ctx context.Context, request any) (any, error) {
		return e.svc.UpdateBook(ctx, request.(*UpdateBookRequest))
	}
	return endpointx.Chain(component, e.middlewares...)
}

func (e *libraryServiceServerEndpoints) MoveBook(context.Context) endpoint.Endpoint {
	component := func(ctx context.Context, request any) (any, error) {
		return e.svc.MoveBook(ctx, request.(*MoveBookRequest))
	}
	return endpointx.Chain(component, e.middlewares...)
}

func newLibraryServiceServerEndpoints(svc LibraryServiceService, middlewares ...endpoint.Middleware) LibraryServiceEndpoints {
	return &libraryServiceServerEndpoints{svc: svc, middlewares: middlewares}
}

type libraryServiceClientEndpoints struct {
	transports  LibraryServiceClientTransports
	middlewares []endpoint.Middleware
}

func (e *libraryServiceClientEndpoints) CreateShelf(ctx context.Context) endpoint.Endpoint {
	return endpointx.Chain(e.transports.CreateShelf().Endpoint(ctx), e.middlewares...)
}

func (e *libraryServiceClientEndpoints) GetShelf(ctx context.Context) endpoint.Endpoint {
	return endpointx.Chain(e.transports.GetShelf().Endpoint(ctx), e.middlewares...)
}

func (e *libraryServiceClientEndpoints) ListShelves(ctx context.Context) endpoint.Endpoint {
	return endpointx.Chain(e.transports.ListShelves().Endpoint(ctx), e.middlewares...)
}

func (e *libraryServiceClientEndpoints) DeleteShelf(ctx context.Context) endpoint.Endpoint {
	return endpointx.Chain(e.transports.DeleteShelf().Endpoint(ctx), e.middlewares...)
}

func (e *libraryServiceClientEndpoints) MergeShelves(ctx context.Context) endpoint.Endpoint {
	return endpointx.Chain(e.transports.MergeShelves().Endpoint(ctx), e.middlewares...)
}

func (e *libraryServiceClientEndpoints) CreateBook(ctx context.Context) endpoint.Endpoint {
	return endpointx.Chain(e.transports.CreateBook().Endpoint(ctx), e.middlewares...)
}

func (e *libraryServiceClientEndpoints) GetBook(ctx context.Context) endpoint.Endpoint {
	return endpointx.Chain(e.transports.GetBook().Endpoint(ctx), e.middlewares...)
}

func (e *libraryServiceClientEndpoints) ListBooks(ctx context.Context) endpoint.Endpoint {
	return endpointx.Chain(e.transports.ListBooks().Endpoint(ctx), e.middlewares...)
}

func (e *libraryServiceClientEndpoints) DeleteBook(ctx context.Context) endpoint.Endpoint {
	return endpointx.Chain(e.transports.DeleteBook().Endpoint(ctx), e.middlewares...)
}

func (e *libraryServiceClientEndpoints) UpdateBook(ctx context.Context) endpoint.Endpoint {
	return endpointx.Chain(e.transports.UpdateBook().Endpoint(ctx), e.middlewares...)
}

func (e *libraryServiceClientEndpoints) MoveBook(ctx context.Context) endpoint.Endpoint {
	return endpointx.Chain(e.transports.MoveBook().Endpoint(ctx), e.middlewares...)
}

func newLibraryServiceClientEndpoints(transports LibraryServiceClientTransports, middlewares ...endpoint.Middleware) LibraryServiceEndpoints {
	return &libraryServiceClientEndpoints{transports: transports, middlewares: middlewares}
}
