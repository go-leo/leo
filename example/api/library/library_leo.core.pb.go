// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package library

import (
	context "context"
	endpoint "github.com/go-kit/kit/endpoint"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

type libraryServiceEndpoints struct {
	svc interface {
		CreateShelf(ctx context.Context, request *CreateShelfRequest) (*Shelf, error)
		GetShelf(ctx context.Context, request *GetShelfRequest) (*Shelf, error)
		ListShelves(ctx context.Context, request *ListShelvesRequest) (*ListShelvesResponse, error)
		DeleteShelf(ctx context.Context, request *DeleteShelfRequest) (*emptypb.Empty, error)
		MergeShelves(ctx context.Context, request *MergeShelvesRequest) (*Shelf, error)
		CreateBook(ctx context.Context, request *CreateBookRequest) (*Book, error)
		GetBook(ctx context.Context, request *GetBookRequest) (*Book, error)
		ListBooks(ctx context.Context, request *ListBooksRequest) (*ListBooksResponse, error)
		DeleteBook(ctx context.Context, request *DeleteBookRequest) (*emptypb.Empty, error)
		UpdateBook(ctx context.Context, request *UpdateBookRequest) (*Book, error)
		MoveBook(ctx context.Context, request *MoveBookRequest) (*Book, error)
	}
}

func (e *libraryServiceEndpoints) CreateShelf() endpoint.Endpoint {
	return func(ctx context.Context, request any) (any, error) {
		return e.svc.CreateShelf(ctx, request.(*CreateShelfRequest))
	}
}

func (e *libraryServiceEndpoints) GetShelf() endpoint.Endpoint {
	return func(ctx context.Context, request any) (any, error) {
		return e.svc.GetShelf(ctx, request.(*GetShelfRequest))
	}
}

func (e *libraryServiceEndpoints) ListShelves() endpoint.Endpoint {
	return func(ctx context.Context, request any) (any, error) {
		return e.svc.ListShelves(ctx, request.(*ListShelvesRequest))
	}
}

func (e *libraryServiceEndpoints) DeleteShelf() endpoint.Endpoint {
	return func(ctx context.Context, request any) (any, error) {
		return e.svc.DeleteShelf(ctx, request.(*DeleteShelfRequest))
	}
}

func (e *libraryServiceEndpoints) MergeShelves() endpoint.Endpoint {
	return func(ctx context.Context, request any) (any, error) {
		return e.svc.MergeShelves(ctx, request.(*MergeShelvesRequest))
	}
}

func (e *libraryServiceEndpoints) CreateBook() endpoint.Endpoint {
	return func(ctx context.Context, request any) (any, error) {
		return e.svc.CreateBook(ctx, request.(*CreateBookRequest))
	}
}

func (e *libraryServiceEndpoints) GetBook() endpoint.Endpoint {
	return func(ctx context.Context, request any) (any, error) {
		return e.svc.GetBook(ctx, request.(*GetBookRequest))
	}
}

func (e *libraryServiceEndpoints) ListBooks() endpoint.Endpoint {
	return func(ctx context.Context, request any) (any, error) {
		return e.svc.ListBooks(ctx, request.(*ListBooksRequest))
	}
}

func (e *libraryServiceEndpoints) DeleteBook() endpoint.Endpoint {
	return func(ctx context.Context, request any) (any, error) {
		return e.svc.DeleteBook(ctx, request.(*DeleteBookRequest))
	}
}

func (e *libraryServiceEndpoints) UpdateBook() endpoint.Endpoint {
	return func(ctx context.Context, request any) (any, error) {
		return e.svc.UpdateBook(ctx, request.(*UpdateBookRequest))
	}
}

func (e *libraryServiceEndpoints) MoveBook() endpoint.Endpoint {
	return func(ctx context.Context, request any) (any, error) {
		return e.svc.MoveBook(ctx, request.(*MoveBookRequest))
	}
}

func NewLibraryServiceEndpoints(
	svc interface {
		CreateShelf(ctx context.Context, request *CreateShelfRequest) (*Shelf, error)
		GetShelf(ctx context.Context, request *GetShelfRequest) (*Shelf, error)
		ListShelves(ctx context.Context, request *ListShelvesRequest) (*ListShelvesResponse, error)
		DeleteShelf(ctx context.Context, request *DeleteShelfRequest) (*emptypb.Empty, error)
		MergeShelves(ctx context.Context, request *MergeShelvesRequest) (*Shelf, error)
		CreateBook(ctx context.Context, request *CreateBookRequest) (*Book, error)
		GetBook(ctx context.Context, request *GetBookRequest) (*Book, error)
		ListBooks(ctx context.Context, request *ListBooksRequest) (*ListBooksResponse, error)
		DeleteBook(ctx context.Context, request *DeleteBookRequest) (*emptypb.Empty, error)
		UpdateBook(ctx context.Context, request *UpdateBookRequest) (*Book, error)
		MoveBook(ctx context.Context, request *MoveBookRequest) (*Book, error)
	},
) interface {
	CreateShelf() endpoint.Endpoint
	GetShelf() endpoint.Endpoint
	ListShelves() endpoint.Endpoint
	DeleteShelf() endpoint.Endpoint
	MergeShelves() endpoint.Endpoint
	CreateBook() endpoint.Endpoint
	GetBook() endpoint.Endpoint
	ListBooks() endpoint.Endpoint
	DeleteBook() endpoint.Endpoint
	UpdateBook() endpoint.Endpoint
	MoveBook() endpoint.Endpoint
} {
	return &libraryServiceEndpoints{svc: svc}
}
