// Code generated by protoc-gen-leo-grpc. DO NOT EDIT.

package library

import (
	context "context"
	endpoint "github.com/go-kit/kit/endpoint"
	grpc "github.com/go-kit/kit/transport/grpc"
	endpointx "github.com/go-leo/leo/v3/endpointx"
	grpcx "github.com/go-leo/leo/v3/transportx/grpcx"
	grpc1 "google.golang.org/grpc"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	io "io"
)

// =========================== grpc server ===========================

type LibraryServiceGrpcServerTransports interface {
	CreateShelf() *grpc.Server
	GetShelf() *grpc.Server
	ListShelves() *grpc.Server
	DeleteShelf() *grpc.Server
	MergeShelves() *grpc.Server
	CreateBook() *grpc.Server
	GetBook() *grpc.Server
	ListBooks() *grpc.Server
	DeleteBook() *grpc.Server
	UpdateBook() *grpc.Server
	MoveBook() *grpc.Server
}

type libraryServiceGrpcServerTransports struct {
	createShelf  *grpc.Server
	getShelf     *grpc.Server
	listShelves  *grpc.Server
	deleteShelf  *grpc.Server
	mergeShelves *grpc.Server
	createBook   *grpc.Server
	getBook      *grpc.Server
	listBooks    *grpc.Server
	deleteBook   *grpc.Server
	updateBook   *grpc.Server
	moveBook     *grpc.Server
}

func (t *libraryServiceGrpcServerTransports) CreateShelf() *grpc.Server {
	return t.createShelf
}

func (t *libraryServiceGrpcServerTransports) GetShelf() *grpc.Server {
	return t.getShelf
}

func (t *libraryServiceGrpcServerTransports) ListShelves() *grpc.Server {
	return t.listShelves
}

func (t *libraryServiceGrpcServerTransports) DeleteShelf() *grpc.Server {
	return t.deleteShelf
}

func (t *libraryServiceGrpcServerTransports) MergeShelves() *grpc.Server {
	return t.mergeShelves
}

func (t *libraryServiceGrpcServerTransports) CreateBook() *grpc.Server {
	return t.createBook
}

func (t *libraryServiceGrpcServerTransports) GetBook() *grpc.Server {
	return t.getBook
}

func (t *libraryServiceGrpcServerTransports) ListBooks() *grpc.Server {
	return t.listBooks
}

func (t *libraryServiceGrpcServerTransports) DeleteBook() *grpc.Server {
	return t.deleteBook
}

func (t *libraryServiceGrpcServerTransports) UpdateBook() *grpc.Server {
	return t.updateBook
}

func (t *libraryServiceGrpcServerTransports) MoveBook() *grpc.Server {
	return t.moveBook
}

func newLibraryServiceGrpcServerTransports(endpoints LibraryServiceEndpoints) LibraryServiceGrpcServerTransports {
	return &libraryServiceGrpcServerTransports{
		createShelf:  _LibraryService_CreateShelf_GrpcServer_Transport(endpoints),
		getShelf:     _LibraryService_GetShelf_GrpcServer_Transport(endpoints),
		listShelves:  _LibraryService_ListShelves_GrpcServer_Transport(endpoints),
		deleteShelf:  _LibraryService_DeleteShelf_GrpcServer_Transport(endpoints),
		mergeShelves: _LibraryService_MergeShelves_GrpcServer_Transport(endpoints),
		createBook:   _LibraryService_CreateBook_GrpcServer_Transport(endpoints),
		getBook:      _LibraryService_GetBook_GrpcServer_Transport(endpoints),
		listBooks:    _LibraryService_ListBooks_GrpcServer_Transport(endpoints),
		deleteBook:   _LibraryService_DeleteBook_GrpcServer_Transport(endpoints),
		updateBook:   _LibraryService_UpdateBook_GrpcServer_Transport(endpoints),
		moveBook:     _LibraryService_MoveBook_GrpcServer_Transport(endpoints),
	}
}

type libraryServiceGrpcServer struct {
	createShelf  *grpc.Server
	getShelf     *grpc.Server
	listShelves  *grpc.Server
	deleteShelf  *grpc.Server
	mergeShelves *grpc.Server
	createBook   *grpc.Server
	getBook      *grpc.Server
	listBooks    *grpc.Server
	deleteBook   *grpc.Server
	updateBook   *grpc.Server
	moveBook     *grpc.Server
}

func (s *libraryServiceGrpcServer) CreateShelf(ctx context.Context, request *CreateShelfRequest) (*Shelf, error) {
	ctx, rep, err := s.createShelf.ServeGRPC(ctx, request)
	if err != nil {
		return nil, err
	}
	_ = ctx
	return rep.(*Shelf), nil
}

func (s *libraryServiceGrpcServer) GetShelf(ctx context.Context, request *GetShelfRequest) (*Shelf, error) {
	ctx, rep, err := s.getShelf.ServeGRPC(ctx, request)
	if err != nil {
		return nil, err
	}
	_ = ctx
	return rep.(*Shelf), nil
}

func (s *libraryServiceGrpcServer) ListShelves(ctx context.Context, request *ListShelvesRequest) (*ListShelvesResponse, error) {
	ctx, rep, err := s.listShelves.ServeGRPC(ctx, request)
	if err != nil {
		return nil, err
	}
	_ = ctx
	return rep.(*ListShelvesResponse), nil
}

func (s *libraryServiceGrpcServer) DeleteShelf(ctx context.Context, request *DeleteShelfRequest) (*emptypb.Empty, error) {
	ctx, rep, err := s.deleteShelf.ServeGRPC(ctx, request)
	if err != nil {
		return nil, err
	}
	_ = ctx
	return rep.(*emptypb.Empty), nil
}

func (s *libraryServiceGrpcServer) MergeShelves(ctx context.Context, request *MergeShelvesRequest) (*Shelf, error) {
	ctx, rep, err := s.mergeShelves.ServeGRPC(ctx, request)
	if err != nil {
		return nil, err
	}
	_ = ctx
	return rep.(*Shelf), nil
}

func (s *libraryServiceGrpcServer) CreateBook(ctx context.Context, request *CreateBookRequest) (*Book, error) {
	ctx, rep, err := s.createBook.ServeGRPC(ctx, request)
	if err != nil {
		return nil, err
	}
	_ = ctx
	return rep.(*Book), nil
}

func (s *libraryServiceGrpcServer) GetBook(ctx context.Context, request *GetBookRequest) (*Book, error) {
	ctx, rep, err := s.getBook.ServeGRPC(ctx, request)
	if err != nil {
		return nil, err
	}
	_ = ctx
	return rep.(*Book), nil
}

func (s *libraryServiceGrpcServer) ListBooks(ctx context.Context, request *ListBooksRequest) (*ListBooksResponse, error) {
	ctx, rep, err := s.listBooks.ServeGRPC(ctx, request)
	if err != nil {
		return nil, err
	}
	_ = ctx
	return rep.(*ListBooksResponse), nil
}

func (s *libraryServiceGrpcServer) DeleteBook(ctx context.Context, request *DeleteBookRequest) (*emptypb.Empty, error) {
	ctx, rep, err := s.deleteBook.ServeGRPC(ctx, request)
	if err != nil {
		return nil, err
	}
	_ = ctx
	return rep.(*emptypb.Empty), nil
}

func (s *libraryServiceGrpcServer) UpdateBook(ctx context.Context, request *UpdateBookRequest) (*Book, error) {
	ctx, rep, err := s.updateBook.ServeGRPC(ctx, request)
	if err != nil {
		return nil, err
	}
	_ = ctx
	return rep.(*Book), nil
}

func (s *libraryServiceGrpcServer) MoveBook(ctx context.Context, request *MoveBookRequest) (*Book, error) {
	ctx, rep, err := s.moveBook.ServeGRPC(ctx, request)
	if err != nil {
		return nil, err
	}
	_ = ctx
	return rep.(*Book), nil
}

func NewLibraryServiceGrpcServer(svc LibraryServiceService, middlewares ...endpoint.Middleware) LibraryServiceService {
	endpoints := newLibraryServiceServerEndpoints(svc, middlewares...)
	transports := newLibraryServiceGrpcServerTransports(endpoints)
	return &libraryServiceGrpcServer{
		createShelf:  transports.CreateShelf(),
		getShelf:     transports.GetShelf(),
		listShelves:  transports.ListShelves(),
		deleteShelf:  transports.DeleteShelf(),
		mergeShelves: transports.MergeShelves(),
		createBook:   transports.CreateBook(),
		getBook:      transports.GetBook(),
		listBooks:    transports.ListBooks(),
		deleteBook:   transports.DeleteBook(),
		updateBook:   transports.UpdateBook(),
		moveBook:     transports.MoveBook(),
	}
}

// =========================== grpc client ===========================

type libraryServiceGrpcClientTransports struct {
	dialOptions   []grpc1.DialOption
	clientOptions []grpc.ClientOption
	middlewares   []endpoint.Middleware
}

func (t *libraryServiceGrpcClientTransports) CreateShelf(ctx context.Context, instance string) (endpoint.Endpoint, io.Closer, error) {
	conn, err := grpc1.NewClient(instance, t.dialOptions...)
	if err != nil {
		return nil, nil, err
	}
	opts := []grpc.ClientOption{
		grpc.ClientBefore(grpcx.OutgoingMetadataInjector),
		grpc.ClientBefore(grpcx.OutgoingStain),
	}
	opts = append(opts, t.clientOptions...)
	client := grpc.NewClient(
		conn,
		"google.example.library.v1.LibraryService",
		"CreateShelf",
		func(_ context.Context, v any) (any, error) { return v, nil },
		func(_ context.Context, v any) (any, error) { return v, nil },
		Shelf{},
		opts...)
	return endpointx.Chain(client.Endpoint(), t.middlewares...), conn, nil
}

func (t *libraryServiceGrpcClientTransports) GetShelf(ctx context.Context, instance string) (endpoint.Endpoint, io.Closer, error) {
	conn, err := grpc1.NewClient(instance, t.dialOptions...)
	if err != nil {
		return nil, nil, err
	}
	opts := []grpc.ClientOption{
		grpc.ClientBefore(grpcx.OutgoingMetadataInjector),
		grpc.ClientBefore(grpcx.OutgoingStain),
	}
	opts = append(opts, t.clientOptions...)
	client := grpc.NewClient(
		conn,
		"google.example.library.v1.LibraryService",
		"GetShelf",
		func(_ context.Context, v any) (any, error) { return v, nil },
		func(_ context.Context, v any) (any, error) { return v, nil },
		Shelf{},
		opts...)
	return endpointx.Chain(client.Endpoint(), t.middlewares...), conn, nil
}

func (t *libraryServiceGrpcClientTransports) ListShelves(ctx context.Context, instance string) (endpoint.Endpoint, io.Closer, error) {
	conn, err := grpc1.NewClient(instance, t.dialOptions...)
	if err != nil {
		return nil, nil, err
	}
	opts := []grpc.ClientOption{
		grpc.ClientBefore(grpcx.OutgoingMetadataInjector),
		grpc.ClientBefore(grpcx.OutgoingStain),
	}
	opts = append(opts, t.clientOptions...)
	client := grpc.NewClient(
		conn,
		"google.example.library.v1.LibraryService",
		"ListShelves",
		func(_ context.Context, v any) (any, error) { return v, nil },
		func(_ context.Context, v any) (any, error) { return v, nil },
		ListShelvesResponse{},
		opts...)
	return endpointx.Chain(client.Endpoint(), t.middlewares...), conn, nil
}

func (t *libraryServiceGrpcClientTransports) DeleteShelf(ctx context.Context, instance string) (endpoint.Endpoint, io.Closer, error) {
	conn, err := grpc1.NewClient(instance, t.dialOptions...)
	if err != nil {
		return nil, nil, err
	}
	opts := []grpc.ClientOption{
		grpc.ClientBefore(grpcx.OutgoingMetadataInjector),
		grpc.ClientBefore(grpcx.OutgoingStain),
	}
	opts = append(opts, t.clientOptions...)
	client := grpc.NewClient(
		conn,
		"google.example.library.v1.LibraryService",
		"DeleteShelf",
		func(_ context.Context, v any) (any, error) { return v, nil },
		func(_ context.Context, v any) (any, error) { return v, nil },
		emptypb.Empty{},
		opts...)
	return endpointx.Chain(client.Endpoint(), t.middlewares...), conn, nil
}

func (t *libraryServiceGrpcClientTransports) MergeShelves(ctx context.Context, instance string) (endpoint.Endpoint, io.Closer, error) {
	conn, err := grpc1.NewClient(instance, t.dialOptions...)
	if err != nil {
		return nil, nil, err
	}
	opts := []grpc.ClientOption{
		grpc.ClientBefore(grpcx.OutgoingMetadataInjector),
		grpc.ClientBefore(grpcx.OutgoingStain),
	}
	opts = append(opts, t.clientOptions...)
	client := grpc.NewClient(
		conn,
		"google.example.library.v1.LibraryService",
		"MergeShelves",
		func(_ context.Context, v any) (any, error) { return v, nil },
		func(_ context.Context, v any) (any, error) { return v, nil },
		Shelf{},
		opts...)
	return endpointx.Chain(client.Endpoint(), t.middlewares...), conn, nil
}

func (t *libraryServiceGrpcClientTransports) CreateBook(ctx context.Context, instance string) (endpoint.Endpoint, io.Closer, error) {
	conn, err := grpc1.NewClient(instance, t.dialOptions...)
	if err != nil {
		return nil, nil, err
	}
	opts := []grpc.ClientOption{
		grpc.ClientBefore(grpcx.OutgoingMetadataInjector),
		grpc.ClientBefore(grpcx.OutgoingStain),
	}
	opts = append(opts, t.clientOptions...)
	client := grpc.NewClient(
		conn,
		"google.example.library.v1.LibraryService",
		"CreateBook",
		func(_ context.Context, v any) (any, error) { return v, nil },
		func(_ context.Context, v any) (any, error) { return v, nil },
		Book{},
		opts...)
	return endpointx.Chain(client.Endpoint(), t.middlewares...), conn, nil
}

func (t *libraryServiceGrpcClientTransports) GetBook(ctx context.Context, instance string) (endpoint.Endpoint, io.Closer, error) {
	conn, err := grpc1.NewClient(instance, t.dialOptions...)
	if err != nil {
		return nil, nil, err
	}
	opts := []grpc.ClientOption{
		grpc.ClientBefore(grpcx.OutgoingMetadataInjector),
		grpc.ClientBefore(grpcx.OutgoingStain),
	}
	opts = append(opts, t.clientOptions...)
	client := grpc.NewClient(
		conn,
		"google.example.library.v1.LibraryService",
		"GetBook",
		func(_ context.Context, v any) (any, error) { return v, nil },
		func(_ context.Context, v any) (any, error) { return v, nil },
		Book{},
		opts...)
	return endpointx.Chain(client.Endpoint(), t.middlewares...), conn, nil
}

func (t *libraryServiceGrpcClientTransports) ListBooks(ctx context.Context, instance string) (endpoint.Endpoint, io.Closer, error) {
	conn, err := grpc1.NewClient(instance, t.dialOptions...)
	if err != nil {
		return nil, nil, err
	}
	opts := []grpc.ClientOption{
		grpc.ClientBefore(grpcx.OutgoingMetadataInjector),
		grpc.ClientBefore(grpcx.OutgoingStain),
	}
	opts = append(opts, t.clientOptions...)
	client := grpc.NewClient(
		conn,
		"google.example.library.v1.LibraryService",
		"ListBooks",
		func(_ context.Context, v any) (any, error) { return v, nil },
		func(_ context.Context, v any) (any, error) { return v, nil },
		ListBooksResponse{},
		opts...)
	return endpointx.Chain(client.Endpoint(), t.middlewares...), conn, nil
}

func (t *libraryServiceGrpcClientTransports) DeleteBook(ctx context.Context, instance string) (endpoint.Endpoint, io.Closer, error) {
	conn, err := grpc1.NewClient(instance, t.dialOptions...)
	if err != nil {
		return nil, nil, err
	}
	opts := []grpc.ClientOption{
		grpc.ClientBefore(grpcx.OutgoingMetadataInjector),
		grpc.ClientBefore(grpcx.OutgoingStain),
	}
	opts = append(opts, t.clientOptions...)
	client := grpc.NewClient(
		conn,
		"google.example.library.v1.LibraryService",
		"DeleteBook",
		func(_ context.Context, v any) (any, error) { return v, nil },
		func(_ context.Context, v any) (any, error) { return v, nil },
		emptypb.Empty{},
		opts...)
	return endpointx.Chain(client.Endpoint(), t.middlewares...), conn, nil
}

func (t *libraryServiceGrpcClientTransports) UpdateBook(ctx context.Context, instance string) (endpoint.Endpoint, io.Closer, error) {
	conn, err := grpc1.NewClient(instance, t.dialOptions...)
	if err != nil {
		return nil, nil, err
	}
	opts := []grpc.ClientOption{
		grpc.ClientBefore(grpcx.OutgoingMetadataInjector),
		grpc.ClientBefore(grpcx.OutgoingStain),
	}
	opts = append(opts, t.clientOptions...)
	client := grpc.NewClient(
		conn,
		"google.example.library.v1.LibraryService",
		"UpdateBook",
		func(_ context.Context, v any) (any, error) { return v, nil },
		func(_ context.Context, v any) (any, error) { return v, nil },
		Book{},
		opts...)
	return endpointx.Chain(client.Endpoint(), t.middlewares...), conn, nil
}

func (t *libraryServiceGrpcClientTransports) MoveBook(ctx context.Context, instance string) (endpoint.Endpoint, io.Closer, error) {
	conn, err := grpc1.NewClient(instance, t.dialOptions...)
	if err != nil {
		return nil, nil, err
	}
	opts := []grpc.ClientOption{
		grpc.ClientBefore(grpcx.OutgoingMetadataInjector),
		grpc.ClientBefore(grpcx.OutgoingStain),
	}
	opts = append(opts, t.clientOptions...)
	client := grpc.NewClient(
		conn,
		"google.example.library.v1.LibraryService",
		"MoveBook",
		func(_ context.Context, v any) (any, error) { return v, nil },
		func(_ context.Context, v any) (any, error) { return v, nil },
		Book{},
		opts...)
	return endpointx.Chain(client.Endpoint(), t.middlewares...), conn, nil
}

func newLibraryServiceGrpcClientTransports(
	dialOptions []grpc1.DialOption,
	clientOptions []grpc.ClientOption,
	middlewares []endpoint.Middleware,
) LibraryServiceClientTransports {
	return &libraryServiceGrpcClientTransports{
		dialOptions:   dialOptions,
		clientOptions: clientOptions,
		middlewares:   middlewares,
	}
}

func NewLibraryServiceGrpcClient(target string, opts ...grpcx.ClientOption) LibraryServiceService {
	options := grpcx.NewClientOptions(opts...)
	transports := newLibraryServiceGrpcClientTransports(options.DialOptions(), options.ClientTransportOptions(), options.Middlewares())
	endpoints := newLibraryServiceClientEndpoints(target, transports, options.InstancerFactory(), options.EndpointerOptions(), options.BalancerFactory(), options.Logger())
	return newLibraryServiceClientService(endpoints, grpcx.GrpcClient)
}

// =========================== grpc transport ===========================

func _LibraryService_CreateShelf_GrpcServer_Transport(endpoints LibraryServiceEndpoints) *grpc.Server {
	return grpc.NewServer(
		endpoints.CreateShelf(context.TODO()),
		func(_ context.Context, v any) (any, error) { return v, nil },
		func(_ context.Context, v any) (any, error) { return v, nil },
		grpc.ServerBefore(grpcx.ServerEndpointInjector("/google.example.library.v1.LibraryService/CreateShelf")),
		grpc.ServerBefore(grpcx.ServerTransportInjector),
		grpc.ServerBefore(grpcx.IncomingMetadataInjector),
	)
}

func _LibraryService_GetShelf_GrpcServer_Transport(endpoints LibraryServiceEndpoints) *grpc.Server {
	return grpc.NewServer(
		endpoints.GetShelf(context.TODO()),
		func(_ context.Context, v any) (any, error) { return v, nil },
		func(_ context.Context, v any) (any, error) { return v, nil },
		grpc.ServerBefore(grpcx.ServerEndpointInjector("/google.example.library.v1.LibraryService/GetShelf")),
		grpc.ServerBefore(grpcx.ServerTransportInjector),
		grpc.ServerBefore(grpcx.IncomingMetadataInjector),
	)
}

func _LibraryService_ListShelves_GrpcServer_Transport(endpoints LibraryServiceEndpoints) *grpc.Server {
	return grpc.NewServer(
		endpoints.ListShelves(context.TODO()),
		func(_ context.Context, v any) (any, error) { return v, nil },
		func(_ context.Context, v any) (any, error) { return v, nil },
		grpc.ServerBefore(grpcx.ServerEndpointInjector("/google.example.library.v1.LibraryService/ListShelves")),
		grpc.ServerBefore(grpcx.ServerTransportInjector),
		grpc.ServerBefore(grpcx.IncomingMetadataInjector),
	)
}

func _LibraryService_DeleteShelf_GrpcServer_Transport(endpoints LibraryServiceEndpoints) *grpc.Server {
	return grpc.NewServer(
		endpoints.DeleteShelf(context.TODO()),
		func(_ context.Context, v any) (any, error) { return v, nil },
		func(_ context.Context, v any) (any, error) { return v, nil },
		grpc.ServerBefore(grpcx.ServerEndpointInjector("/google.example.library.v1.LibraryService/DeleteShelf")),
		grpc.ServerBefore(grpcx.ServerTransportInjector),
		grpc.ServerBefore(grpcx.IncomingMetadataInjector),
	)
}

func _LibraryService_MergeShelves_GrpcServer_Transport(endpoints LibraryServiceEndpoints) *grpc.Server {
	return grpc.NewServer(
		endpoints.MergeShelves(context.TODO()),
		func(_ context.Context, v any) (any, error) { return v, nil },
		func(_ context.Context, v any) (any, error) { return v, nil },
		grpc.ServerBefore(grpcx.ServerEndpointInjector("/google.example.library.v1.LibraryService/MergeShelves")),
		grpc.ServerBefore(grpcx.ServerTransportInjector),
		grpc.ServerBefore(grpcx.IncomingMetadataInjector),
	)
}

func _LibraryService_CreateBook_GrpcServer_Transport(endpoints LibraryServiceEndpoints) *grpc.Server {
	return grpc.NewServer(
		endpoints.CreateBook(context.TODO()),
		func(_ context.Context, v any) (any, error) { return v, nil },
		func(_ context.Context, v any) (any, error) { return v, nil },
		grpc.ServerBefore(grpcx.ServerEndpointInjector("/google.example.library.v1.LibraryService/CreateBook")),
		grpc.ServerBefore(grpcx.ServerTransportInjector),
		grpc.ServerBefore(grpcx.IncomingMetadataInjector),
	)
}

func _LibraryService_GetBook_GrpcServer_Transport(endpoints LibraryServiceEndpoints) *grpc.Server {
	return grpc.NewServer(
		endpoints.GetBook(context.TODO()),
		func(_ context.Context, v any) (any, error) { return v, nil },
		func(_ context.Context, v any) (any, error) { return v, nil },
		grpc.ServerBefore(grpcx.ServerEndpointInjector("/google.example.library.v1.LibraryService/GetBook")),
		grpc.ServerBefore(grpcx.ServerTransportInjector),
		grpc.ServerBefore(grpcx.IncomingMetadataInjector),
	)
}

func _LibraryService_ListBooks_GrpcServer_Transport(endpoints LibraryServiceEndpoints) *grpc.Server {
	return grpc.NewServer(
		endpoints.ListBooks(context.TODO()),
		func(_ context.Context, v any) (any, error) { return v, nil },
		func(_ context.Context, v any) (any, error) { return v, nil },
		grpc.ServerBefore(grpcx.ServerEndpointInjector("/google.example.library.v1.LibraryService/ListBooks")),
		grpc.ServerBefore(grpcx.ServerTransportInjector),
		grpc.ServerBefore(grpcx.IncomingMetadataInjector),
	)
}

func _LibraryService_DeleteBook_GrpcServer_Transport(endpoints LibraryServiceEndpoints) *grpc.Server {
	return grpc.NewServer(
		endpoints.DeleteBook(context.TODO()),
		func(_ context.Context, v any) (any, error) { return v, nil },
		func(_ context.Context, v any) (any, error) { return v, nil },
		grpc.ServerBefore(grpcx.ServerEndpointInjector("/google.example.library.v1.LibraryService/DeleteBook")),
		grpc.ServerBefore(grpcx.ServerTransportInjector),
		grpc.ServerBefore(grpcx.IncomingMetadataInjector),
	)
}

func _LibraryService_UpdateBook_GrpcServer_Transport(endpoints LibraryServiceEndpoints) *grpc.Server {
	return grpc.NewServer(
		endpoints.UpdateBook(context.TODO()),
		func(_ context.Context, v any) (any, error) { return v, nil },
		func(_ context.Context, v any) (any, error) { return v, nil },
		grpc.ServerBefore(grpcx.ServerEndpointInjector("/google.example.library.v1.LibraryService/UpdateBook")),
		grpc.ServerBefore(grpcx.ServerTransportInjector),
		grpc.ServerBefore(grpcx.IncomingMetadataInjector),
	)
}

func _LibraryService_MoveBook_GrpcServer_Transport(endpoints LibraryServiceEndpoints) *grpc.Server {
	return grpc.NewServer(
		endpoints.MoveBook(context.TODO()),
		func(_ context.Context, v any) (any, error) { return v, nil },
		func(_ context.Context, v any) (any, error) { return v, nil },
		grpc.ServerBefore(grpcx.ServerEndpointInjector("/google.example.library.v1.LibraryService/MoveBook")),
		grpc.ServerBefore(grpcx.ServerTransportInjector),
		grpc.ServerBefore(grpcx.IncomingMetadataInjector),
	)
}
