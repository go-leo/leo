// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package library

import (
	bytes "bytes"
	context "context"
	errors "errors"
	fmt "fmt"
	endpoint "github.com/go-kit/kit/endpoint"
	grpc "github.com/go-kit/kit/transport/grpc"
	http "github.com/go-kit/kit/transport/http"
	jsonx "github.com/go-leo/gox/encodingx/jsonx"
	errorx "github.com/go-leo/gox/errorx"
	urlx "github.com/go-leo/gox/netx/urlx"
	strconvx "github.com/go-leo/gox/strconvx"
	endpointx "github.com/go-leo/leo/v3/endpointx"
	grpcx "github.com/go-leo/leo/v3/transportx/grpcx"
	httpx "github.com/go-leo/leo/v3/transportx/httpx"
	mux "github.com/gorilla/mux"
	grpc1 "google.golang.org/grpc"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	io "io"
	http1 "net/http"
	url "net/url"
	strings "strings"
)

// =========================== endpoints ===========================

type LibraryServiceService interface {
	CreateShelf(ctx context.Context, request *CreateShelfRequest) (*Shelf, error)
	GetShelf(ctx context.Context, request *GetShelfRequest) (*Shelf, error)
	ListShelves(ctx context.Context, request *ListShelvesRequest) (*ListShelvesResponse, error)
	DeleteShelf(ctx context.Context, request *DeleteShelfRequest) (*emptypb.Empty, error)
	MergeShelves(ctx context.Context, request *MergeShelvesRequest) (*Shelf, error)
	CreateBook(ctx context.Context, request *CreateBookRequest) (*Book, error)
	GetBook(ctx context.Context, request *GetBookRequest) (*Book, error)
	ListBooks(ctx context.Context, request *ListBooksRequest) (*ListBooksResponse, error)
	DeleteBook(ctx context.Context, request *DeleteBookRequest) (*emptypb.Empty, error)
	UpdateBook(ctx context.Context, request *UpdateBookRequest) (*Book, error)
	MoveBook(ctx context.Context, request *MoveBookRequest) (*Book, error)
}

type LibraryServiceEndpoints interface {
	CreateShelf() endpoint.Endpoint
	GetShelf() endpoint.Endpoint
	ListShelves() endpoint.Endpoint
	DeleteShelf() endpoint.Endpoint
	MergeShelves() endpoint.Endpoint
	CreateBook() endpoint.Endpoint
	GetBook() endpoint.Endpoint
	ListBooks() endpoint.Endpoint
	DeleteBook() endpoint.Endpoint
	UpdateBook() endpoint.Endpoint
	MoveBook() endpoint.Endpoint
}

type libraryServiceEndpoints struct {
	svc         LibraryServiceService
	middlewares []endpoint.Middleware
}

func (e *libraryServiceEndpoints) CreateShelf() endpoint.Endpoint {
	component := func(ctx context.Context, request any) (any, error) {
		return e.svc.CreateShelf(ctx, request.(*CreateShelfRequest))
	}
	return endpointx.Chain(component, e.middlewares...)
}

func (e *libraryServiceEndpoints) GetShelf() endpoint.Endpoint {
	component := func(ctx context.Context, request any) (any, error) {
		return e.svc.GetShelf(ctx, request.(*GetShelfRequest))
	}
	return endpointx.Chain(component, e.middlewares...)
}

func (e *libraryServiceEndpoints) ListShelves() endpoint.Endpoint {
	component := func(ctx context.Context, request any) (any, error) {
		return e.svc.ListShelves(ctx, request.(*ListShelvesRequest))
	}
	return endpointx.Chain(component, e.middlewares...)
}

func (e *libraryServiceEndpoints) DeleteShelf() endpoint.Endpoint {
	component := func(ctx context.Context, request any) (any, error) {
		return e.svc.DeleteShelf(ctx, request.(*DeleteShelfRequest))
	}
	return endpointx.Chain(component, e.middlewares...)
}

func (e *libraryServiceEndpoints) MergeShelves() endpoint.Endpoint {
	component := func(ctx context.Context, request any) (any, error) {
		return e.svc.MergeShelves(ctx, request.(*MergeShelvesRequest))
	}
	return endpointx.Chain(component, e.middlewares...)
}

func (e *libraryServiceEndpoints) CreateBook() endpoint.Endpoint {
	component := func(ctx context.Context, request any) (any, error) {
		return e.svc.CreateBook(ctx, request.(*CreateBookRequest))
	}
	return endpointx.Chain(component, e.middlewares...)
}

func (e *libraryServiceEndpoints) GetBook() endpoint.Endpoint {
	component := func(ctx context.Context, request any) (any, error) {
		return e.svc.GetBook(ctx, request.(*GetBookRequest))
	}
	return endpointx.Chain(component, e.middlewares...)
}

func (e *libraryServiceEndpoints) ListBooks() endpoint.Endpoint {
	component := func(ctx context.Context, request any) (any, error) {
		return e.svc.ListBooks(ctx, request.(*ListBooksRequest))
	}
	return endpointx.Chain(component, e.middlewares...)
}

func (e *libraryServiceEndpoints) DeleteBook() endpoint.Endpoint {
	component := func(ctx context.Context, request any) (any, error) {
		return e.svc.DeleteBook(ctx, request.(*DeleteBookRequest))
	}
	return endpointx.Chain(component, e.middlewares...)
}

func (e *libraryServiceEndpoints) UpdateBook() endpoint.Endpoint {
	component := func(ctx context.Context, request any) (any, error) {
		return e.svc.UpdateBook(ctx, request.(*UpdateBookRequest))
	}
	return endpointx.Chain(component, e.middlewares...)
}

func (e *libraryServiceEndpoints) MoveBook() endpoint.Endpoint {
	component := func(ctx context.Context, request any) (any, error) {
		return e.svc.MoveBook(ctx, request.(*MoveBookRequest))
	}
	return endpointx.Chain(component, e.middlewares...)
}

func NewLibraryServiceEndpoints(svc LibraryServiceService, middlewares ...endpoint.Middleware) LibraryServiceEndpoints {
	return &libraryServiceEndpoints{svc: svc, middlewares: middlewares}
}

// =========================== cqrs ===========================

// =========================== grpc transports ===========================

type LibraryServiceGrpcServerTransports interface {
	CreateShelf() *grpc.Server
	GetShelf() *grpc.Server
	ListShelves() *grpc.Server
	DeleteShelf() *grpc.Server
	MergeShelves() *grpc.Server
	CreateBook() *grpc.Server
	GetBook() *grpc.Server
	ListBooks() *grpc.Server
	DeleteBook() *grpc.Server
	UpdateBook() *grpc.Server
	MoveBook() *grpc.Server
}

type LibraryServiceGrpcClientTransports interface {
	CreateShelf() *grpc.Client
	GetShelf() *grpc.Client
	ListShelves() *grpc.Client
	DeleteShelf() *grpc.Client
	MergeShelves() *grpc.Client
	CreateBook() *grpc.Client
	GetBook() *grpc.Client
	ListBooks() *grpc.Client
	DeleteBook() *grpc.Client
	UpdateBook() *grpc.Client
	MoveBook() *grpc.Client
}

type libraryServiceGrpcServerTransports struct {
	createShelf  *grpc.Server
	getShelf     *grpc.Server
	listShelves  *grpc.Server
	deleteShelf  *grpc.Server
	mergeShelves *grpc.Server
	createBook   *grpc.Server
	getBook      *grpc.Server
	listBooks    *grpc.Server
	deleteBook   *grpc.Server
	updateBook   *grpc.Server
	moveBook     *grpc.Server
}

func (t *libraryServiceGrpcServerTransports) CreateShelf() *grpc.Server {
	return t.createShelf
}

func (t *libraryServiceGrpcServerTransports) GetShelf() *grpc.Server {
	return t.getShelf
}

func (t *libraryServiceGrpcServerTransports) ListShelves() *grpc.Server {
	return t.listShelves
}

func (t *libraryServiceGrpcServerTransports) DeleteShelf() *grpc.Server {
	return t.deleteShelf
}

func (t *libraryServiceGrpcServerTransports) MergeShelves() *grpc.Server {
	return t.mergeShelves
}

func (t *libraryServiceGrpcServerTransports) CreateBook() *grpc.Server {
	return t.createBook
}

func (t *libraryServiceGrpcServerTransports) GetBook() *grpc.Server {
	return t.getBook
}

func (t *libraryServiceGrpcServerTransports) ListBooks() *grpc.Server {
	return t.listBooks
}

func (t *libraryServiceGrpcServerTransports) DeleteBook() *grpc.Server {
	return t.deleteBook
}

func (t *libraryServiceGrpcServerTransports) UpdateBook() *grpc.Server {
	return t.updateBook
}

func (t *libraryServiceGrpcServerTransports) MoveBook() *grpc.Server {
	return t.moveBook
}

func NewLibraryServiceGrpcServerTransports(endpoints LibraryServiceEndpoints) LibraryServiceGrpcServerTransports {
	return &libraryServiceGrpcServerTransports{
		createShelf: grpc.NewServer(
			endpoints.CreateShelf(),
			func(_ context.Context, v any) (any, error) { return v, nil },
			func(_ context.Context, v any) (any, error) { return v, nil },
			grpc.ServerBefore(grpcx.ServerEndpointInjector("/google.example.library.v1.LibraryService/CreateShelf")),
			grpc.ServerBefore(grpcx.ServerTransportInjector),
		),
		getShelf: grpc.NewServer(
			endpoints.GetShelf(),
			func(_ context.Context, v any) (any, error) { return v, nil },
			func(_ context.Context, v any) (any, error) { return v, nil },
			grpc.ServerBefore(grpcx.ServerEndpointInjector("/google.example.library.v1.LibraryService/GetShelf")),
			grpc.ServerBefore(grpcx.ServerTransportInjector),
		),
		listShelves: grpc.NewServer(
			endpoints.ListShelves(),
			func(_ context.Context, v any) (any, error) { return v, nil },
			func(_ context.Context, v any) (any, error) { return v, nil },
			grpc.ServerBefore(grpcx.ServerEndpointInjector("/google.example.library.v1.LibraryService/ListShelves")),
			grpc.ServerBefore(grpcx.ServerTransportInjector),
		),
		deleteShelf: grpc.NewServer(
			endpoints.DeleteShelf(),
			func(_ context.Context, v any) (any, error) { return v, nil },
			func(_ context.Context, v any) (any, error) { return v, nil },
			grpc.ServerBefore(grpcx.ServerEndpointInjector("/google.example.library.v1.LibraryService/DeleteShelf")),
			grpc.ServerBefore(grpcx.ServerTransportInjector),
		),
		mergeShelves: grpc.NewServer(
			endpoints.MergeShelves(),
			func(_ context.Context, v any) (any, error) { return v, nil },
			func(_ context.Context, v any) (any, error) { return v, nil },
			grpc.ServerBefore(grpcx.ServerEndpointInjector("/google.example.library.v1.LibraryService/MergeShelves")),
			grpc.ServerBefore(grpcx.ServerTransportInjector),
		),
		createBook: grpc.NewServer(
			endpoints.CreateBook(),
			func(_ context.Context, v any) (any, error) { return v, nil },
			func(_ context.Context, v any) (any, error) { return v, nil },
			grpc.ServerBefore(grpcx.ServerEndpointInjector("/google.example.library.v1.LibraryService/CreateBook")),
			grpc.ServerBefore(grpcx.ServerTransportInjector),
		),
		getBook: grpc.NewServer(
			endpoints.GetBook(),
			func(_ context.Context, v any) (any, error) { return v, nil },
			func(_ context.Context, v any) (any, error) { return v, nil },
			grpc.ServerBefore(grpcx.ServerEndpointInjector("/google.example.library.v1.LibraryService/GetBook")),
			grpc.ServerBefore(grpcx.ServerTransportInjector),
		),
		listBooks: grpc.NewServer(
			endpoints.ListBooks(),
			func(_ context.Context, v any) (any, error) { return v, nil },
			func(_ context.Context, v any) (any, error) { return v, nil },
			grpc.ServerBefore(grpcx.ServerEndpointInjector("/google.example.library.v1.LibraryService/ListBooks")),
			grpc.ServerBefore(grpcx.ServerTransportInjector),
		),
		deleteBook: grpc.NewServer(
			endpoints.DeleteBook(),
			func(_ context.Context, v any) (any, error) { return v, nil },
			func(_ context.Context, v any) (any, error) { return v, nil },
			grpc.ServerBefore(grpcx.ServerEndpointInjector("/google.example.library.v1.LibraryService/DeleteBook")),
			grpc.ServerBefore(grpcx.ServerTransportInjector),
		),
		updateBook: grpc.NewServer(
			endpoints.UpdateBook(),
			func(_ context.Context, v any) (any, error) { return v, nil },
			func(_ context.Context, v any) (any, error) { return v, nil },
			grpc.ServerBefore(grpcx.ServerEndpointInjector("/google.example.library.v1.LibraryService/UpdateBook")),
			grpc.ServerBefore(grpcx.ServerTransportInjector),
		),
		moveBook: grpc.NewServer(
			endpoints.MoveBook(),
			func(_ context.Context, v any) (any, error) { return v, nil },
			func(_ context.Context, v any) (any, error) { return v, nil },
			grpc.ServerBefore(grpcx.ServerEndpointInjector("/google.example.library.v1.LibraryService/MoveBook")),
			grpc.ServerBefore(grpcx.ServerTransportInjector),
		),
	}
}

type libraryServiceGrpcClientTransports struct {
	createShelf  *grpc.Client
	getShelf     *grpc.Client
	listShelves  *grpc.Client
	deleteShelf  *grpc.Client
	mergeShelves *grpc.Client
	createBook   *grpc.Client
	getBook      *grpc.Client
	listBooks    *grpc.Client
	deleteBook   *grpc.Client
	updateBook   *grpc.Client
	moveBook     *grpc.Client
}

func (t *libraryServiceGrpcClientTransports) CreateShelf() *grpc.Client {
	return t.createShelf
}

func (t *libraryServiceGrpcClientTransports) GetShelf() *grpc.Client {
	return t.getShelf
}

func (t *libraryServiceGrpcClientTransports) ListShelves() *grpc.Client {
	return t.listShelves
}

func (t *libraryServiceGrpcClientTransports) DeleteShelf() *grpc.Client {
	return t.deleteShelf
}

func (t *libraryServiceGrpcClientTransports) MergeShelves() *grpc.Client {
	return t.mergeShelves
}

func (t *libraryServiceGrpcClientTransports) CreateBook() *grpc.Client {
	return t.createBook
}

func (t *libraryServiceGrpcClientTransports) GetBook() *grpc.Client {
	return t.getBook
}

func (t *libraryServiceGrpcClientTransports) ListBooks() *grpc.Client {
	return t.listBooks
}

func (t *libraryServiceGrpcClientTransports) DeleteBook() *grpc.Client {
	return t.deleteBook
}

func (t *libraryServiceGrpcClientTransports) UpdateBook() *grpc.Client {
	return t.updateBook
}

func (t *libraryServiceGrpcClientTransports) MoveBook() *grpc.Client {
	return t.moveBook
}

func NewLibraryServiceGrpcClientTransports(conn *grpc1.ClientConn) LibraryServiceGrpcClientTransports {
	return &libraryServiceGrpcClientTransports{
		createShelf: grpc.NewClient(
			conn,
			"google.example.library.v1.LibraryService",
			"CreateShelf",
			func(_ context.Context, v any) (any, error) { return v, nil },
			func(_ context.Context, v any) (any, error) { return v, nil },
			Shelf{},
			grpc.ClientBefore(grpcx.ClientEndpointInjector("/google.example.library.v1.LibraryService/CreateShelf")),
			grpc.ClientBefore(grpcx.ClientTransportInjector),
		),
		getShelf: grpc.NewClient(
			conn,
			"google.example.library.v1.LibraryService",
			"GetShelf",
			func(_ context.Context, v any) (any, error) { return v, nil },
			func(_ context.Context, v any) (any, error) { return v, nil },
			Shelf{},
			grpc.ClientBefore(grpcx.ClientEndpointInjector("/google.example.library.v1.LibraryService/GetShelf")),
			grpc.ClientBefore(grpcx.ClientTransportInjector),
		),
		listShelves: grpc.NewClient(
			conn,
			"google.example.library.v1.LibraryService",
			"ListShelves",
			func(_ context.Context, v any) (any, error) { return v, nil },
			func(_ context.Context, v any) (any, error) { return v, nil },
			ListShelvesResponse{},
			grpc.ClientBefore(grpcx.ClientEndpointInjector("/google.example.library.v1.LibraryService/ListShelves")),
			grpc.ClientBefore(grpcx.ClientTransportInjector),
		),
		deleteShelf: grpc.NewClient(
			conn,
			"google.example.library.v1.LibraryService",
			"DeleteShelf",
			func(_ context.Context, v any) (any, error) { return v, nil },
			func(_ context.Context, v any) (any, error) { return v, nil },
			emptypb.Empty{},
			grpc.ClientBefore(grpcx.ClientEndpointInjector("/google.example.library.v1.LibraryService/DeleteShelf")),
			grpc.ClientBefore(grpcx.ClientTransportInjector),
		),
		mergeShelves: grpc.NewClient(
			conn,
			"google.example.library.v1.LibraryService",
			"MergeShelves",
			func(_ context.Context, v any) (any, error) { return v, nil },
			func(_ context.Context, v any) (any, error) { return v, nil },
			Shelf{},
			grpc.ClientBefore(grpcx.ClientEndpointInjector("/google.example.library.v1.LibraryService/MergeShelves")),
			grpc.ClientBefore(grpcx.ClientTransportInjector),
		),
		createBook: grpc.NewClient(
			conn,
			"google.example.library.v1.LibraryService",
			"CreateBook",
			func(_ context.Context, v any) (any, error) { return v, nil },
			func(_ context.Context, v any) (any, error) { return v, nil },
			Book{},
			grpc.ClientBefore(grpcx.ClientEndpointInjector("/google.example.library.v1.LibraryService/CreateBook")),
			grpc.ClientBefore(grpcx.ClientTransportInjector),
		),
		getBook: grpc.NewClient(
			conn,
			"google.example.library.v1.LibraryService",
			"GetBook",
			func(_ context.Context, v any) (any, error) { return v, nil },
			func(_ context.Context, v any) (any, error) { return v, nil },
			Book{},
			grpc.ClientBefore(grpcx.ClientEndpointInjector("/google.example.library.v1.LibraryService/GetBook")),
			grpc.ClientBefore(grpcx.ClientTransportInjector),
		),
		listBooks: grpc.NewClient(
			conn,
			"google.example.library.v1.LibraryService",
			"ListBooks",
			func(_ context.Context, v any) (any, error) { return v, nil },
			func(_ context.Context, v any) (any, error) { return v, nil },
			ListBooksResponse{},
			grpc.ClientBefore(grpcx.ClientEndpointInjector("/google.example.library.v1.LibraryService/ListBooks")),
			grpc.ClientBefore(grpcx.ClientTransportInjector),
		),
		deleteBook: grpc.NewClient(
			conn,
			"google.example.library.v1.LibraryService",
			"DeleteBook",
			func(_ context.Context, v any) (any, error) { return v, nil },
			func(_ context.Context, v any) (any, error) { return v, nil },
			emptypb.Empty{},
			grpc.ClientBefore(grpcx.ClientEndpointInjector("/google.example.library.v1.LibraryService/DeleteBook")),
			grpc.ClientBefore(grpcx.ClientTransportInjector),
		),
		updateBook: grpc.NewClient(
			conn,
			"google.example.library.v1.LibraryService",
			"UpdateBook",
			func(_ context.Context, v any) (any, error) { return v, nil },
			func(_ context.Context, v any) (any, error) { return v, nil },
			Book{},
			grpc.ClientBefore(grpcx.ClientEndpointInjector("/google.example.library.v1.LibraryService/UpdateBook")),
			grpc.ClientBefore(grpcx.ClientTransportInjector),
		),
		moveBook: grpc.NewClient(
			conn,
			"google.example.library.v1.LibraryService",
			"MoveBook",
			func(_ context.Context, v any) (any, error) { return v, nil },
			func(_ context.Context, v any) (any, error) { return v, nil },
			Book{},
			grpc.ClientBefore(grpcx.ClientEndpointInjector("/google.example.library.v1.LibraryService/MoveBook")),
			grpc.ClientBefore(grpcx.ClientTransportInjector),
		),
	}
}

type libraryServiceGrpcServer struct {
	createShelf  *grpc.Server
	getShelf     *grpc.Server
	listShelves  *grpc.Server
	deleteShelf  *grpc.Server
	mergeShelves *grpc.Server
	createBook   *grpc.Server
	getBook      *grpc.Server
	listBooks    *grpc.Server
	deleteBook   *grpc.Server
	updateBook   *grpc.Server
	moveBook     *grpc.Server
}

func (s *libraryServiceGrpcServer) CreateShelf(ctx context.Context, request *CreateShelfRequest) (*Shelf, error) {
	ctx, rep, err := s.createShelf.ServeGRPC(ctx, request)
	if err != nil {
		return nil, err
	}
	_ = ctx
	return rep.(*Shelf), nil
}

func (s *libraryServiceGrpcServer) GetShelf(ctx context.Context, request *GetShelfRequest) (*Shelf, error) {
	ctx, rep, err := s.getShelf.ServeGRPC(ctx, request)
	if err != nil {
		return nil, err
	}
	_ = ctx
	return rep.(*Shelf), nil
}

func (s *libraryServiceGrpcServer) ListShelves(ctx context.Context, request *ListShelvesRequest) (*ListShelvesResponse, error) {
	ctx, rep, err := s.listShelves.ServeGRPC(ctx, request)
	if err != nil {
		return nil, err
	}
	_ = ctx
	return rep.(*ListShelvesResponse), nil
}

func (s *libraryServiceGrpcServer) DeleteShelf(ctx context.Context, request *DeleteShelfRequest) (*emptypb.Empty, error) {
	ctx, rep, err := s.deleteShelf.ServeGRPC(ctx, request)
	if err != nil {
		return nil, err
	}
	_ = ctx
	return rep.(*emptypb.Empty), nil
}

func (s *libraryServiceGrpcServer) MergeShelves(ctx context.Context, request *MergeShelvesRequest) (*Shelf, error) {
	ctx, rep, err := s.mergeShelves.ServeGRPC(ctx, request)
	if err != nil {
		return nil, err
	}
	_ = ctx
	return rep.(*Shelf), nil
}

func (s *libraryServiceGrpcServer) CreateBook(ctx context.Context, request *CreateBookRequest) (*Book, error) {
	ctx, rep, err := s.createBook.ServeGRPC(ctx, request)
	if err != nil {
		return nil, err
	}
	_ = ctx
	return rep.(*Book), nil
}

func (s *libraryServiceGrpcServer) GetBook(ctx context.Context, request *GetBookRequest) (*Book, error) {
	ctx, rep, err := s.getBook.ServeGRPC(ctx, request)
	if err != nil {
		return nil, err
	}
	_ = ctx
	return rep.(*Book), nil
}

func (s *libraryServiceGrpcServer) ListBooks(ctx context.Context, request *ListBooksRequest) (*ListBooksResponse, error) {
	ctx, rep, err := s.listBooks.ServeGRPC(ctx, request)
	if err != nil {
		return nil, err
	}
	_ = ctx
	return rep.(*ListBooksResponse), nil
}

func (s *libraryServiceGrpcServer) DeleteBook(ctx context.Context, request *DeleteBookRequest) (*emptypb.Empty, error) {
	ctx, rep, err := s.deleteBook.ServeGRPC(ctx, request)
	if err != nil {
		return nil, err
	}
	_ = ctx
	return rep.(*emptypb.Empty), nil
}

func (s *libraryServiceGrpcServer) UpdateBook(ctx context.Context, request *UpdateBookRequest) (*Book, error) {
	ctx, rep, err := s.updateBook.ServeGRPC(ctx, request)
	if err != nil {
		return nil, err
	}
	_ = ctx
	return rep.(*Book), nil
}

func (s *libraryServiceGrpcServer) MoveBook(ctx context.Context, request *MoveBookRequest) (*Book, error) {
	ctx, rep, err := s.moveBook.ServeGRPC(ctx, request)
	if err != nil {
		return nil, err
	}
	_ = ctx
	return rep.(*Book), nil
}

func NewLibraryServiceGrpcServer(transports LibraryServiceGrpcServerTransports) LibraryServiceService {
	return &libraryServiceGrpcServer{
		createShelf:  transports.CreateShelf(),
		getShelf:     transports.GetShelf(),
		listShelves:  transports.ListShelves(),
		deleteShelf:  transports.DeleteShelf(),
		mergeShelves: transports.MergeShelves(),
		createBook:   transports.CreateBook(),
		getBook:      transports.GetBook(),
		listBooks:    transports.ListBooks(),
		deleteBook:   transports.DeleteBook(),
		updateBook:   transports.UpdateBook(),
		moveBook:     transports.MoveBook(),
	}
}

type libraryServiceGrpcClient struct {
	createShelf  endpoint.Endpoint
	getShelf     endpoint.Endpoint
	listShelves  endpoint.Endpoint
	deleteShelf  endpoint.Endpoint
	mergeShelves endpoint.Endpoint
	createBook   endpoint.Endpoint
	getBook      endpoint.Endpoint
	listBooks    endpoint.Endpoint
	deleteBook   endpoint.Endpoint
	updateBook   endpoint.Endpoint
	moveBook     endpoint.Endpoint
}

func (c *libraryServiceGrpcClient) CreateShelf(ctx context.Context, request *CreateShelfRequest) (*Shelf, error) {
	rep, err := c.createShelf(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*Shelf), nil
}

func (c *libraryServiceGrpcClient) GetShelf(ctx context.Context, request *GetShelfRequest) (*Shelf, error) {
	rep, err := c.getShelf(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*Shelf), nil
}

func (c *libraryServiceGrpcClient) ListShelves(ctx context.Context, request *ListShelvesRequest) (*ListShelvesResponse, error) {
	rep, err := c.listShelves(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*ListShelvesResponse), nil
}

func (c *libraryServiceGrpcClient) DeleteShelf(ctx context.Context, request *DeleteShelfRequest) (*emptypb.Empty, error) {
	rep, err := c.deleteShelf(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*emptypb.Empty), nil
}

func (c *libraryServiceGrpcClient) MergeShelves(ctx context.Context, request *MergeShelvesRequest) (*Shelf, error) {
	rep, err := c.mergeShelves(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*Shelf), nil
}

func (c *libraryServiceGrpcClient) CreateBook(ctx context.Context, request *CreateBookRequest) (*Book, error) {
	rep, err := c.createBook(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*Book), nil
}

func (c *libraryServiceGrpcClient) GetBook(ctx context.Context, request *GetBookRequest) (*Book, error) {
	rep, err := c.getBook(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*Book), nil
}

func (c *libraryServiceGrpcClient) ListBooks(ctx context.Context, request *ListBooksRequest) (*ListBooksResponse, error) {
	rep, err := c.listBooks(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*ListBooksResponse), nil
}

func (c *libraryServiceGrpcClient) DeleteBook(ctx context.Context, request *DeleteBookRequest) (*emptypb.Empty, error) {
	rep, err := c.deleteBook(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*emptypb.Empty), nil
}

func (c *libraryServiceGrpcClient) UpdateBook(ctx context.Context, request *UpdateBookRequest) (*Book, error) {
	rep, err := c.updateBook(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*Book), nil
}

func (c *libraryServiceGrpcClient) MoveBook(ctx context.Context, request *MoveBookRequest) (*Book, error) {
	rep, err := c.moveBook(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*Book), nil
}

func NewLibraryServiceGrpcClient(transports LibraryServiceGrpcClientTransports, middlewares ...endpoint.Middleware) LibraryServiceService {
	return &libraryServiceGrpcClient{
		createShelf:  endpointx.Chain(transports.CreateShelf().Endpoint(), middlewares...),
		getShelf:     endpointx.Chain(transports.GetShelf().Endpoint(), middlewares...),
		listShelves:  endpointx.Chain(transports.ListShelves().Endpoint(), middlewares...),
		deleteShelf:  endpointx.Chain(transports.DeleteShelf().Endpoint(), middlewares...),
		mergeShelves: endpointx.Chain(transports.MergeShelves().Endpoint(), middlewares...),
		createBook:   endpointx.Chain(transports.CreateBook().Endpoint(), middlewares...),
		getBook:      endpointx.Chain(transports.GetBook().Endpoint(), middlewares...),
		listBooks:    endpointx.Chain(transports.ListBooks().Endpoint(), middlewares...),
		deleteBook:   endpointx.Chain(transports.DeleteBook().Endpoint(), middlewares...),
		updateBook:   endpointx.Chain(transports.UpdateBook().Endpoint(), middlewares...),
		moveBook:     endpointx.Chain(transports.MoveBook().Endpoint(), middlewares...),
	}
}

// =========================== http transports ===========================

type LibraryServiceHttpServerTransports interface {
	CreateShelf() *http.Server
	GetShelf() *http.Server
	ListShelves() *http.Server
	DeleteShelf() *http.Server
	MergeShelves() *http.Server
	CreateBook() *http.Server
	GetBook() *http.Server
	ListBooks() *http.Server
	DeleteBook() *http.Server
	UpdateBook() *http.Server
	MoveBook() *http.Server
}

type LibraryServiceHttpClientTransports interface {
	CreateShelf() *http.Client
	GetShelf() *http.Client
	ListShelves() *http.Client
	DeleteShelf() *http.Client
	MergeShelves() *http.Client
	CreateBook() *http.Client
	GetBook() *http.Client
	ListBooks() *http.Client
	DeleteBook() *http.Client
	UpdateBook() *http.Client
	MoveBook() *http.Client
}

type libraryServiceHttpServerTransports struct {
	createShelf  *http.Server
	getShelf     *http.Server
	listShelves  *http.Server
	deleteShelf  *http.Server
	mergeShelves *http.Server
	createBook   *http.Server
	getBook      *http.Server
	listBooks    *http.Server
	deleteBook   *http.Server
	updateBook   *http.Server
	moveBook     *http.Server
}

func (t *libraryServiceHttpServerTransports) CreateShelf() *http.Server {
	return t.createShelf
}

func (t *libraryServiceHttpServerTransports) GetShelf() *http.Server {
	return t.getShelf
}

func (t *libraryServiceHttpServerTransports) ListShelves() *http.Server {
	return t.listShelves
}

func (t *libraryServiceHttpServerTransports) DeleteShelf() *http.Server {
	return t.deleteShelf
}

func (t *libraryServiceHttpServerTransports) MergeShelves() *http.Server {
	return t.mergeShelves
}

func (t *libraryServiceHttpServerTransports) CreateBook() *http.Server {
	return t.createBook
}

func (t *libraryServiceHttpServerTransports) GetBook() *http.Server {
	return t.getBook
}

func (t *libraryServiceHttpServerTransports) ListBooks() *http.Server {
	return t.listBooks
}

func (t *libraryServiceHttpServerTransports) DeleteBook() *http.Server {
	return t.deleteBook
}

func (t *libraryServiceHttpServerTransports) UpdateBook() *http.Server {
	return t.updateBook
}

func (t *libraryServiceHttpServerTransports) MoveBook() *http.Server {
	return t.moveBook
}

func NewLibraryServiceHttpServerTransports(endpoints LibraryServiceEndpoints) LibraryServiceHttpServerTransports {
	return &libraryServiceHttpServerTransports{
		createShelf: http.NewServer(
			endpoints.CreateShelf(),
			func(ctx context.Context, r *http1.Request) (any, error) {
				req := &CreateShelfRequest{}
				if err := jsonx.NewDecoder(r.Body).Decode(&req.Shelf); err != nil {
					return nil, err
				}
				return req, nil
			},
			func(ctx context.Context, w http1.ResponseWriter, obj any) error {
				resp := obj.(*Shelf)
				w.Header().Set("Content-Type", "application/json; charset=utf-8")
				w.WriteHeader(http1.StatusOK)
				if err := jsonx.NewEncoder(w).Encode(resp); err != nil {
					return err
				}
				return nil
			},
			http.ServerBefore(httpx.EndpointInjector("/google.example.library.v1.LibraryService/CreateShelf")),
			http.ServerBefore(httpx.TransportInjector(httpx.HttpServer)),
			http.ServerErrorEncoder(httpx.ErrorEncoder),
		),
		getShelf: http.NewServer(
			endpoints.GetShelf(),
			func(ctx context.Context, r *http1.Request) (any, error) {
				req := &GetShelfRequest{}
				vars := urlx.FormFromMap(mux.Vars(r))
				var varErr error
				req.Name = fmt.Sprintf("shelves/%s", vars.Get("shelf"))
				if varErr != nil {
					return nil, varErr
				}
				return req, nil
			},
			func(ctx context.Context, w http1.ResponseWriter, obj any) error {
				resp := obj.(*Shelf)
				w.Header().Set("Content-Type", "application/json; charset=utf-8")
				w.WriteHeader(http1.StatusOK)
				if err := jsonx.NewEncoder(w).Encode(resp); err != nil {
					return err
				}
				return nil
			},
			http.ServerBefore(httpx.EndpointInjector("/google.example.library.v1.LibraryService/GetShelf")),
			http.ServerBefore(httpx.TransportInjector(httpx.HttpServer)),
			http.ServerErrorEncoder(httpx.ErrorEncoder),
		),
		listShelves: http.NewServer(
			endpoints.ListShelves(),
			func(ctx context.Context, r *http1.Request) (any, error) {
				req := &ListShelvesRequest{}
				queries := r.URL.Query()
				var queryErr error
				req.PageSize, queryErr = errorx.Break[int32](queryErr)(urlx.GetInt[int32](queries, "page_size"))
				req.PageToken = queries.Get("page_token")
				if queryErr != nil {
					return nil, queryErr
				}
				return req, nil
			},
			func(ctx context.Context, w http1.ResponseWriter, obj any) error {
				resp := obj.(*ListShelvesResponse)
				w.Header().Set("Content-Type", "application/json; charset=utf-8")
				w.WriteHeader(http1.StatusOK)
				if err := jsonx.NewEncoder(w).Encode(resp); err != nil {
					return err
				}
				return nil
			},
			http.ServerBefore(httpx.EndpointInjector("/google.example.library.v1.LibraryService/ListShelves")),
			http.ServerBefore(httpx.TransportInjector(httpx.HttpServer)),
			http.ServerErrorEncoder(httpx.ErrorEncoder),
		),
		deleteShelf: http.NewServer(
			endpoints.DeleteShelf(),
			func(ctx context.Context, r *http1.Request) (any, error) {
				req := &DeleteShelfRequest{}
				vars := urlx.FormFromMap(mux.Vars(r))
				var varErr error
				req.Name = fmt.Sprintf("shelves/%s", vars.Get("shelf"))
				if varErr != nil {
					return nil, varErr
				}
				return req, nil
			},
			func(ctx context.Context, w http1.ResponseWriter, obj any) error {
				resp := obj.(*emptypb.Empty)
				w.Header().Set("Content-Type", "application/json; charset=utf-8")
				w.WriteHeader(http1.StatusOK)
				if err := jsonx.NewEncoder(w).Encode(resp); err != nil {
					return err
				}
				return nil
			},
			http.ServerBefore(httpx.EndpointInjector("/google.example.library.v1.LibraryService/DeleteShelf")),
			http.ServerBefore(httpx.TransportInjector(httpx.HttpServer)),
			http.ServerErrorEncoder(httpx.ErrorEncoder),
		),
		mergeShelves: http.NewServer(
			endpoints.MergeShelves(),
			func(ctx context.Context, r *http1.Request) (any, error) {
				req := &MergeShelvesRequest{}
				if err := jsonx.NewDecoder(r.Body).Decode(req); err != nil {
					return nil, err
				}
				vars := urlx.FormFromMap(mux.Vars(r))
				var varErr error
				req.Name = fmt.Sprintf("shelves/%s", vars.Get("shelf"))
				if varErr != nil {
					return nil, varErr
				}
				return req, nil
			},
			func(ctx context.Context, w http1.ResponseWriter, obj any) error {
				resp := obj.(*Shelf)
				w.Header().Set("Content-Type", "application/json; charset=utf-8")
				w.WriteHeader(http1.StatusOK)
				if err := jsonx.NewEncoder(w).Encode(resp); err != nil {
					return err
				}
				return nil
			},
			http.ServerBefore(httpx.EndpointInjector("/google.example.library.v1.LibraryService/MergeShelves")),
			http.ServerBefore(httpx.TransportInjector(httpx.HttpServer)),
			http.ServerErrorEncoder(httpx.ErrorEncoder),
		),
		createBook: http.NewServer(
			endpoints.CreateBook(),
			func(ctx context.Context, r *http1.Request) (any, error) {
				req := &CreateBookRequest{}
				if err := jsonx.NewDecoder(r.Body).Decode(&req.Book); err != nil {
					return nil, err
				}
				vars := urlx.FormFromMap(mux.Vars(r))
				var varErr error
				req.Parent = fmt.Sprintf("shelves/%s", vars.Get("shelf"))
				if varErr != nil {
					return nil, varErr
				}
				return req, nil
			},
			func(ctx context.Context, w http1.ResponseWriter, obj any) error {
				resp := obj.(*Book)
				w.Header().Set("Content-Type", "application/json; charset=utf-8")
				w.WriteHeader(http1.StatusOK)
				if err := jsonx.NewEncoder(w).Encode(resp); err != nil {
					return err
				}
				return nil
			},
			http.ServerBefore(httpx.EndpointInjector("/google.example.library.v1.LibraryService/CreateBook")),
			http.ServerBefore(httpx.TransportInjector(httpx.HttpServer)),
			http.ServerErrorEncoder(httpx.ErrorEncoder),
		),
		getBook: http.NewServer(
			endpoints.GetBook(),
			func(ctx context.Context, r *http1.Request) (any, error) {
				req := &GetBookRequest{}
				vars := urlx.FormFromMap(mux.Vars(r))
				var varErr error
				req.Name = fmt.Sprintf("shelves/%s/books/%s", vars.Get("shelf"), vars.Get("book"))
				if varErr != nil {
					return nil, varErr
				}
				return req, nil
			},
			func(ctx context.Context, w http1.ResponseWriter, obj any) error {
				resp := obj.(*Book)
				w.Header().Set("Content-Type", "application/json; charset=utf-8")
				w.WriteHeader(http1.StatusOK)
				if err := jsonx.NewEncoder(w).Encode(resp); err != nil {
					return err
				}
				return nil
			},
			http.ServerBefore(httpx.EndpointInjector("/google.example.library.v1.LibraryService/GetBook")),
			http.ServerBefore(httpx.TransportInjector(httpx.HttpServer)),
			http.ServerErrorEncoder(httpx.ErrorEncoder),
		),
		listBooks: http.NewServer(
			endpoints.ListBooks(),
			func(ctx context.Context, r *http1.Request) (any, error) {
				req := &ListBooksRequest{}
				vars := urlx.FormFromMap(mux.Vars(r))
				var varErr error
				req.Parent = fmt.Sprintf("shelves/%s", vars.Get("shelf"))
				if varErr != nil {
					return nil, varErr
				}
				queries := r.URL.Query()
				var queryErr error
				req.PageSize, queryErr = errorx.Break[int32](queryErr)(urlx.GetInt[int32](queries, "page_size"))
				req.PageToken = queries.Get("page_token")
				if queryErr != nil {
					return nil, queryErr
				}
				return req, nil
			},
			func(ctx context.Context, w http1.ResponseWriter, obj any) error {
				resp := obj.(*ListBooksResponse)
				w.Header().Set("Content-Type", "application/json; charset=utf-8")
				w.WriteHeader(http1.StatusOK)
				if err := jsonx.NewEncoder(w).Encode(resp); err != nil {
					return err
				}
				return nil
			},
			http.ServerBefore(httpx.EndpointInjector("/google.example.library.v1.LibraryService/ListBooks")),
			http.ServerBefore(httpx.TransportInjector(httpx.HttpServer)),
			http.ServerErrorEncoder(httpx.ErrorEncoder),
		),
		deleteBook: http.NewServer(
			endpoints.DeleteBook(),
			func(ctx context.Context, r *http1.Request) (any, error) {
				req := &DeleteBookRequest{}
				vars := urlx.FormFromMap(mux.Vars(r))
				var varErr error
				req.Name = fmt.Sprintf("shelves/%s/books/%s", vars.Get("shelf"), vars.Get("book"))
				if varErr != nil {
					return nil, varErr
				}
				return req, nil
			},
			func(ctx context.Context, w http1.ResponseWriter, obj any) error {
				resp := obj.(*emptypb.Empty)
				w.Header().Set("Content-Type", "application/json; charset=utf-8")
				w.WriteHeader(http1.StatusOK)
				if err := jsonx.NewEncoder(w).Encode(resp); err != nil {
					return err
				}
				return nil
			},
			http.ServerBefore(httpx.EndpointInjector("/google.example.library.v1.LibraryService/DeleteBook")),
			http.ServerBefore(httpx.TransportInjector(httpx.HttpServer)),
			http.ServerErrorEncoder(httpx.ErrorEncoder),
		),
		updateBook: http.NewServer(
			endpoints.UpdateBook(),
			func(ctx context.Context, r *http1.Request) (any, error) {
				req := &UpdateBookRequest{}
				if err := jsonx.NewDecoder(r.Body).Decode(&req.Book); err != nil {
					return nil, err
				}
				vars := urlx.FormFromMap(mux.Vars(r))
				var varErr error
				if req.Book == nil {
					req.Book = &Book{}
				}
				req.Book.Name = fmt.Sprintf("shelves/%s/books/%s", vars.Get("shelf"), vars.Get("book"))
				if varErr != nil {
					return nil, varErr
				}
				return req, nil
			},
			func(ctx context.Context, w http1.ResponseWriter, obj any) error {
				resp := obj.(*Book)
				w.Header().Set("Content-Type", "application/json; charset=utf-8")
				w.WriteHeader(http1.StatusOK)
				if err := jsonx.NewEncoder(w).Encode(resp); err != nil {
					return err
				}
				return nil
			},
			http.ServerBefore(httpx.EndpointInjector("/google.example.library.v1.LibraryService/UpdateBook")),
			http.ServerBefore(httpx.TransportInjector(httpx.HttpServer)),
			http.ServerErrorEncoder(httpx.ErrorEncoder),
		),
		moveBook: http.NewServer(
			endpoints.MoveBook(),
			func(ctx context.Context, r *http1.Request) (any, error) {
				req := &MoveBookRequest{}
				if err := jsonx.NewDecoder(r.Body).Decode(req); err != nil {
					return nil, err
				}
				vars := urlx.FormFromMap(mux.Vars(r))
				var varErr error
				req.Name = fmt.Sprintf("shelves/%s/books/%s", vars.Get("shelf"), vars.Get("book"))
				if varErr != nil {
					return nil, varErr
				}
				return req, nil
			},
			func(ctx context.Context, w http1.ResponseWriter, obj any) error {
				resp := obj.(*Book)
				w.Header().Set("Content-Type", "application/json; charset=utf-8")
				w.WriteHeader(http1.StatusOK)
				if err := jsonx.NewEncoder(w).Encode(resp); err != nil {
					return err
				}
				return nil
			},
			http.ServerBefore(httpx.EndpointInjector("/google.example.library.v1.LibraryService/MoveBook")),
			http.ServerBefore(httpx.TransportInjector(httpx.HttpServer)),
			http.ServerErrorEncoder(httpx.ErrorEncoder),
		),
	}
}

type libraryServiceHttpClientTransports struct {
	createShelf  *http.Client
	getShelf     *http.Client
	listShelves  *http.Client
	deleteShelf  *http.Client
	mergeShelves *http.Client
	createBook   *http.Client
	getBook      *http.Client
	listBooks    *http.Client
	deleteBook   *http.Client
	updateBook   *http.Client
	moveBook     *http.Client
}

func (t *libraryServiceHttpClientTransports) CreateShelf() *http.Client {
	return t.createShelf
}

func (t *libraryServiceHttpClientTransports) GetShelf() *http.Client {
	return t.getShelf
}

func (t *libraryServiceHttpClientTransports) ListShelves() *http.Client {
	return t.listShelves
}

func (t *libraryServiceHttpClientTransports) DeleteShelf() *http.Client {
	return t.deleteShelf
}

func (t *libraryServiceHttpClientTransports) MergeShelves() *http.Client {
	return t.mergeShelves
}

func (t *libraryServiceHttpClientTransports) CreateBook() *http.Client {
	return t.createBook
}

func (t *libraryServiceHttpClientTransports) GetBook() *http.Client {
	return t.getBook
}

func (t *libraryServiceHttpClientTransports) ListBooks() *http.Client {
	return t.listBooks
}

func (t *libraryServiceHttpClientTransports) DeleteBook() *http.Client {
	return t.deleteBook
}

func (t *libraryServiceHttpClientTransports) UpdateBook() *http.Client {
	return t.updateBook
}

func (t *libraryServiceHttpClientTransports) MoveBook() *http.Client {
	return t.moveBook
}

func NewLibraryServiceHttpClientTransports(scheme string, instance string) LibraryServiceHttpClientTransports {
	router := mux.NewRouter()
	router.NewRoute().Name("/google.example.library.v1.LibraryService/CreateShelf").Methods("POST").Path("/v1/shelves")
	router.NewRoute().Name("/google.example.library.v1.LibraryService/GetShelf").Methods("GET").Path("/v1/shelves/{shelf}")
	router.NewRoute().Name("/google.example.library.v1.LibraryService/ListShelves").Methods("GET").Path("/v1/shelves")
	router.NewRoute().Name("/google.example.library.v1.LibraryService/DeleteShelf").Methods("DELETE").Path("/v1/shelves/{shelf}")
	router.NewRoute().Name("/google.example.library.v1.LibraryService/MergeShelves").Methods("POST").Path("/v1/shelves/{shelf}:merge")
	router.NewRoute().Name("/google.example.library.v1.LibraryService/CreateBook").Methods("POST").Path("/v1/shelves/{shelf}/books")
	router.NewRoute().Name("/google.example.library.v1.LibraryService/GetBook").Methods("GET").Path("/v1/shelves/{shelf}/books/{book}")
	router.NewRoute().Name("/google.example.library.v1.LibraryService/ListBooks").Methods("GET").Path("/v1/shelves/{shelf}/books")
	router.NewRoute().Name("/google.example.library.v1.LibraryService/DeleteBook").Methods("DELETE").Path("/v1/shelves/{shelf}/books/{book}")
	router.NewRoute().Name("/google.example.library.v1.LibraryService/UpdateBook").Methods("PATCH").Path("/v1/shelves/{shelf}/books/{book}")
	router.NewRoute().Name("/google.example.library.v1.LibraryService/MoveBook").Methods("POST").Path("/v1/shelves/{shelf}/books/{book}:move")
	return &libraryServiceHttpClientTransports{
		createShelf: http.NewExplicitClient(
			func(ctx context.Context, obj interface{}) (*http1.Request, error) {
				if obj == nil {
					return nil, errors.New("request object is nil")
				}
				req, ok := obj.(*CreateShelfRequest)
				if !ok {
					return nil, fmt.Errorf("invalid request object type, %T", obj)
				}
				_ = req
				var body io.Reader
				var bodyBuf bytes.Buffer
				if err := jsonx.NewEncoder(&bodyBuf).Encode(req.GetShelf()); err != nil {
					return nil, err
				}
				body = &bodyBuf
				contentType := "application/json; charset=utf-8"
				var pairs []string
				path, err := router.Get("/google.example.library.v1.LibraryService/CreateShelf").URLPath(pairs...)
				if err != nil {
					return nil, err
				}
				queries := url.Values{}
				target := &url.URL{
					Scheme:   scheme,
					Host:     instance,
					Path:     path.Path,
					RawQuery: queries.Encode(),
				}
				r, err := http1.NewRequestWithContext(ctx, "POST", target.String(), body)
				if err != nil {
					return nil, err
				}
				r.Header.Set("Content-Type", contentType)
				return r, nil
			},
			func(ctx context.Context, r *http1.Response) (interface{}, error) {
				if httpx.IsErrorResponse(r) {
					return nil, httpx.ErrorDecoder(ctx, r)
				}
				resp := &Shelf{}
				if err := jsonx.NewDecoder(r.Body).Decode(resp); err != nil {
					return nil, err
				}
				return resp, nil
			},
			http.ClientBefore(httpx.EndpointInjector("/google.example.library.v1.LibraryService/CreateShelf")),
			http.ClientBefore(httpx.TransportInjector(httpx.HttpClient)),
		),
		getShelf: http.NewExplicitClient(
			func(ctx context.Context, obj interface{}) (*http1.Request, error) {
				if obj == nil {
					return nil, errors.New("request object is nil")
				}
				req, ok := obj.(*GetShelfRequest)
				if !ok {
					return nil, fmt.Errorf("invalid request object type, %T", obj)
				}
				_ = req
				var body io.Reader
				var pairs []string
				namedPathParameter := req.GetName()
				namedPathValues := strings.Split(namedPathParameter, "/")
				if len(namedPathValues) != 2 {
					return nil, fmt.Errorf("invalid named path parameter, %s", namedPathParameter)
				}
				pairs = append(pairs, "shelf", namedPathValues[1])
				path, err := router.Get("/google.example.library.v1.LibraryService/GetShelf").URLPath(pairs...)
				if err != nil {
					return nil, err
				}
				queries := url.Values{}
				target := &url.URL{
					Scheme:   scheme,
					Host:     instance,
					Path:     path.Path,
					RawQuery: queries.Encode(),
				}
				r, err := http1.NewRequestWithContext(ctx, "GET", target.String(), body)
				if err != nil {
					return nil, err
				}
				return r, nil
			},
			func(ctx context.Context, r *http1.Response) (interface{}, error) {
				if httpx.IsErrorResponse(r) {
					return nil, httpx.ErrorDecoder(ctx, r)
				}
				resp := &Shelf{}
				if err := jsonx.NewDecoder(r.Body).Decode(resp); err != nil {
					return nil, err
				}
				return resp, nil
			},
			http.ClientBefore(httpx.EndpointInjector("/google.example.library.v1.LibraryService/GetShelf")),
			http.ClientBefore(httpx.TransportInjector(httpx.HttpClient)),
		),
		listShelves: http.NewExplicitClient(
			func(ctx context.Context, obj interface{}) (*http1.Request, error) {
				if obj == nil {
					return nil, errors.New("request object is nil")
				}
				req, ok := obj.(*ListShelvesRequest)
				if !ok {
					return nil, fmt.Errorf("invalid request object type, %T", obj)
				}
				_ = req
				var body io.Reader
				var pairs []string
				path, err := router.Get("/google.example.library.v1.LibraryService/ListShelves").URLPath(pairs...)
				if err != nil {
					return nil, err
				}
				queries := url.Values{}
				queries["page_size"] = append(queries["page_size"], strconvx.FormatInt(req.GetPageSize(), 10))
				queries["page_token"] = append(queries["page_token"], req.GetPageToken())
				target := &url.URL{
					Scheme:   scheme,
					Host:     instance,
					Path:     path.Path,
					RawQuery: queries.Encode(),
				}
				r, err := http1.NewRequestWithContext(ctx, "GET", target.String(), body)
				if err != nil {
					return nil, err
				}
				return r, nil
			},
			func(ctx context.Context, r *http1.Response) (interface{}, error) {
				if httpx.IsErrorResponse(r) {
					return nil, httpx.ErrorDecoder(ctx, r)
				}
				resp := &ListShelvesResponse{}
				if err := jsonx.NewDecoder(r.Body).Decode(resp); err != nil {
					return nil, err
				}
				return resp, nil
			},
			http.ClientBefore(httpx.EndpointInjector("/google.example.library.v1.LibraryService/ListShelves")),
			http.ClientBefore(httpx.TransportInjector(httpx.HttpClient)),
		),
		deleteShelf: http.NewExplicitClient(
			func(ctx context.Context, obj interface{}) (*http1.Request, error) {
				if obj == nil {
					return nil, errors.New("request object is nil")
				}
				req, ok := obj.(*DeleteShelfRequest)
				if !ok {
					return nil, fmt.Errorf("invalid request object type, %T", obj)
				}
				_ = req
				var body io.Reader
				var pairs []string
				namedPathParameter := req.GetName()
				namedPathValues := strings.Split(namedPathParameter, "/")
				if len(namedPathValues) != 2 {
					return nil, fmt.Errorf("invalid named path parameter, %s", namedPathParameter)
				}
				pairs = append(pairs, "shelf", namedPathValues[1])
				path, err := router.Get("/google.example.library.v1.LibraryService/DeleteShelf").URLPath(pairs...)
				if err != nil {
					return nil, err
				}
				queries := url.Values{}
				target := &url.URL{
					Scheme:   scheme,
					Host:     instance,
					Path:     path.Path,
					RawQuery: queries.Encode(),
				}
				r, err := http1.NewRequestWithContext(ctx, "DELETE", target.String(), body)
				if err != nil {
					return nil, err
				}
				return r, nil
			},
			func(ctx context.Context, r *http1.Response) (interface{}, error) {
				if httpx.IsErrorResponse(r) {
					return nil, httpx.ErrorDecoder(ctx, r)
				}
				resp := &emptypb.Empty{}
				if err := jsonx.NewDecoder(r.Body).Decode(resp); err != nil {
					return nil, err
				}
				return resp, nil
			},
			http.ClientBefore(httpx.EndpointInjector("/google.example.library.v1.LibraryService/DeleteShelf")),
			http.ClientBefore(httpx.TransportInjector(httpx.HttpClient)),
		),
		mergeShelves: http.NewExplicitClient(
			func(ctx context.Context, obj interface{}) (*http1.Request, error) {
				if obj == nil {
					return nil, errors.New("request object is nil")
				}
				req, ok := obj.(*MergeShelvesRequest)
				if !ok {
					return nil, fmt.Errorf("invalid request object type, %T", obj)
				}
				_ = req
				var body io.Reader
				var bodyBuf bytes.Buffer
				if err := jsonx.NewEncoder(&bodyBuf).Encode(req); err != nil {
					return nil, err
				}
				body = &bodyBuf
				contentType := "application/json; charset=utf-8"
				var pairs []string
				namedPathParameter := req.GetName()
				namedPathValues := strings.Split(namedPathParameter, "/")
				if len(namedPathValues) != 2 {
					return nil, fmt.Errorf("invalid named path parameter, %s", namedPathParameter)
				}
				pairs = append(pairs, "shelf", namedPathValues[1])
				path, err := router.Get("/google.example.library.v1.LibraryService/MergeShelves").URLPath(pairs...)
				if err != nil {
					return nil, err
				}
				queries := url.Values{}
				target := &url.URL{
					Scheme:   scheme,
					Host:     instance,
					Path:     path.Path,
					RawQuery: queries.Encode(),
				}
				r, err := http1.NewRequestWithContext(ctx, "POST", target.String(), body)
				if err != nil {
					return nil, err
				}
				r.Header.Set("Content-Type", contentType)
				return r, nil
			},
			func(ctx context.Context, r *http1.Response) (interface{}, error) {
				if httpx.IsErrorResponse(r) {
					return nil, httpx.ErrorDecoder(ctx, r)
				}
				resp := &Shelf{}
				if err := jsonx.NewDecoder(r.Body).Decode(resp); err != nil {
					return nil, err
				}
				return resp, nil
			},
			http.ClientBefore(httpx.EndpointInjector("/google.example.library.v1.LibraryService/MergeShelves")),
			http.ClientBefore(httpx.TransportInjector(httpx.HttpClient)),
		),
		createBook: http.NewExplicitClient(
			func(ctx context.Context, obj interface{}) (*http1.Request, error) {
				if obj == nil {
					return nil, errors.New("request object is nil")
				}
				req, ok := obj.(*CreateBookRequest)
				if !ok {
					return nil, fmt.Errorf("invalid request object type, %T", obj)
				}
				_ = req
				var body io.Reader
				var bodyBuf bytes.Buffer
				if err := jsonx.NewEncoder(&bodyBuf).Encode(req.GetBook()); err != nil {
					return nil, err
				}
				body = &bodyBuf
				contentType := "application/json; charset=utf-8"
				var pairs []string
				namedPathParameter := req.GetParent()
				namedPathValues := strings.Split(namedPathParameter, "/")
				if len(namedPathValues) != 2 {
					return nil, fmt.Errorf("invalid named path parameter, %s", namedPathParameter)
				}
				pairs = append(pairs, "shelf", namedPathValues[1])
				path, err := router.Get("/google.example.library.v1.LibraryService/CreateBook").URLPath(pairs...)
				if err != nil {
					return nil, err
				}
				queries := url.Values{}
				target := &url.URL{
					Scheme:   scheme,
					Host:     instance,
					Path:     path.Path,
					RawQuery: queries.Encode(),
				}
				r, err := http1.NewRequestWithContext(ctx, "POST", target.String(), body)
				if err != nil {
					return nil, err
				}
				r.Header.Set("Content-Type", contentType)
				return r, nil
			},
			func(ctx context.Context, r *http1.Response) (interface{}, error) {
				if httpx.IsErrorResponse(r) {
					return nil, httpx.ErrorDecoder(ctx, r)
				}
				resp := &Book{}
				if err := jsonx.NewDecoder(r.Body).Decode(resp); err != nil {
					return nil, err
				}
				return resp, nil
			},
			http.ClientBefore(httpx.EndpointInjector("/google.example.library.v1.LibraryService/CreateBook")),
			http.ClientBefore(httpx.TransportInjector(httpx.HttpClient)),
		),
		getBook: http.NewExplicitClient(
			func(ctx context.Context, obj interface{}) (*http1.Request, error) {
				if obj == nil {
					return nil, errors.New("request object is nil")
				}
				req, ok := obj.(*GetBookRequest)
				if !ok {
					return nil, fmt.Errorf("invalid request object type, %T", obj)
				}
				_ = req
				var body io.Reader
				var pairs []string
				namedPathParameter := req.GetName()
				namedPathValues := strings.Split(namedPathParameter, "/")
				if len(namedPathValues) != 4 {
					return nil, fmt.Errorf("invalid named path parameter, %s", namedPathParameter)
				}
				pairs = append(pairs, "shelf", namedPathValues[1], "book", namedPathValues[3])
				path, err := router.Get("/google.example.library.v1.LibraryService/GetBook").URLPath(pairs...)
				if err != nil {
					return nil, err
				}
				queries := url.Values{}
				target := &url.URL{
					Scheme:   scheme,
					Host:     instance,
					Path:     path.Path,
					RawQuery: queries.Encode(),
				}
				r, err := http1.NewRequestWithContext(ctx, "GET", target.String(), body)
				if err != nil {
					return nil, err
				}
				return r, nil
			},
			func(ctx context.Context, r *http1.Response) (interface{}, error) {
				if httpx.IsErrorResponse(r) {
					return nil, httpx.ErrorDecoder(ctx, r)
				}
				resp := &Book{}
				if err := jsonx.NewDecoder(r.Body).Decode(resp); err != nil {
					return nil, err
				}
				return resp, nil
			},
			http.ClientBefore(httpx.EndpointInjector("/google.example.library.v1.LibraryService/GetBook")),
			http.ClientBefore(httpx.TransportInjector(httpx.HttpClient)),
		),
		listBooks: http.NewExplicitClient(
			func(ctx context.Context, obj interface{}) (*http1.Request, error) {
				if obj == nil {
					return nil, errors.New("request object is nil")
				}
				req, ok := obj.(*ListBooksRequest)
				if !ok {
					return nil, fmt.Errorf("invalid request object type, %T", obj)
				}
				_ = req
				var body io.Reader
				var pairs []string
				namedPathParameter := req.GetParent()
				namedPathValues := strings.Split(namedPathParameter, "/")
				if len(namedPathValues) != 2 {
					return nil, fmt.Errorf("invalid named path parameter, %s", namedPathParameter)
				}
				pairs = append(pairs, "shelf", namedPathValues[1])
				path, err := router.Get("/google.example.library.v1.LibraryService/ListBooks").URLPath(pairs...)
				if err != nil {
					return nil, err
				}
				queries := url.Values{}
				queries["page_size"] = append(queries["page_size"], strconvx.FormatInt(req.GetPageSize(), 10))
				queries["page_token"] = append(queries["page_token"], req.GetPageToken())
				target := &url.URL{
					Scheme:   scheme,
					Host:     instance,
					Path:     path.Path,
					RawQuery: queries.Encode(),
				}
				r, err := http1.NewRequestWithContext(ctx, "GET", target.String(), body)
				if err != nil {
					return nil, err
				}
				return r, nil
			},
			func(ctx context.Context, r *http1.Response) (interface{}, error) {
				if httpx.IsErrorResponse(r) {
					return nil, httpx.ErrorDecoder(ctx, r)
				}
				resp := &ListBooksResponse{}
				if err := jsonx.NewDecoder(r.Body).Decode(resp); err != nil {
					return nil, err
				}
				return resp, nil
			},
			http.ClientBefore(httpx.EndpointInjector("/google.example.library.v1.LibraryService/ListBooks")),
			http.ClientBefore(httpx.TransportInjector(httpx.HttpClient)),
		),
		deleteBook: http.NewExplicitClient(
			func(ctx context.Context, obj interface{}) (*http1.Request, error) {
				if obj == nil {
					return nil, errors.New("request object is nil")
				}
				req, ok := obj.(*DeleteBookRequest)
				if !ok {
					return nil, fmt.Errorf("invalid request object type, %T", obj)
				}
				_ = req
				var body io.Reader
				var pairs []string
				namedPathParameter := req.GetName()
				namedPathValues := strings.Split(namedPathParameter, "/")
				if len(namedPathValues) != 4 {
					return nil, fmt.Errorf("invalid named path parameter, %s", namedPathParameter)
				}
				pairs = append(pairs, "shelf", namedPathValues[1], "book", namedPathValues[3])
				path, err := router.Get("/google.example.library.v1.LibraryService/DeleteBook").URLPath(pairs...)
				if err != nil {
					return nil, err
				}
				queries := url.Values{}
				target := &url.URL{
					Scheme:   scheme,
					Host:     instance,
					Path:     path.Path,
					RawQuery: queries.Encode(),
				}
				r, err := http1.NewRequestWithContext(ctx, "DELETE", target.String(), body)
				if err != nil {
					return nil, err
				}
				return r, nil
			},
			func(ctx context.Context, r *http1.Response) (interface{}, error) {
				if httpx.IsErrorResponse(r) {
					return nil, httpx.ErrorDecoder(ctx, r)
				}
				resp := &emptypb.Empty{}
				if err := jsonx.NewDecoder(r.Body).Decode(resp); err != nil {
					return nil, err
				}
				return resp, nil
			},
			http.ClientBefore(httpx.EndpointInjector("/google.example.library.v1.LibraryService/DeleteBook")),
			http.ClientBefore(httpx.TransportInjector(httpx.HttpClient)),
		),
		updateBook: http.NewExplicitClient(
			func(ctx context.Context, obj interface{}) (*http1.Request, error) {
				if obj == nil {
					return nil, errors.New("request object is nil")
				}
				req, ok := obj.(*UpdateBookRequest)
				if !ok {
					return nil, fmt.Errorf("invalid request object type, %T", obj)
				}
				_ = req
				var body io.Reader
				var bodyBuf bytes.Buffer
				if err := jsonx.NewEncoder(&bodyBuf).Encode(req.GetBook()); err != nil {
					return nil, err
				}
				body = &bodyBuf
				contentType := "application/json; charset=utf-8"
				var pairs []string
				namedPathParameter := req.GetBook().GetName()
				namedPathValues := strings.Split(namedPathParameter, "/")
				if len(namedPathValues) != 4 {
					return nil, fmt.Errorf("invalid named path parameter, %s", namedPathParameter)
				}
				pairs = append(pairs, "shelf", namedPathValues[1], "book", namedPathValues[3])
				path, err := router.Get("/google.example.library.v1.LibraryService/UpdateBook").URLPath(pairs...)
				if err != nil {
					return nil, err
				}
				queries := url.Values{}
				target := &url.URL{
					Scheme:   scheme,
					Host:     instance,
					Path:     path.Path,
					RawQuery: queries.Encode(),
				}
				r, err := http1.NewRequestWithContext(ctx, "PATCH", target.String(), body)
				if err != nil {
					return nil, err
				}
				r.Header.Set("Content-Type", contentType)
				return r, nil
			},
			func(ctx context.Context, r *http1.Response) (interface{}, error) {
				if httpx.IsErrorResponse(r) {
					return nil, httpx.ErrorDecoder(ctx, r)
				}
				resp := &Book{}
				if err := jsonx.NewDecoder(r.Body).Decode(resp); err != nil {
					return nil, err
				}
				return resp, nil
			},
			http.ClientBefore(httpx.EndpointInjector("/google.example.library.v1.LibraryService/UpdateBook")),
			http.ClientBefore(httpx.TransportInjector(httpx.HttpClient)),
		),
		moveBook: http.NewExplicitClient(
			func(ctx context.Context, obj interface{}) (*http1.Request, error) {
				if obj == nil {
					return nil, errors.New("request object is nil")
				}
				req, ok := obj.(*MoveBookRequest)
				if !ok {
					return nil, fmt.Errorf("invalid request object type, %T", obj)
				}
				_ = req
				var body io.Reader
				var bodyBuf bytes.Buffer
				if err := jsonx.NewEncoder(&bodyBuf).Encode(req); err != nil {
					return nil, err
				}
				body = &bodyBuf
				contentType := "application/json; charset=utf-8"
				var pairs []string
				namedPathParameter := req.GetName()
				namedPathValues := strings.Split(namedPathParameter, "/")
				if len(namedPathValues) != 4 {
					return nil, fmt.Errorf("invalid named path parameter, %s", namedPathParameter)
				}
				pairs = append(pairs, "shelf", namedPathValues[1], "book", namedPathValues[3])
				path, err := router.Get("/google.example.library.v1.LibraryService/MoveBook").URLPath(pairs...)
				if err != nil {
					return nil, err
				}
				queries := url.Values{}
				target := &url.URL{
					Scheme:   scheme,
					Host:     instance,
					Path:     path.Path,
					RawQuery: queries.Encode(),
				}
				r, err := http1.NewRequestWithContext(ctx, "POST", target.String(), body)
				if err != nil {
					return nil, err
				}
				r.Header.Set("Content-Type", contentType)
				return r, nil
			},
			func(ctx context.Context, r *http1.Response) (interface{}, error) {
				if httpx.IsErrorResponse(r) {
					return nil, httpx.ErrorDecoder(ctx, r)
				}
				resp := &Book{}
				if err := jsonx.NewDecoder(r.Body).Decode(resp); err != nil {
					return nil, err
				}
				return resp, nil
			},
			http.ClientBefore(httpx.EndpointInjector("/google.example.library.v1.LibraryService/MoveBook")),
			http.ClientBefore(httpx.TransportInjector(httpx.HttpClient)),
		),
	}
}

func NewLibraryServiceHttpServerHandler(endpoints LibraryServiceHttpServerTransports) http1.Handler {
	router := mux.NewRouter()
	router.NewRoute().Name("/google.example.library.v1.LibraryService/CreateShelf").Methods("POST").Path("/v1/shelves").Handler(endpoints.CreateShelf())
	router.NewRoute().Name("/google.example.library.v1.LibraryService/GetShelf").Methods("GET").Path("/v1/shelves/{shelf}").Handler(endpoints.GetShelf())
	router.NewRoute().Name("/google.example.library.v1.LibraryService/ListShelves").Methods("GET").Path("/v1/shelves").Handler(endpoints.ListShelves())
	router.NewRoute().Name("/google.example.library.v1.LibraryService/DeleteShelf").Methods("DELETE").Path("/v1/shelves/{shelf}").Handler(endpoints.DeleteShelf())
	router.NewRoute().Name("/google.example.library.v1.LibraryService/MergeShelves").Methods("POST").Path("/v1/shelves/{shelf}:merge").Handler(endpoints.MergeShelves())
	router.NewRoute().Name("/google.example.library.v1.LibraryService/CreateBook").Methods("POST").Path("/v1/shelves/{shelf}/books").Handler(endpoints.CreateBook())
	router.NewRoute().Name("/google.example.library.v1.LibraryService/GetBook").Methods("GET").Path("/v1/shelves/{shelf}/books/{book}").Handler(endpoints.GetBook())
	router.NewRoute().Name("/google.example.library.v1.LibraryService/ListBooks").Methods("GET").Path("/v1/shelves/{shelf}/books").Handler(endpoints.ListBooks())
	router.NewRoute().Name("/google.example.library.v1.LibraryService/DeleteBook").Methods("DELETE").Path("/v1/shelves/{shelf}/books/{book}").Handler(endpoints.DeleteBook())
	router.NewRoute().Name("/google.example.library.v1.LibraryService/UpdateBook").Methods("PATCH").Path("/v1/shelves/{shelf}/books/{book}").Handler(endpoints.UpdateBook())
	router.NewRoute().Name("/google.example.library.v1.LibraryService/MoveBook").Methods("POST").Path("/v1/shelves/{shelf}/books/{book}:move").Handler(endpoints.MoveBook())
	return router
}

type libraryServiceHttpClient struct {
	createShelf  endpoint.Endpoint
	getShelf     endpoint.Endpoint
	listShelves  endpoint.Endpoint
	deleteShelf  endpoint.Endpoint
	mergeShelves endpoint.Endpoint
	createBook   endpoint.Endpoint
	getBook      endpoint.Endpoint
	listBooks    endpoint.Endpoint
	deleteBook   endpoint.Endpoint
	updateBook   endpoint.Endpoint
	moveBook     endpoint.Endpoint
}

func (c *libraryServiceHttpClient) CreateShelf(ctx context.Context, request *CreateShelfRequest) (*Shelf, error) {
	rep, err := c.createShelf(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*Shelf), nil
}

func (c *libraryServiceHttpClient) GetShelf(ctx context.Context, request *GetShelfRequest) (*Shelf, error) {
	rep, err := c.getShelf(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*Shelf), nil
}

func (c *libraryServiceHttpClient) ListShelves(ctx context.Context, request *ListShelvesRequest) (*ListShelvesResponse, error) {
	rep, err := c.listShelves(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*ListShelvesResponse), nil
}

func (c *libraryServiceHttpClient) DeleteShelf(ctx context.Context, request *DeleteShelfRequest) (*emptypb.Empty, error) {
	rep, err := c.deleteShelf(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*emptypb.Empty), nil
}

func (c *libraryServiceHttpClient) MergeShelves(ctx context.Context, request *MergeShelvesRequest) (*Shelf, error) {
	rep, err := c.mergeShelves(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*Shelf), nil
}

func (c *libraryServiceHttpClient) CreateBook(ctx context.Context, request *CreateBookRequest) (*Book, error) {
	rep, err := c.createBook(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*Book), nil
}

func (c *libraryServiceHttpClient) GetBook(ctx context.Context, request *GetBookRequest) (*Book, error) {
	rep, err := c.getBook(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*Book), nil
}

func (c *libraryServiceHttpClient) ListBooks(ctx context.Context, request *ListBooksRequest) (*ListBooksResponse, error) {
	rep, err := c.listBooks(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*ListBooksResponse), nil
}

func (c *libraryServiceHttpClient) DeleteBook(ctx context.Context, request *DeleteBookRequest) (*emptypb.Empty, error) {
	rep, err := c.deleteBook(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*emptypb.Empty), nil
}

func (c *libraryServiceHttpClient) UpdateBook(ctx context.Context, request *UpdateBookRequest) (*Book, error) {
	rep, err := c.updateBook(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*Book), nil
}

func (c *libraryServiceHttpClient) MoveBook(ctx context.Context, request *MoveBookRequest) (*Book, error) {
	rep, err := c.moveBook(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*Book), nil
}

func NewLibraryServiceHttpClient(transports LibraryServiceHttpClientTransports, middlewares ...endpoint.Middleware) LibraryServiceService {
	return &libraryServiceHttpClient{
		createShelf:  endpointx.Chain(transports.CreateShelf().Endpoint(), middlewares...),
		getShelf:     endpointx.Chain(transports.GetShelf().Endpoint(), middlewares...),
		listShelves:  endpointx.Chain(transports.ListShelves().Endpoint(), middlewares...),
		deleteShelf:  endpointx.Chain(transports.DeleteShelf().Endpoint(), middlewares...),
		mergeShelves: endpointx.Chain(transports.MergeShelves().Endpoint(), middlewares...),
		createBook:   endpointx.Chain(transports.CreateBook().Endpoint(), middlewares...),
		getBook:      endpointx.Chain(transports.GetBook().Endpoint(), middlewares...),
		listBooks:    endpointx.Chain(transports.ListBooks().Endpoint(), middlewares...),
		deleteBook:   endpointx.Chain(transports.DeleteBook().Endpoint(), middlewares...),
		updateBook:   endpointx.Chain(transports.UpdateBook().Endpoint(), middlewares...),
		moveBook:     endpointx.Chain(transports.MoveBook().Endpoint(), middlewares...),
	}
}
