// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package library

import (
	context "context"
	fmt "fmt"
	endpoint "github.com/go-kit/kit/endpoint"
	http "github.com/go-kit/kit/transport/http"
	endpointx "github.com/go-leo/kitx/endpointx"
	mux "github.com/gorilla/mux"
	http1 "net/http"
)

func NewLibraryServiceHTTPServer(
	endpoints interface {
		CreateShelf() endpoint.Endpoint
		GetShelf() endpoint.Endpoint
		ListShelves() endpoint.Endpoint
		DeleteShelf() endpoint.Endpoint
		MergeShelves() endpoint.Endpoint
		CreateBook() endpoint.Endpoint
		GetBook() endpoint.Endpoint
		ListBooks() endpoint.Endpoint
		DeleteBook() endpoint.Endpoint
		UpdateBook() endpoint.Endpoint
		MoveBook() endpoint.Endpoint
	},
	mdw []endpoint.Middleware,
	opts ...http.ServerOption,
) http1.Handler {
	r := mux.NewRouter()
	r.Methods("POST").
		Path("/v1/shelves").
		Handler(http.NewServer(
			endpointx.Chain(endpoints.CreateShelf(), mdw...),
			func(ctx context.Context, r *http1.Request) (any, error) {
				var req *CreateShelfRequest
				return nil, nil
			},
			func(ctx context.Context, w http1.ResponseWriter, resp any) error {
				return nil
			},
			opts...,
		))
	r.Methods("GET").
		Path("/v1/shelves/{shelf}").
		Handler(http.NewServer(
			endpointx.Chain(endpoints.GetShelf(), mdw...),
			func(ctx context.Context, r *http1.Request) (any, error) {
				var req *GetShelfRequest
				vars := mux.Vars(r)
				req.Name = fmt.Sprintf("shelves/%s", vars["shelf"])
				return nil, nil
			},
			func(ctx context.Context, w http1.ResponseWriter, resp any) error {
				return nil
			},
			opts...,
		))
	r.Methods("GET").
		Path("/v1/shelves").
		Handler(http.NewServer(
			endpointx.Chain(endpoints.ListShelves(), mdw...),
			func(ctx context.Context, r *http1.Request) (any, error) {
				var req *ListShelvesRequest
				return nil, nil
			},
			func(ctx context.Context, w http1.ResponseWriter, resp any) error {
				return nil
			},
			opts...,
		))
	r.Methods("DELETE").
		Path("/v1/shelves/{shelf}").
		Handler(http.NewServer(
			endpointx.Chain(endpoints.DeleteShelf(), mdw...),
			func(ctx context.Context, r *http1.Request) (any, error) {
				var req *DeleteShelfRequest
				vars := mux.Vars(r)
				req.Name = fmt.Sprintf("shelves/%s", vars["shelf"])
				return nil, nil
			},
			func(ctx context.Context, w http1.ResponseWriter, resp any) error {
				return nil
			},
			opts...,
		))
	r.Methods("POST").
		Path("/v1/shelves/{shelf}:merge").
		Handler(http.NewServer(
			endpointx.Chain(endpoints.MergeShelves(), mdw...),
			func(ctx context.Context, r *http1.Request) (any, error) {
				var req *MergeShelvesRequest
				vars := mux.Vars(r)
				req.Name = fmt.Sprintf("shelves/%s", vars["shelf"])
				return nil, nil
			},
			func(ctx context.Context, w http1.ResponseWriter, resp any) error {
				return nil
			},
			opts...,
		))
	r.Methods("POST").
		Path("/v1/shelves/{shelf}/books").
		Handler(http.NewServer(
			endpointx.Chain(endpoints.CreateBook(), mdw...),
			func(ctx context.Context, r *http1.Request) (any, error) {
				var req *CreateBookRequest
				vars := mux.Vars(r)
				req.Parent = fmt.Sprintf("shelves/%s", vars["shelf"])
				return nil, nil
			},
			func(ctx context.Context, w http1.ResponseWriter, resp any) error {
				return nil
			},
			opts...,
		))
	r.Methods("GET").
		Path("/v1/shelves/{shelf}/books/{book}").
		Handler(http.NewServer(
			endpointx.Chain(endpoints.GetBook(), mdw...),
			func(ctx context.Context, r *http1.Request) (any, error) {
				var req *GetBookRequest
				vars := mux.Vars(r)
				req.Name = fmt.Sprintf("shelves/%s/books/%s", vars["shelf"], vars["book"])
				return nil, nil
			},
			func(ctx context.Context, w http1.ResponseWriter, resp any) error {
				return nil
			},
			opts...,
		))
	r.Methods("GET").
		Path("/v1/shelves/{shelf}/books").
		Handler(http.NewServer(
			endpointx.Chain(endpoints.ListBooks(), mdw...),
			func(ctx context.Context, r *http1.Request) (any, error) {
				var req *ListBooksRequest
				vars := mux.Vars(r)
				req.Parent = fmt.Sprintf("shelves/%s", vars["shelf"])
				return nil, nil
			},
			func(ctx context.Context, w http1.ResponseWriter, resp any) error {
				return nil
			},
			opts...,
		))
	r.Methods("DELETE").
		Path("/v1/shelves/{shelf}/books/{book}").
		Handler(http.NewServer(
			endpointx.Chain(endpoints.DeleteBook(), mdw...),
			func(ctx context.Context, r *http1.Request) (any, error) {
				var req *DeleteBookRequest
				vars := mux.Vars(r)
				req.Name = fmt.Sprintf("shelves/%s/books/%s", vars["shelf"], vars["book"])
				return nil, nil
			},
			func(ctx context.Context, w http1.ResponseWriter, resp any) error {
				return nil
			},
			opts...,
		))
	r.Methods("PATCH").
		Path("/v1/shelves/{shelf}/books/{book}").
		Handler(http.NewServer(
			endpointx.Chain(endpoints.UpdateBook(), mdw...),
			func(ctx context.Context, r *http1.Request) (any, error) {
				var req *UpdateBookRequest
				vars := mux.Vars(r)
				if req.Book == nil {
					req.Book = &Book{}
				}
				req.Book.Name = fmt.Sprintf("shelves/%s/books/%s", vars["shelf"], vars["book"])
				return nil, nil
			},
			func(ctx context.Context, w http1.ResponseWriter, resp any) error {
				return nil
			},
			opts...,
		))
	r.Methods("POST").
		Path("/v1/shelves/{shelf}/books/{book}:move").
		Handler(http.NewServer(
			endpointx.Chain(endpoints.MoveBook(), mdw...),
			func(ctx context.Context, r *http1.Request) (any, error) {
				var req *MoveBookRequest
				vars := mux.Vars(r)
				req.Name = fmt.Sprintf("shelves/%s/books/%s", vars["shelf"], vars["book"])
				return nil, nil
			},
			func(ctx context.Context, w http1.ResponseWriter, resp any) error {
				return nil
			},
			opts...,
		))
	return r
}
