// Code generated by protoc-gen-leo-http. DO NOT EDIT.

package library

import (
	bytes "bytes"
	context "context"
	fmt "fmt"
	endpoint "github.com/go-kit/kit/endpoint"
	http1 "github.com/go-kit/kit/transport/http"
	jsonx "github.com/go-leo/gox/encodingx/jsonx"
	errorx "github.com/go-leo/gox/errorx"
	urlx "github.com/go-leo/gox/netx/urlx"
	strconvx "github.com/go-leo/gox/strconvx"
	endpointx "github.com/go-leo/leo/v3/endpointx"
	statusx "github.com/go-leo/leo/v3/statusx"
	httpx "github.com/go-leo/leo/v3/transportx/httpx"
	mux "github.com/gorilla/mux"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	io "io"
	http "net/http"
	url "net/url"
	strings "strings"
)

// =========================== http router ===========================

func appendLibraryServiceHttpRoutes(router *mux.Router) *mux.Router {
	router.NewRoute().Name("/google.example.library.v1.LibraryService/CreateShelf").Methods("POST").Path("/v1/shelves")
	router.NewRoute().Name("/google.example.library.v1.LibraryService/GetShelf").Methods("GET").Path("/v1/shelves/{shelf}")
	router.NewRoute().Name("/google.example.library.v1.LibraryService/ListShelves").Methods("GET").Path("/v1/shelves")
	router.NewRoute().Name("/google.example.library.v1.LibraryService/DeleteShelf").Methods("DELETE").Path("/v1/shelves/{shelf}")
	router.NewRoute().Name("/google.example.library.v1.LibraryService/MergeShelves").Methods("POST").Path("/v1/shelves/{shelf}:merge")
	router.NewRoute().Name("/google.example.library.v1.LibraryService/CreateBook").Methods("POST").Path("/v1/shelves/{shelf}/books")
	router.NewRoute().Name("/google.example.library.v1.LibraryService/GetBook").Methods("GET").Path("/v1/shelves/{shelf}/books/{book}")
	router.NewRoute().Name("/google.example.library.v1.LibraryService/ListBooks").Methods("GET").Path("/v1/shelves/{shelf}/books")
	router.NewRoute().Name("/google.example.library.v1.LibraryService/DeleteBook").Methods("DELETE").Path("/v1/shelves/{shelf}/books/{book}")
	router.NewRoute().Name("/google.example.library.v1.LibraryService/UpdateBook").Methods("PATCH").Path("/v1/shelves/{shelf}/books/{book}")
	router.NewRoute().Name("/google.example.library.v1.LibraryService/MoveBook").Methods("POST").Path("/v1/shelves/{shelf}/books/{book}:move")
	return router
}

// =========================== http server ===========================

type libraryServiceHttpServerTransports struct {
	endpoints LibraryServiceServerEndpoints
}

func (t *libraryServiceHttpServerTransports) CreateShelf() http.Handler {
	return http1.NewServer(
		t.endpoints.CreateShelf(context.TODO()),
		_LibraryService_CreateShelf_HttpServer_RequestDecoder,
		_LibraryService_CreateShelf_HttpServer_ResponseEncoder,
		http1.ServerBefore(httpx.EndpointInjector("/google.example.library.v1.LibraryService/CreateShelf")),
		http1.ServerBefore(httpx.ServerTransportInjector),
		http1.ServerBefore(httpx.IncomingMetadataInjector),
		http1.ServerBefore(httpx.IncomingTimeLimiter),
		http1.ServerBefore(httpx.IncomingStain),
		http1.ServerFinalizer(httpx.CancelInvoker),
		http1.ServerErrorEncoder(httpx.ErrorEncoder),
	)
}

func (t *libraryServiceHttpServerTransports) GetShelf() http.Handler {
	return http1.NewServer(
		t.endpoints.GetShelf(context.TODO()),
		_LibraryService_GetShelf_HttpServer_RequestDecoder,
		_LibraryService_GetShelf_HttpServer_ResponseEncoder,
		http1.ServerBefore(httpx.EndpointInjector("/google.example.library.v1.LibraryService/GetShelf")),
		http1.ServerBefore(httpx.ServerTransportInjector),
		http1.ServerBefore(httpx.IncomingMetadataInjector),
		http1.ServerBefore(httpx.IncomingTimeLimiter),
		http1.ServerBefore(httpx.IncomingStain),
		http1.ServerFinalizer(httpx.CancelInvoker),
		http1.ServerErrorEncoder(httpx.ErrorEncoder),
	)
}

func (t *libraryServiceHttpServerTransports) ListShelves() http.Handler {
	return http1.NewServer(
		t.endpoints.ListShelves(context.TODO()),
		_LibraryService_ListShelves_HttpServer_RequestDecoder,
		_LibraryService_ListShelves_HttpServer_ResponseEncoder,
		http1.ServerBefore(httpx.EndpointInjector("/google.example.library.v1.LibraryService/ListShelves")),
		http1.ServerBefore(httpx.ServerTransportInjector),
		http1.ServerBefore(httpx.IncomingMetadataInjector),
		http1.ServerBefore(httpx.IncomingTimeLimiter),
		http1.ServerBefore(httpx.IncomingStain),
		http1.ServerFinalizer(httpx.CancelInvoker),
		http1.ServerErrorEncoder(httpx.ErrorEncoder),
	)
}

func (t *libraryServiceHttpServerTransports) DeleteShelf() http.Handler {
	return http1.NewServer(
		t.endpoints.DeleteShelf(context.TODO()),
		_LibraryService_DeleteShelf_HttpServer_RequestDecoder,
		_LibraryService_DeleteShelf_HttpServer_ResponseEncoder,
		http1.ServerBefore(httpx.EndpointInjector("/google.example.library.v1.LibraryService/DeleteShelf")),
		http1.ServerBefore(httpx.ServerTransportInjector),
		http1.ServerBefore(httpx.IncomingMetadataInjector),
		http1.ServerBefore(httpx.IncomingTimeLimiter),
		http1.ServerBefore(httpx.IncomingStain),
		http1.ServerFinalizer(httpx.CancelInvoker),
		http1.ServerErrorEncoder(httpx.ErrorEncoder),
	)
}

func (t *libraryServiceHttpServerTransports) MergeShelves() http.Handler {
	return http1.NewServer(
		t.endpoints.MergeShelves(context.TODO()),
		_LibraryService_MergeShelves_HttpServer_RequestDecoder,
		_LibraryService_MergeShelves_HttpServer_ResponseEncoder,
		http1.ServerBefore(httpx.EndpointInjector("/google.example.library.v1.LibraryService/MergeShelves")),
		http1.ServerBefore(httpx.ServerTransportInjector),
		http1.ServerBefore(httpx.IncomingMetadataInjector),
		http1.ServerBefore(httpx.IncomingTimeLimiter),
		http1.ServerBefore(httpx.IncomingStain),
		http1.ServerFinalizer(httpx.CancelInvoker),
		http1.ServerErrorEncoder(httpx.ErrorEncoder),
	)
}

func (t *libraryServiceHttpServerTransports) CreateBook() http.Handler {
	return http1.NewServer(
		t.endpoints.CreateBook(context.TODO()),
		_LibraryService_CreateBook_HttpServer_RequestDecoder,
		_LibraryService_CreateBook_HttpServer_ResponseEncoder,
		http1.ServerBefore(httpx.EndpointInjector("/google.example.library.v1.LibraryService/CreateBook")),
		http1.ServerBefore(httpx.ServerTransportInjector),
		http1.ServerBefore(httpx.IncomingMetadataInjector),
		http1.ServerBefore(httpx.IncomingTimeLimiter),
		http1.ServerBefore(httpx.IncomingStain),
		http1.ServerFinalizer(httpx.CancelInvoker),
		http1.ServerErrorEncoder(httpx.ErrorEncoder),
	)
}

func (t *libraryServiceHttpServerTransports) GetBook() http.Handler {
	return http1.NewServer(
		t.endpoints.GetBook(context.TODO()),
		_LibraryService_GetBook_HttpServer_RequestDecoder,
		_LibraryService_GetBook_HttpServer_ResponseEncoder,
		http1.ServerBefore(httpx.EndpointInjector("/google.example.library.v1.LibraryService/GetBook")),
		http1.ServerBefore(httpx.ServerTransportInjector),
		http1.ServerBefore(httpx.IncomingMetadataInjector),
		http1.ServerBefore(httpx.IncomingTimeLimiter),
		http1.ServerBefore(httpx.IncomingStain),
		http1.ServerFinalizer(httpx.CancelInvoker),
		http1.ServerErrorEncoder(httpx.ErrorEncoder),
	)
}

func (t *libraryServiceHttpServerTransports) ListBooks() http.Handler {
	return http1.NewServer(
		t.endpoints.ListBooks(context.TODO()),
		_LibraryService_ListBooks_HttpServer_RequestDecoder,
		_LibraryService_ListBooks_HttpServer_ResponseEncoder,
		http1.ServerBefore(httpx.EndpointInjector("/google.example.library.v1.LibraryService/ListBooks")),
		http1.ServerBefore(httpx.ServerTransportInjector),
		http1.ServerBefore(httpx.IncomingMetadataInjector),
		http1.ServerBefore(httpx.IncomingTimeLimiter),
		http1.ServerBefore(httpx.IncomingStain),
		http1.ServerFinalizer(httpx.CancelInvoker),
		http1.ServerErrorEncoder(httpx.ErrorEncoder),
	)
}

func (t *libraryServiceHttpServerTransports) DeleteBook() http.Handler {
	return http1.NewServer(
		t.endpoints.DeleteBook(context.TODO()),
		_LibraryService_DeleteBook_HttpServer_RequestDecoder,
		_LibraryService_DeleteBook_HttpServer_ResponseEncoder,
		http1.ServerBefore(httpx.EndpointInjector("/google.example.library.v1.LibraryService/DeleteBook")),
		http1.ServerBefore(httpx.ServerTransportInjector),
		http1.ServerBefore(httpx.IncomingMetadataInjector),
		http1.ServerBefore(httpx.IncomingTimeLimiter),
		http1.ServerBefore(httpx.IncomingStain),
		http1.ServerFinalizer(httpx.CancelInvoker),
		http1.ServerErrorEncoder(httpx.ErrorEncoder),
	)
}

func (t *libraryServiceHttpServerTransports) UpdateBook() http.Handler {
	return http1.NewServer(
		t.endpoints.UpdateBook(context.TODO()),
		_LibraryService_UpdateBook_HttpServer_RequestDecoder,
		_LibraryService_UpdateBook_HttpServer_ResponseEncoder,
		http1.ServerBefore(httpx.EndpointInjector("/google.example.library.v1.LibraryService/UpdateBook")),
		http1.ServerBefore(httpx.ServerTransportInjector),
		http1.ServerBefore(httpx.IncomingMetadataInjector),
		http1.ServerBefore(httpx.IncomingTimeLimiter),
		http1.ServerBefore(httpx.IncomingStain),
		http1.ServerFinalizer(httpx.CancelInvoker),
		http1.ServerErrorEncoder(httpx.ErrorEncoder),
	)
}

func (t *libraryServiceHttpServerTransports) MoveBook() http.Handler {
	return http1.NewServer(
		t.endpoints.MoveBook(context.TODO()),
		_LibraryService_MoveBook_HttpServer_RequestDecoder,
		_LibraryService_MoveBook_HttpServer_ResponseEncoder,
		http1.ServerBefore(httpx.EndpointInjector("/google.example.library.v1.LibraryService/MoveBook")),
		http1.ServerBefore(httpx.ServerTransportInjector),
		http1.ServerBefore(httpx.IncomingMetadataInjector),
		http1.ServerBefore(httpx.IncomingTimeLimiter),
		http1.ServerBefore(httpx.IncomingStain),
		http1.ServerFinalizer(httpx.CancelInvoker),
		http1.ServerErrorEncoder(httpx.ErrorEncoder),
	)
}

func AppendLibraryServiceHttpRoutes(router *mux.Router, svc LibraryServiceService, middlewares ...endpoint.Middleware) *mux.Router {
	endpoints := newLibraryServiceServerEndpoints(svc, middlewares...)
	transports := &libraryServiceHttpServerTransports{endpoints: endpoints}
	router = appendLibraryServiceHttpRoutes(router)
	router.Get("/google.example.library.v1.LibraryService/CreateShelf").Handler(transports.CreateShelf())
	router.Get("/google.example.library.v1.LibraryService/GetShelf").Handler(transports.GetShelf())
	router.Get("/google.example.library.v1.LibraryService/ListShelves").Handler(transports.ListShelves())
	router.Get("/google.example.library.v1.LibraryService/DeleteShelf").Handler(transports.DeleteShelf())
	router.Get("/google.example.library.v1.LibraryService/MergeShelves").Handler(transports.MergeShelves())
	router.Get("/google.example.library.v1.LibraryService/CreateBook").Handler(transports.CreateBook())
	router.Get("/google.example.library.v1.LibraryService/GetBook").Handler(transports.GetBook())
	router.Get("/google.example.library.v1.LibraryService/ListBooks").Handler(transports.ListBooks())
	router.Get("/google.example.library.v1.LibraryService/DeleteBook").Handler(transports.DeleteBook())
	router.Get("/google.example.library.v1.LibraryService/UpdateBook").Handler(transports.UpdateBook())
	router.Get("/google.example.library.v1.LibraryService/MoveBook").Handler(transports.MoveBook())
	return router
}

// =========================== http client ===========================

type libraryServiceHttpClientTransports struct {
	scheme        string
	router        *mux.Router
	clientOptions []http1.ClientOption
	middlewares   []endpoint.Middleware
}

func (t *libraryServiceHttpClientTransports) CreateShelf(ctx context.Context, instance string) (endpoint.Endpoint, io.Closer, error) {
	opts := []http1.ClientOption{
		http1.ClientBefore(httpx.OutgoingMetadataInjector),
		http1.ClientBefore(httpx.OutgoingTimeLimiter),
		http1.ClientBefore(httpx.OutgoingStain),
	}
	opts = append(opts, t.clientOptions...)
	client := http1.NewExplicitClient(
		_LibraryService_CreateShelf_HttpClient_RequestEncoder(t.router)(t.scheme, instance),
		_LibraryService_CreateShelf_HttpClient_ResponseDecoder,
		opts...,
	)
	return endpointx.Chain(client.Endpoint(), t.middlewares...), nil, nil
}

func (t *libraryServiceHttpClientTransports) GetShelf(ctx context.Context, instance string) (endpoint.Endpoint, io.Closer, error) {
	opts := []http1.ClientOption{
		http1.ClientBefore(httpx.OutgoingMetadataInjector),
		http1.ClientBefore(httpx.OutgoingTimeLimiter),
		http1.ClientBefore(httpx.OutgoingStain),
	}
	opts = append(opts, t.clientOptions...)
	client := http1.NewExplicitClient(
		_LibraryService_GetShelf_HttpClient_RequestEncoder(t.router)(t.scheme, instance),
		_LibraryService_GetShelf_HttpClient_ResponseDecoder,
		opts...,
	)
	return endpointx.Chain(client.Endpoint(), t.middlewares...), nil, nil
}

func (t *libraryServiceHttpClientTransports) ListShelves(ctx context.Context, instance string) (endpoint.Endpoint, io.Closer, error) {
	opts := []http1.ClientOption{
		http1.ClientBefore(httpx.OutgoingMetadataInjector),
		http1.ClientBefore(httpx.OutgoingTimeLimiter),
		http1.ClientBefore(httpx.OutgoingStain),
	}
	opts = append(opts, t.clientOptions...)
	client := http1.NewExplicitClient(
		_LibraryService_ListShelves_HttpClient_RequestEncoder(t.router)(t.scheme, instance),
		_LibraryService_ListShelves_HttpClient_ResponseDecoder,
		opts...,
	)
	return endpointx.Chain(client.Endpoint(), t.middlewares...), nil, nil
}

func (t *libraryServiceHttpClientTransports) DeleteShelf(ctx context.Context, instance string) (endpoint.Endpoint, io.Closer, error) {
	opts := []http1.ClientOption{
		http1.ClientBefore(httpx.OutgoingMetadataInjector),
		http1.ClientBefore(httpx.OutgoingTimeLimiter),
		http1.ClientBefore(httpx.OutgoingStain),
	}
	opts = append(opts, t.clientOptions...)
	client := http1.NewExplicitClient(
		_LibraryService_DeleteShelf_HttpClient_RequestEncoder(t.router)(t.scheme, instance),
		_LibraryService_DeleteShelf_HttpClient_ResponseDecoder,
		opts...,
	)
	return endpointx.Chain(client.Endpoint(), t.middlewares...), nil, nil
}

func (t *libraryServiceHttpClientTransports) MergeShelves(ctx context.Context, instance string) (endpoint.Endpoint, io.Closer, error) {
	opts := []http1.ClientOption{
		http1.ClientBefore(httpx.OutgoingMetadataInjector),
		http1.ClientBefore(httpx.OutgoingTimeLimiter),
		http1.ClientBefore(httpx.OutgoingStain),
	}
	opts = append(opts, t.clientOptions...)
	client := http1.NewExplicitClient(
		_LibraryService_MergeShelves_HttpClient_RequestEncoder(t.router)(t.scheme, instance),
		_LibraryService_MergeShelves_HttpClient_ResponseDecoder,
		opts...,
	)
	return endpointx.Chain(client.Endpoint(), t.middlewares...), nil, nil
}

func (t *libraryServiceHttpClientTransports) CreateBook(ctx context.Context, instance string) (endpoint.Endpoint, io.Closer, error) {
	opts := []http1.ClientOption{
		http1.ClientBefore(httpx.OutgoingMetadataInjector),
		http1.ClientBefore(httpx.OutgoingTimeLimiter),
		http1.ClientBefore(httpx.OutgoingStain),
	}
	opts = append(opts, t.clientOptions...)
	client := http1.NewExplicitClient(
		_LibraryService_CreateBook_HttpClient_RequestEncoder(t.router)(t.scheme, instance),
		_LibraryService_CreateBook_HttpClient_ResponseDecoder,
		opts...,
	)
	return endpointx.Chain(client.Endpoint(), t.middlewares...), nil, nil
}

func (t *libraryServiceHttpClientTransports) GetBook(ctx context.Context, instance string) (endpoint.Endpoint, io.Closer, error) {
	opts := []http1.ClientOption{
		http1.ClientBefore(httpx.OutgoingMetadataInjector),
		http1.ClientBefore(httpx.OutgoingTimeLimiter),
		http1.ClientBefore(httpx.OutgoingStain),
	}
	opts = append(opts, t.clientOptions...)
	client := http1.NewExplicitClient(
		_LibraryService_GetBook_HttpClient_RequestEncoder(t.router)(t.scheme, instance),
		_LibraryService_GetBook_HttpClient_ResponseDecoder,
		opts...,
	)
	return endpointx.Chain(client.Endpoint(), t.middlewares...), nil, nil
}

func (t *libraryServiceHttpClientTransports) ListBooks(ctx context.Context, instance string) (endpoint.Endpoint, io.Closer, error) {
	opts := []http1.ClientOption{
		http1.ClientBefore(httpx.OutgoingMetadataInjector),
		http1.ClientBefore(httpx.OutgoingTimeLimiter),
		http1.ClientBefore(httpx.OutgoingStain),
	}
	opts = append(opts, t.clientOptions...)
	client := http1.NewExplicitClient(
		_LibraryService_ListBooks_HttpClient_RequestEncoder(t.router)(t.scheme, instance),
		_LibraryService_ListBooks_HttpClient_ResponseDecoder,
		opts...,
	)
	return endpointx.Chain(client.Endpoint(), t.middlewares...), nil, nil
}

func (t *libraryServiceHttpClientTransports) DeleteBook(ctx context.Context, instance string) (endpoint.Endpoint, io.Closer, error) {
	opts := []http1.ClientOption{
		http1.ClientBefore(httpx.OutgoingMetadataInjector),
		http1.ClientBefore(httpx.OutgoingTimeLimiter),
		http1.ClientBefore(httpx.OutgoingStain),
	}
	opts = append(opts, t.clientOptions...)
	client := http1.NewExplicitClient(
		_LibraryService_DeleteBook_HttpClient_RequestEncoder(t.router)(t.scheme, instance),
		_LibraryService_DeleteBook_HttpClient_ResponseDecoder,
		opts...,
	)
	return endpointx.Chain(client.Endpoint(), t.middlewares...), nil, nil
}

func (t *libraryServiceHttpClientTransports) UpdateBook(ctx context.Context, instance string) (endpoint.Endpoint, io.Closer, error) {
	opts := []http1.ClientOption{
		http1.ClientBefore(httpx.OutgoingMetadataInjector),
		http1.ClientBefore(httpx.OutgoingTimeLimiter),
		http1.ClientBefore(httpx.OutgoingStain),
	}
	opts = append(opts, t.clientOptions...)
	client := http1.NewExplicitClient(
		_LibraryService_UpdateBook_HttpClient_RequestEncoder(t.router)(t.scheme, instance),
		_LibraryService_UpdateBook_HttpClient_ResponseDecoder,
		opts...,
	)
	return endpointx.Chain(client.Endpoint(), t.middlewares...), nil, nil
}

func (t *libraryServiceHttpClientTransports) MoveBook(ctx context.Context, instance string) (endpoint.Endpoint, io.Closer, error) {
	opts := []http1.ClientOption{
		http1.ClientBefore(httpx.OutgoingMetadataInjector),
		http1.ClientBefore(httpx.OutgoingTimeLimiter),
		http1.ClientBefore(httpx.OutgoingStain),
	}
	opts = append(opts, t.clientOptions...)
	client := http1.NewExplicitClient(
		_LibraryService_MoveBook_HttpClient_RequestEncoder(t.router)(t.scheme, instance),
		_LibraryService_MoveBook_HttpClient_ResponseDecoder,
		opts...,
	)
	return endpointx.Chain(client.Endpoint(), t.middlewares...), nil, nil
}

func newLibraryServiceHttpClientTransports(scheme string, clientOptions []http1.ClientOption, middlewares []endpoint.Middleware) LibraryServiceClientTransports {
	return &libraryServiceHttpClientTransports{
		scheme:        scheme,
		router:        appendLibraryServiceHttpRoutes(mux.NewRouter()),
		clientOptions: clientOptions,
		middlewares:   middlewares,
	}
}

func NewLibraryServiceHttpClient(target string, opts ...httpx.ClientOption) LibraryServiceService {
	options := httpx.NewClientOptions(opts...)
	transports := newLibraryServiceHttpClientTransports(options.Scheme(), options.ClientTransportOptions(), options.Middlewares())
	endpoints := newLibraryServiceClientEndpoints(target, transports, options.InstancerFactory(), options.EndpointerOptions(), options.BalancerFactory(), options.Logger())
	return newLibraryServiceClientService(endpoints, httpx.HttpClient)
}

// =========================== http coder ===========================

func _LibraryService_CreateShelf_HttpServer_RequestDecoder(ctx context.Context, r *http.Request) (any, error) {
	req := &CreateShelfRequest{}
	if err := jsonx.NewDecoder(r.Body).Decode(&req.Shelf); err != nil {
		return nil, statusx.ErrInvalidArgument.With(statusx.Wrap(err))
	}
	return req, nil
}

func _LibraryService_CreateShelf_HttpClient_RequestEncoder(router *mux.Router) func(scheme string, instance string) http1.CreateRequestFunc {
	return func(scheme string, instance string) http1.CreateRequestFunc {
		return func(ctx context.Context, obj any) (*http.Request, error) {
			if obj == nil {
				return nil, statusx.ErrInvalidArgument.With(statusx.Message("request is nil"))
			}
			req, ok := obj.(*CreateShelfRequest)
			if !ok {
				return nil, statusx.ErrInvalidArgument.With(statusx.Message("invalid request type, %T", obj))
			}
			_ = req
			var body io.Reader
			var bodyBuf bytes.Buffer
			if err := jsonx.NewEncoder(&bodyBuf).Encode(req.GetShelf()); err != nil {
				return nil, statusx.ErrInvalidArgument.With(statusx.Wrap(err))
			}
			body = &bodyBuf
			contentType := "application/json; charset=utf-8"
			var pairs []string
			path, err := router.Get("/google.example.library.v1.LibraryService/CreateShelf").URLPath(pairs...)
			if err != nil {
				return nil, statusx.ErrInvalidArgument.With(statusx.Wrap(err))
			}
			queries := url.Values{}
			target := &url.URL{
				Scheme:   scheme,
				Host:     instance,
				Path:     path.Path,
				RawQuery: queries.Encode(),
			}
			r, err := http.NewRequestWithContext(ctx, "POST", target.String(), body)
			if err != nil {
				return nil, statusx.ErrInvalidArgument.With(statusx.Wrap(err))
			}
			r.Header.Set("Content-Type", contentType)
			return r, nil
		}
	}
}

func _LibraryService_CreateShelf_HttpServer_ResponseEncoder(ctx context.Context, w http.ResponseWriter, obj any) error {
	resp := obj.(*Shelf)
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(http.StatusOK)
	if err := jsonx.NewEncoder(w).Encode(resp); err != nil {
		return statusx.ErrInternal.With(statusx.Wrap(err))
	}
	return nil
}

func _LibraryService_CreateShelf_HttpClient_ResponseDecoder(ctx context.Context, r *http.Response) (any, error) {
	if httpx.IsErrorResponse(r) {
		return nil, httpx.ErrorDecoder(ctx, r)
	}
	resp := &Shelf{}
	if err := jsonx.NewDecoder(r.Body).Decode(resp); err != nil {
		return nil, err
	}
	return resp, nil
}

func _LibraryService_GetShelf_HttpServer_RequestDecoder(ctx context.Context, r *http.Request) (any, error) {
	req := &GetShelfRequest{}
	vars := urlx.FormFromMap(mux.Vars(r))
	var varErr error
	req.Name = fmt.Sprintf("shelves/%s", vars.Get("shelf"))
	if varErr != nil {
		return nil, statusx.ErrInvalidArgument.With(statusx.Wrap(varErr))
	}
	return req, nil
}

func _LibraryService_GetShelf_HttpClient_RequestEncoder(router *mux.Router) func(scheme string, instance string) http1.CreateRequestFunc {
	return func(scheme string, instance string) http1.CreateRequestFunc {
		return func(ctx context.Context, obj any) (*http.Request, error) {
			if obj == nil {
				return nil, statusx.ErrInvalidArgument.With(statusx.Message("request is nil"))
			}
			req, ok := obj.(*GetShelfRequest)
			if !ok {
				return nil, statusx.ErrInvalidArgument.With(statusx.Message("invalid request type, %T", obj))
			}
			_ = req
			var body io.Reader
			var pairs []string
			namedPathParameter := req.GetName()
			namedPathValues := strings.Split(namedPathParameter, "/")
			if len(namedPathValues) != 2 {
				return nil, statusx.ErrInvalidArgument.With(statusx.Message("invalid named path parameter, %s", namedPathParameter))
			}
			pairs = append(pairs, "shelf", namedPathValues[1])
			path, err := router.Get("/google.example.library.v1.LibraryService/GetShelf").URLPath(pairs...)
			if err != nil {
				return nil, statusx.ErrInvalidArgument.With(statusx.Wrap(err))
			}
			queries := url.Values{}
			target := &url.URL{
				Scheme:   scheme,
				Host:     instance,
				Path:     path.Path,
				RawQuery: queries.Encode(),
			}
			r, err := http.NewRequestWithContext(ctx, "GET", target.String(), body)
			if err != nil {
				return nil, statusx.ErrInvalidArgument.With(statusx.Wrap(err))
			}
			return r, nil
		}
	}
}

func _LibraryService_GetShelf_HttpServer_ResponseEncoder(ctx context.Context, w http.ResponseWriter, obj any) error {
	resp := obj.(*Shelf)
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(http.StatusOK)
	if err := jsonx.NewEncoder(w).Encode(resp); err != nil {
		return statusx.ErrInternal.With(statusx.Wrap(err))
	}
	return nil
}

func _LibraryService_GetShelf_HttpClient_ResponseDecoder(ctx context.Context, r *http.Response) (any, error) {
	if httpx.IsErrorResponse(r) {
		return nil, httpx.ErrorDecoder(ctx, r)
	}
	resp := &Shelf{}
	if err := jsonx.NewDecoder(r.Body).Decode(resp); err != nil {
		return nil, err
	}
	return resp, nil
}

func _LibraryService_ListShelves_HttpServer_RequestDecoder(ctx context.Context, r *http.Request) (any, error) {
	req := &ListShelvesRequest{}
	queries := r.URL.Query()
	var queryErr error
	req.PageSize, queryErr = errorx.Break[int32](queryErr)(urlx.GetInt[int32](queries, "page_size"))
	req.PageToken = queries.Get("page_token")
	if queryErr != nil {
		return nil, statusx.ErrInvalidArgument.With(statusx.Wrap(queryErr))
	}
	return req, nil
}

func _LibraryService_ListShelves_HttpClient_RequestEncoder(router *mux.Router) func(scheme string, instance string) http1.CreateRequestFunc {
	return func(scheme string, instance string) http1.CreateRequestFunc {
		return func(ctx context.Context, obj any) (*http.Request, error) {
			if obj == nil {
				return nil, statusx.ErrInvalidArgument.With(statusx.Message("request is nil"))
			}
			req, ok := obj.(*ListShelvesRequest)
			if !ok {
				return nil, statusx.ErrInvalidArgument.With(statusx.Message("invalid request type, %T", obj))
			}
			_ = req
			var body io.Reader
			var pairs []string
			path, err := router.Get("/google.example.library.v1.LibraryService/ListShelves").URLPath(pairs...)
			if err != nil {
				return nil, statusx.ErrInvalidArgument.With(statusx.Wrap(err))
			}
			queries := url.Values{}
			queries["page_size"] = append(queries["page_size"], strconvx.FormatInt(req.GetPageSize(), 10))
			queries["page_token"] = append(queries["page_token"], req.GetPageToken())
			target := &url.URL{
				Scheme:   scheme,
				Host:     instance,
				Path:     path.Path,
				RawQuery: queries.Encode(),
			}
			r, err := http.NewRequestWithContext(ctx, "GET", target.String(), body)
			if err != nil {
				return nil, statusx.ErrInvalidArgument.With(statusx.Wrap(err))
			}
			return r, nil
		}
	}
}

func _LibraryService_ListShelves_HttpServer_ResponseEncoder(ctx context.Context, w http.ResponseWriter, obj any) error {
	resp := obj.(*ListShelvesResponse)
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(http.StatusOK)
	if err := jsonx.NewEncoder(w).Encode(resp); err != nil {
		return statusx.ErrInternal.With(statusx.Wrap(err))
	}
	return nil
}

func _LibraryService_ListShelves_HttpClient_ResponseDecoder(ctx context.Context, r *http.Response) (any, error) {
	if httpx.IsErrorResponse(r) {
		return nil, httpx.ErrorDecoder(ctx, r)
	}
	resp := &ListShelvesResponse{}
	if err := jsonx.NewDecoder(r.Body).Decode(resp); err != nil {
		return nil, err
	}
	return resp, nil
}

func _LibraryService_DeleteShelf_HttpServer_RequestDecoder(ctx context.Context, r *http.Request) (any, error) {
	req := &DeleteShelfRequest{}
	vars := urlx.FormFromMap(mux.Vars(r))
	var varErr error
	req.Name = fmt.Sprintf("shelves/%s", vars.Get("shelf"))
	if varErr != nil {
		return nil, statusx.ErrInvalidArgument.With(statusx.Wrap(varErr))
	}
	return req, nil
}

func _LibraryService_DeleteShelf_HttpClient_RequestEncoder(router *mux.Router) func(scheme string, instance string) http1.CreateRequestFunc {
	return func(scheme string, instance string) http1.CreateRequestFunc {
		return func(ctx context.Context, obj any) (*http.Request, error) {
			if obj == nil {
				return nil, statusx.ErrInvalidArgument.With(statusx.Message("request is nil"))
			}
			req, ok := obj.(*DeleteShelfRequest)
			if !ok {
				return nil, statusx.ErrInvalidArgument.With(statusx.Message("invalid request type, %T", obj))
			}
			_ = req
			var body io.Reader
			var pairs []string
			namedPathParameter := req.GetName()
			namedPathValues := strings.Split(namedPathParameter, "/")
			if len(namedPathValues) != 2 {
				return nil, statusx.ErrInvalidArgument.With(statusx.Message("invalid named path parameter, %s", namedPathParameter))
			}
			pairs = append(pairs, "shelf", namedPathValues[1])
			path, err := router.Get("/google.example.library.v1.LibraryService/DeleteShelf").URLPath(pairs...)
			if err != nil {
				return nil, statusx.ErrInvalidArgument.With(statusx.Wrap(err))
			}
			queries := url.Values{}
			target := &url.URL{
				Scheme:   scheme,
				Host:     instance,
				Path:     path.Path,
				RawQuery: queries.Encode(),
			}
			r, err := http.NewRequestWithContext(ctx, "DELETE", target.String(), body)
			if err != nil {
				return nil, statusx.ErrInvalidArgument.With(statusx.Wrap(err))
			}
			return r, nil
		}
	}
}

func _LibraryService_DeleteShelf_HttpServer_ResponseEncoder(ctx context.Context, w http.ResponseWriter, obj any) error {
	resp := obj.(*emptypb.Empty)
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(http.StatusOK)
	if err := jsonx.NewEncoder(w).Encode(resp); err != nil {
		return statusx.ErrInternal.With(statusx.Wrap(err))
	}
	return nil
}

func _LibraryService_DeleteShelf_HttpClient_ResponseDecoder(ctx context.Context, r *http.Response) (any, error) {
	if httpx.IsErrorResponse(r) {
		return nil, httpx.ErrorDecoder(ctx, r)
	}
	resp := &emptypb.Empty{}
	if err := jsonx.NewDecoder(r.Body).Decode(resp); err != nil {
		return nil, err
	}
	return resp, nil
}

func _LibraryService_MergeShelves_HttpServer_RequestDecoder(ctx context.Context, r *http.Request) (any, error) {
	req := &MergeShelvesRequest{}
	if err := jsonx.NewDecoder(r.Body).Decode(req); err != nil {
		return nil, statusx.ErrInvalidArgument.With(statusx.Wrap(err))
	}
	vars := urlx.FormFromMap(mux.Vars(r))
	var varErr error
	req.Name = fmt.Sprintf("shelves/%s", vars.Get("shelf"))
	if varErr != nil {
		return nil, statusx.ErrInvalidArgument.With(statusx.Wrap(varErr))
	}
	return req, nil
}

func _LibraryService_MergeShelves_HttpClient_RequestEncoder(router *mux.Router) func(scheme string, instance string) http1.CreateRequestFunc {
	return func(scheme string, instance string) http1.CreateRequestFunc {
		return func(ctx context.Context, obj any) (*http.Request, error) {
			if obj == nil {
				return nil, statusx.ErrInvalidArgument.With(statusx.Message("request is nil"))
			}
			req, ok := obj.(*MergeShelvesRequest)
			if !ok {
				return nil, statusx.ErrInvalidArgument.With(statusx.Message("invalid request type, %T", obj))
			}
			_ = req
			var body io.Reader
			var bodyBuf bytes.Buffer
			if err := jsonx.NewEncoder(&bodyBuf).Encode(req); err != nil {
				return nil, statusx.ErrInvalidArgument.With(statusx.Wrap(err))
			}
			body = &bodyBuf
			contentType := "application/json; charset=utf-8"
			var pairs []string
			namedPathParameter := req.GetName()
			namedPathValues := strings.Split(namedPathParameter, "/")
			if len(namedPathValues) != 2 {
				return nil, statusx.ErrInvalidArgument.With(statusx.Message("invalid named path parameter, %s", namedPathParameter))
			}
			pairs = append(pairs, "shelf", namedPathValues[1])
			path, err := router.Get("/google.example.library.v1.LibraryService/MergeShelves").URLPath(pairs...)
			if err != nil {
				return nil, statusx.ErrInvalidArgument.With(statusx.Wrap(err))
			}
			queries := url.Values{}
			target := &url.URL{
				Scheme:   scheme,
				Host:     instance,
				Path:     path.Path,
				RawQuery: queries.Encode(),
			}
			r, err := http.NewRequestWithContext(ctx, "POST", target.String(), body)
			if err != nil {
				return nil, statusx.ErrInvalidArgument.With(statusx.Wrap(err))
			}
			r.Header.Set("Content-Type", contentType)
			return r, nil
		}
	}
}

func _LibraryService_MergeShelves_HttpServer_ResponseEncoder(ctx context.Context, w http.ResponseWriter, obj any) error {
	resp := obj.(*Shelf)
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(http.StatusOK)
	if err := jsonx.NewEncoder(w).Encode(resp); err != nil {
		return statusx.ErrInternal.With(statusx.Wrap(err))
	}
	return nil
}

func _LibraryService_MergeShelves_HttpClient_ResponseDecoder(ctx context.Context, r *http.Response) (any, error) {
	if httpx.IsErrorResponse(r) {
		return nil, httpx.ErrorDecoder(ctx, r)
	}
	resp := &Shelf{}
	if err := jsonx.NewDecoder(r.Body).Decode(resp); err != nil {
		return nil, err
	}
	return resp, nil
}

func _LibraryService_CreateBook_HttpServer_RequestDecoder(ctx context.Context, r *http.Request) (any, error) {
	req := &CreateBookRequest{}
	if err := jsonx.NewDecoder(r.Body).Decode(&req.Book); err != nil {
		return nil, statusx.ErrInvalidArgument.With(statusx.Wrap(err))
	}
	vars := urlx.FormFromMap(mux.Vars(r))
	var varErr error
	req.Parent = fmt.Sprintf("shelves/%s", vars.Get("shelf"))
	if varErr != nil {
		return nil, statusx.ErrInvalidArgument.With(statusx.Wrap(varErr))
	}
	return req, nil
}

func _LibraryService_CreateBook_HttpClient_RequestEncoder(router *mux.Router) func(scheme string, instance string) http1.CreateRequestFunc {
	return func(scheme string, instance string) http1.CreateRequestFunc {
		return func(ctx context.Context, obj any) (*http.Request, error) {
			if obj == nil {
				return nil, statusx.ErrInvalidArgument.With(statusx.Message("request is nil"))
			}
			req, ok := obj.(*CreateBookRequest)
			if !ok {
				return nil, statusx.ErrInvalidArgument.With(statusx.Message("invalid request type, %T", obj))
			}
			_ = req
			var body io.Reader
			var bodyBuf bytes.Buffer
			if err := jsonx.NewEncoder(&bodyBuf).Encode(req.GetBook()); err != nil {
				return nil, statusx.ErrInvalidArgument.With(statusx.Wrap(err))
			}
			body = &bodyBuf
			contentType := "application/json; charset=utf-8"
			var pairs []string
			namedPathParameter := req.GetParent()
			namedPathValues := strings.Split(namedPathParameter, "/")
			if len(namedPathValues) != 2 {
				return nil, statusx.ErrInvalidArgument.With(statusx.Message("invalid named path parameter, %s", namedPathParameter))
			}
			pairs = append(pairs, "shelf", namedPathValues[1])
			path, err := router.Get("/google.example.library.v1.LibraryService/CreateBook").URLPath(pairs...)
			if err != nil {
				return nil, statusx.ErrInvalidArgument.With(statusx.Wrap(err))
			}
			queries := url.Values{}
			target := &url.URL{
				Scheme:   scheme,
				Host:     instance,
				Path:     path.Path,
				RawQuery: queries.Encode(),
			}
			r, err := http.NewRequestWithContext(ctx, "POST", target.String(), body)
			if err != nil {
				return nil, statusx.ErrInvalidArgument.With(statusx.Wrap(err))
			}
			r.Header.Set("Content-Type", contentType)
			return r, nil
		}
	}
}

func _LibraryService_CreateBook_HttpServer_ResponseEncoder(ctx context.Context, w http.ResponseWriter, obj any) error {
	resp := obj.(*Book)
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(http.StatusOK)
	if err := jsonx.NewEncoder(w).Encode(resp); err != nil {
		return statusx.ErrInternal.With(statusx.Wrap(err))
	}
	return nil
}

func _LibraryService_CreateBook_HttpClient_ResponseDecoder(ctx context.Context, r *http.Response) (any, error) {
	if httpx.IsErrorResponse(r) {
		return nil, httpx.ErrorDecoder(ctx, r)
	}
	resp := &Book{}
	if err := jsonx.NewDecoder(r.Body).Decode(resp); err != nil {
		return nil, err
	}
	return resp, nil
}

func _LibraryService_GetBook_HttpServer_RequestDecoder(ctx context.Context, r *http.Request) (any, error) {
	req := &GetBookRequest{}
	vars := urlx.FormFromMap(mux.Vars(r))
	var varErr error
	req.Name = fmt.Sprintf("shelves/%s/books/%s", vars.Get("shelf"), vars.Get("book"))
	if varErr != nil {
		return nil, statusx.ErrInvalidArgument.With(statusx.Wrap(varErr))
	}
	return req, nil
}

func _LibraryService_GetBook_HttpClient_RequestEncoder(router *mux.Router) func(scheme string, instance string) http1.CreateRequestFunc {
	return func(scheme string, instance string) http1.CreateRequestFunc {
		return func(ctx context.Context, obj any) (*http.Request, error) {
			if obj == nil {
				return nil, statusx.ErrInvalidArgument.With(statusx.Message("request is nil"))
			}
			req, ok := obj.(*GetBookRequest)
			if !ok {
				return nil, statusx.ErrInvalidArgument.With(statusx.Message("invalid request type, %T", obj))
			}
			_ = req
			var body io.Reader
			var pairs []string
			namedPathParameter := req.GetName()
			namedPathValues := strings.Split(namedPathParameter, "/")
			if len(namedPathValues) != 4 {
				return nil, statusx.ErrInvalidArgument.With(statusx.Message("invalid named path parameter, %s", namedPathParameter))
			}
			pairs = append(pairs, "shelf", namedPathValues[1], "book", namedPathValues[3])
			path, err := router.Get("/google.example.library.v1.LibraryService/GetBook").URLPath(pairs...)
			if err != nil {
				return nil, statusx.ErrInvalidArgument.With(statusx.Wrap(err))
			}
			queries := url.Values{}
			target := &url.URL{
				Scheme:   scheme,
				Host:     instance,
				Path:     path.Path,
				RawQuery: queries.Encode(),
			}
			r, err := http.NewRequestWithContext(ctx, "GET", target.String(), body)
			if err != nil {
				return nil, statusx.ErrInvalidArgument.With(statusx.Wrap(err))
			}
			return r, nil
		}
	}
}

func _LibraryService_GetBook_HttpServer_ResponseEncoder(ctx context.Context, w http.ResponseWriter, obj any) error {
	resp := obj.(*Book)
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(http.StatusOK)
	if err := jsonx.NewEncoder(w).Encode(resp); err != nil {
		return statusx.ErrInternal.With(statusx.Wrap(err))
	}
	return nil
}

func _LibraryService_GetBook_HttpClient_ResponseDecoder(ctx context.Context, r *http.Response) (any, error) {
	if httpx.IsErrorResponse(r) {
		return nil, httpx.ErrorDecoder(ctx, r)
	}
	resp := &Book{}
	if err := jsonx.NewDecoder(r.Body).Decode(resp); err != nil {
		return nil, err
	}
	return resp, nil
}

func _LibraryService_ListBooks_HttpServer_RequestDecoder(ctx context.Context, r *http.Request) (any, error) {
	req := &ListBooksRequest{}
	vars := urlx.FormFromMap(mux.Vars(r))
	var varErr error
	req.Parent = fmt.Sprintf("shelves/%s", vars.Get("shelf"))
	if varErr != nil {
		return nil, statusx.ErrInvalidArgument.With(statusx.Wrap(varErr))
	}
	queries := r.URL.Query()
	var queryErr error
	req.PageSize, queryErr = errorx.Break[int32](queryErr)(urlx.GetInt[int32](queries, "page_size"))
	req.PageToken = queries.Get("page_token")
	if queryErr != nil {
		return nil, statusx.ErrInvalidArgument.With(statusx.Wrap(queryErr))
	}
	return req, nil
}

func _LibraryService_ListBooks_HttpClient_RequestEncoder(router *mux.Router) func(scheme string, instance string) http1.CreateRequestFunc {
	return func(scheme string, instance string) http1.CreateRequestFunc {
		return func(ctx context.Context, obj any) (*http.Request, error) {
			if obj == nil {
				return nil, statusx.ErrInvalidArgument.With(statusx.Message("request is nil"))
			}
			req, ok := obj.(*ListBooksRequest)
			if !ok {
				return nil, statusx.ErrInvalidArgument.With(statusx.Message("invalid request type, %T", obj))
			}
			_ = req
			var body io.Reader
			var pairs []string
			namedPathParameter := req.GetParent()
			namedPathValues := strings.Split(namedPathParameter, "/")
			if len(namedPathValues) != 2 {
				return nil, statusx.ErrInvalidArgument.With(statusx.Message("invalid named path parameter, %s", namedPathParameter))
			}
			pairs = append(pairs, "shelf", namedPathValues[1])
			path, err := router.Get("/google.example.library.v1.LibraryService/ListBooks").URLPath(pairs...)
			if err != nil {
				return nil, statusx.ErrInvalidArgument.With(statusx.Wrap(err))
			}
			queries := url.Values{}
			queries["page_size"] = append(queries["page_size"], strconvx.FormatInt(req.GetPageSize(), 10))
			queries["page_token"] = append(queries["page_token"], req.GetPageToken())
			target := &url.URL{
				Scheme:   scheme,
				Host:     instance,
				Path:     path.Path,
				RawQuery: queries.Encode(),
			}
			r, err := http.NewRequestWithContext(ctx, "GET", target.String(), body)
			if err != nil {
				return nil, statusx.ErrInvalidArgument.With(statusx.Wrap(err))
			}
			return r, nil
		}
	}
}

func _LibraryService_ListBooks_HttpServer_ResponseEncoder(ctx context.Context, w http.ResponseWriter, obj any) error {
	resp := obj.(*ListBooksResponse)
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(http.StatusOK)
	if err := jsonx.NewEncoder(w).Encode(resp); err != nil {
		return statusx.ErrInternal.With(statusx.Wrap(err))
	}
	return nil
}

func _LibraryService_ListBooks_HttpClient_ResponseDecoder(ctx context.Context, r *http.Response) (any, error) {
	if httpx.IsErrorResponse(r) {
		return nil, httpx.ErrorDecoder(ctx, r)
	}
	resp := &ListBooksResponse{}
	if err := jsonx.NewDecoder(r.Body).Decode(resp); err != nil {
		return nil, err
	}
	return resp, nil
}

func _LibraryService_DeleteBook_HttpServer_RequestDecoder(ctx context.Context, r *http.Request) (any, error) {
	req := &DeleteBookRequest{}
	vars := urlx.FormFromMap(mux.Vars(r))
	var varErr error
	req.Name = fmt.Sprintf("shelves/%s/books/%s", vars.Get("shelf"), vars.Get("book"))
	if varErr != nil {
		return nil, statusx.ErrInvalidArgument.With(statusx.Wrap(varErr))
	}
	return req, nil
}

func _LibraryService_DeleteBook_HttpClient_RequestEncoder(router *mux.Router) func(scheme string, instance string) http1.CreateRequestFunc {
	return func(scheme string, instance string) http1.CreateRequestFunc {
		return func(ctx context.Context, obj any) (*http.Request, error) {
			if obj == nil {
				return nil, statusx.ErrInvalidArgument.With(statusx.Message("request is nil"))
			}
			req, ok := obj.(*DeleteBookRequest)
			if !ok {
				return nil, statusx.ErrInvalidArgument.With(statusx.Message("invalid request type, %T", obj))
			}
			_ = req
			var body io.Reader
			var pairs []string
			namedPathParameter := req.GetName()
			namedPathValues := strings.Split(namedPathParameter, "/")
			if len(namedPathValues) != 4 {
				return nil, statusx.ErrInvalidArgument.With(statusx.Message("invalid named path parameter, %s", namedPathParameter))
			}
			pairs = append(pairs, "shelf", namedPathValues[1], "book", namedPathValues[3])
			path, err := router.Get("/google.example.library.v1.LibraryService/DeleteBook").URLPath(pairs...)
			if err != nil {
				return nil, statusx.ErrInvalidArgument.With(statusx.Wrap(err))
			}
			queries := url.Values{}
			target := &url.URL{
				Scheme:   scheme,
				Host:     instance,
				Path:     path.Path,
				RawQuery: queries.Encode(),
			}
			r, err := http.NewRequestWithContext(ctx, "DELETE", target.String(), body)
			if err != nil {
				return nil, statusx.ErrInvalidArgument.With(statusx.Wrap(err))
			}
			return r, nil
		}
	}
}

func _LibraryService_DeleteBook_HttpServer_ResponseEncoder(ctx context.Context, w http.ResponseWriter, obj any) error {
	resp := obj.(*emptypb.Empty)
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(http.StatusOK)
	if err := jsonx.NewEncoder(w).Encode(resp); err != nil {
		return statusx.ErrInternal.With(statusx.Wrap(err))
	}
	return nil
}

func _LibraryService_DeleteBook_HttpClient_ResponseDecoder(ctx context.Context, r *http.Response) (any, error) {
	if httpx.IsErrorResponse(r) {
		return nil, httpx.ErrorDecoder(ctx, r)
	}
	resp := &emptypb.Empty{}
	if err := jsonx.NewDecoder(r.Body).Decode(resp); err != nil {
		return nil, err
	}
	return resp, nil
}

func _LibraryService_UpdateBook_HttpServer_RequestDecoder(ctx context.Context, r *http.Request) (any, error) {
	req := &UpdateBookRequest{}
	if err := jsonx.NewDecoder(r.Body).Decode(&req.Book); err != nil {
		return nil, statusx.ErrInvalidArgument.With(statusx.Wrap(err))
	}
	vars := urlx.FormFromMap(mux.Vars(r))
	var varErr error
	if req.Book == nil {
		req.Book = &Book{}
	}
	req.Book.Name = fmt.Sprintf("shelves/%s/books/%s", vars.Get("shelf"), vars.Get("book"))
	if varErr != nil {
		return nil, statusx.ErrInvalidArgument.With(statusx.Wrap(varErr))
	}
	return req, nil
}

func _LibraryService_UpdateBook_HttpClient_RequestEncoder(router *mux.Router) func(scheme string, instance string) http1.CreateRequestFunc {
	return func(scheme string, instance string) http1.CreateRequestFunc {
		return func(ctx context.Context, obj any) (*http.Request, error) {
			if obj == nil {
				return nil, statusx.ErrInvalidArgument.With(statusx.Message("request is nil"))
			}
			req, ok := obj.(*UpdateBookRequest)
			if !ok {
				return nil, statusx.ErrInvalidArgument.With(statusx.Message("invalid request type, %T", obj))
			}
			_ = req
			var body io.Reader
			var bodyBuf bytes.Buffer
			if err := jsonx.NewEncoder(&bodyBuf).Encode(req.GetBook()); err != nil {
				return nil, statusx.ErrInvalidArgument.With(statusx.Wrap(err))
			}
			body = &bodyBuf
			contentType := "application/json; charset=utf-8"
			var pairs []string
			namedPathParameter := req.GetBook().GetName()
			namedPathValues := strings.Split(namedPathParameter, "/")
			if len(namedPathValues) != 4 {
				return nil, statusx.ErrInvalidArgument.With(statusx.Message("invalid named path parameter, %s", namedPathParameter))
			}
			pairs = append(pairs, "shelf", namedPathValues[1], "book", namedPathValues[3])
			path, err := router.Get("/google.example.library.v1.LibraryService/UpdateBook").URLPath(pairs...)
			if err != nil {
				return nil, statusx.ErrInvalidArgument.With(statusx.Wrap(err))
			}
			queries := url.Values{}
			target := &url.URL{
				Scheme:   scheme,
				Host:     instance,
				Path:     path.Path,
				RawQuery: queries.Encode(),
			}
			r, err := http.NewRequestWithContext(ctx, "PATCH", target.String(), body)
			if err != nil {
				return nil, statusx.ErrInvalidArgument.With(statusx.Wrap(err))
			}
			r.Header.Set("Content-Type", contentType)
			return r, nil
		}
	}
}

func _LibraryService_UpdateBook_HttpServer_ResponseEncoder(ctx context.Context, w http.ResponseWriter, obj any) error {
	resp := obj.(*Book)
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(http.StatusOK)
	if err := jsonx.NewEncoder(w).Encode(resp); err != nil {
		return statusx.ErrInternal.With(statusx.Wrap(err))
	}
	return nil
}

func _LibraryService_UpdateBook_HttpClient_ResponseDecoder(ctx context.Context, r *http.Response) (any, error) {
	if httpx.IsErrorResponse(r) {
		return nil, httpx.ErrorDecoder(ctx, r)
	}
	resp := &Book{}
	if err := jsonx.NewDecoder(r.Body).Decode(resp); err != nil {
		return nil, err
	}
	return resp, nil
}

func _LibraryService_MoveBook_HttpServer_RequestDecoder(ctx context.Context, r *http.Request) (any, error) {
	req := &MoveBookRequest{}
	if err := jsonx.NewDecoder(r.Body).Decode(req); err != nil {
		return nil, statusx.ErrInvalidArgument.With(statusx.Wrap(err))
	}
	vars := urlx.FormFromMap(mux.Vars(r))
	var varErr error
	req.Name = fmt.Sprintf("shelves/%s/books/%s", vars.Get("shelf"), vars.Get("book"))
	if varErr != nil {
		return nil, statusx.ErrInvalidArgument.With(statusx.Wrap(varErr))
	}
	return req, nil
}

func _LibraryService_MoveBook_HttpClient_RequestEncoder(router *mux.Router) func(scheme string, instance string) http1.CreateRequestFunc {
	return func(scheme string, instance string) http1.CreateRequestFunc {
		return func(ctx context.Context, obj any) (*http.Request, error) {
			if obj == nil {
				return nil, statusx.ErrInvalidArgument.With(statusx.Message("request is nil"))
			}
			req, ok := obj.(*MoveBookRequest)
			if !ok {
				return nil, statusx.ErrInvalidArgument.With(statusx.Message("invalid request type, %T", obj))
			}
			_ = req
			var body io.Reader
			var bodyBuf bytes.Buffer
			if err := jsonx.NewEncoder(&bodyBuf).Encode(req); err != nil {
				return nil, statusx.ErrInvalidArgument.With(statusx.Wrap(err))
			}
			body = &bodyBuf
			contentType := "application/json; charset=utf-8"
			var pairs []string
			namedPathParameter := req.GetName()
			namedPathValues := strings.Split(namedPathParameter, "/")
			if len(namedPathValues) != 4 {
				return nil, statusx.ErrInvalidArgument.With(statusx.Message("invalid named path parameter, %s", namedPathParameter))
			}
			pairs = append(pairs, "shelf", namedPathValues[1], "book", namedPathValues[3])
			path, err := router.Get("/google.example.library.v1.LibraryService/MoveBook").URLPath(pairs...)
			if err != nil {
				return nil, statusx.ErrInvalidArgument.With(statusx.Wrap(err))
			}
			queries := url.Values{}
			target := &url.URL{
				Scheme:   scheme,
				Host:     instance,
				Path:     path.Path,
				RawQuery: queries.Encode(),
			}
			r, err := http.NewRequestWithContext(ctx, "POST", target.String(), body)
			if err != nil {
				return nil, statusx.ErrInvalidArgument.With(statusx.Wrap(err))
			}
			r.Header.Set("Content-Type", contentType)
			return r, nil
		}
	}
}

func _LibraryService_MoveBook_HttpServer_ResponseEncoder(ctx context.Context, w http.ResponseWriter, obj any) error {
	resp := obj.(*Book)
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(http.StatusOK)
	if err := jsonx.NewEncoder(w).Encode(resp); err != nil {
		return statusx.ErrInternal.With(statusx.Wrap(err))
	}
	return nil
}

func _LibraryService_MoveBook_HttpClient_ResponseDecoder(ctx context.Context, r *http.Response) (any, error) {
	if httpx.IsErrorResponse(r) {
		return nil, httpx.ErrorDecoder(ctx, r)
	}
	resp := &Book{}
	if err := jsonx.NewDecoder(r.Body).Decode(resp); err != nil {
		return nil, err
	}
	return resp, nil
}
