// Code generated by protoc-gen-go-leo. DO NOT EDIT.

package library

import (
	context "context"
	cqrs "github.com/go-leo/leo/v3/cqrs"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

func NewLibraryServiceCqrsService[
	CreateShelfQueryType CreateShelfQuery, CreateShelfResultType CreateShelfResult,
	GetShelfQueryType GetShelfQuery, GetShelfResultType GetShelfResult,
	ListShelvesQueryType ListShelvesQuery, ListShelvesResultType ListShelvesResult,
	DeleteShelfCommandType DeleteShelfCommand,
	MergeShelvesQueryType MergeShelvesQuery, MergeShelvesResultType MergeShelvesResult,
	CreateBookQueryType CreateBookQuery, CreateBookResultType CreateBookResult,
	GetBookQueryType GetBookQuery, GetBookResultType GetBookResult,
	ListBooksQueryType ListBooksQuery, ListBooksResultType ListBooksResult,
	DeleteBookCommandType DeleteBookCommand,
	UpdateBookQueryType UpdateBookQuery, UpdateBookResultType UpdateBookResult,
	MoveBookQueryType MoveBookQuery, MoveBookResultType MoveBookResult,
](
	createShelfHandler cqrs.QueryHandler[CreateShelfQueryType, CreateShelfResultType],
	getShelfHandler cqrs.QueryHandler[GetShelfQueryType, GetShelfResultType],
	listShelvesHandler cqrs.QueryHandler[ListShelvesQueryType, ListShelvesResultType],
	deleteShelfHandler cqrs.CommandHandler[DeleteShelfCommandType],
	mergeShelvesHandler cqrs.QueryHandler[MergeShelvesQueryType, MergeShelvesResultType],
	createBookHandler cqrs.QueryHandler[CreateBookQueryType, CreateBookResultType],
	getBookHandler cqrs.QueryHandler[GetBookQueryType, GetBookResultType],
	listBooksHandler cqrs.QueryHandler[ListBooksQueryType, ListBooksResultType],
	deleteBookHandler cqrs.CommandHandler[DeleteBookCommandType],
	updateBookHandler cqrs.QueryHandler[UpdateBookQueryType, UpdateBookResultType],
	moveBookHandler cqrs.QueryHandler[MoveBookQueryType, MoveBookResultType],
) (LibraryServiceService, error) {
	var bus cqrs.SampleBus
	if err := bus.RegisterQuery(createShelfHandler); err != nil {
		return nil, err
	}
	if err := bus.RegisterQuery(getShelfHandler); err != nil {
		return nil, err
	}
	if err := bus.RegisterQuery(listShelvesHandler); err != nil {
		return nil, err
	}
	if err := bus.RegisterCommand(deleteShelfHandler); err != nil {
		return nil, err
	}
	if err := bus.RegisterQuery(mergeShelvesHandler); err != nil {
		return nil, err
	}
	if err := bus.RegisterQuery(createBookHandler); err != nil {
		return nil, err
	}
	if err := bus.RegisterQuery(getBookHandler); err != nil {
		return nil, err
	}
	if err := bus.RegisterQuery(listBooksHandler); err != nil {
		return nil, err
	}
	if err := bus.RegisterCommand(deleteBookHandler); err != nil {
		return nil, err
	}
	if err := bus.RegisterQuery(updateBookHandler); err != nil {
		return nil, err
	}
	if err := bus.RegisterQuery(moveBookHandler); err != nil {
		return nil, err
	}
	return &libraryServiceCqrsService{bus: &bus}, nil
}

type libraryServiceCqrsService struct {
	bus cqrs.Bus
}

func (svc *libraryServiceCqrsService) CreateShelf(ctx context.Context, request *CreateShelfRequest) (*Shelf, error) {
	var query CreateShelfQuery
	q, ctx, err := query.From(ctx, request)
	if err != nil {
		return nil, err
	}
	r, err := svc.bus.Query(ctx, q)
	if err != nil {
		return nil, err
	}
	return r.(CreateShelfResult).To(ctx)
}

func (svc *libraryServiceCqrsService) GetShelf(ctx context.Context, request *GetShelfRequest) (*Shelf, error) {
	var query GetShelfQuery
	q, ctx, err := query.From(ctx, request)
	if err != nil {
		return nil, err
	}
	r, err := svc.bus.Query(ctx, q)
	if err != nil {
		return nil, err
	}
	return r.(GetShelfResult).To(ctx)
}

func (svc *libraryServiceCqrsService) ListShelves(ctx context.Context, request *ListShelvesRequest) (*ListShelvesResponse, error) {
	var query ListShelvesQuery
	q, ctx, err := query.From(ctx, request)
	if err != nil {
		return nil, err
	}
	r, err := svc.bus.Query(ctx, q)
	if err != nil {
		return nil, err
	}
	return r.(ListShelvesResult).To(ctx)
}

func (svc *libraryServiceCqrsService) DeleteShelf(ctx context.Context, request *DeleteShelfRequest) (*emptypb.Empty, error) {
	var command DeleteShelfCommand
	command, ctx, err := command.From(ctx, request)
	if err != nil {
		return nil, err
	}

	if err := svc.bus.Exec(ctx, command); err != nil {
		return nil, err
	}
	return new(emptypb.Empty), nil
}

func (svc *libraryServiceCqrsService) MergeShelves(ctx context.Context, request *MergeShelvesRequest) (*Shelf, error) {
	var query MergeShelvesQuery
	q, ctx, err := query.From(ctx, request)
	if err != nil {
		return nil, err
	}
	r, err := svc.bus.Query(ctx, q)
	if err != nil {
		return nil, err
	}
	return r.(MergeShelvesResult).To(ctx)
}

func (svc *libraryServiceCqrsService) CreateBook(ctx context.Context, request *CreateBookRequest) (*Book, error) {
	var query CreateBookQuery
	q, ctx, err := query.From(ctx, request)
	if err != nil {
		return nil, err
	}
	r, err := svc.bus.Query(ctx, q)
	if err != nil {
		return nil, err
	}
	return r.(CreateBookResult).To(ctx)
}

func (svc *libraryServiceCqrsService) GetBook(ctx context.Context, request *GetBookRequest) (*Book, error) {
	var query GetBookQuery
	q, ctx, err := query.From(ctx, request)
	if err != nil {
		return nil, err
	}
	r, err := svc.bus.Query(ctx, q)
	if err != nil {
		return nil, err
	}
	return r.(GetBookResult).To(ctx)
}

func (svc *libraryServiceCqrsService) ListBooks(ctx context.Context, request *ListBooksRequest) (*ListBooksResponse, error) {
	var query ListBooksQuery
	q, ctx, err := query.From(ctx, request)
	if err != nil {
		return nil, err
	}
	r, err := svc.bus.Query(ctx, q)
	if err != nil {
		return nil, err
	}
	return r.(ListBooksResult).To(ctx)
}

func (svc *libraryServiceCqrsService) DeleteBook(ctx context.Context, request *DeleteBookRequest) (*emptypb.Empty, error) {
	var command DeleteBookCommand
	command, ctx, err := command.From(ctx, request)
	if err != nil {
		return nil, err
	}

	if err := svc.bus.Exec(ctx, command); err != nil {
		return nil, err
	}
	return new(emptypb.Empty), nil
}

func (svc *libraryServiceCqrsService) UpdateBook(ctx context.Context, request *UpdateBookRequest) (*Book, error) {
	var query UpdateBookQuery
	q, ctx, err := query.From(ctx, request)
	if err != nil {
		return nil, err
	}
	r, err := svc.bus.Query(ctx, q)
	if err != nil {
		return nil, err
	}
	return r.(UpdateBookResult).To(ctx)
}

func (svc *libraryServiceCqrsService) MoveBook(ctx context.Context, request *MoveBookRequest) (*Book, error) {
	var query MoveBookQuery
	q, ctx, err := query.From(ctx, request)
	if err != nil {
		return nil, err
	}
	r, err := svc.bus.Query(ctx, q)
	if err != nil {
		return nil, err
	}
	return r.(MoveBookResult).To(ctx)
}

type (
	DeleteShelfCommand interface {
		isDeleteShelfCommand_Kind()
		From(context.Context, *DeleteShelfRequest) (DeleteShelfCommand, context.Context, error)
	}
	UnimplementedDeleteShelfCommand struct{}

	DeleteBookCommand interface {
		isDeleteBookCommand_Kind()
		From(context.Context, *DeleteBookRequest) (DeleteBookCommand, context.Context, error)
	}
	UnimplementedDeleteBookCommand struct{}
)

type (
	CreateShelfQuery interface {
		isCreateShelfQuery_Kind()
		From(context.Context, *CreateShelfRequest) (CreateShelfQuery, context.Context, error)
	}
	CreateShelfResult interface {
		isCreateShelfResult_Kind()
		To(context.Context) (*Shelf, error)
	}
	UnimplementedCreateShelfQuery  struct{}
	UnimplementedCreateShelfResult struct{}

	GetShelfQuery interface {
		isGetShelfQuery_Kind()
		From(context.Context, *GetShelfRequest) (GetShelfQuery, context.Context, error)
	}
	GetShelfResult interface {
		isGetShelfResult_Kind()
		To(context.Context) (*Shelf, error)
	}
	UnimplementedGetShelfQuery  struct{}
	UnimplementedGetShelfResult struct{}

	ListShelvesQuery interface {
		isListShelvesQuery_Kind()
		From(context.Context, *ListShelvesRequest) (ListShelvesQuery, context.Context, error)
	}
	ListShelvesResult interface {
		isListShelvesResult_Kind()
		To(context.Context) (*ListShelvesResponse, error)
	}
	UnimplementedListShelvesQuery  struct{}
	UnimplementedListShelvesResult struct{}

	MergeShelvesQuery interface {
		isMergeShelvesQuery_Kind()
		From(context.Context, *MergeShelvesRequest) (MergeShelvesQuery, context.Context, error)
	}
	MergeShelvesResult interface {
		isMergeShelvesResult_Kind()
		To(context.Context) (*Shelf, error)
	}
	UnimplementedMergeShelvesQuery  struct{}
	UnimplementedMergeShelvesResult struct{}

	CreateBookQuery interface {
		isCreateBookQuery_Kind()
		From(context.Context, *CreateBookRequest) (CreateBookQuery, context.Context, error)
	}
	CreateBookResult interface {
		isCreateBookResult_Kind()
		To(context.Context) (*Book, error)
	}
	UnimplementedCreateBookQuery  struct{}
	UnimplementedCreateBookResult struct{}

	GetBookQuery interface {
		isGetBookQuery_Kind()
		From(context.Context, *GetBookRequest) (GetBookQuery, context.Context, error)
	}
	GetBookResult interface {
		isGetBookResult_Kind()
		To(context.Context) (*Book, error)
	}
	UnimplementedGetBookQuery  struct{}
	UnimplementedGetBookResult struct{}

	ListBooksQuery interface {
		isListBooksQuery_Kind()
		From(context.Context, *ListBooksRequest) (ListBooksQuery, context.Context, error)
	}
	ListBooksResult interface {
		isListBooksResult_Kind()
		To(context.Context) (*ListBooksResponse, error)
	}
	UnimplementedListBooksQuery  struct{}
	UnimplementedListBooksResult struct{}

	UpdateBookQuery interface {
		isUpdateBookQuery_Kind()
		From(context.Context, *UpdateBookRequest) (UpdateBookQuery, context.Context, error)
	}
	UpdateBookResult interface {
		isUpdateBookResult_Kind()
		To(context.Context) (*Book, error)
	}
	UnimplementedUpdateBookQuery  struct{}
	UnimplementedUpdateBookResult struct{}

	MoveBookQuery interface {
		isMoveBookQuery_Kind()
		From(context.Context, *MoveBookRequest) (MoveBookQuery, context.Context, error)
	}
	MoveBookResult interface {
		isMoveBookResult_Kind()
		To(context.Context) (*Book, error)
	}
	UnimplementedMoveBookQuery  struct{}
	UnimplementedMoveBookResult struct{}
)

func (UnimplementedDeleteShelfCommand) isDeleteShelfCommand_Kind() {}
func (UnimplementedDeleteShelfCommand) From(context.Context, *DeleteShelfRequest) (DeleteShelfCommand, context.Context, error) {
	panic("implement me")
	return nil, nil, nil
}
func (UnimplementedDeleteBookCommand) isDeleteBookCommand_Kind() {}
func (UnimplementedDeleteBookCommand) From(context.Context, *DeleteBookRequest) (DeleteBookCommand, context.Context, error) {
	panic("implement me")
	return nil, nil, nil
}
func (UnimplementedCreateShelfQuery) isCreateShelfQuery_Kind() {}
func (UnimplementedCreateShelfQuery) From(context.Context, *CreateShelfRequest) (CreateShelfQuery, context.Context, error) {
	panic("implement me")
	return nil, nil, nil
}
func (UnimplementedCreateShelfResult) isCreateShelfResult_Kind() {}
func (UnimplementedCreateShelfResult) To(context.Context) (*Shelf, error) {
	panic("implement me")
	return nil, nil
}

func (UnimplementedGetShelfQuery) isGetShelfQuery_Kind() {}
func (UnimplementedGetShelfQuery) From(context.Context, *GetShelfRequest) (GetShelfQuery, context.Context, error) {
	panic("implement me")
	return nil, nil, nil
}
func (UnimplementedGetShelfResult) isGetShelfResult_Kind() {}
func (UnimplementedGetShelfResult) To(context.Context) (*Shelf, error) {
	panic("implement me")
	return nil, nil
}

func (UnimplementedListShelvesQuery) isListShelvesQuery_Kind() {}
func (UnimplementedListShelvesQuery) From(context.Context, *ListShelvesRequest) (ListShelvesQuery, context.Context, error) {
	panic("implement me")
	return nil, nil, nil
}
func (UnimplementedListShelvesResult) isListShelvesResult_Kind() {}
func (UnimplementedListShelvesResult) To(context.Context) (*ListShelvesResponse, error) {
	panic("implement me")
	return nil, nil
}

func (UnimplementedMergeShelvesQuery) isMergeShelvesQuery_Kind() {}
func (UnimplementedMergeShelvesQuery) From(context.Context, *MergeShelvesRequest) (MergeShelvesQuery, context.Context, error) {
	panic("implement me")
	return nil, nil, nil
}
func (UnimplementedMergeShelvesResult) isMergeShelvesResult_Kind() {}
func (UnimplementedMergeShelvesResult) To(context.Context) (*Shelf, error) {
	panic("implement me")
	return nil, nil
}

func (UnimplementedCreateBookQuery) isCreateBookQuery_Kind() {}
func (UnimplementedCreateBookQuery) From(context.Context, *CreateBookRequest) (CreateBookQuery, context.Context, error) {
	panic("implement me")
	return nil, nil, nil
}
func (UnimplementedCreateBookResult) isCreateBookResult_Kind() {}
func (UnimplementedCreateBookResult) To(context.Context) (*Book, error) {
	panic("implement me")
	return nil, nil
}

func (UnimplementedGetBookQuery) isGetBookQuery_Kind() {}
func (UnimplementedGetBookQuery) From(context.Context, *GetBookRequest) (GetBookQuery, context.Context, error) {
	panic("implement me")
	return nil, nil, nil
}
func (UnimplementedGetBookResult) isGetBookResult_Kind() {}
func (UnimplementedGetBookResult) To(context.Context) (*Book, error) {
	panic("implement me")
	return nil, nil
}

func (UnimplementedListBooksQuery) isListBooksQuery_Kind() {}
func (UnimplementedListBooksQuery) From(context.Context, *ListBooksRequest) (ListBooksQuery, context.Context, error) {
	panic("implement me")
	return nil, nil, nil
}
func (UnimplementedListBooksResult) isListBooksResult_Kind() {}
func (UnimplementedListBooksResult) To(context.Context) (*ListBooksResponse, error) {
	panic("implement me")
	return nil, nil
}

func (UnimplementedUpdateBookQuery) isUpdateBookQuery_Kind() {}
func (UnimplementedUpdateBookQuery) From(context.Context, *UpdateBookRequest) (UpdateBookQuery, context.Context, error) {
	panic("implement me")
	return nil, nil, nil
}
func (UnimplementedUpdateBookResult) isUpdateBookResult_Kind() {}
func (UnimplementedUpdateBookResult) To(context.Context) (*Book, error) {
	panic("implement me")
	return nil, nil
}

func (UnimplementedMoveBookQuery) isMoveBookQuery_Kind() {}
func (UnimplementedMoveBookQuery) From(context.Context, *MoveBookRequest) (MoveBookQuery, context.Context, error) {
	panic("implement me")
	return nil, nil, nil
}
func (UnimplementedMoveBookResult) isMoveBookResult_Kind() {}
func (UnimplementedMoveBookResult) To(context.Context) (*Book, error) {
	panic("implement me")
	return nil, nil
}

// library/v1/cq/create_shelf_leo.query.pb.go
// library/v1/cq/get_shelf_leo.query.pb.go
// library/v1/cq/list_shelves_leo.query.pb.go
// library/v1/cq/delete_shelf_leo.query.pb.go
// library/v1/cq/merge_shelves_leo.query.pb.go
// library/v1/cq/create_book_leo.query.pb.go
// library/v1/cq/get_book_leo.query.pb.go
// library/v1/cq/list_books_leo.query.pb.go
// library/v1/cq/delete_book_leo.query.pb.go
// library/v1/cq/update_book_leo.query.pb.go
// library/v1/cq/move_book_leo.query.pb.go
