// Code generated by protoc-gen-go-leo. DO NOT EDIT.

package cqrs

import (
	context "context"
	endpoint "github.com/go-kit/kit/endpoint"
	sd "github.com/go-kit/kit/sd"
	lb "github.com/go-kit/kit/sd/lb"
	log "github.com/go-kit/log"
	lazyloadx "github.com/go-leo/gox/syncx/lazyloadx"
	endpointx "github.com/go-leo/leo/v3/endpointx"
	sdx "github.com/go-leo/leo/v3/sdx"
	lbx "github.com/go-leo/leo/v3/sdx/lbx"
	stainx "github.com/go-leo/leo/v3/stainx"
	transportx "github.com/go-leo/leo/v3/transportx"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	io "io"
)

// CqrsService is a service
type CqrsService interface {
	Command(ctx context.Context, request *CommandRequest) (*CommandReply, error)
	CommandEmpty(ctx context.Context, request *CommandRequest) (*emptypb.Empty, error)
	Query(ctx context.Context, request *QueryRequest) (*QueryReply, error)
	QueryOneOf(ctx context.Context, request *QueryRequest) (*QueryOneOfReply, error)
}

// CqrsServerEndpoints is server endpoints
type CqrsServerEndpoints interface {
	Command(ctx context.Context) endpoint.Endpoint
	CommandEmpty(ctx context.Context) endpoint.Endpoint
	Query(ctx context.Context) endpoint.Endpoint
	QueryOneOf(ctx context.Context) endpoint.Endpoint
}

// CqrsClientEndpoints is client endpoints
type CqrsClientEndpoints interface {
	Command(ctx context.Context) (endpoint.Endpoint, error)
	CommandEmpty(ctx context.Context) (endpoint.Endpoint, error)
	Query(ctx context.Context) (endpoint.Endpoint, error)
	QueryOneOf(ctx context.Context) (endpoint.Endpoint, error)
}

// CqrsClientTransports is client transports
type CqrsClientTransports interface {
	Command(ctx context.Context, instance string) (endpoint.Endpoint, io.Closer, error)
	CommandEmpty(ctx context.Context, instance string) (endpoint.Endpoint, io.Closer, error)
	Query(ctx context.Context, instance string) (endpoint.Endpoint, io.Closer, error)
	QueryOneOf(ctx context.Context, instance string) (endpoint.Endpoint, io.Closer, error)
}

// CqrsFactories is client factories
type CqrsFactories interface {
	Command(ctx context.Context) sd.Factory
	CommandEmpty(ctx context.Context) sd.Factory
	Query(ctx context.Context) sd.Factory
	QueryOneOf(ctx context.Context) sd.Factory
}

// CqrsEndpointers is client endpointers
type CqrsEndpointers interface {
	Command(ctx context.Context, color string) (sd.Endpointer, error)
	CommandEmpty(ctx context.Context, color string) (sd.Endpointer, error)
	Query(ctx context.Context, color string) (sd.Endpointer, error)
	QueryOneOf(ctx context.Context, color string) (sd.Endpointer, error)
}

// CqrsBalancers is client balancers
type CqrsBalancers interface {
	Command(ctx context.Context) (lb.Balancer, error)
	CommandEmpty(ctx context.Context) (lb.Balancer, error)
	Query(ctx context.Context) (lb.Balancer, error)
	QueryOneOf(ctx context.Context) (lb.Balancer, error)
}

// cqrsServerEndpoints implements CqrsServerEndpoints
type cqrsServerEndpoints struct {
	svc         CqrsService
	middlewares []endpoint.Middleware
}

func (e *cqrsServerEndpoints) Command(context.Context) endpoint.Endpoint {
	component := func(ctx context.Context, request any) (any, error) {
		return e.svc.Command(ctx, request.(*CommandRequest))
	}
	return endpointx.Chain(component, e.middlewares...)
}

func (e *cqrsServerEndpoints) CommandEmpty(context.Context) endpoint.Endpoint {
	component := func(ctx context.Context, request any) (any, error) {
		return e.svc.CommandEmpty(ctx, request.(*CommandRequest))
	}
	return endpointx.Chain(component, e.middlewares...)
}

func (e *cqrsServerEndpoints) Query(context.Context) endpoint.Endpoint {
	component := func(ctx context.Context, request any) (any, error) {
		return e.svc.Query(ctx, request.(*QueryRequest))
	}
	return endpointx.Chain(component, e.middlewares...)
}

func (e *cqrsServerEndpoints) QueryOneOf(context.Context) endpoint.Endpoint {
	component := func(ctx context.Context, request any) (any, error) {
		return e.svc.QueryOneOf(ctx, request.(*QueryRequest))
	}
	return endpointx.Chain(component, e.middlewares...)
}

// cqrsFactories implements CqrsFactories
type cqrsFactories struct {
	transports CqrsClientTransports
}

func (f *cqrsFactories) Command(ctx context.Context) sd.Factory {
	return func(instance string) (endpoint.Endpoint, io.Closer, error) {
		return f.transports.Command(ctx, instance)
	}
}

func (f *cqrsFactories) CommandEmpty(ctx context.Context) sd.Factory {
	return func(instance string) (endpoint.Endpoint, io.Closer, error) {
		return f.transports.CommandEmpty(ctx, instance)
	}
}

func (f *cqrsFactories) Query(ctx context.Context) sd.Factory {
	return func(instance string) (endpoint.Endpoint, io.Closer, error) {
		return f.transports.Query(ctx, instance)
	}
}

func (f *cqrsFactories) QueryOneOf(ctx context.Context) sd.Factory {
	return func(instance string) (endpoint.Endpoint, io.Closer, error) {
		return f.transports.QueryOneOf(ctx, instance)
	}
}

// cqrsEndpointers implements CqrsEndpointers
type cqrsEndpointers struct {
	target    string
	builder   sdx.Builder
	factories CqrsFactories
	logger    log.Logger
	options   []sd.EndpointerOption
}

func (e *cqrsEndpointers) Command(ctx context.Context, color string) (sd.Endpointer, error) {
	return sdx.NewEndpointer(ctx, e.target, color, e.builder, e.factories.Command(ctx), e.logger, e.options...)
}

func (e *cqrsEndpointers) CommandEmpty(ctx context.Context, color string) (sd.Endpointer, error) {
	return sdx.NewEndpointer(ctx, e.target, color, e.builder, e.factories.CommandEmpty(ctx), e.logger, e.options...)
}

func (e *cqrsEndpointers) Query(ctx context.Context, color string) (sd.Endpointer, error) {
	return sdx.NewEndpointer(ctx, e.target, color, e.builder, e.factories.Query(ctx), e.logger, e.options...)
}

func (e *cqrsEndpointers) QueryOneOf(ctx context.Context, color string) (sd.Endpointer, error) {
	return sdx.NewEndpointer(ctx, e.target, color, e.builder, e.factories.QueryOneOf(ctx), e.logger, e.options...)
}

// cqrsBalancers implements CqrsBalancers
type cqrsBalancers struct {
	factory      lbx.BalancerFactory
	endpointer   CqrsEndpointers
	command      lazyloadx.Group[lb.Balancer]
	commandEmpty lazyloadx.Group[lb.Balancer]
	query        lazyloadx.Group[lb.Balancer]
	queryOneOf   lazyloadx.Group[lb.Balancer]
}

func (b *cqrsBalancers) Command(ctx context.Context) (lb.Balancer, error) {
	color, _ := stainx.ColorExtractor(ctx)
	balancer, err, _ := b.command.LoadOrNew(color, lbx.NewBalancer(ctx, b.factory, b.endpointer.Command))
	return balancer, err
}
func (b *cqrsBalancers) CommandEmpty(ctx context.Context) (lb.Balancer, error) {
	color, _ := stainx.ColorExtractor(ctx)
	balancer, err, _ := b.commandEmpty.LoadOrNew(color, lbx.NewBalancer(ctx, b.factory, b.endpointer.CommandEmpty))
	return balancer, err
}
func (b *cqrsBalancers) Query(ctx context.Context) (lb.Balancer, error) {
	color, _ := stainx.ColorExtractor(ctx)
	balancer, err, _ := b.query.LoadOrNew(color, lbx.NewBalancer(ctx, b.factory, b.endpointer.Query))
	return balancer, err
}
func (b *cqrsBalancers) QueryOneOf(ctx context.Context) (lb.Balancer, error) {
	color, _ := stainx.ColorExtractor(ctx)
	balancer, err, _ := b.queryOneOf.LoadOrNew(color, lbx.NewBalancer(ctx, b.factory, b.endpointer.QueryOneOf))
	return balancer, err
}
func newCqrsBalancers(factory lbx.BalancerFactory, endpointer CqrsEndpointers) CqrsBalancers {
	return &cqrsBalancers{
		factory:      factory,
		endpointer:   endpointer,
		command:      lazyloadx.Group[lb.Balancer]{},
		commandEmpty: lazyloadx.Group[lb.Balancer]{},
		query:        lazyloadx.Group[lb.Balancer]{},
		queryOneOf:   lazyloadx.Group[lb.Balancer]{},
	}
}

// cqrsClientEndpoints implements CqrsClientEndpoints
type cqrsClientEndpoints struct {
	balancers CqrsBalancers
}

func (e *cqrsClientEndpoints) Command(ctx context.Context) (endpoint.Endpoint, error) {
	balancer, err := e.balancers.Command(ctx)
	if err != nil {
		return nil, err
	}
	return balancer.Endpoint()
}

func (e *cqrsClientEndpoints) CommandEmpty(ctx context.Context) (endpoint.Endpoint, error) {
	balancer, err := e.balancers.CommandEmpty(ctx)
	if err != nil {
		return nil, err
	}
	return balancer.Endpoint()
}

func (e *cqrsClientEndpoints) Query(ctx context.Context) (endpoint.Endpoint, error) {
	balancer, err := e.balancers.Query(ctx)
	if err != nil {
		return nil, err
	}
	return balancer.Endpoint()
}

func (e *cqrsClientEndpoints) QueryOneOf(ctx context.Context) (endpoint.Endpoint, error) {
	balancer, err := e.balancers.QueryOneOf(ctx)
	if err != nil {
		return nil, err
	}
	return balancer.Endpoint()
}

// cqrsClientService implements CqrsClientService
type cqrsClientService struct {
	endpoints     CqrsClientEndpoints
	transportName string
}

func (c *cqrsClientService) Command(ctx context.Context, request *CommandRequest) (*CommandReply, error) {
	ctx = endpointx.NameInjector(ctx, "/leo.example.cqrs.Cqrs/Command")
	ctx = transportx.NameInjector(ctx, c.transportName)
	endpoint, err := c.endpoints.Command(ctx)
	if err != nil {
		return nil, err
	}
	rep, err := endpoint(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*CommandReply), nil
}

func (c *cqrsClientService) CommandEmpty(ctx context.Context, request *CommandRequest) (*emptypb.Empty, error) {
	ctx = endpointx.NameInjector(ctx, "/leo.example.cqrs.Cqrs/CommandEmpty")
	ctx = transportx.NameInjector(ctx, c.transportName)
	endpoint, err := c.endpoints.CommandEmpty(ctx)
	if err != nil {
		return nil, err
	}
	rep, err := endpoint(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*emptypb.Empty), nil
}

func (c *cqrsClientService) Query(ctx context.Context, request *QueryRequest) (*QueryReply, error) {
	ctx = endpointx.NameInjector(ctx, "/leo.example.cqrs.Cqrs/Query")
	ctx = transportx.NameInjector(ctx, c.transportName)
	endpoint, err := c.endpoints.Query(ctx)
	if err != nil {
		return nil, err
	}
	rep, err := endpoint(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*QueryReply), nil
}

func (c *cqrsClientService) QueryOneOf(ctx context.Context, request *QueryRequest) (*QueryOneOfReply, error) {
	ctx = endpointx.NameInjector(ctx, "/leo.example.cqrs.Cqrs/QueryOneOf")
	ctx = transportx.NameInjector(ctx, c.transportName)
	endpoint, err := c.endpoints.QueryOneOf(ctx)
	if err != nil {
		return nil, err
	}
	rep, err := endpoint(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*QueryOneOfReply), nil
}
