// Code generated by protoc-gen-go-leo. DO NOT EDIT.

package cqrs

import (
	context "context"
	endpoint "github.com/go-kit/kit/endpoint"
	grpc "github.com/go-kit/kit/transport/grpc"
	endpointx "github.com/go-leo/leo/v3/endpointx"
	metadatax "github.com/go-leo/leo/v3/metadatax"
	stainx "github.com/go-leo/leo/v3/stainx"
	grpctransportx "github.com/go-leo/leo/v3/transportx/grpctransportx"
	grpc1 "google.golang.org/grpc"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	io "io"
)

func NewCqrsGrpcServer(svc CqrsService, opts ...grpctransportx.ServerOption) CqrsServer {
	options := grpctransportx.NewServerOptions(opts...)
	endpoints := &cqrsServerEndpoints{
		svc:         svc,
		middlewares: options.Middlewares(),
	}
	transports := &cqrsGrpcServerTransports{
		endpoints: endpoints,
	}
	return &cqrsGrpcServer{
		command:      transports.Command(),
		commandEmpty: transports.CommandEmpty(),
		query:        transports.Query(),
		queryOneOf:   transports.QueryOneOf(),
	}
}

func NewCqrsGrpcClient(target string, opts ...grpctransportx.ClientOption) CqrsService {
	options := grpctransportx.NewClientOptions(opts...)
	transports := &cqrsGrpcClientTransports{
		dialOptions:   options.DialOptions(),
		clientOptions: options.ClientTransportOptions(),
		middlewares:   options.Middlewares(),
	}
	factories := &cqrsFactories{
		transports: transports,
	}
	endpointer := &cqrsEndpointers{
		target:    target,
		builder:   options.Builder(),
		factories: factories,
		logger:    options.Logger(),
		options:   options.EndpointerOptions(),
	}
	balancers := &cqrsBalancers{
		factory:    options.BalancerFactory(),
		endpointer: endpointer,
	}
	endpoints := &cqrsClientEndpoints{
		balancers: balancers,
	}
	return &cqrsClientService{
		endpoints:     endpoints,
		transportName: grpctransportx.GrpcClient,
	}
}

type cqrsGrpcServerTransports struct {
	endpoints CqrsServerEndpoints
}

func (t *cqrsGrpcServerTransports) Command() grpc.Handler {
	return grpc.NewServer(
		t.endpoints.Command(context.TODO()),
		func(_ context.Context, v any) (any, error) { return v, nil },
		func(_ context.Context, v any) (any, error) { return v, nil },
		grpc.ServerBefore(grpctransportx.ServerEndpointInjector("/leo.example.cqrs.Cqrs/Command")),
		grpc.ServerBefore(grpctransportx.ServerTransportInjector),
		grpc.ServerBefore(metadatax.GrpcIncomingInjector),
		grpc.ServerBefore(stainx.GrpcIncomingInjector),
	)
}

func (t *cqrsGrpcServerTransports) CommandEmpty() grpc.Handler {
	return grpc.NewServer(
		t.endpoints.CommandEmpty(context.TODO()),
		func(_ context.Context, v any) (any, error) { return v, nil },
		func(_ context.Context, v any) (any, error) { return v, nil },
		grpc.ServerBefore(grpctransportx.ServerEndpointInjector("/leo.example.cqrs.Cqrs/CommandEmpty")),
		grpc.ServerBefore(grpctransportx.ServerTransportInjector),
		grpc.ServerBefore(metadatax.GrpcIncomingInjector),
		grpc.ServerBefore(stainx.GrpcIncomingInjector),
	)
}

func (t *cqrsGrpcServerTransports) Query() grpc.Handler {
	return grpc.NewServer(
		t.endpoints.Query(context.TODO()),
		func(_ context.Context, v any) (any, error) { return v, nil },
		func(_ context.Context, v any) (any, error) { return v, nil },
		grpc.ServerBefore(grpctransportx.ServerEndpointInjector("/leo.example.cqrs.Cqrs/Query")),
		grpc.ServerBefore(grpctransportx.ServerTransportInjector),
		grpc.ServerBefore(metadatax.GrpcIncomingInjector),
		grpc.ServerBefore(stainx.GrpcIncomingInjector),
	)
}

func (t *cqrsGrpcServerTransports) QueryOneOf() grpc.Handler {
	return grpc.NewServer(
		t.endpoints.QueryOneOf(context.TODO()),
		func(_ context.Context, v any) (any, error) { return v, nil },
		func(_ context.Context, v any) (any, error) { return v, nil },
		grpc.ServerBefore(grpctransportx.ServerEndpointInjector("/leo.example.cqrs.Cqrs/QueryOneOf")),
		grpc.ServerBefore(grpctransportx.ServerTransportInjector),
		grpc.ServerBefore(metadatax.GrpcIncomingInjector),
		grpc.ServerBefore(stainx.GrpcIncomingInjector),
	)
}

type cqrsGrpcServer struct {
	command      grpc.Handler
	commandEmpty grpc.Handler
	query        grpc.Handler
	queryOneOf   grpc.Handler
}

func (s *cqrsGrpcServer) Command(ctx context.Context, request *CommandRequest) (*CommandReply, error) {
	ctx, rep, err := s.command.ServeGRPC(ctx, request)
	if err != nil {
		return nil, err
	}
	_ = ctx
	return rep.(*CommandReply), nil
}

func (s *cqrsGrpcServer) CommandEmpty(ctx context.Context, request *CommandRequest) (*emptypb.Empty, error) {
	ctx, rep, err := s.commandEmpty.ServeGRPC(ctx, request)
	if err != nil {
		return nil, err
	}
	_ = ctx
	return rep.(*emptypb.Empty), nil
}

func (s *cqrsGrpcServer) Query(ctx context.Context, request *QueryRequest) (*QueryReply, error) {
	ctx, rep, err := s.query.ServeGRPC(ctx, request)
	if err != nil {
		return nil, err
	}
	_ = ctx
	return rep.(*QueryReply), nil
}

func (s *cqrsGrpcServer) QueryOneOf(ctx context.Context, request *QueryRequest) (*QueryOneOfReply, error) {
	ctx, rep, err := s.queryOneOf.ServeGRPC(ctx, request)
	if err != nil {
		return nil, err
	}
	_ = ctx
	return rep.(*QueryOneOfReply), nil
}

func (s *cqrsGrpcServer) mustEmbedUnimplementedCqrsServer() {}

type cqrsGrpcClientTransports struct {
	dialOptions   []grpc1.DialOption
	clientOptions []grpc.ClientOption
	middlewares   []endpoint.Middleware
}

func (t *cqrsGrpcClientTransports) Command(ctx context.Context, instance string) (endpoint.Endpoint, io.Closer, error) {
	conn, err := grpc1.NewClient(instance, t.dialOptions...)
	if err != nil {
		return nil, nil, err
	}
	opts := []grpc.ClientOption{
		grpc.ClientBefore(metadatax.GrpcOutgoingInjector),
		grpc.ClientBefore(stainx.GrpcOutgoingInjector),
	}
	opts = append(opts, t.clientOptions...)
	client := grpc.NewClient(
		conn,
		"leo.example.cqrs.Cqrs",
		"Command",
		func(_ context.Context, v any) (any, error) { return v, nil },
		func(_ context.Context, v any) (any, error) { return v, nil },
		CommandReply{},
		opts...)
	return endpointx.Chain(client.Endpoint(), t.middlewares...), conn, nil
}

func (t *cqrsGrpcClientTransports) CommandEmpty(ctx context.Context, instance string) (endpoint.Endpoint, io.Closer, error) {
	conn, err := grpc1.NewClient(instance, t.dialOptions...)
	if err != nil {
		return nil, nil, err
	}
	opts := []grpc.ClientOption{
		grpc.ClientBefore(metadatax.GrpcOutgoingInjector),
		grpc.ClientBefore(stainx.GrpcOutgoingInjector),
	}
	opts = append(opts, t.clientOptions...)
	client := grpc.NewClient(
		conn,
		"leo.example.cqrs.Cqrs",
		"CommandEmpty",
		func(_ context.Context, v any) (any, error) { return v, nil },
		func(_ context.Context, v any) (any, error) { return v, nil },
		emptypb.Empty{},
		opts...)
	return endpointx.Chain(client.Endpoint(), t.middlewares...), conn, nil
}

func (t *cqrsGrpcClientTransports) Query(ctx context.Context, instance string) (endpoint.Endpoint, io.Closer, error) {
	conn, err := grpc1.NewClient(instance, t.dialOptions...)
	if err != nil {
		return nil, nil, err
	}
	opts := []grpc.ClientOption{
		grpc.ClientBefore(metadatax.GrpcOutgoingInjector),
		grpc.ClientBefore(stainx.GrpcOutgoingInjector),
	}
	opts = append(opts, t.clientOptions...)
	client := grpc.NewClient(
		conn,
		"leo.example.cqrs.Cqrs",
		"Query",
		func(_ context.Context, v any) (any, error) { return v, nil },
		func(_ context.Context, v any) (any, error) { return v, nil },
		QueryReply{},
		opts...)
	return endpointx.Chain(client.Endpoint(), t.middlewares...), conn, nil
}

func (t *cqrsGrpcClientTransports) QueryOneOf(ctx context.Context, instance string) (endpoint.Endpoint, io.Closer, error) {
	conn, err := grpc1.NewClient(instance, t.dialOptions...)
	if err != nil {
		return nil, nil, err
	}
	opts := []grpc.ClientOption{
		grpc.ClientBefore(metadatax.GrpcOutgoingInjector),
		grpc.ClientBefore(stainx.GrpcOutgoingInjector),
	}
	opts = append(opts, t.clientOptions...)
	client := grpc.NewClient(
		conn,
		"leo.example.cqrs.Cqrs",
		"QueryOneOf",
		func(_ context.Context, v any) (any, error) { return v, nil },
		func(_ context.Context, v any) (any, error) { return v, nil },
		QueryOneOfReply{},
		opts...)
	return endpointx.Chain(client.Endpoint(), t.middlewares...), conn, nil
}
