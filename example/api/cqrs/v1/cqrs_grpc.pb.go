// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.3
// source: cqrs/v1/cqrs.proto

package cqrs

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Cqrs_Command_FullMethodName      = "/leo.example.cqrs.Cqrs/Command"
	Cqrs_CommandEmpty_FullMethodName = "/leo.example.cqrs.Cqrs/CommandEmpty"
	Cqrs_Query_FullMethodName        = "/leo.example.cqrs.Cqrs/Query"
	Cqrs_QueryOneOf_FullMethodName   = "/leo.example.cqrs.Cqrs/QueryOneOf"
)

// CqrsClient is the client API for Cqrs service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CqrsClient interface {
	// Command 是命令
	Command(ctx context.Context, in *CommandRequest, opts ...grpc.CallOption) (*CommandReply, error)
	// CommandEmpty 是命令
	CommandEmpty(ctx context.Context, in *CommandRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// Query 是查询
	Query(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*QueryReply, error)
	// QueryOneOf 是查询
	QueryOneOf(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*QueryOneOfReply, error)
}

type cqrsClient struct {
	cc grpc.ClientConnInterface
}

func NewCqrsClient(cc grpc.ClientConnInterface) CqrsClient {
	return &cqrsClient{cc}
}

func (c *cqrsClient) Command(ctx context.Context, in *CommandRequest, opts ...grpc.CallOption) (*CommandReply, error) {
	out := new(CommandReply)
	err := c.cc.Invoke(ctx, Cqrs_Command_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cqrsClient) CommandEmpty(ctx context.Context, in *CommandRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Cqrs_CommandEmpty_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cqrsClient) Query(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*QueryReply, error) {
	out := new(QueryReply)
	err := c.cc.Invoke(ctx, Cqrs_Query_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cqrsClient) QueryOneOf(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*QueryOneOfReply, error) {
	out := new(QueryOneOfReply)
	err := c.cc.Invoke(ctx, Cqrs_QueryOneOf_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CqrsServer is the server API for Cqrs service.
// All implementations must embed UnimplementedCqrsServer
// for forward compatibility
type CqrsServer interface {
	// Command 是命令
	Command(context.Context, *CommandRequest) (*CommandReply, error)
	// CommandEmpty 是命令
	CommandEmpty(context.Context, *CommandRequest) (*emptypb.Empty, error)
	// Query 是查询
	Query(context.Context, *QueryRequest) (*QueryReply, error)
	// QueryOneOf 是查询
	QueryOneOf(context.Context, *QueryRequest) (*QueryOneOfReply, error)
	mustEmbedUnimplementedCqrsServer()
}

// UnimplementedCqrsServer must be embedded to have forward compatible implementations.
type UnimplementedCqrsServer struct {
}

func (UnimplementedCqrsServer) Command(context.Context, *CommandRequest) (*CommandReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Command not implemented")
}
func (UnimplementedCqrsServer) CommandEmpty(context.Context, *CommandRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommandEmpty not implemented")
}
func (UnimplementedCqrsServer) Query(context.Context, *QueryRequest) (*QueryReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Query not implemented")
}
func (UnimplementedCqrsServer) QueryOneOf(context.Context, *QueryRequest) (*QueryOneOfReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryOneOf not implemented")
}
func (UnimplementedCqrsServer) mustEmbedUnimplementedCqrsServer() {}

// UnsafeCqrsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CqrsServer will
// result in compilation errors.
type UnsafeCqrsServer interface {
	mustEmbedUnimplementedCqrsServer()
}

func RegisterCqrsServer(s grpc.ServiceRegistrar, srv CqrsServer) {
	s.RegisterService(&Cqrs_ServiceDesc, srv)
}

func _Cqrs_Command_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CqrsServer).Command(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cqrs_Command_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CqrsServer).Command(ctx, req.(*CommandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cqrs_CommandEmpty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CqrsServer).CommandEmpty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cqrs_CommandEmpty_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CqrsServer).CommandEmpty(ctx, req.(*CommandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cqrs_Query_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CqrsServer).Query(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cqrs_Query_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CqrsServer).Query(ctx, req.(*QueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Cqrs_QueryOneOf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CqrsServer).QueryOneOf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Cqrs_QueryOneOf_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CqrsServer).QueryOneOf(ctx, req.(*QueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Cqrs_ServiceDesc is the grpc.ServiceDesc for Cqrs service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Cqrs_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "leo.example.cqrs.Cqrs",
	HandlerType: (*CqrsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Command",
			Handler:    _Cqrs_Command_Handler,
		},
		{
			MethodName: "CommandEmpty",
			Handler:    _Cqrs_CommandEmpty_Handler,
		},
		{
			MethodName: "Query",
			Handler:    _Cqrs_Query_Handler,
		},
		{
			MethodName: "QueryOneOf",
			Handler:    _Cqrs_QueryOneOf_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cqrs/v1/cqrs.proto",
}
