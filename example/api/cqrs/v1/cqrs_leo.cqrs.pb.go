// Code generated by protoc-gen-go-leo. DO NOT EDIT.

package cqrs

import (
	context "context"
	cqrs "github.com/go-leo/leo/v3/cqrs"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

func NewCqrsCqrsService[
	CommandCommandType CommandCommand,
	CommandEmptyCommandType CommandEmptyCommand,
	QueryQueryType QueryQuery, QueryResultType QueryResult,
	QueryOneOfQueryType QueryOneOfQuery, QueryOneOfResultType QueryOneOfResult,
](
	commandHandler cqrs.CommandHandler[CommandCommandType],
	commandEmptyHandler cqrs.CommandHandler[CommandEmptyCommandType],
	queryHandler cqrs.QueryHandler[QueryQueryType, QueryResultType],
	queryOneOfHandler cqrs.QueryHandler[QueryOneOfQueryType, QueryOneOfResultType],
) (CqrsService, error) {
	var bus cqrs.SampleBus
	if err := bus.RegisterCommand(commandHandler); err != nil {
		return nil, err
	}
	if err := bus.RegisterCommand(commandEmptyHandler); err != nil {
		return nil, err
	}
	if err := bus.RegisterQuery(queryHandler); err != nil {
		return nil, err
	}
	if err := bus.RegisterQuery(queryOneOfHandler); err != nil {
		return nil, err
	}
	return &cqrsCqrsService[
		CommandCommandType,
		CommandEmptyCommandType,
		QueryQueryType, QueryResultType,
		QueryOneOfQueryType, QueryOneOfResultType,
	]{bus: &bus}, nil
}

type cqrsCqrsService[
	CommandCommandType CommandCommand,
	CommandEmptyCommandType CommandEmptyCommand,
	QueryQueryType QueryQuery, QueryResultType QueryResult,
	QueryOneOfQueryType QueryOneOfQuery, QueryOneOfResultType QueryOneOfResult,
] struct {
	bus cqrs.Bus
}

func (svc *cqrsCqrsService[
	CommandCommandType,
	CommandEmptyCommandType,
	QueryQueryType, QueryResultType,
	QueryOneOfQueryType, QueryOneOfResultType,
]) Command(ctx context.Context, request *CommandRequest) (*CommandReply, error) {
	var command CommandCommandType
	cmd, ctx, err := command.From(ctx, request)
	if err != nil {
		return nil, err
	}
	if err := svc.bus.Exec(ctx, cmd); err != nil {
		return nil, err
	}
	return new(CommandReply), nil
}

func (svc *cqrsCqrsService[
	CommandCommandType,
	CommandEmptyCommandType,
	QueryQueryType, QueryResultType,
	QueryOneOfQueryType, QueryOneOfResultType,
]) CommandEmpty(ctx context.Context, request *CommandRequest) (*emptypb.Empty, error) {
	var command CommandEmptyCommandType
	cmd, ctx, err := command.From(ctx, request)
	if err != nil {
		return nil, err
	}
	if err := svc.bus.Exec(ctx, cmd); err != nil {
		return nil, err
	}
	return new(emptypb.Empty), nil
}

func (svc *cqrsCqrsService[
	CommandCommandType,
	CommandEmptyCommandType,
	QueryQueryType, QueryResultType,
	QueryOneOfQueryType, QueryOneOfResultType,
]) Query(ctx context.Context, request *QueryRequest) (*QueryReply, error) {
	var query QueryQueryType
	q, ctx, err := query.From(ctx, request)
	if err != nil {
		return nil, err
	}
	r, err := svc.bus.Query(ctx, q)
	if err != nil {
		return nil, err
	}
	return r.(QueryResultType).To(ctx)
}

func (svc *cqrsCqrsService[
	CommandCommandType,
	CommandEmptyCommandType,
	QueryQueryType, QueryResultType,
	QueryOneOfQueryType, QueryOneOfResultType,
]) QueryOneOf(ctx context.Context, request *QueryRequest) (*QueryOneOfReply, error) {
	var query QueryOneOfQueryType
	q, ctx, err := query.From(ctx, request)
	if err != nil {
		return nil, err
	}
	r, err := svc.bus.Query(ctx, q)
	if err != nil {
		return nil, err
	}
	return r.(QueryOneOfResultType).To(ctx)
}

type (
	CommandCommand interface {
		isCommandCommand_Kind()
		From(context.Context, *CommandRequest) (CommandCommand, context.Context, error)
	}
	UnimplementedCommandCommand struct{}

	CommandEmptyCommand interface {
		isCommandEmptyCommand_Kind()
		From(context.Context, *CommandRequest) (CommandEmptyCommand, context.Context, error)
	}
	UnimplementedCommandEmptyCommand struct{}
)

type (
	QueryQuery interface {
		isQueryQuery_Kind()
		From(context.Context, *QueryRequest) (QueryQuery, context.Context, error)
	}
	QueryResult interface {
		isQueryResult_Kind()
		To(context.Context) (*QueryReply, error)
	}
	UnimplementedQueryQuery  struct{}
	UnimplementedQueryResult struct{}

	QueryOneOfQuery interface {
		isQueryOneOfQuery_Kind()
		From(context.Context, *QueryRequest) (QueryOneOfQuery, context.Context, error)
	}
	QueryOneOfResult interface {
		isQueryOneOfResult_Kind()
		To(context.Context) (*QueryOneOfReply, error)
	}
	UnimplementedQueryOneOfQuery  struct{}
	UnimplementedQueryOneOfResult struct{}
)

func (UnimplementedCommandCommand) isCommandCommand_Kind() {}
func (UnimplementedCommandCommand) From(context.Context, *CommandRequest) (CommandCommand, context.Context, error) {
	panic("implement me")
	return nil, nil, nil
}
func (UnimplementedCommandEmptyCommand) isCommandEmptyCommand_Kind() {}
func (UnimplementedCommandEmptyCommand) From(context.Context, *CommandRequest) (CommandEmptyCommand, context.Context, error) {
	panic("implement me")
	return nil, nil, nil
}
func (UnimplementedQueryQuery) isQueryQuery_Kind() {}
func (UnimplementedQueryQuery) From(context.Context, *QueryRequest) (QueryQuery, context.Context, error) {
	panic("implement me")
	return nil, nil, nil
}
func (UnimplementedQueryResult) isQueryResult_Kind() {}
func (UnimplementedQueryResult) To(context.Context) (*QueryReply, error) {
	panic("implement me")
	return nil, nil
}

func (UnimplementedQueryOneOfQuery) isQueryOneOfQuery_Kind() {}
func (UnimplementedQueryOneOfQuery) From(context.Context, *QueryRequest) (QueryOneOfQuery, context.Context, error) {
	panic("implement me")
	return nil, nil, nil
}
func (UnimplementedQueryOneOfResult) isQueryOneOfResult_Kind() {}
func (UnimplementedQueryOneOfResult) To(context.Context) (*QueryOneOfReply, error) {
	panic("implement me")
	return nil, nil
}

// cqrs/v1/cq/command_leo.query.pb.go
// cqrs/v1/cq/command_empty_leo.query.pb.go
// cqrs/v1/cq/query_leo.query.pb.go
// cqrs/v1/cq/query_one_of_leo.query.pb.go
