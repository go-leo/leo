// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package cqrs

import (
	context "context"
	endpoint "github.com/go-kit/kit/endpoint"
	grpc "github.com/go-kit/kit/transport/grpc"
	endpointx "github.com/go-leo/leo/v3/endpointx"
	grpc1 "google.golang.org/grpc"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

type cQRSGRPCServer struct {
	createUser grpc.Handler

	findUser grpc.Handler
}

func (s *cQRSGRPCServer) CreateUser(ctx context.Context, request *CreateUserRequest) (*emptypb.Empty, error) {
	ctx, rep, err := s.createUser.ServeGRPC(ctx, request)
	if err != nil {
		return nil, err
	}
	_ = ctx
	return rep.(*emptypb.Empty), nil
}

func (s *cQRSGRPCServer) FindUser(ctx context.Context, request *FindUserRequest) (*GetUserResponse, error) {
	ctx, rep, err := s.findUser.ServeGRPC(ctx, request)
	if err != nil {
		return nil, err
	}
	_ = ctx
	return rep.(*GetUserResponse), nil
}

func NewCQRSGRPCServer(
	endpoints interface {
		CreateUser() endpoint.Endpoint
		FindUser() endpoint.Endpoint
	},
	opts []grpc.ServerOption,
	middlewares ...endpoint.Middleware,
) interface {
	CreateUser(ctx context.Context, request *CreateUserRequest) (*emptypb.Empty, error)
	FindUser(ctx context.Context, request *FindUserRequest) (*GetUserResponse, error)
} {
	return &cQRSGRPCServer{
		createUser: grpc.NewServer(
			endpointx.Chain(endpoints.CreateUser(), middlewares...),
			func(_ context.Context, v any) (any, error) { return v, nil },
			func(_ context.Context, v any) (any, error) { return v, nil },
			opts...,
		),
		findUser: grpc.NewServer(
			endpointx.Chain(endpoints.FindUser(), middlewares...),
			func(_ context.Context, v any) (any, error) { return v, nil },
			func(_ context.Context, v any) (any, error) { return v, nil },
			opts...,
		),
	}
}

type cQRSGRPCClient struct {
	createUser endpoint.Endpoint
	findUser   endpoint.Endpoint
}

func (c *cQRSGRPCClient) CreateUser(ctx context.Context, request *CreateUserRequest) (*emptypb.Empty, error) {
	rep, err := c.createUser(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*emptypb.Empty), nil
}

func (c *cQRSGRPCClient) FindUser(ctx context.Context, request *FindUserRequest) (*GetUserResponse, error) {
	rep, err := c.findUser(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*GetUserResponse), nil
}

func NewCQRSGRPCClient(
	conn *grpc1.ClientConn,
	opts []grpc.ClientOption,
	middlewares ...endpoint.Middleware,
) interface {
	CreateUser(ctx context.Context, request *CreateUserRequest) (*emptypb.Empty, error)
	FindUser(ctx context.Context, request *FindUserRequest) (*GetUserResponse, error)
} {
	return &cQRSGRPCClient{
		createUser: endpointx.Chain(
			grpc.NewClient(
				conn,
				"pb.CQRS",
				"CreateUser",
				func(_ context.Context, v any) (any, error) { return v, nil },
				func(_ context.Context, v any) (any, error) { return v, nil },
				emptypb.Empty{},
				opts...,
			).Endpoint(),
			middlewares...),
		findUser: endpointx.Chain(
			grpc.NewClient(
				conn,
				"pb.CQRS",
				"FindUser",
				func(_ context.Context, v any) (any, error) { return v, nil },
				func(_ context.Context, v any) (any, error) { return v, nil },
				GetUserResponse{},
				opts...,
			).Endpoint(),
			middlewares...),
	}
}
