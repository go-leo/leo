// Code generated by protoc-gen-leo-grpc. DO NOT EDIT.

package cqrs

import (
	context "context"
	endpoint "github.com/go-kit/kit/endpoint"
	grpc "github.com/go-kit/kit/transport/grpc"
	errorx "github.com/go-leo/gox/errorx"
	endpointx "github.com/go-leo/leo/v3/endpointx"
	statusx "github.com/go-leo/leo/v3/statusx"
	transportx "github.com/go-leo/leo/v3/transportx"
	grpcx "github.com/go-leo/leo/v3/transportx/grpcx"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// =========================== grpc server ===========================

type CQRSGrpcServerTransports interface {
	CreateUser() *grpc.Server
	FindUser() *grpc.Server
}

type cQRSGrpcServerTransports struct {
	createUser *grpc.Server
	findUser   *grpc.Server
}

func (t *cQRSGrpcServerTransports) CreateUser() *grpc.Server {
	return t.createUser
}

func (t *cQRSGrpcServerTransports) FindUser() *grpc.Server {
	return t.findUser
}

func newCQRSGrpcServerTransports(endpoints CQRSEndpoints) CQRSGrpcServerTransports {
	return &cQRSGrpcServerTransports{
		createUser: _CQRS_CreateUser_GrpcServer_Transport(endpoints),
		findUser:   _CQRS_FindUser_GrpcServer_Transport(endpoints),
	}
}

type cQRSGrpcServer struct {
	createUser *grpc.Server
	findUser   *grpc.Server
}

func (s *cQRSGrpcServer) CreateUser(ctx context.Context, request *CreateUserRequest) (*emptypb.Empty, error) {
	ctx, rep, err := s.createUser.ServeGRPC(ctx, request)
	if err != nil {
		return nil, err
	}
	_ = ctx
	return rep.(*emptypb.Empty), nil
}

func (s *cQRSGrpcServer) FindUser(ctx context.Context, request *FindUserRequest) (*GetUserResponse, error) {
	ctx, rep, err := s.findUser.ServeGRPC(ctx, request)
	if err != nil {
		return nil, err
	}
	_ = ctx
	return rep.(*GetUserResponse), nil
}

func NewCQRSGrpcServer(svc CQRSService, middlewares ...endpoint.Middleware) CQRSService {
	endpoints := newCQRSServerEndpoints(svc, middlewares...)
	transports := newCQRSGrpcServerTransports(endpoints)
	return &cQRSGrpcServer{
		createUser: transports.CreateUser(),
		findUser:   transports.FindUser(),
	}
}

// =========================== grpc client ===========================

type cQRSGrpcClientTransports struct {
	createUser transportx.ClientTransport
	findUser   transportx.ClientTransport
}

func (t *cQRSGrpcClientTransports) CreateUser() transportx.ClientTransport {
	return t.createUser
}

func (t *cQRSGrpcClientTransports) FindUser() transportx.ClientTransport {
	return t.findUser
}

func NewCQRSGrpcClientTransports(target string, options ...transportx.ClientTransportOption) (CQRSClientTransports, error) {
	t := &cQRSGrpcClientTransports{}
	var err error
	t.createUser, err = errorx.Break[transportx.ClientTransport](err)(_CQRS_CreateUser_GrpcClient_Transport(target, options...))
	t.findUser, err = errorx.Break[transportx.ClientTransport](err)(_CQRS_FindUser_GrpcClient_Transport(target, options...))
	return t, err
}

type cQRSGrpcClient struct {
	endpoints CQRSEndpoints
}

func (c *cQRSGrpcClient) CreateUser(ctx context.Context, request *CreateUserRequest) (*emptypb.Empty, error) {
	ctx = endpointx.InjectName(ctx, "/pb.CQRS/CreateUser")
	ctx = transportx.InjectName(ctx, grpcx.GrpcClient)
	rep, err := c.endpoints.CreateUser(ctx)(ctx, request)
	if err != nil {
		return nil, statusx.FromGrpcError(err)
	}
	return rep.(*emptypb.Empty), nil
}

func (c *cQRSGrpcClient) FindUser(ctx context.Context, request *FindUserRequest) (*GetUserResponse, error) {
	ctx = endpointx.InjectName(ctx, "/pb.CQRS/FindUser")
	ctx = transportx.InjectName(ctx, grpcx.GrpcClient)
	rep, err := c.endpoints.FindUser(ctx)(ctx, request)
	if err != nil {
		return nil, statusx.FromGrpcError(err)
	}
	return rep.(*GetUserResponse), nil
}

func NewCQRSGrpcClient(transports CQRSClientTransports, middlewares ...endpoint.Middleware) CQRSService {
	endpoints := newCQRSClientEndpoints(transports, middlewares...)
	return &cQRSGrpcClient{endpoints: endpoints}
}

// =========================== grpc transport ===========================

func _CQRS_CreateUser_GrpcServer_Transport(endpoints CQRSEndpoints) *grpc.Server {
	return grpc.NewServer(
		endpoints.CreateUser(context.TODO()),
		func(_ context.Context, v any) (any, error) { return v, nil },
		func(_ context.Context, v any) (any, error) { return v, nil },
		grpc.ServerBefore(grpcx.ServerEndpointInjector("/pb.CQRS/CreateUser")),
		grpc.ServerBefore(grpcx.ServerTransportInjector),
		grpc.ServerBefore(grpcx.IncomingMetadataInjector),
	)
}

func _CQRS_CreateUser_GrpcClient_Transport(target string, options ...transportx.ClientTransportOption) func() (transportx.ClientTransport, error) {
	return func() (transportx.ClientTransport, error) {
		return transportx.NewClientTransport(
			target,
			grpcx.ClientFactory(
				"pb.CQRS",
				"CreateUser",
				func(_ context.Context, v any) (any, error) { return v, nil },
				func(_ context.Context, v any) (any, error) { return v, nil },
				emptypb.Empty{},
				grpc.ClientBefore(grpcx.OutgoingMetadataInjector),
			),
			options...,
		)
	}
}

func _CQRS_FindUser_GrpcServer_Transport(endpoints CQRSEndpoints) *grpc.Server {
	return grpc.NewServer(
		endpoints.FindUser(context.TODO()),
		func(_ context.Context, v any) (any, error) { return v, nil },
		func(_ context.Context, v any) (any, error) { return v, nil },
		grpc.ServerBefore(grpcx.ServerEndpointInjector("/pb.CQRS/FindUser")),
		grpc.ServerBefore(grpcx.ServerTransportInjector),
		grpc.ServerBefore(grpcx.IncomingMetadataInjector),
	)
}

func _CQRS_FindUser_GrpcClient_Transport(target string, options ...transportx.ClientTransportOption) func() (transportx.ClientTransport, error) {
	return func() (transportx.ClientTransport, error) {
		return transportx.NewClientTransport(
			target,
			grpcx.ClientFactory(
				"pb.CQRS",
				"FindUser",
				func(_ context.Context, v any) (any, error) { return v, nil },
				func(_ context.Context, v any) (any, error) { return v, nil },
				GetUserResponse{},
				grpc.ClientBefore(grpcx.OutgoingMetadataInjector),
			),
			options...,
		)
	}
}
