// Code generated by protoc-gen-leo-grpc. DO NOT EDIT.

package cqrs

import (
	context "context"
	endpoint "github.com/go-kit/kit/endpoint"
	grpc "github.com/go-kit/kit/transport/grpc"
	endpointx "github.com/go-leo/leo/v3/endpointx"
	statusx "github.com/go-leo/leo/v3/statusx"
	transportx "github.com/go-leo/leo/v3/transportx"
	grpcx "github.com/go-leo/leo/v3/transportx/grpcx"
	grpc1 "google.golang.org/grpc"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	io "io"
)

// =========================== grpc server ===========================

type CQRSGrpcServerTransports interface {
	CreateUser() *grpc.Server
	FindUser() *grpc.Server
}

type cQRSGrpcServerTransports struct {
	createUser *grpc.Server
	findUser   *grpc.Server
}

func (t *cQRSGrpcServerTransports) CreateUser() *grpc.Server {
	return t.createUser
}

func (t *cQRSGrpcServerTransports) FindUser() *grpc.Server {
	return t.findUser
}

func newCQRSGrpcServerTransports(endpoints CQRSEndpoints) CQRSGrpcServerTransports {
	return &cQRSGrpcServerTransports{
		createUser: _CQRS_CreateUser_GrpcServer_Transport(endpoints),
		findUser:   _CQRS_FindUser_GrpcServer_Transport(endpoints),
	}
}

type cQRSGrpcServer struct {
	createUser *grpc.Server
	findUser   *grpc.Server
}

func (s *cQRSGrpcServer) CreateUser(ctx context.Context, request *CreateUserRequest) (*emptypb.Empty, error) {
	ctx, rep, err := s.createUser.ServeGRPC(ctx, request)
	if err != nil {
		return nil, err
	}
	_ = ctx
	return rep.(*emptypb.Empty), nil
}

func (s *cQRSGrpcServer) FindUser(ctx context.Context, request *FindUserRequest) (*GetUserResponse, error) {
	ctx, rep, err := s.findUser.ServeGRPC(ctx, request)
	if err != nil {
		return nil, err
	}
	_ = ctx
	return rep.(*GetUserResponse), nil
}

func NewCQRSGrpcServer(svc CQRSService, middlewares ...endpoint.Middleware) CQRSService {
	endpoints := newCQRSServerEndpoints(svc, middlewares...)
	transports := newCQRSGrpcServerTransports(endpoints)
	return &cQRSGrpcServer{
		createUser: transports.CreateUser(),
		findUser:   transports.FindUser(),
	}
}

// =========================== grpc client ===========================

type cQRSGrpcClientTransports struct {
	dialOptions   []grpc1.DialOption
	clientOptions []grpc.ClientOption
	middlewares   []endpoint.Middleware
}

func (t *cQRSGrpcClientTransports) CreateUser(ctx context.Context, instance string) (endpoint.Endpoint, io.Closer, error) {
	conn, err := grpc1.NewClient(instance, t.dialOptions...)
	if err != nil {
		return nil, nil, err
	}
	opts := []grpc.ClientOption{
		grpc.ClientBefore(grpcx.OutgoingMetadataInjector),
		grpc.ClientBefore(grpcx.OutgoingStain),
	}
	opts = append(opts, t.clientOptions...)
	client := grpc.NewClient(
		conn,
		"pb.CQRS",
		"CreateUser",
		func(_ context.Context, v any) (any, error) { return v, nil },
		func(_ context.Context, v any) (any, error) { return v, nil },
		emptypb.Empty{},
		opts...)
	return endpointx.Chain(client.Endpoint(), t.middlewares...), conn, nil
}

func (t *cQRSGrpcClientTransports) FindUser(ctx context.Context, instance string) (endpoint.Endpoint, io.Closer, error) {
	conn, err := grpc1.NewClient(instance, t.dialOptions...)
	if err != nil {
		return nil, nil, err
	}
	opts := []grpc.ClientOption{
		grpc.ClientBefore(grpcx.OutgoingMetadataInjector),
		grpc.ClientBefore(grpcx.OutgoingStain),
	}
	opts = append(opts, t.clientOptions...)
	client := grpc.NewClient(
		conn,
		"pb.CQRS",
		"FindUser",
		func(_ context.Context, v any) (any, error) { return v, nil },
		func(_ context.Context, v any) (any, error) { return v, nil },
		GetUserResponse{},
		opts...)
	return endpointx.Chain(client.Endpoint(), t.middlewares...), conn, nil
}

func newCQRSGrpcClientTransports(
	dialOptions []grpc1.DialOption,
	clientOptions []grpc.ClientOption,
	middlewares []endpoint.Middleware,
) CQRSClientTransports {
	return &cQRSGrpcClientTransports{
		dialOptions:   dialOptions,
		clientOptions: clientOptions,
		middlewares:   middlewares,
	}
}

type cQRSGrpcClient struct {
	balancers CQRSBalancers
}

func (c *cQRSGrpcClient) CreateUser(ctx context.Context, request *CreateUserRequest) (*emptypb.Empty, error) {
	ctx = endpointx.InjectName(ctx, "/pb.CQRS/CreateUser")
	ctx = transportx.InjectName(ctx, grpcx.GrpcClient)
	balancer, err := c.balancers.CreateUser(ctx)
	if err != nil {
		return nil, err
	}
	endpoint, err := balancer.Endpoint()
	if err != nil {
		return nil, err
	}
	rep, err := endpoint(ctx, request)
	if err != nil {
		return nil, statusx.FromGrpcError(err)
	}
	return rep.(*emptypb.Empty), nil
}

func (c *cQRSGrpcClient) FindUser(ctx context.Context, request *FindUserRequest) (*GetUserResponse, error) {
	ctx = endpointx.InjectName(ctx, "/pb.CQRS/FindUser")
	ctx = transportx.InjectName(ctx, grpcx.GrpcClient)
	balancer, err := c.balancers.FindUser(ctx)
	if err != nil {
		return nil, err
	}
	endpoint, err := balancer.Endpoint()
	if err != nil {
		return nil, err
	}
	rep, err := endpoint(ctx, request)
	if err != nil {
		return nil, statusx.FromGrpcError(err)
	}
	return rep.(*GetUserResponse), nil
}

func NewCQRSGrpcClient(target string, opts ...grpcx.ClientOption) CQRSService {
	options := grpcx.NewClientOptions(opts...)
	transports := newCQRSGrpcClientTransports(options.DialOptions(), options.ClientTransportOptions(), options.Middlewares())
	factories := newCQRSFactories(transports)
	endpointers := newCQRSEndpointers(target, options.InstancerFactory(), factories, options.Logger(), options.EndpointerOptions()...)
	balancers := newCQRSBalancers(options.BalancerFactory(), endpointers)
	return &cQRSHttpClient{balancers: balancers}
}

// =========================== grpc transport ===========================

func _CQRS_CreateUser_GrpcServer_Transport(endpoints CQRSEndpoints) *grpc.Server {
	return grpc.NewServer(
		endpoints.CreateUser(context.TODO()),
		func(_ context.Context, v any) (any, error) { return v, nil },
		func(_ context.Context, v any) (any, error) { return v, nil },
		grpc.ServerBefore(grpcx.ServerEndpointInjector("/pb.CQRS/CreateUser")),
		grpc.ServerBefore(grpcx.ServerTransportInjector),
		grpc.ServerBefore(grpcx.IncomingMetadataInjector),
	)
}

func _CQRS_FindUser_GrpcServer_Transport(endpoints CQRSEndpoints) *grpc.Server {
	return grpc.NewServer(
		endpoints.FindUser(context.TODO()),
		func(_ context.Context, v any) (any, error) { return v, nil },
		func(_ context.Context, v any) (any, error) { return v, nil },
		grpc.ServerBefore(grpcx.ServerEndpointInjector("/pb.CQRS/FindUser")),
		grpc.ServerBefore(grpcx.ServerTransportInjector),
		grpc.ServerBefore(grpcx.IncomingMetadataInjector),
	)
}
