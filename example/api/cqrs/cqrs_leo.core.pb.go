// Code generated by protoc-gen-leo-core. DO NOT EDIT.

package cqrs

import (
	context "context"
	endpoint "github.com/go-kit/kit/endpoint"
	sd "github.com/go-kit/kit/sd"
	lb "github.com/go-kit/kit/sd/lb"
	log "github.com/go-kit/log"
	lazyloadx "github.com/go-leo/gox/syncx/lazyloadx"
	endpointx "github.com/go-leo/leo/v3/endpointx"
	sdx "github.com/go-leo/leo/v3/sdx"
	lbx "github.com/go-leo/leo/v3/sdx/lbx"
	stainx "github.com/go-leo/leo/v3/sdx/stainx"
	statusx "github.com/go-leo/leo/v3/statusx"
	transportx "github.com/go-leo/leo/v3/transportx"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	io "io"
)

type CQRSService interface {
	CreateUser(ctx context.Context, request *CreateUserRequest) (*emptypb.Empty, error)
	FindUser(ctx context.Context, request *FindUserRequest) (*GetUserResponse, error)
}

type CQRSEndpoints interface {
	CreateUser(ctx context.Context) endpoint.Endpoint
	FindUser(ctx context.Context) endpoint.Endpoint
}

type CQRSClientEndpoints interface {
	CreateUser(ctx context.Context) (endpoint.Endpoint, error)
	FindUser(ctx context.Context) (endpoint.Endpoint, error)
}

type CQRSClientTransports interface {
	CreateUser(ctx context.Context, instance string) (endpoint.Endpoint, io.Closer, error)
	FindUser(ctx context.Context, instance string) (endpoint.Endpoint, io.Closer, error)
}

type CQRSFactories interface {
	CreateUser(ctx context.Context) sd.Factory
	FindUser(ctx context.Context) sd.Factory
}

type CQRSEndpointers interface {
	CreateUser(ctx context.Context, color string) (sd.Endpointer, error)
	FindUser(ctx context.Context, color string) (sd.Endpointer, error)
}

type CQRSBalancers interface {
	CreateUser(ctx context.Context) (lb.Balancer, error)
	FindUser(ctx context.Context) (lb.Balancer, error)
}

type cQRSServerEndpoints struct {
	svc         CQRSService
	middlewares []endpoint.Middleware
}

func (e *cQRSServerEndpoints) CreateUser(context.Context) endpoint.Endpoint {
	component := func(ctx context.Context, request any) (any, error) {
		return e.svc.CreateUser(ctx, request.(*CreateUserRequest))
	}
	return endpointx.Chain(component, e.middlewares...)
}
func (e *cQRSServerEndpoints) FindUser(context.Context) endpoint.Endpoint {
	component := func(ctx context.Context, request any) (any, error) {
		return e.svc.FindUser(ctx, request.(*FindUserRequest))
	}
	return endpointx.Chain(component, e.middlewares...)
}
func newCQRSServerEndpoints(svc CQRSService, middlewares ...endpoint.Middleware) CQRSEndpoints {
	return &cQRSServerEndpoints{svc: svc, middlewares: middlewares}
}

type cQRSClientEndpoints struct {
	balancers CQRSBalancers
}

func (e *cQRSClientEndpoints) CreateUser(ctx context.Context) (endpoint.Endpoint, error) {
	balancer, err := e.balancers.CreateUser(ctx)
	if err != nil {
		return nil, err
	}
	return balancer.Endpoint()
}
func (e *cQRSClientEndpoints) FindUser(ctx context.Context) (endpoint.Endpoint, error) {
	balancer, err := e.balancers.FindUser(ctx)
	if err != nil {
		return nil, err
	}
	return balancer.Endpoint()
}
func newCQRSClientEndpoints(
	target string,
	transports CQRSClientTransports,
	instancerFactory sdx.InstancerFactory,
	endpointerOptions []sd.EndpointerOption,
	balancerFactory lbx.BalancerFactory,
	logger log.Logger,
) CQRSClientEndpoints {
	factories := newCQRSFactories(transports)
	endpointers := newCQRSEndpointers(target, instancerFactory, factories, logger, endpointerOptions...)
	balancers := newCQRSBalancers(balancerFactory, endpointers)
	return &cQRSClientEndpoints{balancers: balancers}
}

type cQRSFactories struct {
	transports CQRSClientTransports
}

func (f *cQRSFactories) CreateUser(ctx context.Context) sd.Factory {
	return func(instance string) (endpoint.Endpoint, io.Closer, error) {
		return f.transports.CreateUser(ctx, instance)
	}
}
func (f *cQRSFactories) FindUser(ctx context.Context) sd.Factory {
	return func(instance string) (endpoint.Endpoint, io.Closer, error) {
		return f.transports.FindUser(ctx, instance)
	}
}
func newCQRSFactories(transports CQRSClientTransports) CQRSFactories {
	return &cQRSFactories{transports: transports}
}

type cQRSEndpointers struct {
	target           string
	instancerFactory sdx.InstancerFactory
	factories        CQRSFactories
	logger           log.Logger
	options          []sd.EndpointerOption
}

func (e *cQRSEndpointers) CreateUser(ctx context.Context, color string) (sd.Endpointer, error) {
	return sdx.NewEndpointer(ctx, e.target, color, e.instancerFactory, e.factories.CreateUser(ctx), e.logger, e.options...)
}
func (e *cQRSEndpointers) FindUser(ctx context.Context, color string) (sd.Endpointer, error) {
	return sdx.NewEndpointer(ctx, e.target, color, e.instancerFactory, e.factories.FindUser(ctx), e.logger, e.options...)
}
func newCQRSEndpointers(
	target string,
	instancerFactory sdx.InstancerFactory,
	factories CQRSFactories,
	logger log.Logger,
	options ...sd.EndpointerOption,
) CQRSEndpointers {
	return &cQRSEndpointers{
		target:           target,
		instancerFactory: instancerFactory,
		factories:        factories,
		logger:           logger,
		options:          options,
	}
}

type cQRSBalancers struct {
	factory    lbx.BalancerFactory
	endpointer CQRSEndpointers
	createUser lazyloadx.Group[lb.Balancer]
	findUser   lazyloadx.Group[lb.Balancer]
}

func (b *cQRSBalancers) CreateUser(ctx context.Context) (lb.Balancer, error) {
	color, _ := stainx.ExtractColor(ctx)
	balancer, err, _ := b.createUser.LoadOrNew(color, lbx.NewBalancer(ctx, b.factory, b.endpointer.CreateUser))
	return balancer, err
}
func (b *cQRSBalancers) FindUser(ctx context.Context) (lb.Balancer, error) {
	color, _ := stainx.ExtractColor(ctx)
	balancer, err, _ := b.findUser.LoadOrNew(color, lbx.NewBalancer(ctx, b.factory, b.endpointer.FindUser))
	return balancer, err
}
func newCQRSBalancers(factory lbx.BalancerFactory, endpointer CQRSEndpointers) CQRSBalancers {
	return &cQRSBalancers{
		factory:    factory,
		endpointer: endpointer,
		createUser: lazyloadx.Group[lb.Balancer]{},
		findUser:   lazyloadx.Group[lb.Balancer]{},
	}
}

type cQRSClientService struct {
	endpoints     CQRSClientEndpoints
	transportName string
}

func (c *cQRSClientService) CreateUser(ctx context.Context, request *CreateUserRequest) (*emptypb.Empty, error) {
	ctx = endpointx.InjectName(ctx, "/pb.CQRS/CreateUser")
	ctx = transportx.InjectName(ctx, c.transportName)
	endpoint, err := c.endpoints.CreateUser(ctx)
	if err != nil {
		return nil, err
	}
	rep, err := endpoint(ctx, request)
	if err != nil {
		return nil, statusx.From(err)
	}
	return rep.(*emptypb.Empty), nil
}
func (c *cQRSClientService) FindUser(ctx context.Context, request *FindUserRequest) (*GetUserResponse, error) {
	ctx = endpointx.InjectName(ctx, "/pb.CQRS/FindUser")
	ctx = transportx.InjectName(ctx, c.transportName)
	endpoint, err := c.endpoints.FindUser(ctx)
	if err != nil {
		return nil, err
	}
	rep, err := endpoint(ctx, request)
	if err != nil {
		return nil, statusx.From(err)
	}
	return rep.(*GetUserResponse), nil
}
func newCQRSClientService(endpoints CQRSClientEndpoints, transportName string) CQRSService {
	return &cQRSClientService{endpoints: endpoints, transportName: transportName}
}
