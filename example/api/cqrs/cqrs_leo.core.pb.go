// Code generated by protoc-gen-leo-core. DO NOT EDIT.

package cqrs

import (
	context "context"
	endpoint "github.com/go-kit/kit/endpoint"
	sd "github.com/go-kit/kit/sd"
	endpointx "github.com/go-leo/leo/v3/endpointx"
	transportx "github.com/go-leo/leo/v3/transportx"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	io "io"
)

type CQRSService interface {
	CreateUser(ctx context.Context, request *CreateUserRequest) (*emptypb.Empty, error)
	FindUser(ctx context.Context, request *FindUserRequest) (*GetUserResponse, error)
}

type CQRSEndpoints interface {
	CreateUser(ctx context.Context) endpoint.Endpoint
	FindUser(ctx context.Context) endpoint.Endpoint
}

type CQRSClientTransports interface {
	CreateUser() transportx.ClientTransport
	FindUser() transportx.ClientTransport
}

type CQRSClientTransportsV2 interface {
	CreateUser(ctx context.Context, instance string) (endpoint.Endpoint, io.Closer, error)
	FindUser(ctx context.Context, instance string) (endpoint.Endpoint, io.Closer, error)
}

type CQRSFactories interface {
	CreateUser(ctx context.Context) sd.Factory
	FindUser(ctx context.Context) sd.Factory
}

type CQRSEndpointers interface {
	CreateUser() sd.Endpointer
	FindUser() sd.Endpointer
}

type cQRSServerEndpoints struct {
	svc         CQRSService
	middlewares []endpoint.Middleware
}

func (e *cQRSServerEndpoints) CreateUser(context.Context) endpoint.Endpoint {
	component := func(ctx context.Context, request any) (any, error) {
		return e.svc.CreateUser(ctx, request.(*CreateUserRequest))
	}
	return endpointx.Chain(component, e.middlewares...)
}

func (e *cQRSServerEndpoints) FindUser(context.Context) endpoint.Endpoint {
	component := func(ctx context.Context, request any) (any, error) {
		return e.svc.FindUser(ctx, request.(*FindUserRequest))
	}
	return endpointx.Chain(component, e.middlewares...)
}

func newCQRSServerEndpoints(svc CQRSService, middlewares ...endpoint.Middleware) CQRSEndpoints {
	return &cQRSServerEndpoints{svc: svc, middlewares: middlewares}
}

type cQRSClientEndpoints struct {
	transports  CQRSClientTransports
	middlewares []endpoint.Middleware
}

func (e *cQRSClientEndpoints) CreateUser(ctx context.Context) endpoint.Endpoint {
	return endpointx.Chain(e.transports.CreateUser().Endpoint(ctx), e.middlewares...)
}

func (e *cQRSClientEndpoints) FindUser(ctx context.Context) endpoint.Endpoint {
	return endpointx.Chain(e.transports.FindUser().Endpoint(ctx), e.middlewares...)
}

func newCQRSClientEndpoints(transports CQRSClientTransports, middlewares ...endpoint.Middleware) CQRSEndpoints {
	return &cQRSClientEndpoints{transports: transports, middlewares: middlewares}
}

type cQRSFactories struct {
	transports CQRSClientTransportsV2
}

func (f *cQRSFactories) CreateUser(ctx context.Context) sd.Factory {
	return func(instance string) (endpoint.Endpoint, io.Closer, error) {
		return f.transports.CreateUser(ctx, instance)
	}
}

func (f *cQRSFactories) FindUser(ctx context.Context) sd.Factory {
	return func(instance string) (endpoint.Endpoint, io.Closer, error) {
		return f.transports.FindUser(ctx, instance)
	}
}

func newCQRSFactories(transports CQRSClientTransportsV2) CQRSFactories {
	return &cQRSFactories{transports: transports}
}
