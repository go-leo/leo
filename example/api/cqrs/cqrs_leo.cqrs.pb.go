// Code generated by protoc-gen-leo-cqrs. DO NOT EDIT.

package cqrs

import (
	context "context"
	cqrs "github.com/go-leo/leo/v3/cqrs"
	command "github.com/go-leo/leo/v3/example/internal/cqrs/command"
	query "github.com/go-leo/leo/v3/example/internal/cqrs/query"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// CQRSAssembler responsible for completing the transformation between domain model objects and DTOs
type CQRSAssembler interface {
	// FromCreateUserRequest convert request to command arguments
	FromCreateUserRequest(ctx context.Context, request *CreateUserRequest) (*command.CreateUserArgs, context.Context, error)
	// FromDeleteUserRequest convert request to command arguments
	FromDeleteUserRequest(ctx context.Context, request *DeleteUserRequest) (*command.DeleteUserArgs, context.Context, error)
	// FromUpdateUserRequest convert request to query arguments
	FromUpdateUserRequest(ctx context.Context, request *UpdateUserRequest) (*query.UpdateUserArgs, context.Context, error)
	// ToUpdateUserResponse convert query result to response
	ToUpdateUserResponse(ctx context.Context, request *UpdateUserRequest, res *query.UpdateUserRes) (*UpdateUserResponse, error)
	// FromFindUserRequest convert request to query arguments
	FromFindUserRequest(ctx context.Context, request *FindUserRequest) (*query.FindUserArgs, context.Context, error)
	// ToFindUserResponse convert query result to response
	ToFindUserResponse(ctx context.Context, request *FindUserRequest, res *query.FindUserRes) (*GetUserResponse, error)
}

// cQRSCqrsService implement the CQRSService with CQRS pattern
type cQRSCqrsService struct {
	bus       cqrs.Bus
	assembler CQRSAssembler
}

func (svc *cQRSCqrsService) CreateUser(ctx context.Context, request *CreateUserRequest) (*emptypb.Empty, error) {
	command, ctx, err := svc.assembler.FromCreateUserRequest(ctx, request)
	if err != nil {
		return nil, err
	}
	if err := svc.bus.Exec(ctx, command); err != nil {
		return nil, err
	}
	return new(emptypb.Empty), nil
}

func (svc *cQRSCqrsService) DeleteUser(ctx context.Context, request *DeleteUserRequest) (*DeleteUserResponse, error) {
	command, ctx, err := svc.assembler.FromDeleteUserRequest(ctx, request)
	if err != nil {
		return nil, err
	}
	if err := svc.bus.Exec(ctx, command); err != nil {
		return nil, err
	}
	return new(DeleteUserResponse), nil
}

func (svc *cQRSCqrsService) UpdateUser(ctx context.Context, request *UpdateUserRequest) (*UpdateUserResponse, error) {
	args, ctx, err := svc.assembler.FromUpdateUserRequest(ctx, request)
	if err != nil {
		return nil, err
	}
	res, err := svc.bus.Query(ctx, args)
	if err != nil {
		return nil, err
	}
	return svc.assembler.ToUpdateUserResponse(ctx, request, res.(*query.UpdateUserRes))
}

func (svc *cQRSCqrsService) FindUser(ctx context.Context, request *FindUserRequest) (*GetUserResponse, error) {
	args, ctx, err := svc.assembler.FromFindUserRequest(ctx, request)
	if err != nil {
		return nil, err
	}
	res, err := svc.bus.Query(ctx, args)
	if err != nil {
		return nil, err
	}
	return svc.assembler.ToFindUserResponse(ctx, request, res.(*query.FindUserRes))
}

func NewCQRSCqrsService(
	createUser command.CreateUser,
	deleteUser command.DeleteUser,
	updateUser query.UpdateUser,
	findUser query.FindUser,
	assembler CQRSAssembler,
) (CQRSService, error) {
	var bus cqrs.SampleBus
	if err := bus.RegisterCommand(createUser); err != nil {
		return nil, err
	}
	if err := bus.RegisterCommand(deleteUser); err != nil {
		return nil, err
	}
	if err := bus.RegisterQuery(updateUser); err != nil {
		return nil, err
	}
	if err := bus.RegisterQuery(findUser); err != nil {
		return nil, err
	}
	return &cQRSCqrsService{
		bus:       &bus,
		assembler: assembler,
	}, nil
}
