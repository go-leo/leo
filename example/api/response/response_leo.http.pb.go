// Code generated by protoc-gen-leo-http. DO NOT EDIT.

package response

import (
	context "context"
	endpoint "github.com/go-kit/kit/endpoint"
	http1 "github.com/go-kit/kit/transport/http"
	jsonx "github.com/go-leo/gox/encodingx/jsonx"
	errorx "github.com/go-leo/gox/errorx"
	endpointx "github.com/go-leo/leo/v3/endpointx"
	statusx "github.com/go-leo/leo/v3/statusx"
	httpx "github.com/go-leo/leo/v3/transportx/httpx"
	mux "github.com/gorilla/mux"
	httpbody "google.golang.org/genproto/googleapis/api/httpbody"
	proto "google.golang.org/protobuf/proto"
	anypb "google.golang.org/protobuf/types/known/anypb"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	structpb "google.golang.org/protobuf/types/known/structpb"
	io "io"
	http "net/http"
	url "net/url"
)

func appendResponseHttpRoutes(router *mux.Router) *mux.Router {
	router.NewRoute().Name("/leo.example.response.v1.Response/OmittedResponse").Methods("POST").Path("/v1/omitted/response")
	router.NewRoute().Name("/leo.example.response.v1.Response/StarResponse").Methods("POST").Path("/v1/star/response")
	router.NewRoute().Name("/leo.example.response.v1.Response/NamedResponse").Methods("POST").Path("/v1/named/response")
	router.NewRoute().Name("/leo.example.response.v1.Response/HttpBodyResponse").Methods("PUT").Path("/v1/http/body/omitted/response")
	router.NewRoute().Name("/leo.example.response.v1.Response/HttpBodyNamedResponse").Methods("PUT").Path("/v1/http/body/named/response")
	return router
}
func AppendResponseHttpServerRoutes(router *mux.Router, svc ResponseService, middlewares ...endpoint.Middleware) *mux.Router {
	transports := newResponseHttpServerTransports(svc, middlewares...)
	router = appendResponseHttpRoutes(router)
	router.Get("/leo.example.response.v1.Response/OmittedResponse").Handler(transports.OmittedResponse())
	router.Get("/leo.example.response.v1.Response/StarResponse").Handler(transports.StarResponse())
	router.Get("/leo.example.response.v1.Response/NamedResponse").Handler(transports.NamedResponse())
	router.Get("/leo.example.response.v1.Response/HttpBodyResponse").Handler(transports.HttpBodyResponse())
	router.Get("/leo.example.response.v1.Response/HttpBodyNamedResponse").Handler(transports.HttpBodyNamedResponse())
	return router
}

func NewResponseHttpClient(target string, opts ...httpx.ClientOption) ResponseService {
	options := httpx.NewClientOptions(opts...)
	transports := newResponseHttpClientTransports(options.Scheme(), options.ClientTransportOptions(), options.Middlewares())
	endpoints := newResponseClientEndpoints(target, transports, options.InstancerFactory(), options.EndpointerOptions(), options.BalancerFactory(), options.Logger())
	return newResponseClientService(endpoints, httpx.HttpClient)
}

type ResponseHttpServerTransports interface {
	OmittedResponse() http.Handler
	StarResponse() http.Handler
	NamedResponse() http.Handler
	HttpBodyResponse() http.Handler
	HttpBodyNamedResponse() http.Handler
}

type ResponseHttpServerRequestDecoder interface {
	OmittedResponse() http1.DecodeRequestFunc
	StarResponse() http1.DecodeRequestFunc
	NamedResponse() http1.DecodeRequestFunc
	HttpBodyResponse() http1.DecodeRequestFunc
	HttpBodyNamedResponse() http1.DecodeRequestFunc
}

type ResponseHttpServerResponseEncoder interface {
	OmittedResponse() http1.EncodeResponseFunc
	StarResponse() http1.EncodeResponseFunc
	NamedResponse() http1.EncodeResponseFunc
	HttpBodyResponse() http1.EncodeResponseFunc
	HttpBodyNamedResponse() http1.EncodeResponseFunc
}

type ResponseHttpClientRequestEncoder interface {
	OmittedResponse(instance string) http1.CreateRequestFunc
	StarResponse(instance string) http1.CreateRequestFunc
	NamedResponse(instance string) http1.CreateRequestFunc
	HttpBodyResponse(instance string) http1.CreateRequestFunc
	HttpBodyNamedResponse(instance string) http1.CreateRequestFunc
}

type ResponseHttpClientResponseDecoder interface {
	OmittedResponse() http1.DecodeResponseFunc
	StarResponse() http1.DecodeResponseFunc
	NamedResponse() http1.DecodeResponseFunc
	HttpBodyResponse() http1.DecodeResponseFunc
	HttpBodyNamedResponse() http1.DecodeResponseFunc
}

type responseHttpServerTransports struct {
	endpoints       ResponseServerEndpoints
	requestDecoder  ResponseHttpServerRequestDecoder
	responseEncoder ResponseHttpServerResponseEncoder
}

func (t *responseHttpServerTransports) OmittedResponse() http.Handler {
	return http1.NewServer(
		t.endpoints.OmittedResponse(context.TODO()),
		t.requestDecoder.OmittedResponse(),
		t.responseEncoder.OmittedResponse(),
		http1.ServerBefore(httpx.EndpointInjector("/leo.example.response.v1.Response/OmittedResponse")),
		http1.ServerBefore(httpx.ServerTransportInjector),
		http1.ServerBefore(httpx.IncomingMetadataInjector),
		http1.ServerBefore(httpx.IncomingTimeLimitInjector),
		http1.ServerBefore(httpx.IncomingStainInjector),
		http1.ServerFinalizer(httpx.CancelInvoker),
		http1.ServerErrorEncoder(httpx.ErrorEncoder),
	)
}

func (t *responseHttpServerTransports) StarResponse() http.Handler {
	return http1.NewServer(
		t.endpoints.StarResponse(context.TODO()),
		t.requestDecoder.StarResponse(),
		t.responseEncoder.StarResponse(),
		http1.ServerBefore(httpx.EndpointInjector("/leo.example.response.v1.Response/StarResponse")),
		http1.ServerBefore(httpx.ServerTransportInjector),
		http1.ServerBefore(httpx.IncomingMetadataInjector),
		http1.ServerBefore(httpx.IncomingTimeLimitInjector),
		http1.ServerBefore(httpx.IncomingStainInjector),
		http1.ServerFinalizer(httpx.CancelInvoker),
		http1.ServerErrorEncoder(httpx.ErrorEncoder),
	)
}

func (t *responseHttpServerTransports) NamedResponse() http.Handler {
	return http1.NewServer(
		t.endpoints.NamedResponse(context.TODO()),
		t.requestDecoder.NamedResponse(),
		t.responseEncoder.NamedResponse(),
		http1.ServerBefore(httpx.EndpointInjector("/leo.example.response.v1.Response/NamedResponse")),
		http1.ServerBefore(httpx.ServerTransportInjector),
		http1.ServerBefore(httpx.IncomingMetadataInjector),
		http1.ServerBefore(httpx.IncomingTimeLimitInjector),
		http1.ServerBefore(httpx.IncomingStainInjector),
		http1.ServerFinalizer(httpx.CancelInvoker),
		http1.ServerErrorEncoder(httpx.ErrorEncoder),
	)
}

func (t *responseHttpServerTransports) HttpBodyResponse() http.Handler {
	return http1.NewServer(
		t.endpoints.HttpBodyResponse(context.TODO()),
		t.requestDecoder.HttpBodyResponse(),
		t.responseEncoder.HttpBodyResponse(),
		http1.ServerBefore(httpx.EndpointInjector("/leo.example.response.v1.Response/HttpBodyResponse")),
		http1.ServerBefore(httpx.ServerTransportInjector),
		http1.ServerBefore(httpx.IncomingMetadataInjector),
		http1.ServerBefore(httpx.IncomingTimeLimitInjector),
		http1.ServerBefore(httpx.IncomingStainInjector),
		http1.ServerFinalizer(httpx.CancelInvoker),
		http1.ServerErrorEncoder(httpx.ErrorEncoder),
	)
}

func (t *responseHttpServerTransports) HttpBodyNamedResponse() http.Handler {
	return http1.NewServer(
		t.endpoints.HttpBodyNamedResponse(context.TODO()),
		t.requestDecoder.HttpBodyNamedResponse(),
		t.responseEncoder.HttpBodyNamedResponse(),
		http1.ServerBefore(httpx.EndpointInjector("/leo.example.response.v1.Response/HttpBodyNamedResponse")),
		http1.ServerBefore(httpx.ServerTransportInjector),
		http1.ServerBefore(httpx.IncomingMetadataInjector),
		http1.ServerBefore(httpx.IncomingTimeLimitInjector),
		http1.ServerBefore(httpx.IncomingStainInjector),
		http1.ServerFinalizer(httpx.CancelInvoker),
		http1.ServerErrorEncoder(httpx.ErrorEncoder),
	)
}

func newResponseHttpServerTransports(svc ResponseService, middlewares ...endpoint.Middleware) ResponseHttpServerTransports {
	endpoints := newResponseServerEndpoints(svc, middlewares...)
	return &responseHttpServerTransports{
		endpoints:       endpoints,
		requestDecoder:  responseHttpServerRequestDecoder{},
		responseEncoder: responseHttpServerResponseEncoder{},
	}
}

type responseHttpServerRequestDecoder struct{}

func (responseHttpServerRequestDecoder) OmittedResponse() http1.DecodeRequestFunc {
	return func(ctx context.Context, r *http.Request) (any, error) {
		req := &emptypb.Empty{}
		return req, nil
	}
}
func (responseHttpServerRequestDecoder) StarResponse() http1.DecodeRequestFunc {
	return func(ctx context.Context, r *http.Request) (any, error) {
		req := &emptypb.Empty{}
		return req, nil
	}
}
func (responseHttpServerRequestDecoder) NamedResponse() http1.DecodeRequestFunc {
	return func(ctx context.Context, r *http.Request) (any, error) {
		req := &emptypb.Empty{}
		return req, nil
	}
}
func (responseHttpServerRequestDecoder) HttpBodyResponse() http1.DecodeRequestFunc {
	return func(ctx context.Context, r *http.Request) (any, error) {
		req := &emptypb.Empty{}
		return req, nil
	}
}
func (responseHttpServerRequestDecoder) HttpBodyNamedResponse() http1.DecodeRequestFunc {
	return func(ctx context.Context, r *http.Request) (any, error) {
		req := &emptypb.Empty{}
		return req, nil
	}
}

type responseHttpServerResponseEncoder struct{}

func (responseHttpServerResponseEncoder) OmittedResponse() http1.EncodeResponseFunc {
	return func(ctx context.Context, w http.ResponseWriter, obj any) error {
		resp := obj.(*UserResponse)
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(http.StatusOK)
		if err := jsonx.NewEncoder(w).Encode(resp); err != nil {
			return statusx.ErrInternal.With(statusx.Wrap(err))
		}
		return nil
	}
}
func (responseHttpServerResponseEncoder) StarResponse() http1.EncodeResponseFunc {
	return func(ctx context.Context, w http.ResponseWriter, obj any) error {
		resp := obj.(*UserResponse)
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(http.StatusOK)
		if err := jsonx.NewEncoder(w).Encode(resp); err != nil {
			return statusx.ErrInternal.With(statusx.Wrap(err))
		}
		return nil
	}
}
func (responseHttpServerResponseEncoder) NamedResponse() http1.EncodeResponseFunc {
	return func(ctx context.Context, w http.ResponseWriter, obj any) error {
		resp := obj.(*UserResponse)
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(http.StatusOK)
		if err := jsonx.NewEncoder(w).Encode(resp.GetUser()); err != nil {
			return statusx.ErrInternal.With(statusx.Wrap(err))
		}
		return nil
	}
}
func (responseHttpServerResponseEncoder) HttpBodyResponse() http1.EncodeResponseFunc {
	return func(ctx context.Context, w http.ResponseWriter, obj any) error {
		resp := obj.(*httpbody.HttpBody)
		w.Header().Set("Content-Type", resp.GetContentType())
		for _, src := range resp.GetExtensions() {
			dst, err := anypb.UnmarshalNew(src, proto.UnmarshalOptions{})
			if err != nil {
				return statusx.ErrInternal.With(statusx.Wrap(err))
			}
			metadata, ok := dst.(*structpb.Struct)
			if !ok {
				continue
			}
			for key, value := range metadata.GetFields() {
				w.Header().Add(key, string(errorx.Ignore(jsonx.Marshal(value))))
			}
		}
		w.WriteHeader(http.StatusOK)
		if _, err := w.Write(resp.GetData()); err != nil {
			return statusx.ErrInternal.With(statusx.Wrap(err))
		}
		return nil
	}
}
func (responseHttpServerResponseEncoder) HttpBodyNamedResponse() http1.EncodeResponseFunc {
	return func(ctx context.Context, w http.ResponseWriter, obj any) error {
		resp := obj.(*HttpBody)
		w.Header().Set("Content-Type", resp.GetBody().GetContentType())
		for _, src := range resp.GetBody().GetExtensions() {
			dst, err := anypb.UnmarshalNew(src, proto.UnmarshalOptions{})
			if err != nil {
				return statusx.ErrInternal.With(statusx.Wrap(err))
			}
			metadata, ok := dst.(*structpb.Struct)
			if !ok {
				continue
			}
			for key, value := range metadata.GetFields() {
				w.Header().Add(key, string(errorx.Ignore(jsonx.Marshal(value))))
			}
		}
		w.WriteHeader(http.StatusOK)
		if _, err := w.Write(resp.GetBody().GetData()); err != nil {
			return statusx.ErrInternal.With(statusx.Wrap(err))
		}
		return nil
	}
}

type responseHttpClientTransports struct {
	clientOptions   []http1.ClientOption
	middlewares     []endpoint.Middleware
	requestEncoder  ResponseHttpClientRequestEncoder
	responseDecoder ResponseHttpClientResponseDecoder
}

func (t *responseHttpClientTransports) OmittedResponse(ctx context.Context, instance string) (endpoint.Endpoint, io.Closer, error) {
	opts := []http1.ClientOption{
		http1.ClientBefore(httpx.OutgoingMetadataInjector),
		http1.ClientBefore(httpx.OutgoingTimeLimitInjector),
		http1.ClientBefore(httpx.OutgoingStainInjector),
	}
	opts = append(opts, t.clientOptions...)
	client := http1.NewExplicitClient(
		t.requestEncoder.OmittedResponse(instance),
		t.responseDecoder.OmittedResponse(),
		opts...,
	)
	return endpointx.Chain(client.Endpoint(), t.middlewares...), nil, nil
}

func (t *responseHttpClientTransports) StarResponse(ctx context.Context, instance string) (endpoint.Endpoint, io.Closer, error) {
	opts := []http1.ClientOption{
		http1.ClientBefore(httpx.OutgoingMetadataInjector),
		http1.ClientBefore(httpx.OutgoingTimeLimitInjector),
		http1.ClientBefore(httpx.OutgoingStainInjector),
	}
	opts = append(opts, t.clientOptions...)
	client := http1.NewExplicitClient(
		t.requestEncoder.StarResponse(instance),
		t.responseDecoder.StarResponse(),
		opts...,
	)
	return endpointx.Chain(client.Endpoint(), t.middlewares...), nil, nil
}

func (t *responseHttpClientTransports) NamedResponse(ctx context.Context, instance string) (endpoint.Endpoint, io.Closer, error) {
	opts := []http1.ClientOption{
		http1.ClientBefore(httpx.OutgoingMetadataInjector),
		http1.ClientBefore(httpx.OutgoingTimeLimitInjector),
		http1.ClientBefore(httpx.OutgoingStainInjector),
	}
	opts = append(opts, t.clientOptions...)
	client := http1.NewExplicitClient(
		t.requestEncoder.NamedResponse(instance),
		t.responseDecoder.NamedResponse(),
		opts...,
	)
	return endpointx.Chain(client.Endpoint(), t.middlewares...), nil, nil
}

func (t *responseHttpClientTransports) HttpBodyResponse(ctx context.Context, instance string) (endpoint.Endpoint, io.Closer, error) {
	opts := []http1.ClientOption{
		http1.ClientBefore(httpx.OutgoingMetadataInjector),
		http1.ClientBefore(httpx.OutgoingTimeLimitInjector),
		http1.ClientBefore(httpx.OutgoingStainInjector),
	}
	opts = append(opts, t.clientOptions...)
	client := http1.NewExplicitClient(
		t.requestEncoder.HttpBodyResponse(instance),
		t.responseDecoder.HttpBodyResponse(),
		opts...,
	)
	return endpointx.Chain(client.Endpoint(), t.middlewares...), nil, nil
}

func (t *responseHttpClientTransports) HttpBodyNamedResponse(ctx context.Context, instance string) (endpoint.Endpoint, io.Closer, error) {
	opts := []http1.ClientOption{
		http1.ClientBefore(httpx.OutgoingMetadataInjector),
		http1.ClientBefore(httpx.OutgoingTimeLimitInjector),
		http1.ClientBefore(httpx.OutgoingStainInjector),
	}
	opts = append(opts, t.clientOptions...)
	client := http1.NewExplicitClient(
		t.requestEncoder.HttpBodyNamedResponse(instance),
		t.responseDecoder.HttpBodyNamedResponse(),
		opts...,
	)
	return endpointx.Chain(client.Endpoint(), t.middlewares...), nil, nil
}

func newResponseHttpClientTransports(scheme string, clientOptions []http1.ClientOption, middlewares []endpoint.Middleware) ResponseClientTransports {
	return &responseHttpClientTransports{
		clientOptions: clientOptions,
		middlewares:   middlewares,
		requestEncoder: responseHttpClientRequestEncoder{
			scheme: scheme,
			router: appendResponseHttpRoutes(mux.NewRouter()),
		},
		responseDecoder: responseHttpClientResponseDecoder{},
	}
}

type responseHttpClientRequestEncoder struct {
	router *mux.Router
	scheme string
}

func (e responseHttpClientRequestEncoder) OmittedResponse(instance string) http1.CreateRequestFunc {
	return func(ctx context.Context, obj any) (*http.Request, error) {
		if obj == nil {
			return nil, statusx.ErrInvalidArgument.With(statusx.Message("request is nil"))
		}
		req, ok := obj.(*emptypb.Empty)
		if !ok {
			return nil, statusx.ErrInvalidArgument.With(statusx.Message("invalid request type, %T", obj))
		}
		_ = req
		var body io.Reader
		var pairs []string
		path, err := e.router.Get("/leo.example.response.v1.Response/OmittedResponse").URLPath(pairs...)
		if err != nil {
			return nil, statusx.ErrInvalidArgument.With(statusx.Wrap(err))
		}
		queries := url.Values{}
		target := &url.URL{
			Scheme:   e.scheme,
			Host:     instance,
			Path:     path.Path,
			RawQuery: queries.Encode(),
		}
		r, err := http.NewRequestWithContext(ctx, "POST", target.String(), body)
		if err != nil {
			return nil, statusx.ErrInvalidArgument.With(statusx.Wrap(err))
		}
		return r, nil
	}
}
func (e responseHttpClientRequestEncoder) StarResponse(instance string) http1.CreateRequestFunc {
	return func(ctx context.Context, obj any) (*http.Request, error) {
		if obj == nil {
			return nil, statusx.ErrInvalidArgument.With(statusx.Message("request is nil"))
		}
		req, ok := obj.(*emptypb.Empty)
		if !ok {
			return nil, statusx.ErrInvalidArgument.With(statusx.Message("invalid request type, %T", obj))
		}
		_ = req
		var body io.Reader
		var pairs []string
		path, err := e.router.Get("/leo.example.response.v1.Response/StarResponse").URLPath(pairs...)
		if err != nil {
			return nil, statusx.ErrInvalidArgument.With(statusx.Wrap(err))
		}
		queries := url.Values{}
		target := &url.URL{
			Scheme:   e.scheme,
			Host:     instance,
			Path:     path.Path,
			RawQuery: queries.Encode(),
		}
		r, err := http.NewRequestWithContext(ctx, "POST", target.String(), body)
		if err != nil {
			return nil, statusx.ErrInvalidArgument.With(statusx.Wrap(err))
		}
		return r, nil
	}
}
func (e responseHttpClientRequestEncoder) NamedResponse(instance string) http1.CreateRequestFunc {
	return func(ctx context.Context, obj any) (*http.Request, error) {
		if obj == nil {
			return nil, statusx.ErrInvalidArgument.With(statusx.Message("request is nil"))
		}
		req, ok := obj.(*emptypb.Empty)
		if !ok {
			return nil, statusx.ErrInvalidArgument.With(statusx.Message("invalid request type, %T", obj))
		}
		_ = req
		var body io.Reader
		var pairs []string
		path, err := e.router.Get("/leo.example.response.v1.Response/NamedResponse").URLPath(pairs...)
		if err != nil {
			return nil, statusx.ErrInvalidArgument.With(statusx.Wrap(err))
		}
		queries := url.Values{}
		target := &url.URL{
			Scheme:   e.scheme,
			Host:     instance,
			Path:     path.Path,
			RawQuery: queries.Encode(),
		}
		r, err := http.NewRequestWithContext(ctx, "POST", target.String(), body)
		if err != nil {
			return nil, statusx.ErrInvalidArgument.With(statusx.Wrap(err))
		}
		return r, nil
	}
}
func (e responseHttpClientRequestEncoder) HttpBodyResponse(instance string) http1.CreateRequestFunc {
	return func(ctx context.Context, obj any) (*http.Request, error) {
		if obj == nil {
			return nil, statusx.ErrInvalidArgument.With(statusx.Message("request is nil"))
		}
		req, ok := obj.(*emptypb.Empty)
		if !ok {
			return nil, statusx.ErrInvalidArgument.With(statusx.Message("invalid request type, %T", obj))
		}
		_ = req
		var body io.Reader
		var pairs []string
		path, err := e.router.Get("/leo.example.response.v1.Response/HttpBodyResponse").URLPath(pairs...)
		if err != nil {
			return nil, statusx.ErrInvalidArgument.With(statusx.Wrap(err))
		}
		queries := url.Values{}
		target := &url.URL{
			Scheme:   e.scheme,
			Host:     instance,
			Path:     path.Path,
			RawQuery: queries.Encode(),
		}
		r, err := http.NewRequestWithContext(ctx, "PUT", target.String(), body)
		if err != nil {
			return nil, statusx.ErrInvalidArgument.With(statusx.Wrap(err))
		}
		return r, nil
	}
}
func (e responseHttpClientRequestEncoder) HttpBodyNamedResponse(instance string) http1.CreateRequestFunc {
	return func(ctx context.Context, obj any) (*http.Request, error) {
		if obj == nil {
			return nil, statusx.ErrInvalidArgument.With(statusx.Message("request is nil"))
		}
		req, ok := obj.(*emptypb.Empty)
		if !ok {
			return nil, statusx.ErrInvalidArgument.With(statusx.Message("invalid request type, %T", obj))
		}
		_ = req
		var body io.Reader
		var pairs []string
		path, err := e.router.Get("/leo.example.response.v1.Response/HttpBodyNamedResponse").URLPath(pairs...)
		if err != nil {
			return nil, statusx.ErrInvalidArgument.With(statusx.Wrap(err))
		}
		queries := url.Values{}
		target := &url.URL{
			Scheme:   e.scheme,
			Host:     instance,
			Path:     path.Path,
			RawQuery: queries.Encode(),
		}
		r, err := http.NewRequestWithContext(ctx, "PUT", target.String(), body)
		if err != nil {
			return nil, statusx.ErrInvalidArgument.With(statusx.Wrap(err))
		}
		return r, nil
	}
}

type responseHttpClientResponseDecoder struct{}

func (responseHttpClientResponseDecoder) OmittedResponse() http1.DecodeResponseFunc {
	return func(ctx context.Context, r *http.Response) (any, error) {
		if httpx.IsErrorResponse(r) {
			return nil, httpx.ErrorDecoder(ctx, r)
		}
		resp := &UserResponse{}
		if err := jsonx.NewDecoder(r.Body).Decode(resp); err != nil {
			return nil, err
		}
		return resp, nil
	}
}
func (responseHttpClientResponseDecoder) StarResponse() http1.DecodeResponseFunc {
	return func(ctx context.Context, r *http.Response) (any, error) {
		if httpx.IsErrorResponse(r) {
			return nil, httpx.ErrorDecoder(ctx, r)
		}
		resp := &UserResponse{}
		if err := jsonx.NewDecoder(r.Body).Decode(resp); err != nil {
			return nil, err
		}
		return resp, nil
	}
}
func (responseHttpClientResponseDecoder) NamedResponse() http1.DecodeResponseFunc {
	return func(ctx context.Context, r *http.Response) (any, error) {
		if httpx.IsErrorResponse(r) {
			return nil, httpx.ErrorDecoder(ctx, r)
		}
		resp := &UserResponse{}
		if err := jsonx.NewDecoder(r.Body).Decode(&resp.User); err != nil {
			return nil, err
		}
		return resp, nil
	}
}
func (responseHttpClientResponseDecoder) HttpBodyResponse() http1.DecodeResponseFunc {
	return func(ctx context.Context, r *http.Response) (any, error) {
		if httpx.IsErrorResponse(r) {
			return nil, httpx.ErrorDecoder(ctx, r)
		}
		resp := &httpbody.HttpBody{}
		resp.ContentType = r.Header.Get("Content-Type")
		body, err := io.ReadAll(r.Body)
		if err != nil {
			return nil, err
		}
		resp.Data = body
		return resp, nil
	}
}
func (responseHttpClientResponseDecoder) HttpBodyNamedResponse() http1.DecodeResponseFunc {
	return func(ctx context.Context, r *http.Response) (any, error) {
		if httpx.IsErrorResponse(r) {
			return nil, httpx.ErrorDecoder(ctx, r)
		}
		resp := &HttpBody{}
		resp.Body = &httpbody.HttpBody{}
		resp.Body.ContentType = r.Header.Get("Content-Type")
		body, err := io.ReadAll(r.Body)
		if err != nil {
			return nil, err
		}
		resp.Body.Data = body
		return resp, nil
	}
}
