// Code generated by protoc-gen-leo-core. DO NOT EDIT.

package response

import (
	context "context"
	endpoint "github.com/go-kit/kit/endpoint"
	sd "github.com/go-kit/kit/sd"
	lb "github.com/go-kit/kit/sd/lb"
	log "github.com/go-kit/log"
	lazyloadx "github.com/go-leo/gox/syncx/lazyloadx"
	endpointx "github.com/go-leo/leo/v3/endpointx"
	sdx "github.com/go-leo/leo/v3/sdx"
	lbx "github.com/go-leo/leo/v3/sdx/lbx"
	stainx "github.com/go-leo/leo/v3/sdx/stainx"
	statusx "github.com/go-leo/leo/v3/statusx"
	transportx "github.com/go-leo/leo/v3/transportx"
	httpbody "google.golang.org/genproto/googleapis/api/httpbody"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	io "io"
)

type ResponseService interface {
	// Query
	OmittedResponse(ctx context.Context, request *emptypb.Empty) (*UserResponse, error)
	// Query
	StarResponse(ctx context.Context, request *emptypb.Empty) (*UserResponse, error)
	// Query
	NamedResponse(ctx context.Context, request *emptypb.Empty) (*UserResponse, error)
	// Query
	HttpBodyResponse(ctx context.Context, request *emptypb.Empty) (*httpbody.HttpBody, error)
	// Query
	HttpBodyNamedResponse(ctx context.Context, request *emptypb.Empty) (*HttpBody, error)
}

type ResponseServerEndpoints interface {
	OmittedResponse(ctx context.Context) endpoint.Endpoint
	StarResponse(ctx context.Context) endpoint.Endpoint
	NamedResponse(ctx context.Context) endpoint.Endpoint
	HttpBodyResponse(ctx context.Context) endpoint.Endpoint
	HttpBodyNamedResponse(ctx context.Context) endpoint.Endpoint
}

type ResponseClientEndpoints interface {
	OmittedResponse(ctx context.Context) (endpoint.Endpoint, error)
	StarResponse(ctx context.Context) (endpoint.Endpoint, error)
	NamedResponse(ctx context.Context) (endpoint.Endpoint, error)
	HttpBodyResponse(ctx context.Context) (endpoint.Endpoint, error)
	HttpBodyNamedResponse(ctx context.Context) (endpoint.Endpoint, error)
}

type ResponseClientTransports interface {
	OmittedResponse(ctx context.Context, instance string) (endpoint.Endpoint, io.Closer, error)
	StarResponse(ctx context.Context, instance string) (endpoint.Endpoint, io.Closer, error)
	NamedResponse(ctx context.Context, instance string) (endpoint.Endpoint, io.Closer, error)
	HttpBodyResponse(ctx context.Context, instance string) (endpoint.Endpoint, io.Closer, error)
	HttpBodyNamedResponse(ctx context.Context, instance string) (endpoint.Endpoint, io.Closer, error)
}

type ResponseFactories interface {
	OmittedResponse(ctx context.Context) sd.Factory
	StarResponse(ctx context.Context) sd.Factory
	NamedResponse(ctx context.Context) sd.Factory
	HttpBodyResponse(ctx context.Context) sd.Factory
	HttpBodyNamedResponse(ctx context.Context) sd.Factory
}

type ResponseEndpointers interface {
	OmittedResponse(ctx context.Context, color string) (sd.Endpointer, error)
	StarResponse(ctx context.Context, color string) (sd.Endpointer, error)
	NamedResponse(ctx context.Context, color string) (sd.Endpointer, error)
	HttpBodyResponse(ctx context.Context, color string) (sd.Endpointer, error)
	HttpBodyNamedResponse(ctx context.Context, color string) (sd.Endpointer, error)
}

type ResponseBalancers interface {
	OmittedResponse(ctx context.Context) (lb.Balancer, error)
	StarResponse(ctx context.Context) (lb.Balancer, error)
	NamedResponse(ctx context.Context) (lb.Balancer, error)
	HttpBodyResponse(ctx context.Context) (lb.Balancer, error)
	HttpBodyNamedResponse(ctx context.Context) (lb.Balancer, error)
}

type responseServerEndpoints struct {
	svc         ResponseService
	middlewares []endpoint.Middleware
}

func (e *responseServerEndpoints) OmittedResponse(context.Context) endpoint.Endpoint {
	component := func(ctx context.Context, request any) (any, error) {
		return e.svc.OmittedResponse(ctx, request.(*emptypb.Empty))
	}
	return endpointx.Chain(component, e.middlewares...)
}
func (e *responseServerEndpoints) StarResponse(context.Context) endpoint.Endpoint {
	component := func(ctx context.Context, request any) (any, error) {
		return e.svc.StarResponse(ctx, request.(*emptypb.Empty))
	}
	return endpointx.Chain(component, e.middlewares...)
}
func (e *responseServerEndpoints) NamedResponse(context.Context) endpoint.Endpoint {
	component := func(ctx context.Context, request any) (any, error) {
		return e.svc.NamedResponse(ctx, request.(*emptypb.Empty))
	}
	return endpointx.Chain(component, e.middlewares...)
}
func (e *responseServerEndpoints) HttpBodyResponse(context.Context) endpoint.Endpoint {
	component := func(ctx context.Context, request any) (any, error) {
		return e.svc.HttpBodyResponse(ctx, request.(*emptypb.Empty))
	}
	return endpointx.Chain(component, e.middlewares...)
}
func (e *responseServerEndpoints) HttpBodyNamedResponse(context.Context) endpoint.Endpoint {
	component := func(ctx context.Context, request any) (any, error) {
		return e.svc.HttpBodyNamedResponse(ctx, request.(*emptypb.Empty))
	}
	return endpointx.Chain(component, e.middlewares...)
}
func newResponseServerEndpoints(svc ResponseService, middlewares ...endpoint.Middleware) ResponseServerEndpoints {
	return &responseServerEndpoints{svc: svc, middlewares: middlewares}
}

type responseClientEndpoints struct {
	balancers ResponseBalancers
}

func (e *responseClientEndpoints) OmittedResponse(ctx context.Context) (endpoint.Endpoint, error) {
	balancer, err := e.balancers.OmittedResponse(ctx)
	if err != nil {
		return nil, err
	}
	return balancer.Endpoint()
}
func (e *responseClientEndpoints) StarResponse(ctx context.Context) (endpoint.Endpoint, error) {
	balancer, err := e.balancers.StarResponse(ctx)
	if err != nil {
		return nil, err
	}
	return balancer.Endpoint()
}
func (e *responseClientEndpoints) NamedResponse(ctx context.Context) (endpoint.Endpoint, error) {
	balancer, err := e.balancers.NamedResponse(ctx)
	if err != nil {
		return nil, err
	}
	return balancer.Endpoint()
}
func (e *responseClientEndpoints) HttpBodyResponse(ctx context.Context) (endpoint.Endpoint, error) {
	balancer, err := e.balancers.HttpBodyResponse(ctx)
	if err != nil {
		return nil, err
	}
	return balancer.Endpoint()
}
func (e *responseClientEndpoints) HttpBodyNamedResponse(ctx context.Context) (endpoint.Endpoint, error) {
	balancer, err := e.balancers.HttpBodyNamedResponse(ctx)
	if err != nil {
		return nil, err
	}
	return balancer.Endpoint()
}
func newResponseClientEndpoints(
	target string,
	transports ResponseClientTransports,
	instancerFactory sdx.InstancerFactory,
	endpointerOptions []sd.EndpointerOption,
	balancerFactory lbx.BalancerFactory,
	logger log.Logger,
) ResponseClientEndpoints {
	factories := newResponseFactories(transports)
	endpointers := newResponseEndpointers(target, instancerFactory, factories, logger, endpointerOptions...)
	balancers := newResponseBalancers(balancerFactory, endpointers)
	return &responseClientEndpoints{balancers: balancers}
}

type responseFactories struct {
	transports ResponseClientTransports
}

func (f *responseFactories) OmittedResponse(ctx context.Context) sd.Factory {
	return func(instance string) (endpoint.Endpoint, io.Closer, error) {
		return f.transports.OmittedResponse(ctx, instance)
	}
}
func (f *responseFactories) StarResponse(ctx context.Context) sd.Factory {
	return func(instance string) (endpoint.Endpoint, io.Closer, error) {
		return f.transports.StarResponse(ctx, instance)
	}
}
func (f *responseFactories) NamedResponse(ctx context.Context) sd.Factory {
	return func(instance string) (endpoint.Endpoint, io.Closer, error) {
		return f.transports.NamedResponse(ctx, instance)
	}
}
func (f *responseFactories) HttpBodyResponse(ctx context.Context) sd.Factory {
	return func(instance string) (endpoint.Endpoint, io.Closer, error) {
		return f.transports.HttpBodyResponse(ctx, instance)
	}
}
func (f *responseFactories) HttpBodyNamedResponse(ctx context.Context) sd.Factory {
	return func(instance string) (endpoint.Endpoint, io.Closer, error) {
		return f.transports.HttpBodyNamedResponse(ctx, instance)
	}
}
func newResponseFactories(transports ResponseClientTransports) ResponseFactories {
	return &responseFactories{transports: transports}
}

type responseEndpointers struct {
	target           string
	instancerFactory sdx.InstancerFactory
	factories        ResponseFactories
	logger           log.Logger
	options          []sd.EndpointerOption
}

func (e *responseEndpointers) OmittedResponse(ctx context.Context, color string) (sd.Endpointer, error) {
	return sdx.NewEndpointer(ctx, e.target, color, e.instancerFactory, e.factories.OmittedResponse(ctx), e.logger, e.options...)
}
func (e *responseEndpointers) StarResponse(ctx context.Context, color string) (sd.Endpointer, error) {
	return sdx.NewEndpointer(ctx, e.target, color, e.instancerFactory, e.factories.StarResponse(ctx), e.logger, e.options...)
}
func (e *responseEndpointers) NamedResponse(ctx context.Context, color string) (sd.Endpointer, error) {
	return sdx.NewEndpointer(ctx, e.target, color, e.instancerFactory, e.factories.NamedResponse(ctx), e.logger, e.options...)
}
func (e *responseEndpointers) HttpBodyResponse(ctx context.Context, color string) (sd.Endpointer, error) {
	return sdx.NewEndpointer(ctx, e.target, color, e.instancerFactory, e.factories.HttpBodyResponse(ctx), e.logger, e.options...)
}
func (e *responseEndpointers) HttpBodyNamedResponse(ctx context.Context, color string) (sd.Endpointer, error) {
	return sdx.NewEndpointer(ctx, e.target, color, e.instancerFactory, e.factories.HttpBodyNamedResponse(ctx), e.logger, e.options...)
}
func newResponseEndpointers(
	target string,
	instancerFactory sdx.InstancerFactory,
	factories ResponseFactories,
	logger log.Logger,
	options ...sd.EndpointerOption,
) ResponseEndpointers {
	return &responseEndpointers{
		target:           target,
		instancerFactory: instancerFactory,
		factories:        factories,
		logger:           logger,
		options:          options,
	}
}

type responseBalancers struct {
	factory               lbx.BalancerFactory
	endpointer            ResponseEndpointers
	omittedResponse       lazyloadx.Group[lb.Balancer]
	starResponse          lazyloadx.Group[lb.Balancer]
	namedResponse         lazyloadx.Group[lb.Balancer]
	httpBodyResponse      lazyloadx.Group[lb.Balancer]
	httpBodyNamedResponse lazyloadx.Group[lb.Balancer]
}

func (b *responseBalancers) OmittedResponse(ctx context.Context) (lb.Balancer, error) {
	color, _ := stainx.ExtractColor(ctx)
	balancer, err, _ := b.omittedResponse.LoadOrNew(color, lbx.NewBalancer(ctx, b.factory, b.endpointer.OmittedResponse))
	return balancer, err
}
func (b *responseBalancers) StarResponse(ctx context.Context) (lb.Balancer, error) {
	color, _ := stainx.ExtractColor(ctx)
	balancer, err, _ := b.starResponse.LoadOrNew(color, lbx.NewBalancer(ctx, b.factory, b.endpointer.StarResponse))
	return balancer, err
}
func (b *responseBalancers) NamedResponse(ctx context.Context) (lb.Balancer, error) {
	color, _ := stainx.ExtractColor(ctx)
	balancer, err, _ := b.namedResponse.LoadOrNew(color, lbx.NewBalancer(ctx, b.factory, b.endpointer.NamedResponse))
	return balancer, err
}
func (b *responseBalancers) HttpBodyResponse(ctx context.Context) (lb.Balancer, error) {
	color, _ := stainx.ExtractColor(ctx)
	balancer, err, _ := b.httpBodyResponse.LoadOrNew(color, lbx.NewBalancer(ctx, b.factory, b.endpointer.HttpBodyResponse))
	return balancer, err
}
func (b *responseBalancers) HttpBodyNamedResponse(ctx context.Context) (lb.Balancer, error) {
	color, _ := stainx.ExtractColor(ctx)
	balancer, err, _ := b.httpBodyNamedResponse.LoadOrNew(color, lbx.NewBalancer(ctx, b.factory, b.endpointer.HttpBodyNamedResponse))
	return balancer, err
}
func newResponseBalancers(factory lbx.BalancerFactory, endpointer ResponseEndpointers) ResponseBalancers {
	return &responseBalancers{
		factory:               factory,
		endpointer:            endpointer,
		omittedResponse:       lazyloadx.Group[lb.Balancer]{},
		starResponse:          lazyloadx.Group[lb.Balancer]{},
		namedResponse:         lazyloadx.Group[lb.Balancer]{},
		httpBodyResponse:      lazyloadx.Group[lb.Balancer]{},
		httpBodyNamedResponse: lazyloadx.Group[lb.Balancer]{},
	}
}

type responseClientService struct {
	endpoints     ResponseClientEndpoints
	transportName string
}

func (c *responseClientService) OmittedResponse(ctx context.Context, request *emptypb.Empty) (*UserResponse, error) {
	ctx = endpointx.InjectName(ctx, "/leo.example.response.v1.Response/OmittedResponse")
	ctx = transportx.InjectName(ctx, c.transportName)
	endpoint, err := c.endpoints.OmittedResponse(ctx)
	if err != nil {
		return nil, err
	}
	rep, err := endpoint(ctx, request)
	if err != nil {
		return nil, statusx.From(err)
	}
	return rep.(*UserResponse), nil
}
func (c *responseClientService) StarResponse(ctx context.Context, request *emptypb.Empty) (*UserResponse, error) {
	ctx = endpointx.InjectName(ctx, "/leo.example.response.v1.Response/StarResponse")
	ctx = transportx.InjectName(ctx, c.transportName)
	endpoint, err := c.endpoints.StarResponse(ctx)
	if err != nil {
		return nil, err
	}
	rep, err := endpoint(ctx, request)
	if err != nil {
		return nil, statusx.From(err)
	}
	return rep.(*UserResponse), nil
}
func (c *responseClientService) NamedResponse(ctx context.Context, request *emptypb.Empty) (*UserResponse, error) {
	ctx = endpointx.InjectName(ctx, "/leo.example.response.v1.Response/NamedResponse")
	ctx = transportx.InjectName(ctx, c.transportName)
	endpoint, err := c.endpoints.NamedResponse(ctx)
	if err != nil {
		return nil, err
	}
	rep, err := endpoint(ctx, request)
	if err != nil {
		return nil, statusx.From(err)
	}
	return rep.(*UserResponse), nil
}
func (c *responseClientService) HttpBodyResponse(ctx context.Context, request *emptypb.Empty) (*httpbody.HttpBody, error) {
	ctx = endpointx.InjectName(ctx, "/leo.example.response.v1.Response/HttpBodyResponse")
	ctx = transportx.InjectName(ctx, c.transportName)
	endpoint, err := c.endpoints.HttpBodyResponse(ctx)
	if err != nil {
		return nil, err
	}
	rep, err := endpoint(ctx, request)
	if err != nil {
		return nil, statusx.From(err)
	}
	return rep.(*httpbody.HttpBody), nil
}
func (c *responseClientService) HttpBodyNamedResponse(ctx context.Context, request *emptypb.Empty) (*HttpBody, error) {
	ctx = endpointx.InjectName(ctx, "/leo.example.response.v1.Response/HttpBodyNamedResponse")
	ctx = transportx.InjectName(ctx, c.transportName)
	endpoint, err := c.endpoints.HttpBodyNamedResponse(ctx)
	if err != nil {
		return nil, err
	}
	rep, err := endpoint(ctx, request)
	if err != nil {
		return nil, statusx.From(err)
	}
	return rep.(*HttpBody), nil
}
func newResponseClientService(endpoints ResponseClientEndpoints, transportName string) ResponseService {
	return &responseClientService{endpoints: endpoints, transportName: transportName}
}
