// Code generated by protoc-gen-leo-core. DO NOT EDIT.

package response

import (
	context "context"
	endpoint "github.com/go-kit/kit/endpoint"
	sd "github.com/go-kit/kit/sd"
	log "github.com/go-kit/log"
	endpointx "github.com/go-leo/leo/v3/endpointx"
	transportx "github.com/go-leo/leo/v3/transportx"
	httpbody "google.golang.org/genproto/googleapis/api/httpbody"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	io "io"
)

type ResponseService interface {
	OmittedResponse(ctx context.Context, request *emptypb.Empty) (*UserResponse, error)
	StarResponse(ctx context.Context, request *emptypb.Empty) (*UserResponse, error)
	NamedResponse(ctx context.Context, request *emptypb.Empty) (*UserResponse, error)
	HttpBodyResponse(ctx context.Context, request *emptypb.Empty) (*httpbody.HttpBody, error)
	HttpBodyNamedResponse(ctx context.Context, request *emptypb.Empty) (*HttpBody, error)
}

type ResponseEndpoints interface {
	OmittedResponse(ctx context.Context) endpoint.Endpoint
	StarResponse(ctx context.Context) endpoint.Endpoint
	NamedResponse(ctx context.Context) endpoint.Endpoint
	HttpBodyResponse(ctx context.Context) endpoint.Endpoint
	HttpBodyNamedResponse(ctx context.Context) endpoint.Endpoint
}

type ResponseClientTransports interface {
	OmittedResponse() transportx.ClientTransport
	StarResponse() transportx.ClientTransport
	NamedResponse() transportx.ClientTransport
	HttpBodyResponse() transportx.ClientTransport
	HttpBodyNamedResponse() transportx.ClientTransport
}
type ResponseClientTransportsV2 interface {
	OmittedResponse(ctx context.Context, instance string) (endpoint.Endpoint, io.Closer, error)
	StarResponse(ctx context.Context, instance string) (endpoint.Endpoint, io.Closer, error)
	NamedResponse(ctx context.Context, instance string) (endpoint.Endpoint, io.Closer, error)
	HttpBodyResponse(ctx context.Context, instance string) (endpoint.Endpoint, io.Closer, error)
	HttpBodyNamedResponse(ctx context.Context, instance string) (endpoint.Endpoint, io.Closer, error)
}

type ResponseFactories interface {
	OmittedResponse(ctx context.Context) sd.Factory
	StarResponse(ctx context.Context) sd.Factory
	NamedResponse(ctx context.Context) sd.Factory
	HttpBodyResponse(ctx context.Context) sd.Factory
	HttpBodyNamedResponse(ctx context.Context) sd.Factory
}

type ResponseEndpointers interface {
	OmittedResponse(ctx context.Context) sd.Endpointer
	StarResponse(ctx context.Context) sd.Endpointer
	NamedResponse(ctx context.Context) sd.Endpointer
	HttpBodyResponse(ctx context.Context) sd.Endpointer
	HttpBodyNamedResponse(ctx context.Context) sd.Endpointer
}

type responseServerEndpoints struct {
	svc         ResponseService
	middlewares []endpoint.Middleware
}

func (e *responseServerEndpoints) OmittedResponse(context.Context) endpoint.Endpoint {
	component := func(ctx context.Context, request any) (any, error) {
		return e.svc.OmittedResponse(ctx, request.(*emptypb.Empty))
	}
	return endpointx.Chain(component, e.middlewares...)
}
func (e *responseServerEndpoints) StarResponse(context.Context) endpoint.Endpoint {
	component := func(ctx context.Context, request any) (any, error) {
		return e.svc.StarResponse(ctx, request.(*emptypb.Empty))
	}
	return endpointx.Chain(component, e.middlewares...)
}
func (e *responseServerEndpoints) NamedResponse(context.Context) endpoint.Endpoint {
	component := func(ctx context.Context, request any) (any, error) {
		return e.svc.NamedResponse(ctx, request.(*emptypb.Empty))
	}
	return endpointx.Chain(component, e.middlewares...)
}
func (e *responseServerEndpoints) HttpBodyResponse(context.Context) endpoint.Endpoint {
	component := func(ctx context.Context, request any) (any, error) {
		return e.svc.HttpBodyResponse(ctx, request.(*emptypb.Empty))
	}
	return endpointx.Chain(component, e.middlewares...)
}
func (e *responseServerEndpoints) HttpBodyNamedResponse(context.Context) endpoint.Endpoint {
	component := func(ctx context.Context, request any) (any, error) {
		return e.svc.HttpBodyNamedResponse(ctx, request.(*emptypb.Empty))
	}
	return endpointx.Chain(component, e.middlewares...)
}
func newResponseServerEndpoints(svc ResponseService, middlewares ...endpoint.Middleware) ResponseEndpoints {
	return &responseServerEndpoints{svc: svc, middlewares: middlewares}
}

type responseClientEndpoints struct {
	transports  ResponseClientTransports
	middlewares []endpoint.Middleware
}

func (e *responseClientEndpoints) OmittedResponse(ctx context.Context) endpoint.Endpoint {
	return endpointx.Chain(e.transports.OmittedResponse().Endpoint(ctx), e.middlewares...)
}
func (e *responseClientEndpoints) StarResponse(ctx context.Context) endpoint.Endpoint {
	return endpointx.Chain(e.transports.StarResponse().Endpoint(ctx), e.middlewares...)
}
func (e *responseClientEndpoints) NamedResponse(ctx context.Context) endpoint.Endpoint {
	return endpointx.Chain(e.transports.NamedResponse().Endpoint(ctx), e.middlewares...)
}
func (e *responseClientEndpoints) HttpBodyResponse(ctx context.Context) endpoint.Endpoint {
	return endpointx.Chain(e.transports.HttpBodyResponse().Endpoint(ctx), e.middlewares...)
}
func (e *responseClientEndpoints) HttpBodyNamedResponse(ctx context.Context) endpoint.Endpoint {
	return endpointx.Chain(e.transports.HttpBodyNamedResponse().Endpoint(ctx), e.middlewares...)
}
func newResponseClientEndpoints(transports ResponseClientTransports, middlewares ...endpoint.Middleware) ResponseEndpoints {
	return &responseClientEndpoints{transports: transports, middlewares: middlewares}
}

type responseFactories struct {
	transports ResponseClientTransportsV2
}

func (f *responseFactories) OmittedResponse(ctx context.Context) sd.Factory {
	return func(instance string) (endpoint.Endpoint, io.Closer, error) {
		return f.transports.OmittedResponse(ctx, instance)
	}
}
func (f *responseFactories) StarResponse(ctx context.Context) sd.Factory {
	return func(instance string) (endpoint.Endpoint, io.Closer, error) {
		return f.transports.StarResponse(ctx, instance)
	}
}
func (f *responseFactories) NamedResponse(ctx context.Context) sd.Factory {
	return func(instance string) (endpoint.Endpoint, io.Closer, error) {
		return f.transports.NamedResponse(ctx, instance)
	}
}
func (f *responseFactories) HttpBodyResponse(ctx context.Context) sd.Factory {
	return func(instance string) (endpoint.Endpoint, io.Closer, error) {
		return f.transports.HttpBodyResponse(ctx, instance)
	}
}
func (f *responseFactories) HttpBodyNamedResponse(ctx context.Context) sd.Factory {
	return func(instance string) (endpoint.Endpoint, io.Closer, error) {
		return f.transports.HttpBodyNamedResponse(ctx, instance)
	}
}
func newResponseFactories(transports ResponseClientTransportsV2) ResponseFactories {
	return &responseFactories{transports: transports}
}

type responseEndpointers struct {
	instancer sd.Instancer
	factories ResponseFactories
	logger    log.Logger
	options   []sd.EndpointerOption
}

func (e *responseEndpointers) OmittedResponse(ctx context.Context) sd.Endpointer {
	return sd.NewEndpointer(e.instancer, e.factories.OmittedResponse(ctx), e.logger, e.options...)
}
func (e *responseEndpointers) StarResponse(ctx context.Context) sd.Endpointer {
	return sd.NewEndpointer(e.instancer, e.factories.StarResponse(ctx), e.logger, e.options...)
}
func (e *responseEndpointers) NamedResponse(ctx context.Context) sd.Endpointer {
	return sd.NewEndpointer(e.instancer, e.factories.NamedResponse(ctx), e.logger, e.options...)
}
func (e *responseEndpointers) HttpBodyResponse(ctx context.Context) sd.Endpointer {
	return sd.NewEndpointer(e.instancer, e.factories.HttpBodyResponse(ctx), e.logger, e.options...)
}
func (e *responseEndpointers) HttpBodyNamedResponse(ctx context.Context) sd.Endpointer {
	return sd.NewEndpointer(e.instancer, e.factories.HttpBodyNamedResponse(ctx), e.logger, e.options...)
}
func newResponseEndpointers(instancer sd.Instancer, factories ResponseFactories, logger log.Logger, options ...sd.EndpointerOption) ResponseEndpointers {
	return &responseEndpointers{instancer: instancer, factories: factories, logger: logger, options: options}
}
