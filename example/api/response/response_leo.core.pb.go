// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package response

import (
	context "context"
	endpoint "github.com/go-kit/kit/endpoint"
	httpbody "google.golang.org/genproto/googleapis/api/httpbody"
	http "google.golang.org/genproto/googleapis/rpc/http"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

type responseEndpoints struct {
	svc interface {
		OmittedResponse(ctx context.Context, request *emptypb.Empty) (*UserResponse, error)
		StarResponse(ctx context.Context, request *emptypb.Empty) (*UserResponse, error)
		NamedResponse(ctx context.Context, request *emptypb.Empty) (*UserResponse, error)
		HttpBodyResponse(ctx context.Context, request *emptypb.Empty) (*httpbody.HttpBody, error)
		HttpBodyNamedResponse(ctx context.Context, request *emptypb.Empty) (*HttpBody, error)
		HttpRequestStarBody(ctx context.Context, request *http.HttpRequest) (*http.HttpResponse, error)
	}
}

func (e *responseEndpoints) OmittedResponse() endpoint.Endpoint {
	return func(ctx context.Context, request any) (any, error) {
		return e.svc.OmittedResponse(ctx, request.(*emptypb.Empty))
	}
}

func (e *responseEndpoints) StarResponse() endpoint.Endpoint {
	return func(ctx context.Context, request any) (any, error) {
		return e.svc.StarResponse(ctx, request.(*emptypb.Empty))
	}
}

func (e *responseEndpoints) NamedResponse() endpoint.Endpoint {
	return func(ctx context.Context, request any) (any, error) {
		return e.svc.NamedResponse(ctx, request.(*emptypb.Empty))
	}
}

func (e *responseEndpoints) HttpBodyResponse() endpoint.Endpoint {
	return func(ctx context.Context, request any) (any, error) {
		return e.svc.HttpBodyResponse(ctx, request.(*emptypb.Empty))
	}
}

func (e *responseEndpoints) HttpBodyNamedResponse() endpoint.Endpoint {
	return func(ctx context.Context, request any) (any, error) {
		return e.svc.HttpBodyNamedResponse(ctx, request.(*emptypb.Empty))
	}
}

func (e *responseEndpoints) HttpRequestStarBody() endpoint.Endpoint {
	return func(ctx context.Context, request any) (any, error) {
		return e.svc.HttpRequestStarBody(ctx, request.(*http.HttpRequest))
	}
}

func NewresponseEndpoints(
	svc interface {
		OmittedResponse(ctx context.Context, request *emptypb.Empty) (*UserResponse, error)
		StarResponse(ctx context.Context, request *emptypb.Empty) (*UserResponse, error)
		NamedResponse(ctx context.Context, request *emptypb.Empty) (*UserResponse, error)
		HttpBodyResponse(ctx context.Context, request *emptypb.Empty) (*httpbody.HttpBody, error)
		HttpBodyNamedResponse(ctx context.Context, request *emptypb.Empty) (*HttpBody, error)
		HttpRequestStarBody(ctx context.Context, request *http.HttpRequest) (*http.HttpResponse, error)
	},
) interface {
	OmittedResponse() endpoint.Endpoint
	StarResponse() endpoint.Endpoint
	NamedResponse() endpoint.Endpoint
	HttpBodyResponse() endpoint.Endpoint
	HttpBodyNamedResponse() endpoint.Endpoint
	HttpRequestStarBody() endpoint.Endpoint
} {
	return &responseEndpoints{svc: svc}
}
