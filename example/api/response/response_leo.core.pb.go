// Code generated by protoc-gen-leo-core. DO NOT EDIT.

package response

import (
	context "context"
	endpoint "github.com/go-kit/kit/endpoint"
	sd "github.com/go-kit/kit/sd"
	endpointx "github.com/go-leo/leo/v3/endpointx"
	transportx "github.com/go-leo/leo/v3/transportx"
	httpbody "google.golang.org/genproto/googleapis/api/httpbody"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

type ResponseService interface {
	OmittedResponse(ctx context.Context, request *emptypb.Empty) (*UserResponse, error)
	StarResponse(ctx context.Context, request *emptypb.Empty) (*UserResponse, error)
	NamedResponse(ctx context.Context, request *emptypb.Empty) (*UserResponse, error)
	HttpBodyResponse(ctx context.Context, request *emptypb.Empty) (*httpbody.HttpBody, error)
	HttpBodyNamedResponse(ctx context.Context, request *emptypb.Empty) (*HttpBody, error)
}

type ResponseEndpoints interface {
	OmittedResponse(ctx context.Context) endpoint.Endpoint
	StarResponse(ctx context.Context) endpoint.Endpoint
	NamedResponse(ctx context.Context) endpoint.Endpoint
	HttpBodyResponse(ctx context.Context) endpoint.Endpoint
	HttpBodyNamedResponse(ctx context.Context) endpoint.Endpoint
}

type ResponseClientTransports interface {
	OmittedResponse() transportx.ClientTransport
	StarResponse() transportx.ClientTransport
	NamedResponse() transportx.ClientTransport
	HttpBodyResponse() transportx.ClientTransport
	HttpBodyNamedResponse() transportx.ClientTransport
}

type ResponseFactories interface {
	OmittedResponse(middlewares ...endpoint.Middleware) sd.Factory
	StarResponse(middlewares ...endpoint.Middleware) sd.Factory
	NamedResponse(middlewares ...endpoint.Middleware) sd.Factory
	HttpBodyResponse(middlewares ...endpoint.Middleware) sd.Factory
	HttpBodyNamedResponse(middlewares ...endpoint.Middleware) sd.Factory
}

type ResponseEndpointers interface {
	OmittedResponse() sd.Endpointer
	StarResponse() sd.Endpointer
	NamedResponse() sd.Endpointer
	HttpBodyResponse() sd.Endpointer
	HttpBodyNamedResponse() sd.Endpointer
}

type responseServerEndpoints struct {
	svc         ResponseService
	middlewares []endpoint.Middleware
}

func (e *responseServerEndpoints) OmittedResponse(context.Context) endpoint.Endpoint {
	component := func(ctx context.Context, request any) (any, error) {
		return e.svc.OmittedResponse(ctx, request.(*emptypb.Empty))
	}
	return endpointx.Chain(component, e.middlewares...)
}

func (e *responseServerEndpoints) StarResponse(context.Context) endpoint.Endpoint {
	component := func(ctx context.Context, request any) (any, error) {
		return e.svc.StarResponse(ctx, request.(*emptypb.Empty))
	}
	return endpointx.Chain(component, e.middlewares...)
}

func (e *responseServerEndpoints) NamedResponse(context.Context) endpoint.Endpoint {
	component := func(ctx context.Context, request any) (any, error) {
		return e.svc.NamedResponse(ctx, request.(*emptypb.Empty))
	}
	return endpointx.Chain(component, e.middlewares...)
}

func (e *responseServerEndpoints) HttpBodyResponse(context.Context) endpoint.Endpoint {
	component := func(ctx context.Context, request any) (any, error) {
		return e.svc.HttpBodyResponse(ctx, request.(*emptypb.Empty))
	}
	return endpointx.Chain(component, e.middlewares...)
}

func (e *responseServerEndpoints) HttpBodyNamedResponse(context.Context) endpoint.Endpoint {
	component := func(ctx context.Context, request any) (any, error) {
		return e.svc.HttpBodyNamedResponse(ctx, request.(*emptypb.Empty))
	}
	return endpointx.Chain(component, e.middlewares...)
}

func newResponseServerEndpoints(svc ResponseService, middlewares ...endpoint.Middleware) ResponseEndpoints {
	return &responseServerEndpoints{svc: svc, middlewares: middlewares}
}

type responseClientEndpoints struct {
	transports  ResponseClientTransports
	middlewares []endpoint.Middleware
}

func (e *responseClientEndpoints) OmittedResponse(ctx context.Context) endpoint.Endpoint {
	return endpointx.Chain(e.transports.OmittedResponse().Endpoint(ctx), e.middlewares...)
}

func (e *responseClientEndpoints) StarResponse(ctx context.Context) endpoint.Endpoint {
	return endpointx.Chain(e.transports.StarResponse().Endpoint(ctx), e.middlewares...)
}

func (e *responseClientEndpoints) NamedResponse(ctx context.Context) endpoint.Endpoint {
	return endpointx.Chain(e.transports.NamedResponse().Endpoint(ctx), e.middlewares...)
}

func (e *responseClientEndpoints) HttpBodyResponse(ctx context.Context) endpoint.Endpoint {
	return endpointx.Chain(e.transports.HttpBodyResponse().Endpoint(ctx), e.middlewares...)
}

func (e *responseClientEndpoints) HttpBodyNamedResponse(ctx context.Context) endpoint.Endpoint {
	return endpointx.Chain(e.transports.HttpBodyNamedResponse().Endpoint(ctx), e.middlewares...)
}

func newResponseClientEndpoints(transports ResponseClientTransports, middlewares ...endpoint.Middleware) ResponseEndpoints {
	return &responseClientEndpoints{transports: transports, middlewares: middlewares}
}
