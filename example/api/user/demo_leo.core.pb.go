// Code generated by protoc-gen-go-leo. DO NOT EDIT.

package user

import (
	context "context"
	endpoint "github.com/go-kit/kit/endpoint"
	sd "github.com/go-kit/kit/sd"
	lb "github.com/go-kit/kit/sd/lb"
	log "github.com/go-kit/log"
	lazyloadx "github.com/go-leo/gox/syncx/lazyloadx"
	endpointx "github.com/go-leo/leo/v3/endpointx"
	sdx "github.com/go-leo/leo/v3/sdx"
	lbx "github.com/go-leo/leo/v3/sdx/lbx"
	stainx "github.com/go-leo/leo/v3/stainx"
	transportx "github.com/go-leo/leo/v3/transportx"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	io "io"
)

// UserManagerService is a service
type UserManagerService interface {
	CreateUser(ctx context.Context, request *CreateUserRequest) (*CreateUserResponse, error)
	DeleteUser(ctx context.Context, request *DeleteUsersRequest) (*emptypb.Empty, error)
	UpdateUser(ctx context.Context, request *UpdateUserRequest) (*emptypb.Empty, error)
	GetUser(ctx context.Context, request *GetUserRequest) (*GetUserResponse, error)
	GetUsers(ctx context.Context, request *GetUsersRequest) (*GetUsersResponse, error)
}

// UserManagerServerEndpoints is server endpoints
type UserManagerServerEndpoints interface {
	CreateUser(ctx context.Context) endpoint.Endpoint
	DeleteUser(ctx context.Context) endpoint.Endpoint
	UpdateUser(ctx context.Context) endpoint.Endpoint
	GetUser(ctx context.Context) endpoint.Endpoint
	GetUsers(ctx context.Context) endpoint.Endpoint
}

// UserManagerClientEndpoints is client endpoints
type UserManagerClientEndpoints interface {
	CreateUser(ctx context.Context) (endpoint.Endpoint, error)
	DeleteUser(ctx context.Context) (endpoint.Endpoint, error)
	UpdateUser(ctx context.Context) (endpoint.Endpoint, error)
	GetUser(ctx context.Context) (endpoint.Endpoint, error)
	GetUsers(ctx context.Context) (endpoint.Endpoint, error)
}

// UserManagerClientTransports is client transports
type UserManagerClientTransports interface {
	CreateUser(ctx context.Context, instance string) (endpoint.Endpoint, io.Closer, error)
	DeleteUser(ctx context.Context, instance string) (endpoint.Endpoint, io.Closer, error)
	UpdateUser(ctx context.Context, instance string) (endpoint.Endpoint, io.Closer, error)
	GetUser(ctx context.Context, instance string) (endpoint.Endpoint, io.Closer, error)
	GetUsers(ctx context.Context, instance string) (endpoint.Endpoint, io.Closer, error)
}

// UserManagerFactories is client factories
type UserManagerFactories interface {
	CreateUser(ctx context.Context) sd.Factory
	DeleteUser(ctx context.Context) sd.Factory
	UpdateUser(ctx context.Context) sd.Factory
	GetUser(ctx context.Context) sd.Factory
	GetUsers(ctx context.Context) sd.Factory
}

// UserManagerEndpointers is client endpointers
type UserManagerEndpointers interface {
	CreateUser(ctx context.Context, color string) (sd.Endpointer, error)
	DeleteUser(ctx context.Context, color string) (sd.Endpointer, error)
	UpdateUser(ctx context.Context, color string) (sd.Endpointer, error)
	GetUser(ctx context.Context, color string) (sd.Endpointer, error)
	GetUsers(ctx context.Context, color string) (sd.Endpointer, error)
}

// UserManagerBalancers is client balancers
type UserManagerBalancers interface {
	CreateUser(ctx context.Context) (lb.Balancer, error)
	DeleteUser(ctx context.Context) (lb.Balancer, error)
	UpdateUser(ctx context.Context) (lb.Balancer, error)
	GetUser(ctx context.Context) (lb.Balancer, error)
	GetUsers(ctx context.Context) (lb.Balancer, error)
}

// userManagerServerEndpoints implements UserManagerServerEndpoints
type userManagerServerEndpoints struct {
	svc         UserManagerService
	middlewares []endpoint.Middleware
}

func (e *userManagerServerEndpoints) CreateUser(context.Context) endpoint.Endpoint {
	component := func(ctx context.Context, request any) (any, error) {
		return e.svc.CreateUser(ctx, request.(*CreateUserRequest))
	}
	return endpointx.Chain(component, e.middlewares...)
}

func (e *userManagerServerEndpoints) DeleteUser(context.Context) endpoint.Endpoint {
	component := func(ctx context.Context, request any) (any, error) {
		return e.svc.DeleteUser(ctx, request.(*DeleteUsersRequest))
	}
	return endpointx.Chain(component, e.middlewares...)
}

func (e *userManagerServerEndpoints) UpdateUser(context.Context) endpoint.Endpoint {
	component := func(ctx context.Context, request any) (any, error) {
		return e.svc.UpdateUser(ctx, request.(*UpdateUserRequest))
	}
	return endpointx.Chain(component, e.middlewares...)
}

func (e *userManagerServerEndpoints) GetUser(context.Context) endpoint.Endpoint {
	component := func(ctx context.Context, request any) (any, error) {
		return e.svc.GetUser(ctx, request.(*GetUserRequest))
	}
	return endpointx.Chain(component, e.middlewares...)
}

func (e *userManagerServerEndpoints) GetUsers(context.Context) endpoint.Endpoint {
	component := func(ctx context.Context, request any) (any, error) {
		return e.svc.GetUsers(ctx, request.(*GetUsersRequest))
	}
	return endpointx.Chain(component, e.middlewares...)
}

// userManagerFactories implements UserManagerFactories
type userManagerFactories struct {
	transports UserManagerClientTransports
}

func (f *userManagerFactories) CreateUser(ctx context.Context) sd.Factory {
	return func(instance string) (endpoint.Endpoint, io.Closer, error) {
		return f.transports.CreateUser(ctx, instance)
	}
}

func (f *userManagerFactories) DeleteUser(ctx context.Context) sd.Factory {
	return func(instance string) (endpoint.Endpoint, io.Closer, error) {
		return f.transports.DeleteUser(ctx, instance)
	}
}

func (f *userManagerFactories) UpdateUser(ctx context.Context) sd.Factory {
	return func(instance string) (endpoint.Endpoint, io.Closer, error) {
		return f.transports.UpdateUser(ctx, instance)
	}
}

func (f *userManagerFactories) GetUser(ctx context.Context) sd.Factory {
	return func(instance string) (endpoint.Endpoint, io.Closer, error) {
		return f.transports.GetUser(ctx, instance)
	}
}

func (f *userManagerFactories) GetUsers(ctx context.Context) sd.Factory {
	return func(instance string) (endpoint.Endpoint, io.Closer, error) {
		return f.transports.GetUsers(ctx, instance)
	}
}

// userManagerEndpointers implements UserManagerEndpointers
type userManagerEndpointers struct {
	target    string
	builder   sdx.Builder
	factories UserManagerFactories
	logger    log.Logger
	options   []sd.EndpointerOption
}

func (e *userManagerEndpointers) CreateUser(ctx context.Context, color string) (sd.Endpointer, error) {
	return sdx.NewEndpointer(ctx, e.target, color, e.builder, e.factories.CreateUser(ctx), e.logger, e.options...)
}

func (e *userManagerEndpointers) DeleteUser(ctx context.Context, color string) (sd.Endpointer, error) {
	return sdx.NewEndpointer(ctx, e.target, color, e.builder, e.factories.DeleteUser(ctx), e.logger, e.options...)
}

func (e *userManagerEndpointers) UpdateUser(ctx context.Context, color string) (sd.Endpointer, error) {
	return sdx.NewEndpointer(ctx, e.target, color, e.builder, e.factories.UpdateUser(ctx), e.logger, e.options...)
}

func (e *userManagerEndpointers) GetUser(ctx context.Context, color string) (sd.Endpointer, error) {
	return sdx.NewEndpointer(ctx, e.target, color, e.builder, e.factories.GetUser(ctx), e.logger, e.options...)
}

func (e *userManagerEndpointers) GetUsers(ctx context.Context, color string) (sd.Endpointer, error) {
	return sdx.NewEndpointer(ctx, e.target, color, e.builder, e.factories.GetUsers(ctx), e.logger, e.options...)
}

// userManagerBalancers implements UserManagerBalancers
type userManagerBalancers struct {
	factory    lbx.BalancerFactory
	endpointer UserManagerEndpointers
	createUser lazyloadx.Group[lb.Balancer]
	deleteUser lazyloadx.Group[lb.Balancer]
	updateUser lazyloadx.Group[lb.Balancer]
	getUser    lazyloadx.Group[lb.Balancer]
	getUsers   lazyloadx.Group[lb.Balancer]
}

func (b *userManagerBalancers) CreateUser(ctx context.Context) (lb.Balancer, error) {
	color, _ := stainx.ExtractColor(ctx)
	balancer, err, _ := b.createUser.LoadOrNew(color, lbx.NewBalancer(ctx, b.factory, b.endpointer.CreateUser))
	return balancer, err
}
func (b *userManagerBalancers) DeleteUser(ctx context.Context) (lb.Balancer, error) {
	color, _ := stainx.ExtractColor(ctx)
	balancer, err, _ := b.deleteUser.LoadOrNew(color, lbx.NewBalancer(ctx, b.factory, b.endpointer.DeleteUser))
	return balancer, err
}
func (b *userManagerBalancers) UpdateUser(ctx context.Context) (lb.Balancer, error) {
	color, _ := stainx.ExtractColor(ctx)
	balancer, err, _ := b.updateUser.LoadOrNew(color, lbx.NewBalancer(ctx, b.factory, b.endpointer.UpdateUser))
	return balancer, err
}
func (b *userManagerBalancers) GetUser(ctx context.Context) (lb.Balancer, error) {
	color, _ := stainx.ExtractColor(ctx)
	balancer, err, _ := b.getUser.LoadOrNew(color, lbx.NewBalancer(ctx, b.factory, b.endpointer.GetUser))
	return balancer, err
}
func (b *userManagerBalancers) GetUsers(ctx context.Context) (lb.Balancer, error) {
	color, _ := stainx.ExtractColor(ctx)
	balancer, err, _ := b.getUsers.LoadOrNew(color, lbx.NewBalancer(ctx, b.factory, b.endpointer.GetUsers))
	return balancer, err
}
func newUserManagerBalancers(factory lbx.BalancerFactory, endpointer UserManagerEndpointers) UserManagerBalancers {
	return &userManagerBalancers{
		factory:    factory,
		endpointer: endpointer,
		createUser: lazyloadx.Group[lb.Balancer]{},
		deleteUser: lazyloadx.Group[lb.Balancer]{},
		updateUser: lazyloadx.Group[lb.Balancer]{},
		getUser:    lazyloadx.Group[lb.Balancer]{},
		getUsers:   lazyloadx.Group[lb.Balancer]{},
	}
}

// userManagerClientEndpoints implements UserManagerClientEndpoints
type userManagerClientEndpoints struct {
	balancers UserManagerBalancers
}

func (e *userManagerClientEndpoints) CreateUser(ctx context.Context) (endpoint.Endpoint, error) {
	balancer, err := e.balancers.CreateUser(ctx)
	if err != nil {
		return nil, err
	}
	return balancer.Endpoint()
}

func (e *userManagerClientEndpoints) DeleteUser(ctx context.Context) (endpoint.Endpoint, error) {
	balancer, err := e.balancers.DeleteUser(ctx)
	if err != nil {
		return nil, err
	}
	return balancer.Endpoint()
}

func (e *userManagerClientEndpoints) UpdateUser(ctx context.Context) (endpoint.Endpoint, error) {
	balancer, err := e.balancers.UpdateUser(ctx)
	if err != nil {
		return nil, err
	}
	return balancer.Endpoint()
}

func (e *userManagerClientEndpoints) GetUser(ctx context.Context) (endpoint.Endpoint, error) {
	balancer, err := e.balancers.GetUser(ctx)
	if err != nil {
		return nil, err
	}
	return balancer.Endpoint()
}

func (e *userManagerClientEndpoints) GetUsers(ctx context.Context) (endpoint.Endpoint, error) {
	balancer, err := e.balancers.GetUsers(ctx)
	if err != nil {
		return nil, err
	}
	return balancer.Endpoint()
}

// userManagerClientService implements UserManagerClientService
type userManagerClientService struct {
	endpoints     UserManagerClientEndpoints
	transportName string
}

func (c *userManagerClientService) CreateUser(ctx context.Context, request *CreateUserRequest) (*CreateUserResponse, error) {
	ctx = endpointx.InjectName(ctx, "/leo.example.user.v1.UserManager/CreateUser")
	ctx = transportx.InjectName(ctx, c.transportName)
	endpoint, err := c.endpoints.CreateUser(ctx)
	if err != nil {
		return nil, err
	}
	rep, err := endpoint(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*CreateUserResponse), nil
}

func (c *userManagerClientService) DeleteUser(ctx context.Context, request *DeleteUsersRequest) (*emptypb.Empty, error) {
	ctx = endpointx.InjectName(ctx, "/leo.example.user.v1.UserManager/DeleteUser")
	ctx = transportx.InjectName(ctx, c.transportName)
	endpoint, err := c.endpoints.DeleteUser(ctx)
	if err != nil {
		return nil, err
	}
	rep, err := endpoint(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*emptypb.Empty), nil
}

func (c *userManagerClientService) UpdateUser(ctx context.Context, request *UpdateUserRequest) (*emptypb.Empty, error) {
	ctx = endpointx.InjectName(ctx, "/leo.example.user.v1.UserManager/UpdateUser")
	ctx = transportx.InjectName(ctx, c.transportName)
	endpoint, err := c.endpoints.UpdateUser(ctx)
	if err != nil {
		return nil, err
	}
	rep, err := endpoint(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*emptypb.Empty), nil
}

func (c *userManagerClientService) GetUser(ctx context.Context, request *GetUserRequest) (*GetUserResponse, error) {
	ctx = endpointx.InjectName(ctx, "/leo.example.user.v1.UserManager/GetUser")
	ctx = transportx.InjectName(ctx, c.transportName)
	endpoint, err := c.endpoints.GetUser(ctx)
	if err != nil {
		return nil, err
	}
	rep, err := endpoint(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*GetUserResponse), nil
}

func (c *userManagerClientService) GetUsers(ctx context.Context, request *GetUsersRequest) (*GetUsersResponse, error) {
	ctx = endpointx.InjectName(ctx, "/leo.example.user.v1.UserManager/GetUsers")
	ctx = transportx.InjectName(ctx, c.transportName)
	endpoint, err := c.endpoints.GetUsers(ctx)
	if err != nil {
		return nil, err
	}
	rep, err := endpoint(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*GetUsersResponse), nil
}
