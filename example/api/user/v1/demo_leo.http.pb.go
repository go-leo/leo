// Code generated by protoc-gen-go-leo. DO NOT EDIT.

package user

import (
	bytes "bytes"
	context "context"
	errors "errors"
	fmt "fmt"
	endpoint "github.com/go-kit/kit/endpoint"
	http1 "github.com/go-kit/kit/transport/http"
	httpx "github.com/go-leo/gox/netx/httpx"
	urlx "github.com/go-leo/gox/netx/urlx"
	strconvx "github.com/go-leo/gox/strconvx"
	endpointx "github.com/go-leo/leo/v3/endpointx"
	metadatax "github.com/go-leo/leo/v3/metadatax"
	stainx "github.com/go-leo/leo/v3/stainx"
	timeoutx "github.com/go-leo/leo/v3/timeoutx"
	httptransportx "github.com/go-leo/leo/v3/transportx/httptransportx"
	coder "github.com/go-leo/leo/v3/transportx/httptransportx/coder"
	mux "github.com/gorilla/mux"
	protojson "google.golang.org/protobuf/encoding/protojson"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	io "io"
	http "net/http"
	url "net/url"
)

func appendUserManagerHttpRoutes(router *mux.Router) *mux.Router {
	router.NewRoute().
		Name("/leo.example.user.v1.UserManager/CreateUser").
		Methods(http.MethodPost).
		Path("/v1/user")
	router.NewRoute().
		Name("/leo.example.user.v1.UserManager/DeleteUser").
		Methods(http.MethodDelete).
		Path("/v1/user/{user_id}")
	router.NewRoute().
		Name("/leo.example.user.v1.UserManager/UpdateUser").
		Methods(http.MethodPut).
		Path("/v1/user/{user_id}")
	router.NewRoute().
		Name("/leo.example.user.v1.UserManager/GetUser").
		Methods(http.MethodGet).
		Path("/v1/user/{user_id}")
	router.NewRoute().
		Name("/leo.example.user.v1.UserManager/GetUsers").
		Methods(http.MethodGet).
		Path("/v1/users")
	return router
}
func AppendUserManagerHttpServerRoutes(router *mux.Router, svc UserManagerService, opts ...httptransportx.ServerOption) *mux.Router {
	options := httptransportx.NewServerOptions(opts...)
	endpoints := &userManagerServerEndpoints{
		svc:         svc,
		middlewares: options.Middlewares(),
	}
	requestDecoder := userManagerHttpServerRequestDecoder{
		unmarshalOptions: options.UnmarshalOptions(),
	}
	responseEncoder := userManagerHttpServerResponseEncoder{
		marshalOptions: options.MarshalOptions(),
	}
	transports := &userManagerHttpServerTransports{
		endpoints:       endpoints,
		requestDecoder:  requestDecoder,
		responseEncoder: responseEncoder,
	}
	router = appendUserManagerHttpRoutes(router)
	router.Get("/leo.example.user.v1.UserManager/CreateUser").Handler(transports.CreateUser())
	router.Get("/leo.example.user.v1.UserManager/DeleteUser").Handler(transports.DeleteUser())
	router.Get("/leo.example.user.v1.UserManager/UpdateUser").Handler(transports.UpdateUser())
	router.Get("/leo.example.user.v1.UserManager/GetUser").Handler(transports.GetUser())
	router.Get("/leo.example.user.v1.UserManager/GetUsers").Handler(transports.GetUsers())
	return router
}

func NewUserManagerHttpClient(target string, opts ...httptransportx.ClientOption) UserManagerService {
	options := httptransportx.NewClientOptions(opts...)
	requestEncoder := &userManagerHttpClientRequestEncoder{
		marshalOptions: options.MarshalOptions(),
		router:         appendUserManagerHttpRoutes(mux.NewRouter()),
		scheme:         options.Scheme(),
	}
	responseDecoder := &userManagerHttpClientResponseDecoder{
		unmarshalOptions: options.UnmarshalOptions(),
	}
	transports := &userManagerHttpClientTransports{
		clientOptions:   options.ClientTransportOptions(),
		middlewares:     options.Middlewares(),
		requestEncoder:  requestEncoder,
		responseDecoder: responseDecoder,
	}
	factories := &userManagerFactories{
		transports: transports,
	}
	endpointer := &userManagerEndpointers{
		target:    target,
		builder:   options.Builder(),
		factories: factories,
		logger:    options.Logger(),
		options:   options.EndpointerOptions(),
	}
	balancers := &userManagerBalancers{
		factory:    options.BalancerFactory(),
		endpointer: endpointer,
	}
	endpoints := &userManagerClientEndpoints{
		balancers: balancers,
	}
	return &userManagerClientService{
		endpoints:     endpoints,
		transportName: httptransportx.HttpClient,
	}
}

type UserManagerHttpServerTransports interface {
	CreateUser() http.Handler
	DeleteUser() http.Handler
	UpdateUser() http.Handler
	GetUser() http.Handler
	GetUsers() http.Handler
}

type UserManagerHttpServerRequestDecoder interface {
	CreateUser() http1.DecodeRequestFunc
	DeleteUser() http1.DecodeRequestFunc
	UpdateUser() http1.DecodeRequestFunc
	GetUser() http1.DecodeRequestFunc
	GetUsers() http1.DecodeRequestFunc
}

type UserManagerHttpServerResponseEncoder interface {
	CreateUser() http1.EncodeResponseFunc
	DeleteUser() http1.EncodeResponseFunc
	UpdateUser() http1.EncodeResponseFunc
	GetUser() http1.EncodeResponseFunc
	GetUsers() http1.EncodeResponseFunc
}

type UserManagerHttpClientRequestEncoder interface {
	CreateUser(instance string) http1.CreateRequestFunc
	DeleteUser(instance string) http1.CreateRequestFunc
	UpdateUser(instance string) http1.CreateRequestFunc
	GetUser(instance string) http1.CreateRequestFunc
	GetUsers(instance string) http1.CreateRequestFunc
}

type UserManagerHttpClientResponseDecoder interface {
	CreateUser() http1.DecodeResponseFunc
	DeleteUser() http1.DecodeResponseFunc
	UpdateUser() http1.DecodeResponseFunc
	GetUser() http1.DecodeResponseFunc
	GetUsers() http1.DecodeResponseFunc
}

type userManagerHttpServerTransports struct {
	endpoints       UserManagerServerEndpoints
	requestDecoder  UserManagerHttpServerRequestDecoder
	responseEncoder UserManagerHttpServerResponseEncoder
}

func (t *userManagerHttpServerTransports) CreateUser() http.Handler {
	return http1.NewServer(
		t.endpoints.CreateUser(context.TODO()),
		t.requestDecoder.CreateUser(),
		t.responseEncoder.CreateUser(),
		http1.ServerBefore(httptransportx.EndpointInjector("/leo.example.user.v1.UserManager/CreateUser")),
		http1.ServerBefore(httptransportx.ServerTransportInjector),
		http1.ServerBefore(metadatax.HttpIncomingInjector),
		http1.ServerBefore(timeoutx.IncomingInjector),
		http1.ServerBefore(stainx.HttpIncomingInjector),
		http1.ServerFinalizer(timeoutx.CancelInvoker),
		http1.ServerErrorEncoder(coder.EncodeErrorToResponse),
	)
}

func (t *userManagerHttpServerTransports) DeleteUser() http.Handler {
	return http1.NewServer(
		t.endpoints.DeleteUser(context.TODO()),
		t.requestDecoder.DeleteUser(),
		t.responseEncoder.DeleteUser(),
		http1.ServerBefore(httptransportx.EndpointInjector("/leo.example.user.v1.UserManager/DeleteUser")),
		http1.ServerBefore(httptransportx.ServerTransportInjector),
		http1.ServerBefore(metadatax.HttpIncomingInjector),
		http1.ServerBefore(timeoutx.IncomingInjector),
		http1.ServerBefore(stainx.HttpIncomingInjector),
		http1.ServerFinalizer(timeoutx.CancelInvoker),
		http1.ServerErrorEncoder(coder.EncodeErrorToResponse),
	)
}

func (t *userManagerHttpServerTransports) UpdateUser() http.Handler {
	return http1.NewServer(
		t.endpoints.UpdateUser(context.TODO()),
		t.requestDecoder.UpdateUser(),
		t.responseEncoder.UpdateUser(),
		http1.ServerBefore(httptransportx.EndpointInjector("/leo.example.user.v1.UserManager/UpdateUser")),
		http1.ServerBefore(httptransportx.ServerTransportInjector),
		http1.ServerBefore(metadatax.HttpIncomingInjector),
		http1.ServerBefore(timeoutx.IncomingInjector),
		http1.ServerBefore(stainx.HttpIncomingInjector),
		http1.ServerFinalizer(timeoutx.CancelInvoker),
		http1.ServerErrorEncoder(coder.EncodeErrorToResponse),
	)
}

func (t *userManagerHttpServerTransports) GetUser() http.Handler {
	return http1.NewServer(
		t.endpoints.GetUser(context.TODO()),
		t.requestDecoder.GetUser(),
		t.responseEncoder.GetUser(),
		http1.ServerBefore(httptransportx.EndpointInjector("/leo.example.user.v1.UserManager/GetUser")),
		http1.ServerBefore(httptransportx.ServerTransportInjector),
		http1.ServerBefore(metadatax.HttpIncomingInjector),
		http1.ServerBefore(timeoutx.IncomingInjector),
		http1.ServerBefore(stainx.HttpIncomingInjector),
		http1.ServerFinalizer(timeoutx.CancelInvoker),
		http1.ServerErrorEncoder(coder.EncodeErrorToResponse),
	)
}

func (t *userManagerHttpServerTransports) GetUsers() http.Handler {
	return http1.NewServer(
		t.endpoints.GetUsers(context.TODO()),
		t.requestDecoder.GetUsers(),
		t.responseEncoder.GetUsers(),
		http1.ServerBefore(httptransportx.EndpointInjector("/leo.example.user.v1.UserManager/GetUsers")),
		http1.ServerBefore(httptransportx.ServerTransportInjector),
		http1.ServerBefore(metadatax.HttpIncomingInjector),
		http1.ServerBefore(timeoutx.IncomingInjector),
		http1.ServerBefore(stainx.HttpIncomingInjector),
		http1.ServerFinalizer(timeoutx.CancelInvoker),
		http1.ServerErrorEncoder(coder.EncodeErrorToResponse),
	)
}

type userManagerHttpServerRequestDecoder struct {
	unmarshalOptions protojson.UnmarshalOptions
}

func (decoder userManagerHttpServerRequestDecoder) CreateUser() http1.DecodeRequestFunc {
	return func(ctx context.Context, r *http.Request) (any, error) {
		req := &CreateUserRequest{}
		if err := coder.DecodeMessageFromRequest(ctx, r, req, decoder.unmarshalOptions); err != nil {
			return nil, err
		}
		return req, nil
	}
}
func (decoder userManagerHttpServerRequestDecoder) DeleteUser() http1.DecodeRequestFunc {
	return func(ctx context.Context, r *http.Request) (any, error) {
		req := &DeleteUsersRequest{}
		vars := urlx.FormFromMap(mux.Vars(r))
		var varErr error
		req.UserId, varErr = coder.DecodeForm[uint64](varErr, vars, "user_id", urlx.GetUint)
		if varErr != nil {
			return nil, varErr
		}
		return req, nil
	}
}
func (decoder userManagerHttpServerRequestDecoder) UpdateUser() http1.DecodeRequestFunc {
	return func(ctx context.Context, r *http.Request) (any, error) {
		req := &UpdateUserRequest{}
		req.User = &User{}
		if err := coder.DecodeMessageFromRequest(ctx, r, req.GetUser(), decoder.unmarshalOptions); err != nil {
			return nil, err
		}
		vars := urlx.FormFromMap(mux.Vars(r))
		var varErr error
		req.UserId, varErr = coder.DecodeForm[uint64](varErr, vars, "user_id", urlx.GetUint)
		if varErr != nil {
			return nil, varErr
		}
		return req, nil
	}
}
func (decoder userManagerHttpServerRequestDecoder) GetUser() http1.DecodeRequestFunc {
	return func(ctx context.Context, r *http.Request) (any, error) {
		req := &GetUserRequest{}
		vars := urlx.FormFromMap(mux.Vars(r))
		var varErr error
		req.UserId, varErr = coder.DecodeForm[uint64](varErr, vars, "user_id", urlx.GetUint)
		if varErr != nil {
			return nil, varErr
		}
		return req, nil
	}
}
func (decoder userManagerHttpServerRequestDecoder) GetUsers() http1.DecodeRequestFunc {
	return func(ctx context.Context, r *http.Request) (any, error) {
		req := &GetUsersRequest{}
		queries := r.URL.Query()
		var queryErr error
		req.PageNo, queryErr = coder.DecodeForm[int32](queryErr, queries, "page_no", urlx.GetInt[int32])
		req.PageSize, queryErr = coder.DecodeForm[int32](queryErr, queries, "page_size", urlx.GetInt[int32])
		if queryErr != nil {
			return nil, queryErr
		}
		return req, nil
	}
}

type userManagerHttpServerResponseEncoder struct {
	marshalOptions protojson.MarshalOptions
}

func (encoder userManagerHttpServerResponseEncoder) CreateUser() http1.EncodeResponseFunc {
	return func(ctx context.Context, w http.ResponseWriter, obj any) error {
		resp := obj.(*CreateUserResponse)
		return coder.EncodeMessageToResponse(ctx, w, resp, encoder.marshalOptions)
	}
}
func (encoder userManagerHttpServerResponseEncoder) DeleteUser() http1.EncodeResponseFunc {
	return func(ctx context.Context, w http.ResponseWriter, obj any) error {
		resp := obj.(*emptypb.Empty)
		return coder.EncodeMessageToResponse(ctx, w, resp, encoder.marshalOptions)
	}
}
func (encoder userManagerHttpServerResponseEncoder) UpdateUser() http1.EncodeResponseFunc {
	return func(ctx context.Context, w http.ResponseWriter, obj any) error {
		resp := obj.(*emptypb.Empty)
		return coder.EncodeMessageToResponse(ctx, w, resp, encoder.marshalOptions)
	}
}
func (encoder userManagerHttpServerResponseEncoder) GetUser() http1.EncodeResponseFunc {
	return func(ctx context.Context, w http.ResponseWriter, obj any) error {
		resp := obj.(*GetUserResponse)
		return coder.EncodeMessageToResponse(ctx, w, resp, encoder.marshalOptions)
	}
}
func (encoder userManagerHttpServerResponseEncoder) GetUsers() http1.EncodeResponseFunc {
	return func(ctx context.Context, w http.ResponseWriter, obj any) error {
		resp := obj.(*GetUsersResponse)
		return coder.EncodeMessageToResponse(ctx, w, resp, encoder.marshalOptions)
	}
}

type userManagerHttpClientTransports struct {
	clientOptions   []http1.ClientOption
	middlewares     []endpoint.Middleware
	requestEncoder  UserManagerHttpClientRequestEncoder
	responseDecoder UserManagerHttpClientResponseDecoder
}

func (t *userManagerHttpClientTransports) CreateUser(ctx context.Context, instance string) (endpoint.Endpoint, io.Closer, error) {
	opts := []http1.ClientOption{
		http1.ClientBefore(metadatax.HttpOutgoingInjector),
		http1.ClientBefore(timeoutx.OutgoingInjector),
		http1.ClientBefore(stainx.HttpOutgoingInjector),
	}
	opts = append(opts, t.clientOptions...)
	client := http1.NewExplicitClient(
		t.requestEncoder.CreateUser(instance),
		t.responseDecoder.CreateUser(),
		opts...,
	)
	return endpointx.Chain(client.Endpoint(), t.middlewares...), nil, nil
}

func (t *userManagerHttpClientTransports) DeleteUser(ctx context.Context, instance string) (endpoint.Endpoint, io.Closer, error) {
	opts := []http1.ClientOption{
		http1.ClientBefore(metadatax.HttpOutgoingInjector),
		http1.ClientBefore(timeoutx.OutgoingInjector),
		http1.ClientBefore(stainx.HttpOutgoingInjector),
	}
	opts = append(opts, t.clientOptions...)
	client := http1.NewExplicitClient(
		t.requestEncoder.DeleteUser(instance),
		t.responseDecoder.DeleteUser(),
		opts...,
	)
	return endpointx.Chain(client.Endpoint(), t.middlewares...), nil, nil
}

func (t *userManagerHttpClientTransports) UpdateUser(ctx context.Context, instance string) (endpoint.Endpoint, io.Closer, error) {
	opts := []http1.ClientOption{
		http1.ClientBefore(metadatax.HttpOutgoingInjector),
		http1.ClientBefore(timeoutx.OutgoingInjector),
		http1.ClientBefore(stainx.HttpOutgoingInjector),
	}
	opts = append(opts, t.clientOptions...)
	client := http1.NewExplicitClient(
		t.requestEncoder.UpdateUser(instance),
		t.responseDecoder.UpdateUser(),
		opts...,
	)
	return endpointx.Chain(client.Endpoint(), t.middlewares...), nil, nil
}

func (t *userManagerHttpClientTransports) GetUser(ctx context.Context, instance string) (endpoint.Endpoint, io.Closer, error) {
	opts := []http1.ClientOption{
		http1.ClientBefore(metadatax.HttpOutgoingInjector),
		http1.ClientBefore(timeoutx.OutgoingInjector),
		http1.ClientBefore(stainx.HttpOutgoingInjector),
	}
	opts = append(opts, t.clientOptions...)
	client := http1.NewExplicitClient(
		t.requestEncoder.GetUser(instance),
		t.responseDecoder.GetUser(),
		opts...,
	)
	return endpointx.Chain(client.Endpoint(), t.middlewares...), nil, nil
}

func (t *userManagerHttpClientTransports) GetUsers(ctx context.Context, instance string) (endpoint.Endpoint, io.Closer, error) {
	opts := []http1.ClientOption{
		http1.ClientBefore(metadatax.HttpOutgoingInjector),
		http1.ClientBefore(timeoutx.OutgoingInjector),
		http1.ClientBefore(stainx.HttpOutgoingInjector),
	}
	opts = append(opts, t.clientOptions...)
	client := http1.NewExplicitClient(
		t.requestEncoder.GetUsers(instance),
		t.responseDecoder.GetUsers(),
		opts...,
	)
	return endpointx.Chain(client.Endpoint(), t.middlewares...), nil, nil
}

type userManagerHttpClientRequestEncoder struct {
	marshalOptions protojson.MarshalOptions
	router         *mux.Router
	scheme         string
}

func (encoder userManagerHttpClientRequestEncoder) CreateUser(instance string) http1.CreateRequestFunc {
	return func(ctx context.Context, obj any) (*http.Request, error) {
		if obj == nil {
			return nil, errors.New("request is nil")
		}
		req, ok := obj.(*CreateUserRequest)
		if !ok {
			return nil, fmt.Errorf("invalid request type, %T", obj)
		}
		_ = req
		method := http.MethodPost
		target := &url.URL{
			Scheme: encoder.scheme,
			Host:   instance,
		}
		header := http.Header{}
		var body bytes.Buffer
		if err := coder.EncodeMessageToRequest(ctx, req, header, &body, encoder.marshalOptions); err != nil {
			return nil, err
		}
		var pairs []string
		path, err := encoder.router.Get("/leo.example.user.v1.UserManager/CreateUser").URLPath(pairs...)
		if err != nil {
			return nil, err
		}
		target.Path = path.Path
		r, err := http.NewRequestWithContext(ctx, method, target.String(), &body)
		if err != nil {
			return nil, err
		}
		httpx.CopyHeader(r.Header, header)
		return r, nil
	}
}
func (encoder userManagerHttpClientRequestEncoder) DeleteUser(instance string) http1.CreateRequestFunc {
	return func(ctx context.Context, obj any) (*http.Request, error) {
		if obj == nil {
			return nil, errors.New("request is nil")
		}
		req, ok := obj.(*DeleteUsersRequest)
		if !ok {
			return nil, fmt.Errorf("invalid request type, %T", obj)
		}
		_ = req
		method := http.MethodDelete
		target := &url.URL{
			Scheme: encoder.scheme,
			Host:   instance,
		}
		header := http.Header{}
		var body bytes.Buffer
		var pairs []string
		pairs = append(pairs,
			"user_id", strconvx.FormatUint(req.GetUserId(), 10),
		)
		path, err := encoder.router.Get("/leo.example.user.v1.UserManager/DeleteUser").URLPath(pairs...)
		if err != nil {
			return nil, err
		}
		target.Path = path.Path
		r, err := http.NewRequestWithContext(ctx, method, target.String(), &body)
		if err != nil {
			return nil, err
		}
		httpx.CopyHeader(r.Header, header)
		return r, nil
	}
}
func (encoder userManagerHttpClientRequestEncoder) UpdateUser(instance string) http1.CreateRequestFunc {
	return func(ctx context.Context, obj any) (*http.Request, error) {
		if obj == nil {
			return nil, errors.New("request is nil")
		}
		req, ok := obj.(*UpdateUserRequest)
		if !ok {
			return nil, fmt.Errorf("invalid request type, %T", obj)
		}
		_ = req
		method := http.MethodPut
		target := &url.URL{
			Scheme: encoder.scheme,
			Host:   instance,
		}
		header := http.Header{}
		var body bytes.Buffer
		if err := coder.EncodeMessageToRequest(ctx, req.GetUser(), header, &body, encoder.marshalOptions); err != nil {
			return nil, err
		}
		var pairs []string
		pairs = append(pairs,
			"user_id", strconvx.FormatUint(req.GetUserId(), 10),
		)
		path, err := encoder.router.Get("/leo.example.user.v1.UserManager/UpdateUser").URLPath(pairs...)
		if err != nil {
			return nil, err
		}
		target.Path = path.Path
		r, err := http.NewRequestWithContext(ctx, method, target.String(), &body)
		if err != nil {
			return nil, err
		}
		httpx.CopyHeader(r.Header, header)
		return r, nil
	}
}
func (encoder userManagerHttpClientRequestEncoder) GetUser(instance string) http1.CreateRequestFunc {
	return func(ctx context.Context, obj any) (*http.Request, error) {
		if obj == nil {
			return nil, errors.New("request is nil")
		}
		req, ok := obj.(*GetUserRequest)
		if !ok {
			return nil, fmt.Errorf("invalid request type, %T", obj)
		}
		_ = req
		method := http.MethodGet
		target := &url.URL{
			Scheme: encoder.scheme,
			Host:   instance,
		}
		header := http.Header{}
		var body bytes.Buffer
		var pairs []string
		pairs = append(pairs,
			"user_id", strconvx.FormatUint(req.GetUserId(), 10),
		)
		path, err := encoder.router.Get("/leo.example.user.v1.UserManager/GetUser").URLPath(pairs...)
		if err != nil {
			return nil, err
		}
		target.Path = path.Path
		r, err := http.NewRequestWithContext(ctx, method, target.String(), &body)
		if err != nil {
			return nil, err
		}
		httpx.CopyHeader(r.Header, header)
		return r, nil
	}
}
func (encoder userManagerHttpClientRequestEncoder) GetUsers(instance string) http1.CreateRequestFunc {
	return func(ctx context.Context, obj any) (*http.Request, error) {
		if obj == nil {
			return nil, errors.New("request is nil")
		}
		req, ok := obj.(*GetUsersRequest)
		if !ok {
			return nil, fmt.Errorf("invalid request type, %T", obj)
		}
		_ = req
		method := http.MethodGet
		target := &url.URL{
			Scheme: encoder.scheme,
			Host:   instance,
		}
		header := http.Header{}
		var body bytes.Buffer
		var pairs []string
		path, err := encoder.router.Get("/leo.example.user.v1.UserManager/GetUsers").URLPath(pairs...)
		if err != nil {
			return nil, err
		}
		target.Path = path.Path
		queries := url.Values{}
		queries["page_no"] = append(queries["page_no"], strconvx.FormatInt(req.GetPageNo(), 10))
		queries["page_size"] = append(queries["page_size"], strconvx.FormatInt(req.GetPageSize(), 10))
		target.RawQuery = queries.Encode()
		r, err := http.NewRequestWithContext(ctx, method, target.String(), &body)
		if err != nil {
			return nil, err
		}
		httpx.CopyHeader(r.Header, header)
		return r, nil
	}
}

type userManagerHttpClientResponseDecoder struct {
	unmarshalOptions protojson.UnmarshalOptions
}

func (decoder userManagerHttpClientResponseDecoder) CreateUser() http1.DecodeResponseFunc {
	return func(ctx context.Context, r *http.Response) (any, error) {
		if r.StatusCode != http.StatusOK {
			return nil, coder.DecodeErrorFromResponse(ctx, r)
		}
		resp := &CreateUserResponse{}
		if err := coder.DecodeMessageFromResponse(ctx, r, resp, decoder.unmarshalOptions); err != nil {
			return nil, err
		}
		return resp, nil
	}
}
func (decoder userManagerHttpClientResponseDecoder) DeleteUser() http1.DecodeResponseFunc {
	return func(ctx context.Context, r *http.Response) (any, error) {
		if r.StatusCode != http.StatusOK {
			return nil, coder.DecodeErrorFromResponse(ctx, r)
		}
		resp := &emptypb.Empty{}
		if err := coder.DecodeMessageFromResponse(ctx, r, resp, decoder.unmarshalOptions); err != nil {
			return nil, err
		}
		return resp, nil
	}
}
func (decoder userManagerHttpClientResponseDecoder) UpdateUser() http1.DecodeResponseFunc {
	return func(ctx context.Context, r *http.Response) (any, error) {
		if r.StatusCode != http.StatusOK {
			return nil, coder.DecodeErrorFromResponse(ctx, r)
		}
		resp := &emptypb.Empty{}
		if err := coder.DecodeMessageFromResponse(ctx, r, resp, decoder.unmarshalOptions); err != nil {
			return nil, err
		}
		return resp, nil
	}
}
func (decoder userManagerHttpClientResponseDecoder) GetUser() http1.DecodeResponseFunc {
	return func(ctx context.Context, r *http.Response) (any, error) {
		if r.StatusCode != http.StatusOK {
			return nil, coder.DecodeErrorFromResponse(ctx, r)
		}
		resp := &GetUserResponse{}
		if err := coder.DecodeMessageFromResponse(ctx, r, resp, decoder.unmarshalOptions); err != nil {
			return nil, err
		}
		return resp, nil
	}
}
func (decoder userManagerHttpClientResponseDecoder) GetUsers() http1.DecodeResponseFunc {
	return func(ctx context.Context, r *http.Response) (any, error) {
		if r.StatusCode != http.StatusOK {
			return nil, coder.DecodeErrorFromResponse(ctx, r)
		}
		resp := &GetUsersResponse{}
		if err := coder.DecodeMessageFromResponse(ctx, r, resp, decoder.unmarshalOptions); err != nil {
			return nil, err
		}
		return resp, nil
	}
}
