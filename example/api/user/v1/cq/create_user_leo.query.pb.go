// Code generated by protoc-gen-go-leo. DO NOT EDIT.
// If you want edit it, can move this file to another directory.

package cq

import (
	context "context"
	cqrs "github.com/go-leo/leo/v3/cqrs"
	v1 "github.com/go-leo/leo/v3/example/api/user/v1"
)

var _ CreateUserHandler = (*createUserHandler)(nil)

type CreateUserHandler cqrs.QueryHandler[CreateUserQuery, CreateUserResult]

type CreateUserQuery struct {
	v1.UnimplementedCreateUserQuery
}

func (CreateUserQuery) From(ctx context.Context, req *v1.CreateUserRequest) (v1.CreateUserQuery, context.Context, error) {
	panic("implement me")
	return CreateUserQuery{}, ctx, nil
}

type CreateUserResult struct {
	v1.UnimplementedCreateUserResult
}

func (r CreateUserResult) To(ctx context.Context) (*v1.CreateUserResponse, error) {
	panic("implement me")
	return &v1.CreateUserResponse{}, nil
}

func NewCreateUserHandler() CreateUserHandler {
	return &createUserHandler{}
}

type createUserHandler struct {
}

func (h *createUserHandler) Handle(ctx context.Context, q CreateUserQuery) (CreateUserResult, error) {
	// TODO implement me
	panic("implement me")
}
