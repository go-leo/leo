// Code generated by protoc-gen-go-leo. DO NOT EDIT.

package user

import (
	context "context"
	endpoint "github.com/go-kit/kit/endpoint"
	grpc "github.com/go-kit/kit/transport/grpc"
	endpointx "github.com/go-leo/leo/v3/endpointx"
	metadatax "github.com/go-leo/leo/v3/metadatax"
	stainx "github.com/go-leo/leo/v3/stainx"
	grpctransportx "github.com/go-leo/leo/v3/transportx/grpctransportx"
	grpc1 "google.golang.org/grpc"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	io "io"
)

func NewUserManagerGrpcServer(svc UserManagerService, opts ...grpctransportx.ServerOption) UserManagerServer {
	options := grpctransportx.NewServerOptions(opts...)
	endpoints := &userManagerServerEndpoints{
		svc:         svc,
		middlewares: options.Middlewares(),
	}
	transports := &userManagerGrpcServerTransports{
		endpoints: endpoints,
	}
	return &userManagerGrpcServer{
		createUser: transports.CreateUser(),
		deleteUser: transports.DeleteUser(),
		updateUser: transports.UpdateUser(),
		getUser:    transports.GetUser(),
		getUsers:   transports.GetUsers(),
	}
}

func NewUserManagerGrpcClient(target string, opts ...grpctransportx.ClientOption) UserManagerService {
	options := grpctransportx.NewClientOptions(opts...)
	transports := &userManagerGrpcClientTransports{
		dialOptions:   options.DialOptions(),
		clientOptions: options.ClientTransportOptions(),
		middlewares:   options.Middlewares(),
	}
	factories := &userManagerFactories{
		transports: transports,
	}
	endpointer := &userManagerEndpointers{
		target:    target,
		builder:   options.Builder(),
		factories: factories,
		logger:    options.Logger(),
		options:   options.EndpointerOptions(),
	}
	balancers := &userManagerBalancers{
		factory:    options.BalancerFactory(),
		endpointer: endpointer,
	}
	endpoints := &userManagerClientEndpoints{
		balancers: balancers,
	}
	return &userManagerClientService{
		endpoints:     endpoints,
		transportName: grpctransportx.GrpcClient,
	}
}

type userManagerGrpcServerTransports struct {
	endpoints UserManagerServerEndpoints
}

func (t *userManagerGrpcServerTransports) CreateUser() grpc.Handler {
	return grpc.NewServer(
		t.endpoints.CreateUser(context.TODO()),
		func(_ context.Context, v any) (any, error) { return v, nil },
		func(_ context.Context, v any) (any, error) { return v, nil },
		grpc.ServerBefore(grpctransportx.ServerEndpointInjector("/leo.example.user.v1.UserManager/CreateUser")),
		grpc.ServerBefore(grpctransportx.ServerTransportInjector),
		grpc.ServerBefore(metadatax.GrpcIncomingInjector),
		grpc.ServerBefore(stainx.GrpcIncomingInjector),
	)
}

func (t *userManagerGrpcServerTransports) DeleteUser() grpc.Handler {
	return grpc.NewServer(
		t.endpoints.DeleteUser(context.TODO()),
		func(_ context.Context, v any) (any, error) { return v, nil },
		func(_ context.Context, v any) (any, error) { return v, nil },
		grpc.ServerBefore(grpctransportx.ServerEndpointInjector("/leo.example.user.v1.UserManager/DeleteUser")),
		grpc.ServerBefore(grpctransportx.ServerTransportInjector),
		grpc.ServerBefore(metadatax.GrpcIncomingInjector),
		grpc.ServerBefore(stainx.GrpcIncomingInjector),
	)
}

func (t *userManagerGrpcServerTransports) UpdateUser() grpc.Handler {
	return grpc.NewServer(
		t.endpoints.UpdateUser(context.TODO()),
		func(_ context.Context, v any) (any, error) { return v, nil },
		func(_ context.Context, v any) (any, error) { return v, nil },
		grpc.ServerBefore(grpctransportx.ServerEndpointInjector("/leo.example.user.v1.UserManager/UpdateUser")),
		grpc.ServerBefore(grpctransportx.ServerTransportInjector),
		grpc.ServerBefore(metadatax.GrpcIncomingInjector),
		grpc.ServerBefore(stainx.GrpcIncomingInjector),
	)
}

func (t *userManagerGrpcServerTransports) GetUser() grpc.Handler {
	return grpc.NewServer(
		t.endpoints.GetUser(context.TODO()),
		func(_ context.Context, v any) (any, error) { return v, nil },
		func(_ context.Context, v any) (any, error) { return v, nil },
		grpc.ServerBefore(grpctransportx.ServerEndpointInjector("/leo.example.user.v1.UserManager/GetUser")),
		grpc.ServerBefore(grpctransportx.ServerTransportInjector),
		grpc.ServerBefore(metadatax.GrpcIncomingInjector),
		grpc.ServerBefore(stainx.GrpcIncomingInjector),
	)
}

func (t *userManagerGrpcServerTransports) GetUsers() grpc.Handler {
	return grpc.NewServer(
		t.endpoints.GetUsers(context.TODO()),
		func(_ context.Context, v any) (any, error) { return v, nil },
		func(_ context.Context, v any) (any, error) { return v, nil },
		grpc.ServerBefore(grpctransportx.ServerEndpointInjector("/leo.example.user.v1.UserManager/GetUsers")),
		grpc.ServerBefore(grpctransportx.ServerTransportInjector),
		grpc.ServerBefore(metadatax.GrpcIncomingInjector),
		grpc.ServerBefore(stainx.GrpcIncomingInjector),
	)
}

type userManagerGrpcServer struct {
	createUser grpc.Handler
	deleteUser grpc.Handler
	updateUser grpc.Handler
	getUser    grpc.Handler
	getUsers   grpc.Handler
}

func (s *userManagerGrpcServer) CreateUser(ctx context.Context, request *CreateUserRequest) (*CreateUserResponse, error) {
	ctx, rep, err := s.createUser.ServeGRPC(ctx, request)
	if err != nil {
		return nil, err
	}
	_ = ctx
	return rep.(*CreateUserResponse), nil
}

func (s *userManagerGrpcServer) DeleteUser(ctx context.Context, request *DeleteUsersRequest) (*emptypb.Empty, error) {
	ctx, rep, err := s.deleteUser.ServeGRPC(ctx, request)
	if err != nil {
		return nil, err
	}
	_ = ctx
	return rep.(*emptypb.Empty), nil
}

func (s *userManagerGrpcServer) UpdateUser(ctx context.Context, request *UpdateUserRequest) (*emptypb.Empty, error) {
	ctx, rep, err := s.updateUser.ServeGRPC(ctx, request)
	if err != nil {
		return nil, err
	}
	_ = ctx
	return rep.(*emptypb.Empty), nil
}

func (s *userManagerGrpcServer) GetUser(ctx context.Context, request *GetUserRequest) (*GetUserResponse, error) {
	ctx, rep, err := s.getUser.ServeGRPC(ctx, request)
	if err != nil {
		return nil, err
	}
	_ = ctx
	return rep.(*GetUserResponse), nil
}

func (s *userManagerGrpcServer) GetUsers(ctx context.Context, request *GetUsersRequest) (*GetUsersResponse, error) {
	ctx, rep, err := s.getUsers.ServeGRPC(ctx, request)
	if err != nil {
		return nil, err
	}
	_ = ctx
	return rep.(*GetUsersResponse), nil
}

func (s *userManagerGrpcServer) mustEmbedUnimplementedUserManagerServer() {}

type userManagerGrpcClientTransports struct {
	dialOptions   []grpc1.DialOption
	clientOptions []grpc.ClientOption
	middlewares   []endpoint.Middleware
}

func (t *userManagerGrpcClientTransports) CreateUser(ctx context.Context, instance string) (endpoint.Endpoint, io.Closer, error) {
	conn, err := grpc1.NewClient(instance, t.dialOptions...)
	if err != nil {
		return nil, nil, err
	}
	opts := []grpc.ClientOption{
		grpc.ClientBefore(metadatax.GrpcOutgoingInjector),
		grpc.ClientBefore(stainx.GrpcOutgoingInjector),
	}
	opts = append(opts, t.clientOptions...)
	client := grpc.NewClient(
		conn,
		"leo.example.user.v1.UserManager",
		"CreateUser",
		func(_ context.Context, v any) (any, error) { return v, nil },
		func(_ context.Context, v any) (any, error) { return v, nil },
		CreateUserResponse{},
		opts...)
	return endpointx.Chain(client.Endpoint(), t.middlewares...), conn, nil
}

func (t *userManagerGrpcClientTransports) DeleteUser(ctx context.Context, instance string) (endpoint.Endpoint, io.Closer, error) {
	conn, err := grpc1.NewClient(instance, t.dialOptions...)
	if err != nil {
		return nil, nil, err
	}
	opts := []grpc.ClientOption{
		grpc.ClientBefore(metadatax.GrpcOutgoingInjector),
		grpc.ClientBefore(stainx.GrpcOutgoingInjector),
	}
	opts = append(opts, t.clientOptions...)
	client := grpc.NewClient(
		conn,
		"leo.example.user.v1.UserManager",
		"DeleteUser",
		func(_ context.Context, v any) (any, error) { return v, nil },
		func(_ context.Context, v any) (any, error) { return v, nil },
		emptypb.Empty{},
		opts...)
	return endpointx.Chain(client.Endpoint(), t.middlewares...), conn, nil
}

func (t *userManagerGrpcClientTransports) UpdateUser(ctx context.Context, instance string) (endpoint.Endpoint, io.Closer, error) {
	conn, err := grpc1.NewClient(instance, t.dialOptions...)
	if err != nil {
		return nil, nil, err
	}
	opts := []grpc.ClientOption{
		grpc.ClientBefore(metadatax.GrpcOutgoingInjector),
		grpc.ClientBefore(stainx.GrpcOutgoingInjector),
	}
	opts = append(opts, t.clientOptions...)
	client := grpc.NewClient(
		conn,
		"leo.example.user.v1.UserManager",
		"UpdateUser",
		func(_ context.Context, v any) (any, error) { return v, nil },
		func(_ context.Context, v any) (any, error) { return v, nil },
		emptypb.Empty{},
		opts...)
	return endpointx.Chain(client.Endpoint(), t.middlewares...), conn, nil
}

func (t *userManagerGrpcClientTransports) GetUser(ctx context.Context, instance string) (endpoint.Endpoint, io.Closer, error) {
	conn, err := grpc1.NewClient(instance, t.dialOptions...)
	if err != nil {
		return nil, nil, err
	}
	opts := []grpc.ClientOption{
		grpc.ClientBefore(metadatax.GrpcOutgoingInjector),
		grpc.ClientBefore(stainx.GrpcOutgoingInjector),
	}
	opts = append(opts, t.clientOptions...)
	client := grpc.NewClient(
		conn,
		"leo.example.user.v1.UserManager",
		"GetUser",
		func(_ context.Context, v any) (any, error) { return v, nil },
		func(_ context.Context, v any) (any, error) { return v, nil },
		GetUserResponse{},
		opts...)
	return endpointx.Chain(client.Endpoint(), t.middlewares...), conn, nil
}

func (t *userManagerGrpcClientTransports) GetUsers(ctx context.Context, instance string) (endpoint.Endpoint, io.Closer, error) {
	conn, err := grpc1.NewClient(instance, t.dialOptions...)
	if err != nil {
		return nil, nil, err
	}
	opts := []grpc.ClientOption{
		grpc.ClientBefore(metadatax.GrpcOutgoingInjector),
		grpc.ClientBefore(stainx.GrpcOutgoingInjector),
	}
	opts = append(opts, t.clientOptions...)
	client := grpc.NewClient(
		conn,
		"leo.example.user.v1.UserManager",
		"GetUsers",
		func(_ context.Context, v any) (any, error) { return v, nil },
		func(_ context.Context, v any) (any, error) { return v, nil },
		GetUsersResponse{},
		opts...)
	return endpointx.Chain(client.Endpoint(), t.middlewares...), conn, nil
}
