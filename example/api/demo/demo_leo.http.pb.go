// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package demo

import (
	bytes "bytes"
	context "context"
	errors "errors"
	fmt "fmt"
	endpoint "github.com/go-kit/kit/endpoint"
	http "github.com/go-kit/kit/transport/http"
	jsonx "github.com/go-leo/gox/encodingx/jsonx"
	errorx "github.com/go-leo/gox/errorx"
	urlx "github.com/go-leo/gox/netx/urlx"
	strconvx "github.com/go-leo/gox/strconvx"
	endpointx "github.com/go-leo/leo/v3/endpointx"
	mux "github.com/gorilla/mux"
	httpbody "google.golang.org/genproto/googleapis/api/httpbody"
	http2 "google.golang.org/genproto/googleapis/rpc/http"
	proto "google.golang.org/protobuf/proto"
	anypb "google.golang.org/protobuf/types/known/anypb"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	structpb "google.golang.org/protobuf/types/known/structpb"
	io "io"
	http1 "net/http"
	url "net/url"
)

func NewDemoHTTPServer(
	endpoints interface {
		CreateUser() endpoint.Endpoint
		DeleteUser() endpoint.Endpoint
		UpdateUser() endpoint.Endpoint
		GetUser() endpoint.Endpoint
		GetUsers() endpoint.Endpoint
		UploadUserAvatar() endpoint.Endpoint
		GetUserAvatar() endpoint.Endpoint
		PushUsers() endpoint.Endpoint
	},
	opts []http.ServerOption,
	middlewares ...endpoint.Middleware,
) http1.Handler {
	router := mux.NewRouter()
	router.NewRoute().
		Name("/leo.example.demo.v1.Demo/CreateUser").
		Methods("POST").
		Path("/v1/user").
		Handler(http.NewServer(
			endpointx.Chain(endpoints.CreateUser(), middlewares...),
			func(ctx context.Context, r *http1.Request) (any, error) {
				req := &CreateUserRequest{}
				if err := jsonx.NewDecoder(r.Body).Decode(req); err != nil {
					return nil, err
				}
				return req, nil
			},
			func(ctx context.Context, w http1.ResponseWriter, obj any) error {
				resp := obj.(*CreateUserResponse)
				w.Header().Set("Content-Type", "application/json; charset=utf-8")
				w.WriteHeader(http1.StatusOK)
				if err := jsonx.NewEncoder(w).Encode(resp); err != nil {
					return err
				}
				return nil
			},
			opts...,
		))
	router.NewRoute().
		Name("/leo.example.demo.v1.Demo/DeleteUser").
		Methods("DELETE").
		Path("/v1/user/{user_id}").
		Handler(http.NewServer(
			endpointx.Chain(endpoints.DeleteUser(), middlewares...),
			func(ctx context.Context, r *http1.Request) (any, error) {
				req := &DeleteUsersRequest{}
				vars := urlx.FormFromMap(mux.Vars(r))
				var varErr error
				req.UserId, varErr = errorx.Break[uint64](varErr)(urlx.GetUint[uint64](vars, "user_id"))
				if varErr != nil {
					return nil, varErr
				}
				return req, nil
			},
			func(ctx context.Context, w http1.ResponseWriter, obj any) error {
				resp := obj.(*emptypb.Empty)
				w.Header().Set("Content-Type", "application/json; charset=utf-8")
				w.WriteHeader(http1.StatusOK)
				if err := jsonx.NewEncoder(w).Encode(resp); err != nil {
					return err
				}
				return nil
			},
			opts...,
		))
	router.NewRoute().
		Name("/leo.example.demo.v1.Demo/UpdateUser").
		Methods("PUT").
		Path("/v1/user/{user_id}").
		Handler(http.NewServer(
			endpointx.Chain(endpoints.UpdateUser(), middlewares...),
			func(ctx context.Context, r *http1.Request) (any, error) {
				req := &UpdateUserRequest{}
				if err := jsonx.NewDecoder(r.Body).Decode(&req.User); err != nil {
					return nil, err
				}
				vars := urlx.FormFromMap(mux.Vars(r))
				var varErr error
				req.UserId, varErr = errorx.Break[uint64](varErr)(urlx.GetUint[uint64](vars, "user_id"))
				if varErr != nil {
					return nil, varErr
				}
				return req, nil
			},
			func(ctx context.Context, w http1.ResponseWriter, obj any) error {
				resp := obj.(*emptypb.Empty)
				w.Header().Set("Content-Type", "application/json; charset=utf-8")
				w.WriteHeader(http1.StatusOK)
				if err := jsonx.NewEncoder(w).Encode(resp); err != nil {
					return err
				}
				return nil
			},
			opts...,
		))
	router.NewRoute().
		Name("/leo.example.demo.v1.Demo/GetUser").
		Methods("GET").
		Path("/v1/user/{user_id}").
		Handler(http.NewServer(
			endpointx.Chain(endpoints.GetUser(), middlewares...),
			func(ctx context.Context, r *http1.Request) (any, error) {
				req := &GetUserRequest{}
				vars := urlx.FormFromMap(mux.Vars(r))
				var varErr error
				req.UserId, varErr = errorx.Break[uint64](varErr)(urlx.GetUint[uint64](vars, "user_id"))
				if varErr != nil {
					return nil, varErr
				}
				return req, nil
			},
			func(ctx context.Context, w http1.ResponseWriter, obj any) error {
				resp := obj.(*GetUserResponse)
				w.Header().Set("Content-Type", "application/json; charset=utf-8")
				w.WriteHeader(http1.StatusOK)
				if err := jsonx.NewEncoder(w).Encode(resp); err != nil {
					return err
				}
				return nil
			},
			opts...,
		))
	router.NewRoute().
		Name("/leo.example.demo.v1.Demo/GetUsers").
		Methods("GET").
		Path("/v1/users").
		Handler(http.NewServer(
			endpointx.Chain(endpoints.GetUsers(), middlewares...),
			func(ctx context.Context, r *http1.Request) (any, error) {
				req := &GetUsersRequest{}
				queries := r.URL.Query()
				var queryErr error
				req.PageNo, queryErr = errorx.Break[int32](queryErr)(urlx.GetInt[int32](queries, "page_no"))
				req.PageSize, queryErr = errorx.Break[int32](queryErr)(urlx.GetInt[int32](queries, "page_size"))
				if queryErr != nil {
					return nil, queryErr
				}
				return req, nil
			},
			func(ctx context.Context, w http1.ResponseWriter, obj any) error {
				resp := obj.(*GetUsersResponse)
				w.Header().Set("Content-Type", "application/json; charset=utf-8")
				w.WriteHeader(http1.StatusOK)
				if err := jsonx.NewEncoder(w).Encode(resp); err != nil {
					return err
				}
				return nil
			},
			opts...,
		))
	router.NewRoute().
		Name("/leo.example.demo.v1.Demo/UploadUserAvatar").
		Methods("POST").
		Path("/v1/user/{user_id}").
		Handler(http.NewServer(
			endpointx.Chain(endpoints.UploadUserAvatar(), middlewares...),
			func(ctx context.Context, r *http1.Request) (any, error) {
				req := &UploadUserAvatarRequest{}
				req.Avatar = &httpbody.HttpBody{}
				body, err := io.ReadAll(r.Body)
				if err != nil {
					return nil, err
				}
				req.Avatar.Data = body
				req.Avatar.ContentType = r.Header.Get("Content-Type")
				vars := urlx.FormFromMap(mux.Vars(r))
				var varErr error
				req.UserId, varErr = errorx.Break[uint64](varErr)(urlx.GetUint[uint64](vars, "user_id"))
				if varErr != nil {
					return nil, varErr
				}
				return req, nil
			},
			func(ctx context.Context, w http1.ResponseWriter, obj any) error {
				resp := obj.(*emptypb.Empty)
				w.Header().Set("Content-Type", "application/json; charset=utf-8")
				w.WriteHeader(http1.StatusOK)
				if err := jsonx.NewEncoder(w).Encode(resp); err != nil {
					return err
				}
				return nil
			},
			opts...,
		))
	router.NewRoute().
		Name("/leo.example.demo.v1.Demo/GetUserAvatar").
		Methods("GET").
		Path("/v1/users/{user_id}").
		Handler(http.NewServer(
			endpointx.Chain(endpoints.GetUserAvatar(), middlewares...),
			func(ctx context.Context, r *http1.Request) (any, error) {
				req := &GetUserAvatarRequest{}
				vars := urlx.FormFromMap(mux.Vars(r))
				var varErr error
				req.UserId, varErr = errorx.Break[uint64](varErr)(urlx.GetUint[uint64](vars, "user_id"))
				if varErr != nil {
					return nil, varErr
				}
				return req, nil
			},
			func(ctx context.Context, w http1.ResponseWriter, obj any) error {
				resp := obj.(*httpbody.HttpBody)
				w.Header().Set("Content-Type", resp.GetContentType())
				for _, src := range resp.GetExtensions() {
					dst, err := anypb.UnmarshalNew(src, proto.UnmarshalOptions{})
					if err != nil {
						return err
					}
					metadata, ok := dst.(*structpb.Struct)
					if !ok {
						continue
					}
					for key, value := range metadata.GetFields() {
						w.Header().Add(key, string(errorx.Ignore(jsonx.Marshal(value))))
					}
				}
				w.WriteHeader(http1.StatusOK)
				if _, err := w.Write(resp.GetData()); err != nil {
					return err
				}
				return nil
			},
			opts...,
		))
	router.NewRoute().
		Name("/leo.example.demo.v1.Demo/PushUsers").
		Methods("POST").
		Path("/v1/users/csv/push").
		Handler(http.NewServer(
			endpointx.Chain(endpoints.PushUsers(), middlewares...),
			func(ctx context.Context, r *http1.Request) (any, error) {
				req := &http2.HttpRequest{}
				req.Method = r.Method
				req.Uri = r.URL.String()
				req.Headers = make([]*http2.HttpHeader, 0, len(r.Header))
				for key, values := range r.Header {
					for _, value := range values {
						req.Headers = append(req.Headers, &http2.HttpHeader{Key: key, Value: value})
					}
				}
				body, err := io.ReadAll(r.Body)
				if err != nil {
					return nil, err
				}
				req.Body = body
				return req, nil
			},
			func(ctx context.Context, w http1.ResponseWriter, obj any) error {
				resp := obj.(*http2.HttpResponse)
				for _, header := range resp.GetHeaders() {
					w.Header().Add(header.Key, header.Value)
				}
				w.WriteHeader(int(resp.GetStatus()))
				if _, err := w.Write(resp.GetBody()); err != nil {
					return err
				}
				return nil
			},
			opts...,
		))
	return router
}

type demoHTTPClient struct {
	createUser       endpoint.Endpoint
	deleteUser       endpoint.Endpoint
	updateUser       endpoint.Endpoint
	getUser          endpoint.Endpoint
	getUsers         endpoint.Endpoint
	uploadUserAvatar endpoint.Endpoint
	getUserAvatar    endpoint.Endpoint
	pushUsers        endpoint.Endpoint
}

func (c *demoHTTPClient) CreateUser(ctx context.Context, request *CreateUserRequest) (*CreateUserResponse, error) {
	rep, err := c.createUser(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*CreateUserResponse), nil
}

func (c *demoHTTPClient) DeleteUser(ctx context.Context, request *DeleteUsersRequest) (*emptypb.Empty, error) {
	rep, err := c.deleteUser(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*emptypb.Empty), nil
}

func (c *demoHTTPClient) UpdateUser(ctx context.Context, request *UpdateUserRequest) (*emptypb.Empty, error) {
	rep, err := c.updateUser(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*emptypb.Empty), nil
}

func (c *demoHTTPClient) GetUser(ctx context.Context, request *GetUserRequest) (*GetUserResponse, error) {
	rep, err := c.getUser(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*GetUserResponse), nil
}

func (c *demoHTTPClient) GetUsers(ctx context.Context, request *GetUsersRequest) (*GetUsersResponse, error) {
	rep, err := c.getUsers(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*GetUsersResponse), nil
}

func (c *demoHTTPClient) UploadUserAvatar(ctx context.Context, request *UploadUserAvatarRequest) (*emptypb.Empty, error) {
	rep, err := c.uploadUserAvatar(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*emptypb.Empty), nil
}

func (c *demoHTTPClient) GetUserAvatar(ctx context.Context, request *GetUserAvatarRequest) (*httpbody.HttpBody, error) {
	rep, err := c.getUserAvatar(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*httpbody.HttpBody), nil
}

func (c *demoHTTPClient) PushUsers(ctx context.Context, request *http2.HttpRequest) (*http2.HttpResponse, error) {
	rep, err := c.pushUsers(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*http2.HttpResponse), nil
}

func NewDemoHTTPClient(
	scheme string,
	instance string,
	opts []http.ClientOption,
	middlewares ...endpoint.Middleware,
) interface {
	CreateUser(ctx context.Context, request *CreateUserRequest) (*CreateUserResponse, error)
	DeleteUser(ctx context.Context, request *DeleteUsersRequest) (*emptypb.Empty, error)
	UpdateUser(ctx context.Context, request *UpdateUserRequest) (*emptypb.Empty, error)
	GetUser(ctx context.Context, request *GetUserRequest) (*GetUserResponse, error)
	GetUsers(ctx context.Context, request *GetUsersRequest) (*GetUsersResponse, error)
	UploadUserAvatar(ctx context.Context, request *UploadUserAvatarRequest) (*emptypb.Empty, error)
	GetUserAvatar(ctx context.Context, request *GetUserAvatarRequest) (*httpbody.HttpBody, error)
	PushUsers(ctx context.Context, request *http2.HttpRequest) (*http2.HttpResponse, error)
} {
	router := mux.NewRouter()
	router.NewRoute().
		Name("/leo.example.demo.v1.Demo/CreateUser").
		Methods("POST").
		Path("/v1/user")
	router.NewRoute().
		Name("/leo.example.demo.v1.Demo/DeleteUser").
		Methods("DELETE").
		Path("/v1/user/{user_id}")
	router.NewRoute().
		Name("/leo.example.demo.v1.Demo/UpdateUser").
		Methods("PUT").
		Path("/v1/user/{user_id}")
	router.NewRoute().
		Name("/leo.example.demo.v1.Demo/GetUser").
		Methods("GET").
		Path("/v1/user/{user_id}")
	router.NewRoute().
		Name("/leo.example.demo.v1.Demo/GetUsers").
		Methods("GET").
		Path("/v1/users")
	router.NewRoute().
		Name("/leo.example.demo.v1.Demo/UploadUserAvatar").
		Methods("POST").
		Path("/v1/user/{user_id}")
	router.NewRoute().
		Name("/leo.example.demo.v1.Demo/GetUserAvatar").
		Methods("GET").
		Path("/v1/users/{user_id}")
	router.NewRoute().
		Name("/leo.example.demo.v1.Demo/PushUsers").
		Methods("POST").
		Path("/v1/users/csv/push")
	return &demoHTTPClient{
		createUser: endpointx.Chain(
			http.NewExplicitClient(
				func(ctx context.Context, obj interface{}) (*http1.Request, error) {
					if obj == nil {
						return nil, errors.New("request object is nil")
					}
					req, ok := obj.(*CreateUserRequest)
					if !ok {
						return nil, fmt.Errorf("invalid request object type, %T", obj)
					}
					_ = req
					var body io.Reader
					var bodyBuf bytes.Buffer
					if err := jsonx.NewEncoder(&bodyBuf).Encode(req); err != nil {
						return nil, err
					}
					body = &bodyBuf
					contentType := "application/json; charset=utf-8"
					var pairs []string
					path, err := router.Get("/leo.example.demo.v1.Demo/CreateUser").URLPath(pairs...)
					if err != nil {
						return nil, err
					}
					queries := url.Values{}
					target := &url.URL{
						Scheme:   scheme,
						Host:     instance,
						Path:     path.Path,
						RawQuery: queries.Encode(),
					}
					r, err := http1.NewRequestWithContext(ctx, "POST", target.String(), body)
					if err != nil {
						return nil, err
					}
					r.Header.Set("Content-Type", contentType)
					return r, nil
				},
				func(ctx context.Context, r *http1.Response) (interface{}, error) {
					resp := &CreateUserResponse{}
					if err := jsonx.NewDecoder(r.Body).Decode(resp); err != nil {
						return nil, err
					}
					return resp, nil
				},
				opts...,
			).Endpoint(),
			middlewares...),
		deleteUser: endpointx.Chain(
			http.NewExplicitClient(
				func(ctx context.Context, obj interface{}) (*http1.Request, error) {
					if obj == nil {
						return nil, errors.New("request object is nil")
					}
					req, ok := obj.(*DeleteUsersRequest)
					if !ok {
						return nil, fmt.Errorf("invalid request object type, %T", obj)
					}
					_ = req
					var body io.Reader
					var pairs []string
					pairs = append(pairs, "user_id", strconvx.FormatUint(req.GetUserId(), 10))
					path, err := router.Get("/leo.example.demo.v1.Demo/DeleteUser").URLPath(pairs...)
					if err != nil {
						return nil, err
					}
					queries := url.Values{}
					target := &url.URL{
						Scheme:   scheme,
						Host:     instance,
						Path:     path.Path,
						RawQuery: queries.Encode(),
					}
					r, err := http1.NewRequestWithContext(ctx, "DELETE", target.String(), body)
					if err != nil {
						return nil, err
					}
					return r, nil
				},
				func(ctx context.Context, r *http1.Response) (interface{}, error) {
					resp := &emptypb.Empty{}
					if err := jsonx.NewDecoder(r.Body).Decode(resp); err != nil {
						return nil, err
					}
					return resp, nil
				},
				opts...,
			).Endpoint(),
			middlewares...),
		updateUser: endpointx.Chain(
			http.NewExplicitClient(
				func(ctx context.Context, obj interface{}) (*http1.Request, error) {
					if obj == nil {
						return nil, errors.New("request object is nil")
					}
					req, ok := obj.(*UpdateUserRequest)
					if !ok {
						return nil, fmt.Errorf("invalid request object type, %T", obj)
					}
					_ = req
					var body io.Reader
					var bodyBuf bytes.Buffer
					if err := jsonx.NewEncoder(&bodyBuf).Encode(req.GetUser()); err != nil {
						return nil, err
					}
					body = &bodyBuf
					contentType := "application/json; charset=utf-8"
					var pairs []string
					pairs = append(pairs, "user_id", strconvx.FormatUint(req.GetUserId(), 10))
					path, err := router.Get("/leo.example.demo.v1.Demo/UpdateUser").URLPath(pairs...)
					if err != nil {
						return nil, err
					}
					queries := url.Values{}
					target := &url.URL{
						Scheme:   scheme,
						Host:     instance,
						Path:     path.Path,
						RawQuery: queries.Encode(),
					}
					r, err := http1.NewRequestWithContext(ctx, "PUT", target.String(), body)
					if err != nil {
						return nil, err
					}
					r.Header.Set("Content-Type", contentType)
					return r, nil
				},
				func(ctx context.Context, r *http1.Response) (interface{}, error) {
					resp := &emptypb.Empty{}
					if err := jsonx.NewDecoder(r.Body).Decode(resp); err != nil {
						return nil, err
					}
					return resp, nil
				},
				opts...,
			).Endpoint(),
			middlewares...),
		getUser: endpointx.Chain(
			http.NewExplicitClient(
				func(ctx context.Context, obj interface{}) (*http1.Request, error) {
					if obj == nil {
						return nil, errors.New("request object is nil")
					}
					req, ok := obj.(*GetUserRequest)
					if !ok {
						return nil, fmt.Errorf("invalid request object type, %T", obj)
					}
					_ = req
					var body io.Reader
					var pairs []string
					pairs = append(pairs, "user_id", strconvx.FormatUint(req.GetUserId(), 10))
					path, err := router.Get("/leo.example.demo.v1.Demo/GetUser").URLPath(pairs...)
					if err != nil {
						return nil, err
					}
					queries := url.Values{}
					target := &url.URL{
						Scheme:   scheme,
						Host:     instance,
						Path:     path.Path,
						RawQuery: queries.Encode(),
					}
					r, err := http1.NewRequestWithContext(ctx, "GET", target.String(), body)
					if err != nil {
						return nil, err
					}
					return r, nil
				},
				func(ctx context.Context, r *http1.Response) (interface{}, error) {
					resp := &GetUserResponse{}
					if err := jsonx.NewDecoder(r.Body).Decode(resp); err != nil {
						return nil, err
					}
					return resp, nil
				},
				opts...,
			).Endpoint(),
			middlewares...),
		getUsers: endpointx.Chain(
			http.NewExplicitClient(
				func(ctx context.Context, obj interface{}) (*http1.Request, error) {
					if obj == nil {
						return nil, errors.New("request object is nil")
					}
					req, ok := obj.(*GetUsersRequest)
					if !ok {
						return nil, fmt.Errorf("invalid request object type, %T", obj)
					}
					_ = req
					var body io.Reader
					var pairs []string
					path, err := router.Get("/leo.example.demo.v1.Demo/GetUsers").URLPath(pairs...)
					if err != nil {
						return nil, err
					}
					queries := url.Values{}
					queries["page_no"] = append(queries["page_no"], strconvx.FormatInt(req.GetPageNo(), 10))
					queries["page_size"] = append(queries["page_size"], strconvx.FormatInt(req.GetPageSize(), 10))
					target := &url.URL{
						Scheme:   scheme,
						Host:     instance,
						Path:     path.Path,
						RawQuery: queries.Encode(),
					}
					r, err := http1.NewRequestWithContext(ctx, "GET", target.String(), body)
					if err != nil {
						return nil, err
					}
					return r, nil
				},
				func(ctx context.Context, r *http1.Response) (interface{}, error) {
					resp := &GetUsersResponse{}
					if err := jsonx.NewDecoder(r.Body).Decode(resp); err != nil {
						return nil, err
					}
					return resp, nil
				},
				opts...,
			).Endpoint(),
			middlewares...),
		uploadUserAvatar: endpointx.Chain(
			http.NewExplicitClient(
				func(ctx context.Context, obj interface{}) (*http1.Request, error) {
					if obj == nil {
						return nil, errors.New("request object is nil")
					}
					req, ok := obj.(*UploadUserAvatarRequest)
					if !ok {
						return nil, fmt.Errorf("invalid request object type, %T", obj)
					}
					_ = req
					var body io.Reader
					body = bytes.NewReader(req.GetAvatar().GetData())
					contentType := req.GetAvatar().GetContentType()
					var pairs []string
					pairs = append(pairs, "user_id", strconvx.FormatUint(req.GetUserId(), 10))
					path, err := router.Get("/leo.example.demo.v1.Demo/UploadUserAvatar").URLPath(pairs...)
					if err != nil {
						return nil, err
					}
					queries := url.Values{}
					target := &url.URL{
						Scheme:   scheme,
						Host:     instance,
						Path:     path.Path,
						RawQuery: queries.Encode(),
					}
					r, err := http1.NewRequestWithContext(ctx, "POST", target.String(), body)
					if err != nil {
						return nil, err
					}
					r.Header.Set("Content-Type", contentType)
					return r, nil
				},
				func(ctx context.Context, r *http1.Response) (interface{}, error) {
					resp := &emptypb.Empty{}
					if err := jsonx.NewDecoder(r.Body).Decode(resp); err != nil {
						return nil, err
					}
					return resp, nil
				},
				opts...,
			).Endpoint(),
			middlewares...),
		getUserAvatar: endpointx.Chain(
			http.NewExplicitClient(
				func(ctx context.Context, obj interface{}) (*http1.Request, error) {
					if obj == nil {
						return nil, errors.New("request object is nil")
					}
					req, ok := obj.(*GetUserAvatarRequest)
					if !ok {
						return nil, fmt.Errorf("invalid request object type, %T", obj)
					}
					_ = req
					var body io.Reader
					var pairs []string
					pairs = append(pairs, "user_id", strconvx.FormatUint(req.GetUserId(), 10))
					path, err := router.Get("/leo.example.demo.v1.Demo/GetUserAvatar").URLPath(pairs...)
					if err != nil {
						return nil, err
					}
					queries := url.Values{}
					target := &url.URL{
						Scheme:   scheme,
						Host:     instance,
						Path:     path.Path,
						RawQuery: queries.Encode(),
					}
					r, err := http1.NewRequestWithContext(ctx, "GET", target.String(), body)
					if err != nil {
						return nil, err
					}
					return r, nil
				},
				func(ctx context.Context, r *http1.Response) (interface{}, error) {
					resp := &httpbody.HttpBody{}
					resp.ContentType = r.Header.Get("Content-Type")
					body, err := io.ReadAll(r.Body)
					if err != nil {
						return nil, err
					}
					resp.Data = body
					return resp, nil
				},
				opts...,
			).Endpoint(),
			middlewares...),
		pushUsers: endpointx.Chain(
			http.NewExplicitClient(
				func(ctx context.Context, obj interface{}) (*http1.Request, error) {
					if obj == nil {
						return nil, errors.New("request object is nil")
					}
					req, ok := obj.(*http2.HttpRequest)
					if !ok {
						return nil, fmt.Errorf("invalid request object type, %T", obj)
					}
					_ = req
					var body io.Reader
					body = bytes.NewReader(req.GetBody())
					var target *url.URL
					if req.GetUri() != "" {
						uri, err := url.Parse(req.GetUri())
						if err != nil {
							return nil, err
						}
						target = uri
					} else {
						path, err := router.Get("/leo.example.demo.v1.Demo/PushUsers").URLPath()
						if err != nil {
							return nil, err
						}
						target = &url.URL{
							Scheme: scheme,
							Host:   instance,
							Path:   path.Path,
						}
					}
					method := "POST"
					if req.GetMethod() != "" {
						method = req.GetMethod()
					}
					r, err := http1.NewRequestWithContext(ctx, method, target.String(), body)
					if err != nil {
						return nil, err
					}
					for _, header := range req.GetHeaders() {
						r.Header.Add(header.GetKey(), header.GetValue())
					}
					return r, nil
				},
				func(ctx context.Context, r *http1.Response) (interface{}, error) {
					resp := &http2.HttpResponse{}
					resp.Status = int32(r.StatusCode)
					resp.Reason = r.Status
					for key, values := range r.Header {
						for _, value := range values {
							resp.Headers = append(resp.Headers, &http2.HttpHeader{Key: key, Value: value})
						}
					}
					body, err := io.ReadAll(r.Body)
					if err != nil {
						return nil, err
					}
					resp.Body = body
					return resp, nil
				},
				opts...,
			).Endpoint(),
			middlewares...),
	}
}
