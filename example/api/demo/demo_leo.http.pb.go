// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package demo

import (
	bytes "bytes"
	context "context"
	errors "errors"
	fmt "fmt"
	endpoint "github.com/go-kit/kit/endpoint"
	http1 "github.com/go-kit/kit/transport/http"
	endpointx "github.com/go-leo/leo/v3/endpointx"
	mux "github.com/gorilla/mux"
	httpbody "google.golang.org/genproto/googleapis/api/httpbody"
	http "google.golang.org/genproto/googleapis/rpc/http"
	protojson "google.golang.org/protobuf/encoding/protojson"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	io "io"
	http2 "net/http"
	strconv "strconv"
	strings "strings"
)

type httpDemoServiceClient struct {
	createUser       endpoint.Endpoint
	updateUser       endpoint.Endpoint
	getUser          endpoint.Endpoint
	getUsers         endpoint.Endpoint
	deleteUser       endpoint.Endpoint
	updateUserName   endpoint.Endpoint
	uploadUsers      endpoint.Endpoint
	uploadUserAvatar endpoint.Endpoint
	pushUsers        endpoint.Endpoint
	pushUserAvatar   endpoint.Endpoint
	modifyUser       endpoint.Endpoint
}

func (c *httpDemoServiceClient) CreateUser(ctx context.Context, request *CreateUserRequest) (*emptypb.Empty, error) {
	rep, err := c.createUser(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*emptypb.Empty), nil
}

func (c *httpDemoServiceClient) UpdateUser(ctx context.Context, request *UpdateUserRequest) (*emptypb.Empty, error) {
	rep, err := c.updateUser(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*emptypb.Empty), nil
}

func (c *httpDemoServiceClient) GetUser(ctx context.Context, request *GetUserRequest) (*GetUserResponse, error) {
	rep, err := c.getUser(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*GetUserResponse), nil
}

func (c *httpDemoServiceClient) GetUsers(ctx context.Context, request *GetUsersRequest) (*GetUsersResponse, error) {
	rep, err := c.getUsers(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*GetUsersResponse), nil
}

func (c *httpDemoServiceClient) DeleteUser(ctx context.Context, request *DeleteUsersRequest) (*emptypb.Empty, error) {
	rep, err := c.deleteUser(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*emptypb.Empty), nil
}

func (c *httpDemoServiceClient) UpdateUserName(ctx context.Context, request *UpdateUserNameRequest) (*emptypb.Empty, error) {
	rep, err := c.updateUserName(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*emptypb.Empty), nil
}

func (c *httpDemoServiceClient) UploadUsers(ctx context.Context, request *httpbody.HttpBody) (*httpbody.HttpBody, error) {
	rep, err := c.uploadUsers(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*httpbody.HttpBody), nil
}

func (c *httpDemoServiceClient) UploadUserAvatar(ctx context.Context, request *UploadUserAvatarRequest) (*UploadUserAvatarResponse, error) {
	rep, err := c.uploadUserAvatar(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*UploadUserAvatarResponse), nil
}

func (c *httpDemoServiceClient) PushUsers(ctx context.Context, request *http.HttpRequest) (*http.HttpResponse, error) {
	rep, err := c.pushUsers(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*http.HttpResponse), nil
}

func (c *httpDemoServiceClient) PushUserAvatar(ctx context.Context, request *PushUserAvatarRequest) (*PushUserAvatarResponse, error) {
	rep, err := c.pushUserAvatar(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*PushUserAvatarResponse), nil
}

func (c *httpDemoServiceClient) ModifyUser(ctx context.Context, request *ModifyUserRequest) (*emptypb.Empty, error) {
	rep, err := c.modifyUser(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*emptypb.Empty), nil
}

func NewDemoServiceHTTPClient(
	instance string,
	mdw []endpoint.Middleware,
	opts ...http1.ClientOption,
) interface {
	CreateUser(ctx context.Context, request *CreateUserRequest) (*emptypb.Empty, error)
	UpdateUser(ctx context.Context, request *UpdateUserRequest) (*emptypb.Empty, error)
	GetUser(ctx context.Context, request *GetUserRequest) (*GetUserResponse, error)
	GetUsers(ctx context.Context, request *GetUsersRequest) (*GetUsersResponse, error)
	DeleteUser(ctx context.Context, request *DeleteUsersRequest) (*emptypb.Empty, error)
	UpdateUserName(ctx context.Context, request *UpdateUserNameRequest) (*emptypb.Empty, error)
	UploadUsers(ctx context.Context, request *httpbody.HttpBody) (*httpbody.HttpBody, error)
	UploadUserAvatar(ctx context.Context, request *UploadUserAvatarRequest) (*UploadUserAvatarResponse, error)
	PushUsers(ctx context.Context, request *http.HttpRequest) (*http.HttpResponse, error)
	PushUserAvatar(ctx context.Context, request *PushUserAvatarRequest) (*PushUserAvatarResponse, error)
	ModifyUser(ctx context.Context, request *ModifyUserRequest) (*emptypb.Empty, error)
} {
	router := mux.NewRouter()
	router.NewRoute().
		Name("/leo.example.demo.v1.DemoService/CreateUser").
		Methods("POST").
		Path("/v1/user")
	router.NewRoute().
		Name("/leo.example.demo.v1.DemoService/UpdateUser").
		Methods("POST").
		Path("/v1/user/{user_id}")
	router.NewRoute().
		Name("/leo.example.demo.v1.DemoService/GetUser").
		Methods("GET").
		Path("/v1/user/{user_id}")
	router.NewRoute().
		Name("/leo.example.demo.v1.DemoService/GetUsers").
		Methods("GET").
		Path("/v1/users")
	router.NewRoute().
		Name("/leo.example.demo.v1.DemoService/DeleteUser").
		Methods("DELETE").
		Path("/v1/user/{user_id}")
	router.NewRoute().
		Name("/leo.example.demo.v1.DemoService/UpdateUserName").
		Methods("POST").
		Path("/v1/user/{user_id}")
	router.NewRoute().
		Name("/leo.example.demo.v1.DemoService/UploadUsers").
		Methods("POST").
		Path("/v1/users")
	router.NewRoute().
		Name("/leo.example.demo.v1.DemoService/UploadUserAvatar").
		Methods("POST").
		Path("/v1/user/{user_id}")
	router.NewRoute().
		Name("/leo.example.demo.v1.DemoService/PushUsers").
		Methods("POST").
		Path("/v1/users/push")
	router.NewRoute().
		Name("/leo.example.demo.v1.DemoService/PushUserAvatar").
		Methods("POST").
		Path("/v1/user{user_id}/push")
	router.NewRoute().
		Name("/leo.example.demo.v1.DemoService/ModifyUser").
		Methods("PUT").
		Path("/v1/user/{user_id}")
	return &httpDemoServiceClient{
		createUser: endpointx.Chain(
			http1.NewExplicitClient(
				func(ctx context.Context, obj interface{}) (*http2.Request, error) {
					req, ok := obj.(*CreateUserRequest)
					if !ok {
						return nil, fmt.Errorf("invalid request object type, %T", obj)
					}
					if req == nil {
						return nil, errors.New("request object is nil")
					}
					var method = "POST"
					var url string
					var body io.Reader
					if req != nil {
						data, err := protojson.Marshal(req)
						if err != nil {
							return nil, err
						}
						body = bytes.NewBuffer(data)
					}
					var pairs []string
					path, err := router.Get("/leo.example.demo.v1.DemoService/CreateUser").URLPath(pairs...)
					if err != nil {
						return nil, err
					}
					url = fmt.Sprintf("%s://%s%s", "http", instance, path)
					r, err := http2.NewRequestWithContext(ctx, method, url, body)
					if err != nil {
						return nil, err
					}
					return r, nil
				},
				func(ctx context.Context, r *http2.Response) (interface{}, error) {
					return nil, nil
				},
				opts...,
			).Endpoint(),
			mdw...),
		updateUser: endpointx.Chain(
			http1.NewExplicitClient(
				func(ctx context.Context, obj interface{}) (*http2.Request, error) {
					req, ok := obj.(*UpdateUserRequest)
					if !ok {
						return nil, fmt.Errorf("invalid request object type, %T", obj)
					}
					if req == nil {
						return nil, errors.New("request object is nil")
					}
					var method = "POST"
					var url string
					var body io.Reader
					if req != nil {
						data, err := protojson.Marshal(req)
						if err != nil {
							return nil, err
						}
						body = bytes.NewBuffer(data)
					}
					var pairs []string
					pairs = append(pairs, "user_id", strconv.FormatUint(req.UserId, 10))
					path, err := router.Get("/leo.example.demo.v1.DemoService/UpdateUser").URLPath(pairs...)
					if err != nil {
						return nil, err
					}
					url = fmt.Sprintf("%s://%s%s", "http", instance, path)
					r, err := http2.NewRequestWithContext(ctx, method, url, body)
					if err != nil {
						return nil, err
					}
					return r, nil
				},
				func(ctx context.Context, r *http2.Response) (interface{}, error) {
					return nil, nil
				},
				opts...,
			).Endpoint(),
			mdw...),
		getUser: endpointx.Chain(
			http1.NewExplicitClient(
				func(ctx context.Context, obj interface{}) (*http2.Request, error) {
					req, ok := obj.(*GetUserRequest)
					if !ok {
						return nil, fmt.Errorf("invalid request object type, %T", obj)
					}
					if req == nil {
						return nil, errors.New("request object is nil")
					}
					var method = "GET"
					var url string
					var body io.Reader
					var pairs []string
					pairs = append(pairs, "user_id", strconv.FormatUint(req.UserId, 10))
					path, err := router.Get("/leo.example.demo.v1.DemoService/GetUser").URLPath(pairs...)
					if err != nil {
						return nil, err
					}
					queries := r.URL.Query()
					// boolBool bool
					// int32Int32 int32
					// sint32Sint32 sint32
					// uint32Uint32 uint32
					// int64Int64 int64
					// sint64Sint64 sint64
					// uint64Uint64 uint64
					// sfixed32Sfixed32 sfixed32
					// fixed32Fixed32 fixed32
					// floatFloat float
					// sfixed64Sfixed64 sfixed64
					// fixed64Fixed64 fixed64
					// doubleDouble double
					// stringString_ string
					// bytesBytes bytes
					// opt_boolOptBool bool
					// opt_int32OptInt32 int32
					// opt_sint32OptSint32 sint32
					// opt_uint32OptUint32 uint32
					// opt_int64OptInt64 int64
					// opt_sint64OptSint64 sint64
					// opt_uint64OptUint64 uint64
					// opt_sfixed32OptSfixed32 sfixed32
					// opt_fixed32OptFixed32 fixed32
					// opt_floatOptFloat float
					// opt_sfixed64OptSfixed64 sfixed64
					// opt_fixed64OptFixed64 fixed64
					// opt_doubleOptDouble double
					// opt_stringOptString string
					// opt_bytesOptBytes bytes
					// wrap_doubleWrapDouble message
					// wrap_floatWrapFloat message
					// wrap_int64WrapInt64 message
					// wrap_uint64WrapUint64 message
					// wrap_int32WrapInt32 message
					// wrap_uint32WrapUint32 message
					// wrap_boolWrapBool message
					// wrap_stringWrapString message
					// wrap_bytesWrapBytes message
					// repeated_boolRepeatedBool bool
					// repeated_int32RepeatedInt32 int32
					// repeated_sint32RepeatedSint32 sint32
					// repeated_uint32RepeatedUint32 uint32
					// repeated_int64RepeatedInt64 int64
					// repeated_sint64RepeatedSint64 sint64
					// repeated_uint64RepeatedUint64 uint64
					// repeated_sfixed32RepeatedSfixed32 sfixed32
					// repeated_fixed32RepeatedFixed32 fixed32
					// repeated_floatRepeatedFloat float
					// repeated_sfixed64RepeatedSfixed64 sfixed64
					// repeated_fixed64RepeatedFixed64 fixed64
					// repeated_doubleRepeatedDouble double
					// repeated_stringRepeatedString string
					// repeated_bytesRepeatedBytes bytes
					url = fmt.Sprintf("%s://%s%s", "http", instance, path)
					r, err := http2.NewRequestWithContext(ctx, method, url, body)
					if err != nil {
						return nil, err
					}
					return r, nil
				},
				func(ctx context.Context, r *http2.Response) (interface{}, error) {
					return nil, nil
				},
				opts...,
			).Endpoint(),
			mdw...),
		getUsers: endpointx.Chain(
			http1.NewExplicitClient(
				func(ctx context.Context, obj interface{}) (*http2.Request, error) {
					req, ok := obj.(*GetUsersRequest)
					if !ok {
						return nil, fmt.Errorf("invalid request object type, %T", obj)
					}
					if req == nil {
						return nil, errors.New("request object is nil")
					}
					var method = "GET"
					var url string
					var body io.Reader
					var pairs []string
					path, err := router.Get("/leo.example.demo.v1.DemoService/GetUsers").URLPath(pairs...)
					if err != nil {
						return nil, err
					}
					queries := r.URL.Query()
					// page_noPageNo int32
					// page_sizePageSize int32
					url = fmt.Sprintf("%s://%s%s", "http", instance, path)
					r, err := http2.NewRequestWithContext(ctx, method, url, body)
					if err != nil {
						return nil, err
					}
					return r, nil
				},
				func(ctx context.Context, r *http2.Response) (interface{}, error) {
					return nil, nil
				},
				opts...,
			).Endpoint(),
			mdw...),
		deleteUser: endpointx.Chain(
			http1.NewExplicitClient(
				func(ctx context.Context, obj interface{}) (*http2.Request, error) {
					req, ok := obj.(*DeleteUsersRequest)
					if !ok {
						return nil, fmt.Errorf("invalid request object type, %T", obj)
					}
					if req == nil {
						return nil, errors.New("request object is nil")
					}
					var method = "DELETE"
					var url string
					var body io.Reader
					var pairs []string
					pairs = append(pairs, "user_id", strconv.FormatUint(req.UserId, 10))
					path, err := router.Get("/leo.example.demo.v1.DemoService/DeleteUser").URLPath(pairs...)
					if err != nil {
						return nil, err
					}
					url = fmt.Sprintf("%s://%s%s", "http", instance, path)
					r, err := http2.NewRequestWithContext(ctx, method, url, body)
					if err != nil {
						return nil, err
					}
					return r, nil
				},
				func(ctx context.Context, r *http2.Response) (interface{}, error) {
					return nil, nil
				},
				opts...,
			).Endpoint(),
			mdw...),
		updateUserName: endpointx.Chain(
			http1.NewExplicitClient(
				func(ctx context.Context, obj interface{}) (*http2.Request, error) {
					req, ok := obj.(*UpdateUserNameRequest)
					if !ok {
						return nil, fmt.Errorf("invalid request object type, %T", obj)
					}
					if req == nil {
						return nil, errors.New("request object is nil")
					}
					var method = "POST"
					var url string
					var body io.Reader
					body = strings.NewReader(req.Name)
					var pairs []string
					pairs = append(pairs, "user_id", strconv.FormatUint(req.UserId, 10))
					path, err := router.Get("/leo.example.demo.v1.DemoService/UpdateUserName").URLPath(pairs...)
					if err != nil {
						return nil, err
					}
					url = fmt.Sprintf("%s://%s%s", "http", instance, path)
					r, err := http2.NewRequestWithContext(ctx, method, url, body)
					if err != nil {
						return nil, err
					}
					return r, nil
				},
				func(ctx context.Context, r *http2.Response) (interface{}, error) {
					return nil, nil
				},
				opts...,
			).Endpoint(),
			mdw...),
		uploadUsers: endpointx.Chain(
			http1.NewExplicitClient(
				func(ctx context.Context, obj interface{}) (*http2.Request, error) {
					req, ok := obj.(*httpbody.HttpBody)
					if !ok {
						return nil, fmt.Errorf("invalid request object type, %T", obj)
					}
					if req == nil {
						return nil, errors.New("request object is nil")
					}
					var method = "POST"
					var url string
					var body io.Reader
					if req != nil {
						body = bytes.NewReader(req.Data)
					}
					var pairs []string
					path, err := router.Get("/leo.example.demo.v1.DemoService/UploadUsers").URLPath(pairs...)
					if err != nil {
						return nil, err
					}
					url = fmt.Sprintf("%s://%s%s", "http", instance, path)
					r, err := http2.NewRequestWithContext(ctx, method, url, body)
					if err != nil {
						return nil, err
					}
					return r, nil
				},
				func(ctx context.Context, r *http2.Response) (interface{}, error) {
					return nil, nil
				},
				opts...,
			).Endpoint(),
			mdw...),
		uploadUserAvatar: endpointx.Chain(
			http1.NewExplicitClient(
				func(ctx context.Context, obj interface{}) (*http2.Request, error) {
					req, ok := obj.(*UploadUserAvatarRequest)
					if !ok {
						return nil, fmt.Errorf("invalid request object type, %T", obj)
					}
					if req == nil {
						return nil, errors.New("request object is nil")
					}
					var method = "POST"
					var url string
					var body io.Reader
					if req.Avatar != nil {
						body = bytes.NewReader(req.Avatar.Data)
					}
					var pairs []string
					pairs = append(pairs, "user_id", strconv.FormatUint(req.UserId, 10))
					path, err := router.Get("/leo.example.demo.v1.DemoService/UploadUserAvatar").URLPath(pairs...)
					if err != nil {
						return nil, err
					}
					url = fmt.Sprintf("%s://%s%s", "http", instance, path)
					r, err := http2.NewRequestWithContext(ctx, method, url, body)
					if err != nil {
						return nil, err
					}
					return r, nil
				},
				func(ctx context.Context, r *http2.Response) (interface{}, error) {
					return nil, nil
				},
				opts...,
			).Endpoint(),
			mdw...),
		pushUsers: endpointx.Chain(
			http1.NewExplicitClient(
				func(ctx context.Context, obj interface{}) (*http2.Request, error) {
					req, ok := obj.(*http.HttpRequest)
					if !ok {
						return nil, fmt.Errorf("invalid request object type, %T", obj)
					}
					if req == nil {
						return nil, errors.New("request object is nil")
					}
					var method = "POST"
					var url string
					var body io.Reader
					if req != nil {
						body = bytes.NewReader(req.Body)
					}
					var pairs []string
					path, err := router.Get("/leo.example.demo.v1.DemoService/PushUsers").URLPath(pairs...)
					if err != nil {
						return nil, err
					}
					url = fmt.Sprintf("%s://%s%s", "http", instance, path)
					r, err := http2.NewRequestWithContext(ctx, method, url, body)
					if err != nil {
						return nil, err
					}
					return r, nil
				},
				func(ctx context.Context, r *http2.Response) (interface{}, error) {
					return nil, nil
				},
				opts...,
			).Endpoint(),
			mdw...),
		pushUserAvatar: endpointx.Chain(
			http1.NewExplicitClient(
				func(ctx context.Context, obj interface{}) (*http2.Request, error) {
					req, ok := obj.(*PushUserAvatarRequest)
					if !ok {
						return nil, fmt.Errorf("invalid request object type, %T", obj)
					}
					if req == nil {
						return nil, errors.New("request object is nil")
					}
					var method = "POST"
					var url string
					var body io.Reader
					if req.Avatar != nil {
						body = bytes.NewReader(req.Avatar.Body)
					}
					var pairs []string
					pairs = append(pairs, "user_id", strconv.FormatUint(req.UserId, 10))
					path, err := router.Get("/leo.example.demo.v1.DemoService/PushUserAvatar").URLPath(pairs...)
					if err != nil {
						return nil, err
					}
					url = fmt.Sprintf("%s://%s%s", "http", instance, path)
					r, err := http2.NewRequestWithContext(ctx, method, url, body)
					if err != nil {
						return nil, err
					}
					return r, nil
				},
				func(ctx context.Context, r *http2.Response) (interface{}, error) {
					return nil, nil
				},
				opts...,
			).Endpoint(),
			mdw...),
		modifyUser: endpointx.Chain(
			http1.NewExplicitClient(
				func(ctx context.Context, obj interface{}) (*http2.Request, error) {
					req, ok := obj.(*ModifyUserRequest)
					if !ok {
						return nil, fmt.Errorf("invalid request object type, %T", obj)
					}
					if req == nil {
						return nil, errors.New("request object is nil")
					}
					var method = "PUT"
					var url string
					var body io.Reader
					if req.OptInt32 != nil {
						body = strings.NewReader(strconv.FormatInt(int64(*req.OptInt32), 10))
					}
					var pairs []string
					pairs = append(pairs, "user_id", strconv.FormatUint(req.UserId, 10))
					path, err := router.Get("/leo.example.demo.v1.DemoService/ModifyUser").URLPath(pairs...)
					if err != nil {
						return nil, err
					}
					queries := r.URL.Query()
					// boolBool bool
					// int32Int32 int32
					// sint32Sint32 sint32
					// uint32Uint32 uint32
					// int64Int64 int64
					// sint64Sint64 sint64
					// uint64Uint64 uint64
					// sfixed32Sfixed32 sfixed32
					// fixed32Fixed32 fixed32
					// floatFloat float
					// sfixed64Sfixed64 sfixed64
					// fixed64Fixed64 fixed64
					// doubleDouble double
					// stringString_ string
					// bytesBytes bytes
					// opt_boolOptBool bool
					// opt_sint32OptSint32 sint32
					// opt_uint32OptUint32 uint32
					// opt_int64OptInt64 int64
					// opt_sint64OptSint64 sint64
					// opt_uint64OptUint64 uint64
					// opt_sfixed32OptSfixed32 sfixed32
					// opt_fixed32OptFixed32 fixed32
					// opt_floatOptFloat float
					// opt_sfixed64OptSfixed64 sfixed64
					// opt_fixed64OptFixed64 fixed64
					// opt_doubleOptDouble double
					// opt_stringOptString string
					// opt_bytesOptBytes bytes
					// wrap_doubleWrapDouble message
					// wrap_floatWrapFloat message
					// wrap_int64WrapInt64 message
					// wrap_uint64WrapUint64 message
					// wrap_int32WrapInt32 message
					// wrap_uint32WrapUint32 message
					// wrap_boolWrapBool message
					// wrap_stringWrapString message
					// wrap_bytesWrapBytes message
					// rep_boolRepBool bool
					// rep_int32RepInt32 int32
					// rep_sint32RepSint32 sint32
					// rep_uint32RepUint32 uint32
					// rep_int64RepInt64 int64
					// rep_sint64RepSint64 sint64
					// rep_uint64RepUint64 uint64
					// rep_sfixed32RepSfixed32 sfixed32
					// rep_fixed32RepFixed32 fixed32
					// rep_floatRepFloat float
					// rep_sfixed64RepSfixed64 sfixed64
					// rep_fixed64RepFixed64 fixed64
					// rep_doubleRepDouble double
					// rep_stringRepString string
					// rep_bytesRepBytes bytes
					url = fmt.Sprintf("%s://%s%s", "http", instance, path)
					r, err := http2.NewRequestWithContext(ctx, method, url, body)
					if err != nil {
						return nil, err
					}
					return r, nil
				},
				func(ctx context.Context, r *http2.Response) (interface{}, error) {
					return nil, nil
				},
				opts...,
			).Endpoint(),
			mdw...),
	}
}
