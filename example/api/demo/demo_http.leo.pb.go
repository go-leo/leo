// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package demo

import (
	"context"
	endpoint "github.com/go-kit/kit/endpoint"
	http "github.com/go-kit/kit/transport/http"
	endpointx "github.com/go-leo/kitx/endpointx"
	mux "github.com/gorilla/mux"
	http1 "net/http"
)

func NewDemoServiceHTTPServer(
	endpoints interface {
		CreateUser() endpoint.Endpoint
		UpdateUser() endpoint.Endpoint
		GetUser() endpoint.Endpoint
		GetUsers() endpoint.Endpoint
		DeleteUser() endpoint.Endpoint
	},
	mdw []endpoint.Middleware,
	opts ...http.ServerOption,
) http1.Handler {
	r := mux.NewRouter()
	r.Methods("POST").
		Path("/v1/user").
		Handler(http.NewServer(
			endpointx.Chain(endpoints.CreateUser(), mdw...),
			nil,
			nil,
			opts...))
	r.Methods("POST").
		Path("/v1/user/{user_id}").
		Handler(
			http.NewServer(endpointx.Chain(endpoints.UpdateUser(), mdw...),
				func(ctx context.Context, request2 *http1.Request) (request interface{}, err error) {
					return nil, nil
				},
				func(ctx context.Context, writer http1.ResponseWriter, i interface{}) error {
					return nil
				},
				opts...,
			))
	r.Methods("GET").Path("/v1/user/{user_id}").Handler(http.NewServer(endpointx.Chain(endpoints.GetUser(), mdw...), nil, nil, opts...))
	r.Methods("GET").Path("/v1/users").Handler(http.NewServer(endpointx.Chain(endpoints.GetUsers(), mdw...), nil, nil, opts...))
	r.Methods("DELETE").Path("/v1/user/{user_id}").Handler(http.NewServer(endpointx.Chain(endpoints.DeleteUser(), mdw...), nil, nil, opts...))
	return r
}
