syntax = "proto3";
package leo.example.demo.v1;
option go_package = "github.com/go-leo/leo/v3/example/api/demo/v1;demo";

import "google/protobuf/empty.proto";
import "google/api/annotations.proto";
import "google/api/httpbody.proto";
import "google/rpc/http.proto";
import "leo/cqrs/annotations.proto";


service Demo {

  option(leo.cqrs.command) = {
    package: "github.com/go-leo/leo/v3/example/internal/demo/command"
    relative: "../../../internal/demo/command"
  };

  option(leo.cqrs.query) = {
    package: "github.com/go-leo/leo/v3/example/internal/demo/query"
    relative:  "../../../internal/demo/query"
  };

  // CreateUser create user
  rpc CreateUser (CreateUserRequest) returns (CreateUserResponse) {
    option (google.api.http) = {
      post : "/v1/user"
      body : "*"
    };
    option(leo.cqrs.responsibility) = Command;
  }

  // DeleteUser delete user
  rpc DeleteUser (DeleteUsersRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      delete : "/v1/user/{user_id}"
    };
    option(leo.cqrs.responsibility) = Command;
  }

  // UpdateUser update user
  rpc UpdateUser (UpdateUserRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      put : "/v1/user/{user_id}"
      body : "user"
    };
    option(leo.cqrs.responsibility) = Command;
  }

  // GetUser get user
  rpc GetUser (GetUserRequest) returns (GetUserResponse) {
    option (google.api.http) = {
      get : "/v1/user/{user_id}"
    };
    option(leo.cqrs.responsibility) = Query;
  }

  // GetUsers get users
  rpc GetUsers (GetUsersRequest) returns (GetUsersResponse) {
    option (google.api.http) = {
      get : "/v1/users"
    };
    option(leo.cqrs.responsibility) = Query;
  }

  // UploadUserAvatar upload user avatar
  rpc UploadUserAvatar (UploadUserAvatarRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post : "/v1/user/{user_id}"
      body : "avatar"
    };
    option(leo.cqrs.responsibility) = Command;
  }

  // GetUserAvatar get user avatar
  rpc GetUserAvatar (GetUserAvatarRequest) returns (google.api.HttpBody) {
    option (google.api.http) = {
      get : "/v1/users/{user_id}"
    };
    option(leo.cqrs.responsibility) = Query;
  }

  // PushUsers push users by csv
  rpc PushUsers (google.rpc.HttpRequest) returns (google.rpc.HttpResponse) {
    option (google.api.http) = {
      post : "/v1/users/csv/push"
      body : "*"
    };
    option(leo.cqrs.responsibility) = Query;
  }
}

message User {
  uint64 user_id = 1;
  string name = 2;
  int32 age = 3;
  double salary = 4;
  string Token = 5;
  string avatar = 6;
}

message CreateUserRequest {
  User user = 1;
}

message CreateUserResponse {
  uint64 user_id = 1;
}

message UpdateUserRequest {
  uint64 user_id = 1;
  User user = 2;
}

message GetUserRequest {
  uint64 user_id = 1;
}

message GetUserResponse {
  User user = 1;
}

message GetUsersRequest {
  int32 page_no = 1;
  int32 page_size = 2;
}

message GetUsersResponse {
  repeated User users = 1;
}

message DeleteUsersRequest {
  uint64 user_id = 1;
}

message GetUserAvatarRequest {
  uint64 user_id = 1;
}

message UploadUserAvatarRequest {
  uint64 user_id = 1;
  google.api.HttpBody avatar = 2;
}

