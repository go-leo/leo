// Code generated by protoc-gen-go-leo. DO NOT EDIT.

package demo

import (
	context "context"
	cqrs "github.com/go-leo/leo/v3/cqrs"
	httpbody "google.golang.org/genproto/googleapis/api/httpbody"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

func NewDemoCqrsService[
	CreateUserQueryType CreateUserQuery, CreateUserResultType CreateUserResult,
	DeleteUserCommandType DeleteUserCommand,
	UpdateUserCommandType UpdateUserCommand,
	GetUserQueryType GetUserQuery, GetUserResultType GetUserResult,
	GetUsersQueryType GetUsersQuery, GetUsersResultType GetUsersResult,
	UploadUserAvatarCommandType UploadUserAvatarCommand,
	GetUserAvatarQueryType GetUserAvatarQuery, GetUserAvatarResultType GetUserAvatarResult,
](
	createUserHandler cqrs.QueryHandler[CreateUserQueryType, CreateUserResultType],
	deleteUserHandler cqrs.CommandHandler[DeleteUserCommandType],
	updateUserHandler cqrs.CommandHandler[UpdateUserCommandType],
	getUserHandler cqrs.QueryHandler[GetUserQueryType, GetUserResultType],
	getUsersHandler cqrs.QueryHandler[GetUsersQueryType, GetUsersResultType],
	uploadUserAvatarHandler cqrs.CommandHandler[UploadUserAvatarCommandType],
	getUserAvatarHandler cqrs.QueryHandler[GetUserAvatarQueryType, GetUserAvatarResultType],
) (DemoService, error) {
	var bus cqrs.SampleBus
	if err := bus.RegisterQuery(createUserHandler); err != nil {
		return nil, err
	}
	if err := bus.RegisterCommand(deleteUserHandler); err != nil {
		return nil, err
	}
	if err := bus.RegisterCommand(updateUserHandler); err != nil {
		return nil, err
	}
	if err := bus.RegisterQuery(getUserHandler); err != nil {
		return nil, err
	}
	if err := bus.RegisterQuery(getUsersHandler); err != nil {
		return nil, err
	}
	if err := bus.RegisterCommand(uploadUserAvatarHandler); err != nil {
		return nil, err
	}
	if err := bus.RegisterQuery(getUserAvatarHandler); err != nil {
		return nil, err
	}
	return &demoCqrsService[
		CreateUserQueryType, CreateUserResultType,
		DeleteUserCommandType,
		UpdateUserCommandType,
		GetUserQueryType, GetUserResultType,
		GetUsersQueryType, GetUsersResultType,
		UploadUserAvatarCommandType,
		GetUserAvatarQueryType, GetUserAvatarResultType,
	]{bus: &bus}, nil
}

type demoCqrsService[
	CreateUserQueryType CreateUserQuery, CreateUserResultType CreateUserResult,
	DeleteUserCommandType DeleteUserCommand,
	UpdateUserCommandType UpdateUserCommand,
	GetUserQueryType GetUserQuery, GetUserResultType GetUserResult,
	GetUsersQueryType GetUsersQuery, GetUsersResultType GetUsersResult,
	UploadUserAvatarCommandType UploadUserAvatarCommand,
	GetUserAvatarQueryType GetUserAvatarQuery, GetUserAvatarResultType GetUserAvatarResult,
] struct {
	bus cqrs.Bus
}

func (svc *demoCqrsService[
	CreateUserQueryType, CreateUserResultType,
	DeleteUserCommandType,
	UpdateUserCommandType,
	GetUserQueryType, GetUserResultType,
	GetUsersQueryType, GetUsersResultType,
	UploadUserAvatarCommandType,
	GetUserAvatarQueryType, GetUserAvatarResultType,
]) CreateUser(ctx context.Context, request *CreateUserRequest) (*CreateUserResponse, error) {
	var query CreateUserQueryType
	q, ctx, err := query.From(ctx, request)
	if err != nil {
		return nil, err
	}
	r, err := svc.bus.Query(ctx, q)
	if err != nil {
		return nil, err
	}
	return r.(CreateUserResultType).To(ctx)
}

func (svc *demoCqrsService[
	CreateUserQueryType, CreateUserResultType,
	DeleteUserCommandType,
	UpdateUserCommandType,
	GetUserQueryType, GetUserResultType,
	GetUsersQueryType, GetUsersResultType,
	UploadUserAvatarCommandType,
	GetUserAvatarQueryType, GetUserAvatarResultType,
]) DeleteUser(ctx context.Context, request *DeleteUsersRequest) (*emptypb.Empty, error) {
	var command DeleteUserCommandType
	cmd, ctx, err := command.From(ctx, request)
	if err != nil {
		return nil, err
	}
	if err := svc.bus.Exec(ctx, cmd); err != nil {
		return nil, err
	}
	return new(emptypb.Empty), nil
}

func (svc *demoCqrsService[
	CreateUserQueryType, CreateUserResultType,
	DeleteUserCommandType,
	UpdateUserCommandType,
	GetUserQueryType, GetUserResultType,
	GetUsersQueryType, GetUsersResultType,
	UploadUserAvatarCommandType,
	GetUserAvatarQueryType, GetUserAvatarResultType,
]) UpdateUser(ctx context.Context, request *UpdateUserRequest) (*emptypb.Empty, error) {
	var command UpdateUserCommandType
	cmd, ctx, err := command.From(ctx, request)
	if err != nil {
		return nil, err
	}
	if err := svc.bus.Exec(ctx, cmd); err != nil {
		return nil, err
	}
	return new(emptypb.Empty), nil
}

func (svc *demoCqrsService[
	CreateUserQueryType, CreateUserResultType,
	DeleteUserCommandType,
	UpdateUserCommandType,
	GetUserQueryType, GetUserResultType,
	GetUsersQueryType, GetUsersResultType,
	UploadUserAvatarCommandType,
	GetUserAvatarQueryType, GetUserAvatarResultType,
]) GetUser(ctx context.Context, request *GetUserRequest) (*GetUserResponse, error) {
	var query GetUserQueryType
	q, ctx, err := query.From(ctx, request)
	if err != nil {
		return nil, err
	}
	r, err := svc.bus.Query(ctx, q)
	if err != nil {
		return nil, err
	}
	return r.(GetUserResultType).To(ctx)
}

func (svc *demoCqrsService[
	CreateUserQueryType, CreateUserResultType,
	DeleteUserCommandType,
	UpdateUserCommandType,
	GetUserQueryType, GetUserResultType,
	GetUsersQueryType, GetUsersResultType,
	UploadUserAvatarCommandType,
	GetUserAvatarQueryType, GetUserAvatarResultType,
]) GetUsers(ctx context.Context, request *GetUsersRequest) (*GetUsersResponse, error) {
	var query GetUsersQueryType
	q, ctx, err := query.From(ctx, request)
	if err != nil {
		return nil, err
	}
	r, err := svc.bus.Query(ctx, q)
	if err != nil {
		return nil, err
	}
	return r.(GetUsersResultType).To(ctx)
}

func (svc *demoCqrsService[
	CreateUserQueryType, CreateUserResultType,
	DeleteUserCommandType,
	UpdateUserCommandType,
	GetUserQueryType, GetUserResultType,
	GetUsersQueryType, GetUsersResultType,
	UploadUserAvatarCommandType,
	GetUserAvatarQueryType, GetUserAvatarResultType,
]) UploadUserAvatar(ctx context.Context, request *UploadUserAvatarRequest) (*emptypb.Empty, error) {
	var command UploadUserAvatarCommandType
	cmd, ctx, err := command.From(ctx, request)
	if err != nil {
		return nil, err
	}
	if err := svc.bus.Exec(ctx, cmd); err != nil {
		return nil, err
	}
	return new(emptypb.Empty), nil
}

func (svc *demoCqrsService[
	CreateUserQueryType, CreateUserResultType,
	DeleteUserCommandType,
	UpdateUserCommandType,
	GetUserQueryType, GetUserResultType,
	GetUsersQueryType, GetUsersResultType,
	UploadUserAvatarCommandType,
	GetUserAvatarQueryType, GetUserAvatarResultType,
]) GetUserAvatar(ctx context.Context, request *GetUserAvatarRequest) (*httpbody.HttpBody, error) {
	var query GetUserAvatarQueryType
	q, ctx, err := query.From(ctx, request)
	if err != nil {
		return nil, err
	}
	r, err := svc.bus.Query(ctx, q)
	if err != nil {
		return nil, err
	}
	return r.(GetUserAvatarResultType).To(ctx)
}

type (
	DeleteUserCommand interface {
		isDeleteUserCommand_Kind()
		From(context.Context, *DeleteUsersRequest) (DeleteUserCommand, context.Context, error)
	}
	UnimplementedDeleteUserCommand struct{}

	UpdateUserCommand interface {
		isUpdateUserCommand_Kind()
		From(context.Context, *UpdateUserRequest) (UpdateUserCommand, context.Context, error)
	}
	UnimplementedUpdateUserCommand struct{}

	UploadUserAvatarCommand interface {
		isUploadUserAvatarCommand_Kind()
		From(context.Context, *UploadUserAvatarRequest) (UploadUserAvatarCommand, context.Context, error)
	}
	UnimplementedUploadUserAvatarCommand struct{}
)

type (
	CreateUserQuery interface {
		isCreateUserQuery_Kind()
		From(context.Context, *CreateUserRequest) (CreateUserQuery, context.Context, error)
	}
	CreateUserResult interface {
		isCreateUserResult_Kind()
		To(context.Context) (*CreateUserResponse, error)
	}
	UnimplementedCreateUserQuery  struct{}
	UnimplementedCreateUserResult struct{}

	GetUserQuery interface {
		isGetUserQuery_Kind()
		From(context.Context, *GetUserRequest) (GetUserQuery, context.Context, error)
	}
	GetUserResult interface {
		isGetUserResult_Kind()
		To(context.Context) (*GetUserResponse, error)
	}
	UnimplementedGetUserQuery  struct{}
	UnimplementedGetUserResult struct{}

	GetUsersQuery interface {
		isGetUsersQuery_Kind()
		From(context.Context, *GetUsersRequest) (GetUsersQuery, context.Context, error)
	}
	GetUsersResult interface {
		isGetUsersResult_Kind()
		To(context.Context) (*GetUsersResponse, error)
	}
	UnimplementedGetUsersQuery  struct{}
	UnimplementedGetUsersResult struct{}

	GetUserAvatarQuery interface {
		isGetUserAvatarQuery_Kind()
		From(context.Context, *GetUserAvatarRequest) (GetUserAvatarQuery, context.Context, error)
	}
	GetUserAvatarResult interface {
		isGetUserAvatarResult_Kind()
		To(context.Context) (*httpbody.HttpBody, error)
	}
	UnimplementedGetUserAvatarQuery  struct{}
	UnimplementedGetUserAvatarResult struct{}
)

func (UnimplementedDeleteUserCommand) isDeleteUserCommand_Kind() {}
func (UnimplementedDeleteUserCommand) From(context.Context, *DeleteUsersRequest) (DeleteUserCommand, context.Context, error) {
	panic("implement me")
	return nil, nil, nil
}
func (UnimplementedUpdateUserCommand) isUpdateUserCommand_Kind() {}
func (UnimplementedUpdateUserCommand) From(context.Context, *UpdateUserRequest) (UpdateUserCommand, context.Context, error) {
	panic("implement me")
	return nil, nil, nil
}
func (UnimplementedUploadUserAvatarCommand) isUploadUserAvatarCommand_Kind() {}
func (UnimplementedUploadUserAvatarCommand) From(context.Context, *UploadUserAvatarRequest) (UploadUserAvatarCommand, context.Context, error) {
	panic("implement me")
	return nil, nil, nil
}
func (UnimplementedCreateUserQuery) isCreateUserQuery_Kind() {}
func (UnimplementedCreateUserQuery) From(context.Context, *CreateUserRequest) (CreateUserQuery, context.Context, error) {
	panic("implement me")
	return nil, nil, nil
}
func (UnimplementedCreateUserResult) isCreateUserResult_Kind() {}
func (UnimplementedCreateUserResult) To(context.Context) (*CreateUserResponse, error) {
	panic("implement me")
	return nil, nil
}

func (UnimplementedGetUserQuery) isGetUserQuery_Kind() {}
func (UnimplementedGetUserQuery) From(context.Context, *GetUserRequest) (GetUserQuery, context.Context, error) {
	panic("implement me")
	return nil, nil, nil
}
func (UnimplementedGetUserResult) isGetUserResult_Kind() {}
func (UnimplementedGetUserResult) To(context.Context) (*GetUserResponse, error) {
	panic("implement me")
	return nil, nil
}

func (UnimplementedGetUsersQuery) isGetUsersQuery_Kind() {}
func (UnimplementedGetUsersQuery) From(context.Context, *GetUsersRequest) (GetUsersQuery, context.Context, error) {
	panic("implement me")
	return nil, nil, nil
}
func (UnimplementedGetUsersResult) isGetUsersResult_Kind() {}
func (UnimplementedGetUsersResult) To(context.Context) (*GetUsersResponse, error) {
	panic("implement me")
	return nil, nil
}

func (UnimplementedGetUserAvatarQuery) isGetUserAvatarQuery_Kind() {}
func (UnimplementedGetUserAvatarQuery) From(context.Context, *GetUserAvatarRequest) (GetUserAvatarQuery, context.Context, error) {
	panic("implement me")
	return nil, nil, nil
}
func (UnimplementedGetUserAvatarResult) isGetUserAvatarResult_Kind() {}
func (UnimplementedGetUserAvatarResult) To(context.Context) (*httpbody.HttpBody, error) {
	panic("implement me")
	return nil, nil
}

// demo/v1/cq/create_user_leo.query.pb.go
// demo/v1/cq/delete_user_leo.query.pb.go
// demo/v1/cq/update_user_leo.query.pb.go
// demo/v1/cq/get_user_leo.query.pb.go
// demo/v1/cq/get_users_leo.query.pb.go
// demo/v1/cq/upload_user_avatar_leo.query.pb.go
// demo/v1/cq/get_user_avatar_leo.query.pb.go
