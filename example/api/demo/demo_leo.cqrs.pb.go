// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package demo

import (
	context "context"
	cqrs "github.com/go-leo/leo/v3/cqrs"
	command "github.com/go-leo/leo/v3/example/internal/demo/command"
	query "github.com/go-leo/leo/v3/example/internal/demo/query"
	metadatax "github.com/go-leo/leo/v3/metadatax"
	httpbody "google.golang.org/genproto/googleapis/api/httpbody"
	http "google.golang.org/genproto/googleapis/rpc/http"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// DemoAssembler responsible for completing the transformation between domain model objects and DTOs
type DemoAssembler interface {

	// FromCreateUserRequest convert request to command arguments
	FromCreateUserRequest(ctx context.Context, request *CreateUserRequest) (*command.CreateUserArgs, context.Context, error)

	// ToCreateUserResponse convert query result to response
	ToCreateUserResponse(ctx context.Context, request *CreateUserRequest, metadata metadatax.Metadata) (*CreateUserResponse, error)

	// FromDeleteUserRequest convert request to command arguments
	FromDeleteUserRequest(ctx context.Context, request *DeleteUsersRequest) (*command.DeleteUserArgs, context.Context, error)

	// ToDeleteUserResponse convert query result to response
	ToDeleteUserResponse(ctx context.Context, request *DeleteUsersRequest, metadata metadatax.Metadata) (*emptypb.Empty, error)

	// FromUpdateUserRequest convert request to command arguments
	FromUpdateUserRequest(ctx context.Context, request *UpdateUserRequest) (*command.UpdateUserArgs, context.Context, error)

	// ToUpdateUserResponse convert query result to response
	ToUpdateUserResponse(ctx context.Context, request *UpdateUserRequest, metadata metadatax.Metadata) (*emptypb.Empty, error)

	// FromGetUserRequest convert request to query arguments
	FromGetUserRequest(ctx context.Context, request *GetUserRequest) (*query.GetUserArgs, context.Context, error)

	// ToGetUserResponse convert query result to response
	ToGetUserResponse(ctx context.Context, request *GetUserRequest, res *query.GetUserRes) (*GetUserResponse, error)

	// FromGetUsersRequest convert request to query arguments
	FromGetUsersRequest(ctx context.Context, request *GetUsersRequest) (*query.GetUsersArgs, context.Context, error)

	// ToGetUsersResponse convert query result to response
	ToGetUsersResponse(ctx context.Context, request *GetUsersRequest, res *query.GetUsersRes) (*GetUsersResponse, error)

	// FromUploadUserAvatarRequest convert request to command arguments
	FromUploadUserAvatarRequest(ctx context.Context, request *UploadUserAvatarRequest) (*command.UploadUserAvatarArgs, context.Context, error)

	// ToUploadUserAvatarResponse convert query result to response
	ToUploadUserAvatarResponse(ctx context.Context, request *UploadUserAvatarRequest, metadata metadatax.Metadata) (*emptypb.Empty, error)

	// FromGetUserAvatarRequest convert request to query arguments
	FromGetUserAvatarRequest(ctx context.Context, request *GetUserAvatarRequest) (*query.GetUserAvatarArgs, context.Context, error)

	// ToGetUserAvatarResponse convert query result to response
	ToGetUserAvatarResponse(ctx context.Context, request *GetUserAvatarRequest, res *query.GetUserAvatarRes) (*httpbody.HttpBody, error)

	// FromPushUsersRequest convert request to query arguments
	FromPushUsersRequest(ctx context.Context, request *http.HttpRequest) (*query.PushUsersArgs, context.Context, error)

	// ToPushUsersResponse convert query result to response
	ToPushUsersResponse(ctx context.Context, request *http.HttpRequest, res *query.PushUsersRes) (*http.HttpResponse, error)
}

// DemoCQRSService implement the Demo service with CQRS pattern
type DemoCQRSService struct {
	bus       cqrs.Bus
	assembler DemoAssembler
}

func NewDemoCQRSService(bus cqrs.Bus, assembler DemoAssembler) *DemoCQRSService {
	return &DemoCQRSService{bus: bus, assembler: assembler}
}

func (svc *DemoCQRSService) CreateUser(ctx context.Context, request *CreateUserRequest) (*CreateUserResponse, error) {
	args, ctx, err := svc.assembler.FromCreateUserRequest(ctx, request)
	if err != nil {
		return nil, err
	}
	metadata, err := svc.bus.Exec(ctx, args)
	if err != nil {
		return nil, err
	}
	return svc.assembler.ToCreateUserResponse(ctx, request, metadata)
}

func (svc *DemoCQRSService) DeleteUser(ctx context.Context, request *DeleteUsersRequest) (*emptypb.Empty, error) {
	args, ctx, err := svc.assembler.FromDeleteUserRequest(ctx, request)
	if err != nil {
		return nil, err
	}
	metadata, err := svc.bus.Exec(ctx, args)
	if err != nil {
		return nil, err
	}
	return svc.assembler.ToDeleteUserResponse(ctx, request, metadata)
}

func (svc *DemoCQRSService) UpdateUser(ctx context.Context, request *UpdateUserRequest) (*emptypb.Empty, error) {
	args, ctx, err := svc.assembler.FromUpdateUserRequest(ctx, request)
	if err != nil {
		return nil, err
	}
	metadata, err := svc.bus.Exec(ctx, args)
	if err != nil {
		return nil, err
	}
	return svc.assembler.ToUpdateUserResponse(ctx, request, metadata)
}

func (svc *DemoCQRSService) GetUser(ctx context.Context, request *GetUserRequest) (*GetUserResponse, error) {
	args, ctx, err := svc.assembler.FromGetUserRequest(ctx, request)
	if err != nil {
		return nil, err
	}
	res, err := svc.bus.Query(ctx, args)
	if err != nil {
		return nil, err
	}
	return svc.assembler.ToGetUserResponse(ctx, request, res.(*query.GetUserRes))
}

func (svc *DemoCQRSService) GetUsers(ctx context.Context, request *GetUsersRequest) (*GetUsersResponse, error) {
	args, ctx, err := svc.assembler.FromGetUsersRequest(ctx, request)
	if err != nil {
		return nil, err
	}
	res, err := svc.bus.Query(ctx, args)
	if err != nil {
		return nil, err
	}
	return svc.assembler.ToGetUsersResponse(ctx, request, res.(*query.GetUsersRes))
}

func (svc *DemoCQRSService) UploadUserAvatar(ctx context.Context, request *UploadUserAvatarRequest) (*emptypb.Empty, error) {
	args, ctx, err := svc.assembler.FromUploadUserAvatarRequest(ctx, request)
	if err != nil {
		return nil, err
	}
	metadata, err := svc.bus.Exec(ctx, args)
	if err != nil {
		return nil, err
	}
	return svc.assembler.ToUploadUserAvatarResponse(ctx, request, metadata)
}

func (svc *DemoCQRSService) GetUserAvatar(ctx context.Context, request *GetUserAvatarRequest) (*httpbody.HttpBody, error) {
	args, ctx, err := svc.assembler.FromGetUserAvatarRequest(ctx, request)
	if err != nil {
		return nil, err
	}
	res, err := svc.bus.Query(ctx, args)
	if err != nil {
		return nil, err
	}
	return svc.assembler.ToGetUserAvatarResponse(ctx, request, res.(*query.GetUserAvatarRes))
}

func (svc *DemoCQRSService) PushUsers(ctx context.Context, request *http.HttpRequest) (*http.HttpResponse, error) {
	args, ctx, err := svc.assembler.FromPushUsersRequest(ctx, request)
	if err != nil {
		return nil, err
	}
	res, err := svc.bus.Query(ctx, args)
	if err != nil {
		return nil, err
	}
	return svc.assembler.ToPushUsersResponse(ctx, request, res.(*query.PushUsersRes))
}

func NewDemoBus(
	createUser command.CreateUser,
	deleteUser command.DeleteUser,
	updateUser command.UpdateUser,
	getUser query.GetUser,
	getUsers query.GetUsers,
	uploadUserAvatar command.UploadUserAvatar,
	getUserAvatar query.GetUserAvatar,
	pushUsers query.PushUsers,
) (cqrs.Bus, error) {
	bus := cqrs.NewBus()
	if err := bus.RegisterCommand(createUser); err != nil {
		return nil, err
	}
	if err := bus.RegisterCommand(deleteUser); err != nil {
		return nil, err
	}
	if err := bus.RegisterCommand(updateUser); err != nil {
		return nil, err
	}
	if err := bus.RegisterQuery(getUser); err != nil {
		return nil, err
	}
	if err := bus.RegisterQuery(getUsers); err != nil {
		return nil, err
	}
	if err := bus.RegisterCommand(uploadUserAvatar); err != nil {
		return nil, err
	}
	if err := bus.RegisterQuery(getUserAvatar); err != nil {
		return nil, err
	}
	if err := bus.RegisterQuery(pushUsers); err != nil {
		return nil, err
	}
	return bus, nil
}
