// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package demo

import (
	context "context"
	endpoint "github.com/go-kit/kit/endpoint"
	grpc "github.com/go-kit/kit/transport/grpc"
	endpointx "github.com/go-leo/leo/v3/endpointx"
	httpbody "google.golang.org/genproto/googleapis/api/httpbody"
	http "google.golang.org/genproto/googleapis/rpc/http"
	grpc1 "google.golang.org/grpc"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

type demoGRPCServer struct {
	createUser grpc.Handler

	deleteUser grpc.Handler

	updateUser grpc.Handler

	getUser grpc.Handler

	getUsers grpc.Handler

	uploadUserAvatar grpc.Handler

	getUserAvatar grpc.Handler

	pushUsers grpc.Handler
}

func (s *demoGRPCServer) CreateUser(ctx context.Context, request *CreateUserRequest) (*CreateUserResponse, error) {
	ctx, rep, err := s.createUser.ServeGRPC(ctx, request)
	if err != nil {
		return nil, err
	}
	_ = ctx
	return rep.(*CreateUserResponse), nil
}

func (s *demoGRPCServer) DeleteUser(ctx context.Context, request *DeleteUsersRequest) (*emptypb.Empty, error) {
	ctx, rep, err := s.deleteUser.ServeGRPC(ctx, request)
	if err != nil {
		return nil, err
	}
	_ = ctx
	return rep.(*emptypb.Empty), nil
}

func (s *demoGRPCServer) UpdateUser(ctx context.Context, request *UpdateUserRequest) (*emptypb.Empty, error) {
	ctx, rep, err := s.updateUser.ServeGRPC(ctx, request)
	if err != nil {
		return nil, err
	}
	_ = ctx
	return rep.(*emptypb.Empty), nil
}

func (s *demoGRPCServer) GetUser(ctx context.Context, request *GetUserRequest) (*GetUserResponse, error) {
	ctx, rep, err := s.getUser.ServeGRPC(ctx, request)
	if err != nil {
		return nil, err
	}
	_ = ctx
	return rep.(*GetUserResponse), nil
}

func (s *demoGRPCServer) GetUsers(ctx context.Context, request *GetUsersRequest) (*GetUsersResponse, error) {
	ctx, rep, err := s.getUsers.ServeGRPC(ctx, request)
	if err != nil {
		return nil, err
	}
	_ = ctx
	return rep.(*GetUsersResponse), nil
}

func (s *demoGRPCServer) UploadUserAvatar(ctx context.Context, request *UploadUserAvatarRequest) (*emptypb.Empty, error) {
	ctx, rep, err := s.uploadUserAvatar.ServeGRPC(ctx, request)
	if err != nil {
		return nil, err
	}
	_ = ctx
	return rep.(*emptypb.Empty), nil
}

func (s *demoGRPCServer) GetUserAvatar(ctx context.Context, request *GetUserAvatarRequest) (*httpbody.HttpBody, error) {
	ctx, rep, err := s.getUserAvatar.ServeGRPC(ctx, request)
	if err != nil {
		return nil, err
	}
	_ = ctx
	return rep.(*httpbody.HttpBody), nil
}

func (s *demoGRPCServer) PushUsers(ctx context.Context, request *http.HttpRequest) (*http.HttpResponse, error) {
	ctx, rep, err := s.pushUsers.ServeGRPC(ctx, request)
	if err != nil {
		return nil, err
	}
	_ = ctx
	return rep.(*http.HttpResponse), nil
}

func NewDemoGRPCServer(
	endpoints interface {
		CreateUser() endpoint.Endpoint
		DeleteUser() endpoint.Endpoint
		UpdateUser() endpoint.Endpoint
		GetUser() endpoint.Endpoint
		GetUsers() endpoint.Endpoint
		UploadUserAvatar() endpoint.Endpoint
		GetUserAvatar() endpoint.Endpoint
		PushUsers() endpoint.Endpoint
	},
	opts []grpc.ServerOption,
	mdw ...endpoint.Middleware,
) interface {
	CreateUser(ctx context.Context, request *CreateUserRequest) (*CreateUserResponse, error)
	DeleteUser(ctx context.Context, request *DeleteUsersRequest) (*emptypb.Empty, error)
	UpdateUser(ctx context.Context, request *UpdateUserRequest) (*emptypb.Empty, error)
	GetUser(ctx context.Context, request *GetUserRequest) (*GetUserResponse, error)
	GetUsers(ctx context.Context, request *GetUsersRequest) (*GetUsersResponse, error)
	UploadUserAvatar(ctx context.Context, request *UploadUserAvatarRequest) (*emptypb.Empty, error)
	GetUserAvatar(ctx context.Context, request *GetUserAvatarRequest) (*httpbody.HttpBody, error)
	PushUsers(ctx context.Context, request *http.HttpRequest) (*http.HttpResponse, error)
} {
	return &demoGRPCServer{
		createUser: grpc.NewServer(
			endpointx.Chain(endpoints.CreateUser(), mdw...),
			func(_ context.Context, v any) (any, error) { return v, nil },
			func(_ context.Context, v any) (any, error) { return v, nil },
			opts...,
		),
		deleteUser: grpc.NewServer(
			endpointx.Chain(endpoints.DeleteUser(), mdw...),
			func(_ context.Context, v any) (any, error) { return v, nil },
			func(_ context.Context, v any) (any, error) { return v, nil },
			opts...,
		),
		updateUser: grpc.NewServer(
			endpointx.Chain(endpoints.UpdateUser(), mdw...),
			func(_ context.Context, v any) (any, error) { return v, nil },
			func(_ context.Context, v any) (any, error) { return v, nil },
			opts...,
		),
		getUser: grpc.NewServer(
			endpointx.Chain(endpoints.GetUser(), mdw...),
			func(_ context.Context, v any) (any, error) { return v, nil },
			func(_ context.Context, v any) (any, error) { return v, nil },
			opts...,
		),
		getUsers: grpc.NewServer(
			endpointx.Chain(endpoints.GetUsers(), mdw...),
			func(_ context.Context, v any) (any, error) { return v, nil },
			func(_ context.Context, v any) (any, error) { return v, nil },
			opts...,
		),
		uploadUserAvatar: grpc.NewServer(
			endpointx.Chain(endpoints.UploadUserAvatar(), mdw...),
			func(_ context.Context, v any) (any, error) { return v, nil },
			func(_ context.Context, v any) (any, error) { return v, nil },
			opts...,
		),
		getUserAvatar: grpc.NewServer(
			endpointx.Chain(endpoints.GetUserAvatar(), mdw...),
			func(_ context.Context, v any) (any, error) { return v, nil },
			func(_ context.Context, v any) (any, error) { return v, nil },
			opts...,
		),
		pushUsers: grpc.NewServer(
			endpointx.Chain(endpoints.PushUsers(), mdw...),
			func(_ context.Context, v any) (any, error) { return v, nil },
			func(_ context.Context, v any) (any, error) { return v, nil },
			opts...,
		),
	}
}

type demoGRPCClient struct {
	createUser       endpoint.Endpoint
	deleteUser       endpoint.Endpoint
	updateUser       endpoint.Endpoint
	getUser          endpoint.Endpoint
	getUsers         endpoint.Endpoint
	uploadUserAvatar endpoint.Endpoint
	getUserAvatar    endpoint.Endpoint
	pushUsers        endpoint.Endpoint
}

func (c *demoGRPCClient) CreateUser(ctx context.Context, request *CreateUserRequest) (*CreateUserResponse, error) {
	rep, err := c.createUser(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*CreateUserResponse), nil
}

func (c *demoGRPCClient) DeleteUser(ctx context.Context, request *DeleteUsersRequest) (*emptypb.Empty, error) {
	rep, err := c.deleteUser(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*emptypb.Empty), nil
}

func (c *demoGRPCClient) UpdateUser(ctx context.Context, request *UpdateUserRequest) (*emptypb.Empty, error) {
	rep, err := c.updateUser(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*emptypb.Empty), nil
}

func (c *demoGRPCClient) GetUser(ctx context.Context, request *GetUserRequest) (*GetUserResponse, error) {
	rep, err := c.getUser(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*GetUserResponse), nil
}

func (c *demoGRPCClient) GetUsers(ctx context.Context, request *GetUsersRequest) (*GetUsersResponse, error) {
	rep, err := c.getUsers(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*GetUsersResponse), nil
}

func (c *demoGRPCClient) UploadUserAvatar(ctx context.Context, request *UploadUserAvatarRequest) (*emptypb.Empty, error) {
	rep, err := c.uploadUserAvatar(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*emptypb.Empty), nil
}

func (c *demoGRPCClient) GetUserAvatar(ctx context.Context, request *GetUserAvatarRequest) (*httpbody.HttpBody, error) {
	rep, err := c.getUserAvatar(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*httpbody.HttpBody), nil
}

func (c *demoGRPCClient) PushUsers(ctx context.Context, request *http.HttpRequest) (*http.HttpResponse, error) {
	rep, err := c.pushUsers(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*http.HttpResponse), nil
}

func NewDemoGRPCClient(
	conn *grpc1.ClientConn,
	opts []grpc.ClientOption,
	mdw ...endpoint.Middleware,
) interface {
	CreateUser(ctx context.Context, request *CreateUserRequest) (*CreateUserResponse, error)
	DeleteUser(ctx context.Context, request *DeleteUsersRequest) (*emptypb.Empty, error)
	UpdateUser(ctx context.Context, request *UpdateUserRequest) (*emptypb.Empty, error)
	GetUser(ctx context.Context, request *GetUserRequest) (*GetUserResponse, error)
	GetUsers(ctx context.Context, request *GetUsersRequest) (*GetUsersResponse, error)
	UploadUserAvatar(ctx context.Context, request *UploadUserAvatarRequest) (*emptypb.Empty, error)
	GetUserAvatar(ctx context.Context, request *GetUserAvatarRequest) (*httpbody.HttpBody, error)
	PushUsers(ctx context.Context, request *http.HttpRequest) (*http.HttpResponse, error)
} {
	return &demoGRPCClient{
		createUser: endpointx.Chain(
			grpc.NewClient(
				conn,
				"leo.example.demo.v1.Demo",
				"CreateUser",
				func(_ context.Context, v any) (any, error) { return v, nil },
				func(_ context.Context, v any) (any, error) { return v, nil },
				CreateUserResponse{},
				opts...,
			).Endpoint(),
			mdw...),
		deleteUser: endpointx.Chain(
			grpc.NewClient(
				conn,
				"leo.example.demo.v1.Demo",
				"DeleteUser",
				func(_ context.Context, v any) (any, error) { return v, nil },
				func(_ context.Context, v any) (any, error) { return v, nil },
				emptypb.Empty{},
				opts...,
			).Endpoint(),
			mdw...),
		updateUser: endpointx.Chain(
			grpc.NewClient(
				conn,
				"leo.example.demo.v1.Demo",
				"UpdateUser",
				func(_ context.Context, v any) (any, error) { return v, nil },
				func(_ context.Context, v any) (any, error) { return v, nil },
				emptypb.Empty{},
				opts...,
			).Endpoint(),
			mdw...),
		getUser: endpointx.Chain(
			grpc.NewClient(
				conn,
				"leo.example.demo.v1.Demo",
				"GetUser",
				func(_ context.Context, v any) (any, error) { return v, nil },
				func(_ context.Context, v any) (any, error) { return v, nil },
				GetUserResponse{},
				opts...,
			).Endpoint(),
			mdw...),
		getUsers: endpointx.Chain(
			grpc.NewClient(
				conn,
				"leo.example.demo.v1.Demo",
				"GetUsers",
				func(_ context.Context, v any) (any, error) { return v, nil },
				func(_ context.Context, v any) (any, error) { return v, nil },
				GetUsersResponse{},
				opts...,
			).Endpoint(),
			mdw...),
		uploadUserAvatar: endpointx.Chain(
			grpc.NewClient(
				conn,
				"leo.example.demo.v1.Demo",
				"UploadUserAvatar",
				func(_ context.Context, v any) (any, error) { return v, nil },
				func(_ context.Context, v any) (any, error) { return v, nil },
				emptypb.Empty{},
				opts...,
			).Endpoint(),
			mdw...),
		getUserAvatar: endpointx.Chain(
			grpc.NewClient(
				conn,
				"leo.example.demo.v1.Demo",
				"GetUserAvatar",
				func(_ context.Context, v any) (any, error) { return v, nil },
				func(_ context.Context, v any) (any, error) { return v, nil },
				httpbody.HttpBody{},
				opts...,
			).Endpoint(),
			mdw...),
		pushUsers: endpointx.Chain(
			grpc.NewClient(
				conn,
				"leo.example.demo.v1.Demo",
				"PushUsers",
				func(_ context.Context, v any) (any, error) { return v, nil },
				func(_ context.Context, v any) (any, error) { return v, nil },
				http.HttpResponse{},
				opts...,
			).Endpoint(),
			mdw...),
	}
}
