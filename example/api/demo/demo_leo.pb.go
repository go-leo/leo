// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package demo

import (
	bytes "bytes"
	context "context"
	errors "errors"
	fmt "fmt"
	endpoint "github.com/go-kit/kit/endpoint"
	grpc "github.com/go-kit/kit/transport/grpc"
	http1 "github.com/go-kit/kit/transport/http"
	jsonx "github.com/go-leo/gox/encodingx/jsonx"
	errorx "github.com/go-leo/gox/errorx"
	urlx "github.com/go-leo/gox/netx/urlx"
	strconvx "github.com/go-leo/gox/strconvx"
	cqrs "github.com/go-leo/leo/v3/cqrs"
	endpointx "github.com/go-leo/leo/v3/endpointx"
	command "github.com/go-leo/leo/v3/example/internal/demo/command"
	query "github.com/go-leo/leo/v3/example/internal/demo/query"
	metadatax "github.com/go-leo/leo/v3/metadatax"
	transportx "github.com/go-leo/leo/v3/transportx"
	mux "github.com/gorilla/mux"
	httpbody "google.golang.org/genproto/googleapis/api/httpbody"
	http "google.golang.org/genproto/googleapis/rpc/http"
	grpc1 "google.golang.org/grpc"
	metadata "google.golang.org/grpc/metadata"
	proto "google.golang.org/protobuf/proto"
	anypb "google.golang.org/protobuf/types/known/anypb"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	structpb "google.golang.org/protobuf/types/known/structpb"
	io "io"
	http2 "net/http"
	url "net/url"
)

// =========================== endpoints ===========================

type DemoService interface {
	CreateUser(ctx context.Context, request *CreateUserRequest) (*CreateUserResponse, error)
	DeleteUser(ctx context.Context, request *DeleteUsersRequest) (*emptypb.Empty, error)
	UpdateUser(ctx context.Context, request *UpdateUserRequest) (*emptypb.Empty, error)
	GetUser(ctx context.Context, request *GetUserRequest) (*GetUserResponse, error)
	GetUsers(ctx context.Context, request *GetUsersRequest) (*GetUsersResponse, error)
	UploadUserAvatar(ctx context.Context, request *UploadUserAvatarRequest) (*emptypb.Empty, error)
	GetUserAvatar(ctx context.Context, request *GetUserAvatarRequest) (*httpbody.HttpBody, error)
	PushUsers(ctx context.Context, request *http.HttpRequest) (*http.HttpResponse, error)
}

type DemoEndpoints interface {
	CreateUser() endpoint.Endpoint
	DeleteUser() endpoint.Endpoint
	UpdateUser() endpoint.Endpoint
	GetUser() endpoint.Endpoint
	GetUsers() endpoint.Endpoint
	UploadUserAvatar() endpoint.Endpoint
	GetUserAvatar() endpoint.Endpoint
	PushUsers() endpoint.Endpoint
}

type demoEndpoints struct {
	svc         DemoService
	middlewares []endpoint.Middleware
}

func (e *demoEndpoints) CreateUser() endpoint.Endpoint {
	component := func(ctx context.Context, request any) (any, error) {
		return e.svc.CreateUser(ctx, request.(*CreateUserRequest))
	}
	return endpointx.Chain(component, e.middlewares...)
}

func (e *demoEndpoints) DeleteUser() endpoint.Endpoint {
	component := func(ctx context.Context, request any) (any, error) {
		return e.svc.DeleteUser(ctx, request.(*DeleteUsersRequest))
	}
	return endpointx.Chain(component, e.middlewares...)
}

func (e *demoEndpoints) UpdateUser() endpoint.Endpoint {
	component := func(ctx context.Context, request any) (any, error) {
		return e.svc.UpdateUser(ctx, request.(*UpdateUserRequest))
	}
	return endpointx.Chain(component, e.middlewares...)
}

func (e *demoEndpoints) GetUser() endpoint.Endpoint {
	component := func(ctx context.Context, request any) (any, error) {
		return e.svc.GetUser(ctx, request.(*GetUserRequest))
	}
	return endpointx.Chain(component, e.middlewares...)
}

func (e *demoEndpoints) GetUsers() endpoint.Endpoint {
	component := func(ctx context.Context, request any) (any, error) {
		return e.svc.GetUsers(ctx, request.(*GetUsersRequest))
	}
	return endpointx.Chain(component, e.middlewares...)
}

func (e *demoEndpoints) UploadUserAvatar() endpoint.Endpoint {
	component := func(ctx context.Context, request any) (any, error) {
		return e.svc.UploadUserAvatar(ctx, request.(*UploadUserAvatarRequest))
	}
	return endpointx.Chain(component, e.middlewares...)
}

func (e *demoEndpoints) GetUserAvatar() endpoint.Endpoint {
	component := func(ctx context.Context, request any) (any, error) {
		return e.svc.GetUserAvatar(ctx, request.(*GetUserAvatarRequest))
	}
	return endpointx.Chain(component, e.middlewares...)
}

func (e *demoEndpoints) PushUsers() endpoint.Endpoint {
	component := func(ctx context.Context, request any) (any, error) {
		return e.svc.PushUsers(ctx, request.(*http.HttpRequest))
	}
	return endpointx.Chain(component, e.middlewares...)
}

func NewDemoEndpoints(svc DemoService, middlewares ...endpoint.Middleware) DemoEndpoints {
	return &demoEndpoints{svc: svc, middlewares: middlewares}
}

// =========================== cqrs ===========================

// DemoAssembler responsible for completing the transformation between domain model objects and DTOs
type DemoAssembler interface {

	// FromCreateUserRequest convert request to command arguments
	FromCreateUserRequest(ctx context.Context, request *CreateUserRequest) (*command.CreateUserArgs, context.Context, error)

	// ToCreateUserResponse convert query result to response
	ToCreateUserResponse(ctx context.Context, request *CreateUserRequest, metadata metadatax.Metadata) (*CreateUserResponse, error)

	// FromDeleteUserRequest convert request to command arguments
	FromDeleteUserRequest(ctx context.Context, request *DeleteUsersRequest) (*command.DeleteUserArgs, context.Context, error)

	// ToDeleteUserResponse convert query result to response
	ToDeleteUserResponse(ctx context.Context, request *DeleteUsersRequest, metadata metadatax.Metadata) (*emptypb.Empty, error)

	// FromUpdateUserRequest convert request to command arguments
	FromUpdateUserRequest(ctx context.Context, request *UpdateUserRequest) (*command.UpdateUserArgs, context.Context, error)

	// ToUpdateUserResponse convert query result to response
	ToUpdateUserResponse(ctx context.Context, request *UpdateUserRequest, metadata metadatax.Metadata) (*emptypb.Empty, error)

	// FromGetUserRequest convert request to query arguments
	FromGetUserRequest(ctx context.Context, request *GetUserRequest) (*query.GetUserArgs, context.Context, error)

	// ToGetUserResponse convert query result to response
	ToGetUserResponse(ctx context.Context, request *GetUserRequest, res *query.GetUserRes) (*GetUserResponse, error)

	// FromGetUsersRequest convert request to query arguments
	FromGetUsersRequest(ctx context.Context, request *GetUsersRequest) (*query.GetUsersArgs, context.Context, error)

	// ToGetUsersResponse convert query result to response
	ToGetUsersResponse(ctx context.Context, request *GetUsersRequest, res *query.GetUsersRes) (*GetUsersResponse, error)

	// FromUploadUserAvatarRequest convert request to command arguments
	FromUploadUserAvatarRequest(ctx context.Context, request *UploadUserAvatarRequest) (*command.UploadUserAvatarArgs, context.Context, error)

	// ToUploadUserAvatarResponse convert query result to response
	ToUploadUserAvatarResponse(ctx context.Context, request *UploadUserAvatarRequest, metadata metadatax.Metadata) (*emptypb.Empty, error)

	// FromGetUserAvatarRequest convert request to query arguments
	FromGetUserAvatarRequest(ctx context.Context, request *GetUserAvatarRequest) (*query.GetUserAvatarArgs, context.Context, error)

	// ToGetUserAvatarResponse convert query result to response
	ToGetUserAvatarResponse(ctx context.Context, request *GetUserAvatarRequest, res *query.GetUserAvatarRes) (*httpbody.HttpBody, error)

	// FromPushUsersRequest convert request to query arguments
	FromPushUsersRequest(ctx context.Context, request *http.HttpRequest) (*query.PushUsersArgs, context.Context, error)

	// ToPushUsersResponse convert query result to response
	ToPushUsersResponse(ctx context.Context, request *http.HttpRequest, res *query.PushUsersRes) (*http.HttpResponse, error)
}

// demoCqrsService implement the DemoService with CQRS pattern
type demoCqrsService struct {
	bus       cqrs.Bus
	assembler DemoAssembler
}

func (svc *demoCqrsService) CreateUser(ctx context.Context, request *CreateUserRequest) (*CreateUserResponse, error) {
	args, ctx, err := svc.assembler.FromCreateUserRequest(ctx, request)
	if err != nil {
		return nil, err
	}
	metadata, err := svc.bus.Exec(ctx, args)
	if err != nil {
		return nil, err
	}
	return svc.assembler.ToCreateUserResponse(ctx, request, metadata)
}

func (svc *demoCqrsService) DeleteUser(ctx context.Context, request *DeleteUsersRequest) (*emptypb.Empty, error) {
	args, ctx, err := svc.assembler.FromDeleteUserRequest(ctx, request)
	if err != nil {
		return nil, err
	}
	metadata, err := svc.bus.Exec(ctx, args)
	if err != nil {
		return nil, err
	}
	return svc.assembler.ToDeleteUserResponse(ctx, request, metadata)
}

func (svc *demoCqrsService) UpdateUser(ctx context.Context, request *UpdateUserRequest) (*emptypb.Empty, error) {
	args, ctx, err := svc.assembler.FromUpdateUserRequest(ctx, request)
	if err != nil {
		return nil, err
	}
	metadata, err := svc.bus.Exec(ctx, args)
	if err != nil {
		return nil, err
	}
	return svc.assembler.ToUpdateUserResponse(ctx, request, metadata)
}

func (svc *demoCqrsService) GetUser(ctx context.Context, request *GetUserRequest) (*GetUserResponse, error) {
	args, ctx, err := svc.assembler.FromGetUserRequest(ctx, request)
	if err != nil {
		return nil, err
	}
	res, err := svc.bus.Query(ctx, args)
	if err != nil {
		return nil, err
	}
	return svc.assembler.ToGetUserResponse(ctx, request, res.(*query.GetUserRes))
}

func (svc *demoCqrsService) GetUsers(ctx context.Context, request *GetUsersRequest) (*GetUsersResponse, error) {
	args, ctx, err := svc.assembler.FromGetUsersRequest(ctx, request)
	if err != nil {
		return nil, err
	}
	res, err := svc.bus.Query(ctx, args)
	if err != nil {
		return nil, err
	}
	return svc.assembler.ToGetUsersResponse(ctx, request, res.(*query.GetUsersRes))
}

func (svc *demoCqrsService) UploadUserAvatar(ctx context.Context, request *UploadUserAvatarRequest) (*emptypb.Empty, error) {
	args, ctx, err := svc.assembler.FromUploadUserAvatarRequest(ctx, request)
	if err != nil {
		return nil, err
	}
	metadata, err := svc.bus.Exec(ctx, args)
	if err != nil {
		return nil, err
	}
	return svc.assembler.ToUploadUserAvatarResponse(ctx, request, metadata)
}

func (svc *demoCqrsService) GetUserAvatar(ctx context.Context, request *GetUserAvatarRequest) (*httpbody.HttpBody, error) {
	args, ctx, err := svc.assembler.FromGetUserAvatarRequest(ctx, request)
	if err != nil {
		return nil, err
	}
	res, err := svc.bus.Query(ctx, args)
	if err != nil {
		return nil, err
	}
	return svc.assembler.ToGetUserAvatarResponse(ctx, request, res.(*query.GetUserAvatarRes))
}

func (svc *demoCqrsService) PushUsers(ctx context.Context, request *http.HttpRequest) (*http.HttpResponse, error) {
	args, ctx, err := svc.assembler.FromPushUsersRequest(ctx, request)
	if err != nil {
		return nil, err
	}
	res, err := svc.bus.Query(ctx, args)
	if err != nil {
		return nil, err
	}
	return svc.assembler.ToPushUsersResponse(ctx, request, res.(*query.PushUsersRes))
}

func NewDemoCqrsService(bus cqrs.Bus, assembler DemoAssembler) DemoService {
	return &demoCqrsService{bus: bus, assembler: assembler}
}

func NewDemoBus(
	createUser command.CreateUser,
	deleteUser command.DeleteUser,
	updateUser command.UpdateUser,
	getUser query.GetUser,
	getUsers query.GetUsers,
	uploadUserAvatar command.UploadUserAvatar,
	getUserAvatar query.GetUserAvatar,
	pushUsers query.PushUsers,
) (cqrs.Bus, error) {
	bus := cqrs.NewBus()
	if err := bus.RegisterCommand(createUser); err != nil {
		return nil, err
	}
	if err := bus.RegisterCommand(deleteUser); err != nil {
		return nil, err
	}
	if err := bus.RegisterCommand(updateUser); err != nil {
		return nil, err
	}
	if err := bus.RegisterQuery(getUser); err != nil {
		return nil, err
	}
	if err := bus.RegisterQuery(getUsers); err != nil {
		return nil, err
	}
	if err := bus.RegisterCommand(uploadUserAvatar); err != nil {
		return nil, err
	}
	if err := bus.RegisterQuery(getUserAvatar); err != nil {
		return nil, err
	}
	if err := bus.RegisterQuery(pushUsers); err != nil {
		return nil, err
	}
	return bus, nil
}

// =========================== grpc transports ===========================

type DemoGrpcServerTransports interface {
	CreateUser() *grpc.Server
	DeleteUser() *grpc.Server
	UpdateUser() *grpc.Server
	GetUser() *grpc.Server
	GetUsers() *grpc.Server
	UploadUserAvatar() *grpc.Server
	GetUserAvatar() *grpc.Server
	PushUsers() *grpc.Server
}

type DemoGrpcClientTransports interface {
	CreateUser() *grpc.Client
	DeleteUser() *grpc.Client
	UpdateUser() *grpc.Client
	GetUser() *grpc.Client
	GetUsers() *grpc.Client
	UploadUserAvatar() *grpc.Client
	GetUserAvatar() *grpc.Client
	PushUsers() *grpc.Client
}

type demoGrpcServerTransports struct {
	createUser       *grpc.Server
	deleteUser       *grpc.Server
	updateUser       *grpc.Server
	getUser          *grpc.Server
	getUsers         *grpc.Server
	uploadUserAvatar *grpc.Server
	getUserAvatar    *grpc.Server
	pushUsers        *grpc.Server
}

func (t *demoGrpcServerTransports) CreateUser() *grpc.Server {
	return t.createUser
}

func (t *demoGrpcServerTransports) DeleteUser() *grpc.Server {
	return t.deleteUser
}

func (t *demoGrpcServerTransports) UpdateUser() *grpc.Server {
	return t.updateUser
}

func (t *demoGrpcServerTransports) GetUser() *grpc.Server {
	return t.getUser
}

func (t *demoGrpcServerTransports) GetUsers() *grpc.Server {
	return t.getUsers
}

func (t *demoGrpcServerTransports) UploadUserAvatar() *grpc.Server {
	return t.uploadUserAvatar
}

func (t *demoGrpcServerTransports) GetUserAvatar() *grpc.Server {
	return t.getUserAvatar
}

func (t *demoGrpcServerTransports) PushUsers() *grpc.Server {
	return t.pushUsers
}

func NewDemoGrpcServerTransports(endpoints DemoEndpoints, serverOptions ...grpc.ServerOption) DemoGrpcServerTransports {
	return &demoGrpcServerTransports{
		createUser: grpc.NewServer(
			endpoints.CreateUser(),
			func(_ context.Context, v any) (any, error) { return v, nil },
			func(_ context.Context, v any) (any, error) { return v, nil },
			append([]grpc.ServerOption{
				grpc.ServerBefore(func(ctx context.Context, md metadata.MD) context.Context {
					return endpointx.InjectName(ctx, "/leo.example.demo.v1.Demo/CreateUser")
				}),
				grpc.ServerBefore(func(ctx context.Context, md metadata.MD) context.Context {
					return transportx.InjectName(ctx, transportx.GrpcServer)
				}),
			}, serverOptions...)...,
		),
		deleteUser: grpc.NewServer(
			endpoints.DeleteUser(),
			func(_ context.Context, v any) (any, error) { return v, nil },
			func(_ context.Context, v any) (any, error) { return v, nil },
			append([]grpc.ServerOption{
				grpc.ServerBefore(func(ctx context.Context, md metadata.MD) context.Context {
					return endpointx.InjectName(ctx, "/leo.example.demo.v1.Demo/DeleteUser")
				}),
				grpc.ServerBefore(func(ctx context.Context, md metadata.MD) context.Context {
					return transportx.InjectName(ctx, transportx.GrpcServer)
				}),
			}, serverOptions...)...,
		),
		updateUser: grpc.NewServer(
			endpoints.UpdateUser(),
			func(_ context.Context, v any) (any, error) { return v, nil },
			func(_ context.Context, v any) (any, error) { return v, nil },
			append([]grpc.ServerOption{
				grpc.ServerBefore(func(ctx context.Context, md metadata.MD) context.Context {
					return endpointx.InjectName(ctx, "/leo.example.demo.v1.Demo/UpdateUser")
				}),
				grpc.ServerBefore(func(ctx context.Context, md metadata.MD) context.Context {
					return transportx.InjectName(ctx, transportx.GrpcServer)
				}),
			}, serverOptions...)...,
		),
		getUser: grpc.NewServer(
			endpoints.GetUser(),
			func(_ context.Context, v any) (any, error) { return v, nil },
			func(_ context.Context, v any) (any, error) { return v, nil },
			append([]grpc.ServerOption{
				grpc.ServerBefore(func(ctx context.Context, md metadata.MD) context.Context {
					return endpointx.InjectName(ctx, "/leo.example.demo.v1.Demo/GetUser")
				}),
				grpc.ServerBefore(func(ctx context.Context, md metadata.MD) context.Context {
					return transportx.InjectName(ctx, transportx.GrpcServer)
				}),
			}, serverOptions...)...,
		),
		getUsers: grpc.NewServer(
			endpoints.GetUsers(),
			func(_ context.Context, v any) (any, error) { return v, nil },
			func(_ context.Context, v any) (any, error) { return v, nil },
			append([]grpc.ServerOption{
				grpc.ServerBefore(func(ctx context.Context, md metadata.MD) context.Context {
					return endpointx.InjectName(ctx, "/leo.example.demo.v1.Demo/GetUsers")
				}),
				grpc.ServerBefore(func(ctx context.Context, md metadata.MD) context.Context {
					return transportx.InjectName(ctx, transportx.GrpcServer)
				}),
			}, serverOptions...)...,
		),
		uploadUserAvatar: grpc.NewServer(
			endpoints.UploadUserAvatar(),
			func(_ context.Context, v any) (any, error) { return v, nil },
			func(_ context.Context, v any) (any, error) { return v, nil },
			append([]grpc.ServerOption{
				grpc.ServerBefore(func(ctx context.Context, md metadata.MD) context.Context {
					return endpointx.InjectName(ctx, "/leo.example.demo.v1.Demo/UploadUserAvatar")
				}),
				grpc.ServerBefore(func(ctx context.Context, md metadata.MD) context.Context {
					return transportx.InjectName(ctx, transportx.GrpcServer)
				}),
			}, serverOptions...)...,
		),
		getUserAvatar: grpc.NewServer(
			endpoints.GetUserAvatar(),
			func(_ context.Context, v any) (any, error) { return v, nil },
			func(_ context.Context, v any) (any, error) { return v, nil },
			append([]grpc.ServerOption{
				grpc.ServerBefore(func(ctx context.Context, md metadata.MD) context.Context {
					return endpointx.InjectName(ctx, "/leo.example.demo.v1.Demo/GetUserAvatar")
				}),
				grpc.ServerBefore(func(ctx context.Context, md metadata.MD) context.Context {
					return transportx.InjectName(ctx, transportx.GrpcServer)
				}),
			}, serverOptions...)...,
		),
		pushUsers: grpc.NewServer(
			endpoints.PushUsers(),
			func(_ context.Context, v any) (any, error) { return v, nil },
			func(_ context.Context, v any) (any, error) { return v, nil },
			append([]grpc.ServerOption{
				grpc.ServerBefore(func(ctx context.Context, md metadata.MD) context.Context {
					return endpointx.InjectName(ctx, "/leo.example.demo.v1.Demo/PushUsers")
				}),
				grpc.ServerBefore(func(ctx context.Context, md metadata.MD) context.Context {
					return transportx.InjectName(ctx, transportx.GrpcServer)
				}),
			}, serverOptions...)...,
		),
	}
}

type demoGrpcClientTransports struct {
	createUser       *grpc.Client
	deleteUser       *grpc.Client
	updateUser       *grpc.Client
	getUser          *grpc.Client
	getUsers         *grpc.Client
	uploadUserAvatar *grpc.Client
	getUserAvatar    *grpc.Client
	pushUsers        *grpc.Client
}

func (t *demoGrpcClientTransports) CreateUser() *grpc.Client {
	return t.createUser
}

func (t *demoGrpcClientTransports) DeleteUser() *grpc.Client {
	return t.deleteUser
}

func (t *demoGrpcClientTransports) UpdateUser() *grpc.Client {
	return t.updateUser
}

func (t *demoGrpcClientTransports) GetUser() *grpc.Client {
	return t.getUser
}

func (t *demoGrpcClientTransports) GetUsers() *grpc.Client {
	return t.getUsers
}

func (t *demoGrpcClientTransports) UploadUserAvatar() *grpc.Client {
	return t.uploadUserAvatar
}

func (t *demoGrpcClientTransports) GetUserAvatar() *grpc.Client {
	return t.getUserAvatar
}

func (t *demoGrpcClientTransports) PushUsers() *grpc.Client {
	return t.pushUsers
}

func NewDemoGrpcClientTransports(conn *grpc1.ClientConn, clientOptions ...grpc.ClientOption) DemoGrpcClientTransports {
	return &demoGrpcClientTransports{
		createUser: grpc.NewClient(
			conn,
			"leo.example.demo.v1.Demo",
			"CreateUser",
			func(_ context.Context, v any) (any, error) { return v, nil },
			func(_ context.Context, v any) (any, error) { return v, nil },
			CreateUserResponse{},
			append([]grpc.ClientOption{
				grpc.ClientBefore(func(ctx context.Context, md *metadata.MD) context.Context {
					return endpointx.InjectName(ctx, "/leo.example.demo.v1.Demo/CreateUser")
				}),
				grpc.ClientBefore(func(ctx context.Context, md *metadata.MD) context.Context {
					return transportx.InjectName(ctx, transportx.GrpcClient)
				}),
			}, clientOptions...)...,
		),
		deleteUser: grpc.NewClient(
			conn,
			"leo.example.demo.v1.Demo",
			"DeleteUser",
			func(_ context.Context, v any) (any, error) { return v, nil },
			func(_ context.Context, v any) (any, error) { return v, nil },
			emptypb.Empty{},
			append([]grpc.ClientOption{
				grpc.ClientBefore(func(ctx context.Context, md *metadata.MD) context.Context {
					return endpointx.InjectName(ctx, "/leo.example.demo.v1.Demo/DeleteUser")
				}),
				grpc.ClientBefore(func(ctx context.Context, md *metadata.MD) context.Context {
					return transportx.InjectName(ctx, transportx.GrpcClient)
				}),
			}, clientOptions...)...,
		),
		updateUser: grpc.NewClient(
			conn,
			"leo.example.demo.v1.Demo",
			"UpdateUser",
			func(_ context.Context, v any) (any, error) { return v, nil },
			func(_ context.Context, v any) (any, error) { return v, nil },
			emptypb.Empty{},
			append([]grpc.ClientOption{
				grpc.ClientBefore(func(ctx context.Context, md *metadata.MD) context.Context {
					return endpointx.InjectName(ctx, "/leo.example.demo.v1.Demo/UpdateUser")
				}),
				grpc.ClientBefore(func(ctx context.Context, md *metadata.MD) context.Context {
					return transportx.InjectName(ctx, transportx.GrpcClient)
				}),
			}, clientOptions...)...,
		),
		getUser: grpc.NewClient(
			conn,
			"leo.example.demo.v1.Demo",
			"GetUser",
			func(_ context.Context, v any) (any, error) { return v, nil },
			func(_ context.Context, v any) (any, error) { return v, nil },
			GetUserResponse{},
			append([]grpc.ClientOption{
				grpc.ClientBefore(func(ctx context.Context, md *metadata.MD) context.Context {
					return endpointx.InjectName(ctx, "/leo.example.demo.v1.Demo/GetUser")
				}),
				grpc.ClientBefore(func(ctx context.Context, md *metadata.MD) context.Context {
					return transportx.InjectName(ctx, transportx.GrpcClient)
				}),
			}, clientOptions...)...,
		),
		getUsers: grpc.NewClient(
			conn,
			"leo.example.demo.v1.Demo",
			"GetUsers",
			func(_ context.Context, v any) (any, error) { return v, nil },
			func(_ context.Context, v any) (any, error) { return v, nil },
			GetUsersResponse{},
			append([]grpc.ClientOption{
				grpc.ClientBefore(func(ctx context.Context, md *metadata.MD) context.Context {
					return endpointx.InjectName(ctx, "/leo.example.demo.v1.Demo/GetUsers")
				}),
				grpc.ClientBefore(func(ctx context.Context, md *metadata.MD) context.Context {
					return transportx.InjectName(ctx, transportx.GrpcClient)
				}),
			}, clientOptions...)...,
		),
		uploadUserAvatar: grpc.NewClient(
			conn,
			"leo.example.demo.v1.Demo",
			"UploadUserAvatar",
			func(_ context.Context, v any) (any, error) { return v, nil },
			func(_ context.Context, v any) (any, error) { return v, nil },
			emptypb.Empty{},
			append([]grpc.ClientOption{
				grpc.ClientBefore(func(ctx context.Context, md *metadata.MD) context.Context {
					return endpointx.InjectName(ctx, "/leo.example.demo.v1.Demo/UploadUserAvatar")
				}),
				grpc.ClientBefore(func(ctx context.Context, md *metadata.MD) context.Context {
					return transportx.InjectName(ctx, transportx.GrpcClient)
				}),
			}, clientOptions...)...,
		),
		getUserAvatar: grpc.NewClient(
			conn,
			"leo.example.demo.v1.Demo",
			"GetUserAvatar",
			func(_ context.Context, v any) (any, error) { return v, nil },
			func(_ context.Context, v any) (any, error) { return v, nil },
			httpbody.HttpBody{},
			append([]grpc.ClientOption{
				grpc.ClientBefore(func(ctx context.Context, md *metadata.MD) context.Context {
					return endpointx.InjectName(ctx, "/leo.example.demo.v1.Demo/GetUserAvatar")
				}),
				grpc.ClientBefore(func(ctx context.Context, md *metadata.MD) context.Context {
					return transportx.InjectName(ctx, transportx.GrpcClient)
				}),
			}, clientOptions...)...,
		),
		pushUsers: grpc.NewClient(
			conn,
			"leo.example.demo.v1.Demo",
			"PushUsers",
			func(_ context.Context, v any) (any, error) { return v, nil },
			func(_ context.Context, v any) (any, error) { return v, nil },
			http.HttpResponse{},
			append([]grpc.ClientOption{
				grpc.ClientBefore(func(ctx context.Context, md *metadata.MD) context.Context {
					return endpointx.InjectName(ctx, "/leo.example.demo.v1.Demo/PushUsers")
				}),
				grpc.ClientBefore(func(ctx context.Context, md *metadata.MD) context.Context {
					return transportx.InjectName(ctx, transportx.GrpcClient)
				}),
			}, clientOptions...)...,
		),
	}
}

type demoGrpcServer struct {
	createUser       *grpc.Server
	deleteUser       *grpc.Server
	updateUser       *grpc.Server
	getUser          *grpc.Server
	getUsers         *grpc.Server
	uploadUserAvatar *grpc.Server
	getUserAvatar    *grpc.Server
	pushUsers        *grpc.Server
}

func (s *demoGrpcServer) CreateUser(ctx context.Context, request *CreateUserRequest) (*CreateUserResponse, error) {
	ctx, rep, err := s.createUser.ServeGRPC(ctx, request)
	if err != nil {
		return nil, err
	}
	_ = ctx
	return rep.(*CreateUserResponse), nil
}

func (s *demoGrpcServer) DeleteUser(ctx context.Context, request *DeleteUsersRequest) (*emptypb.Empty, error) {
	ctx, rep, err := s.deleteUser.ServeGRPC(ctx, request)
	if err != nil {
		return nil, err
	}
	_ = ctx
	return rep.(*emptypb.Empty), nil
}

func (s *demoGrpcServer) UpdateUser(ctx context.Context, request *UpdateUserRequest) (*emptypb.Empty, error) {
	ctx, rep, err := s.updateUser.ServeGRPC(ctx, request)
	if err != nil {
		return nil, err
	}
	_ = ctx
	return rep.(*emptypb.Empty), nil
}

func (s *demoGrpcServer) GetUser(ctx context.Context, request *GetUserRequest) (*GetUserResponse, error) {
	ctx, rep, err := s.getUser.ServeGRPC(ctx, request)
	if err != nil {
		return nil, err
	}
	_ = ctx
	return rep.(*GetUserResponse), nil
}

func (s *demoGrpcServer) GetUsers(ctx context.Context, request *GetUsersRequest) (*GetUsersResponse, error) {
	ctx, rep, err := s.getUsers.ServeGRPC(ctx, request)
	if err != nil {
		return nil, err
	}
	_ = ctx
	return rep.(*GetUsersResponse), nil
}

func (s *demoGrpcServer) UploadUserAvatar(ctx context.Context, request *UploadUserAvatarRequest) (*emptypb.Empty, error) {
	ctx, rep, err := s.uploadUserAvatar.ServeGRPC(ctx, request)
	if err != nil {
		return nil, err
	}
	_ = ctx
	return rep.(*emptypb.Empty), nil
}

func (s *demoGrpcServer) GetUserAvatar(ctx context.Context, request *GetUserAvatarRequest) (*httpbody.HttpBody, error) {
	ctx, rep, err := s.getUserAvatar.ServeGRPC(ctx, request)
	if err != nil {
		return nil, err
	}
	_ = ctx
	return rep.(*httpbody.HttpBody), nil
}

func (s *demoGrpcServer) PushUsers(ctx context.Context, request *http.HttpRequest) (*http.HttpResponse, error) {
	ctx, rep, err := s.pushUsers.ServeGRPC(ctx, request)
	if err != nil {
		return nil, err
	}
	_ = ctx
	return rep.(*http.HttpResponse), nil
}

func NewDemoGrpcServer(transports DemoGrpcServerTransports) DemoService {
	return &demoGrpcServer{
		createUser:       transports.CreateUser(),
		deleteUser:       transports.DeleteUser(),
		updateUser:       transports.UpdateUser(),
		getUser:          transports.GetUser(),
		getUsers:         transports.GetUsers(),
		uploadUserAvatar: transports.UploadUserAvatar(),
		getUserAvatar:    transports.GetUserAvatar(),
		pushUsers:        transports.PushUsers(),
	}
}

type demoGrpcClient struct {
	createUser       endpoint.Endpoint
	deleteUser       endpoint.Endpoint
	updateUser       endpoint.Endpoint
	getUser          endpoint.Endpoint
	getUsers         endpoint.Endpoint
	uploadUserAvatar endpoint.Endpoint
	getUserAvatar    endpoint.Endpoint
	pushUsers        endpoint.Endpoint
}

func (c *demoGrpcClient) CreateUser(ctx context.Context, request *CreateUserRequest) (*CreateUserResponse, error) {
	rep, err := c.createUser(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*CreateUserResponse), nil
}

func (c *demoGrpcClient) DeleteUser(ctx context.Context, request *DeleteUsersRequest) (*emptypb.Empty, error) {
	rep, err := c.deleteUser(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*emptypb.Empty), nil
}

func (c *demoGrpcClient) UpdateUser(ctx context.Context, request *UpdateUserRequest) (*emptypb.Empty, error) {
	rep, err := c.updateUser(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*emptypb.Empty), nil
}

func (c *demoGrpcClient) GetUser(ctx context.Context, request *GetUserRequest) (*GetUserResponse, error) {
	rep, err := c.getUser(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*GetUserResponse), nil
}

func (c *demoGrpcClient) GetUsers(ctx context.Context, request *GetUsersRequest) (*GetUsersResponse, error) {
	rep, err := c.getUsers(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*GetUsersResponse), nil
}

func (c *demoGrpcClient) UploadUserAvatar(ctx context.Context, request *UploadUserAvatarRequest) (*emptypb.Empty, error) {
	rep, err := c.uploadUserAvatar(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*emptypb.Empty), nil
}

func (c *demoGrpcClient) GetUserAvatar(ctx context.Context, request *GetUserAvatarRequest) (*httpbody.HttpBody, error) {
	rep, err := c.getUserAvatar(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*httpbody.HttpBody), nil
}

func (c *demoGrpcClient) PushUsers(ctx context.Context, request *http.HttpRequest) (*http.HttpResponse, error) {
	rep, err := c.pushUsers(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*http.HttpResponse), nil
}

func NewDemoGrpcClient(transports DemoGrpcClientTransports, middlewares ...endpoint.Middleware) DemoService {
	return &demoGrpcClient{
		createUser:       endpointx.Chain(transports.CreateUser().Endpoint(), middlewares...),
		deleteUser:       endpointx.Chain(transports.DeleteUser().Endpoint(), middlewares...),
		updateUser:       endpointx.Chain(transports.UpdateUser().Endpoint(), middlewares...),
		getUser:          endpointx.Chain(transports.GetUser().Endpoint(), middlewares...),
		getUsers:         endpointx.Chain(transports.GetUsers().Endpoint(), middlewares...),
		uploadUserAvatar: endpointx.Chain(transports.UploadUserAvatar().Endpoint(), middlewares...),
		getUserAvatar:    endpointx.Chain(transports.GetUserAvatar().Endpoint(), middlewares...),
		pushUsers:        endpointx.Chain(transports.PushUsers().Endpoint(), middlewares...),
	}
}

// =========================== http transports ===========================

type DemoHttpServerTransports interface {
	CreateUser() *http1.Server
	DeleteUser() *http1.Server
	UpdateUser() *http1.Server
	GetUser() *http1.Server
	GetUsers() *http1.Server
	UploadUserAvatar() *http1.Server
	GetUserAvatar() *http1.Server
	PushUsers() *http1.Server
}

type DemoHttpClientTransports interface {
	CreateUser() *http1.Client
	DeleteUser() *http1.Client
	UpdateUser() *http1.Client
	GetUser() *http1.Client
	GetUsers() *http1.Client
	UploadUserAvatar() *http1.Client
	GetUserAvatar() *http1.Client
	PushUsers() *http1.Client
}

type demoHttpServerTransports struct {
	createUser       *http1.Server
	deleteUser       *http1.Server
	updateUser       *http1.Server
	getUser          *http1.Server
	getUsers         *http1.Server
	uploadUserAvatar *http1.Server
	getUserAvatar    *http1.Server
	pushUsers        *http1.Server
}

func (t *demoHttpServerTransports) CreateUser() *http1.Server {
	return t.createUser
}

func (t *demoHttpServerTransports) DeleteUser() *http1.Server {
	return t.deleteUser
}

func (t *demoHttpServerTransports) UpdateUser() *http1.Server {
	return t.updateUser
}

func (t *demoHttpServerTransports) GetUser() *http1.Server {
	return t.getUser
}

func (t *demoHttpServerTransports) GetUsers() *http1.Server {
	return t.getUsers
}

func (t *demoHttpServerTransports) UploadUserAvatar() *http1.Server {
	return t.uploadUserAvatar
}

func (t *demoHttpServerTransports) GetUserAvatar() *http1.Server {
	return t.getUserAvatar
}

func (t *demoHttpServerTransports) PushUsers() *http1.Server {
	return t.pushUsers
}

func NewDemoHttpServerTransports(endpoints DemoEndpoints, serverOptions ...http1.ServerOption) DemoHttpServerTransports {
	return &demoHttpServerTransports{
		createUser: http1.NewServer(
			endpoints.CreateUser(),
			func(ctx context.Context, r *http2.Request) (any, error) {
				req := &CreateUserRequest{}
				if err := jsonx.NewDecoder(r.Body).Decode(req); err != nil {
					return nil, err
				}
				return req, nil
			},
			func(ctx context.Context, w http2.ResponseWriter, obj any) error {
				resp := obj.(*CreateUserResponse)
				w.Header().Set("Content-Type", "application/json; charset=utf-8")
				w.WriteHeader(http2.StatusOK)
				if err := jsonx.NewEncoder(w).Encode(resp); err != nil {
					return err
				}
				return nil
			},
			append([]http1.ServerOption{
				http1.ServerBefore(func(ctx context.Context, request *http2.Request) context.Context {
					return endpointx.InjectName(ctx, "/leo.example.demo.v1.Demo/CreateUser")
				}),
				http1.ServerBefore(func(ctx context.Context, request *http2.Request) context.Context {
					return transportx.InjectName(ctx, transportx.HttpServer)
				}),
			}, serverOptions...)...,
		),
		deleteUser: http1.NewServer(
			endpoints.DeleteUser(),
			func(ctx context.Context, r *http2.Request) (any, error) {
				req := &DeleteUsersRequest{}
				vars := urlx.FormFromMap(mux.Vars(r))
				var varErr error
				req.UserId, varErr = errorx.Break[uint64](varErr)(urlx.GetUint[uint64](vars, "user_id"))
				if varErr != nil {
					return nil, varErr
				}
				return req, nil
			},
			func(ctx context.Context, w http2.ResponseWriter, obj any) error {
				resp := obj.(*emptypb.Empty)
				w.Header().Set("Content-Type", "application/json; charset=utf-8")
				w.WriteHeader(http2.StatusOK)
				if err := jsonx.NewEncoder(w).Encode(resp); err != nil {
					return err
				}
				return nil
			},
			append([]http1.ServerOption{
				http1.ServerBefore(func(ctx context.Context, request *http2.Request) context.Context {
					return endpointx.InjectName(ctx, "/leo.example.demo.v1.Demo/DeleteUser")
				}),
				http1.ServerBefore(func(ctx context.Context, request *http2.Request) context.Context {
					return transportx.InjectName(ctx, transportx.HttpServer)
				}),
			}, serverOptions...)...,
		),
		updateUser: http1.NewServer(
			endpoints.UpdateUser(),
			func(ctx context.Context, r *http2.Request) (any, error) {
				req := &UpdateUserRequest{}
				if err := jsonx.NewDecoder(r.Body).Decode(&req.User); err != nil {
					return nil, err
				}
				vars := urlx.FormFromMap(mux.Vars(r))
				var varErr error
				req.UserId, varErr = errorx.Break[uint64](varErr)(urlx.GetUint[uint64](vars, "user_id"))
				if varErr != nil {
					return nil, varErr
				}
				return req, nil
			},
			func(ctx context.Context, w http2.ResponseWriter, obj any) error {
				resp := obj.(*emptypb.Empty)
				w.Header().Set("Content-Type", "application/json; charset=utf-8")
				w.WriteHeader(http2.StatusOK)
				if err := jsonx.NewEncoder(w).Encode(resp); err != nil {
					return err
				}
				return nil
			},
			append([]http1.ServerOption{
				http1.ServerBefore(func(ctx context.Context, request *http2.Request) context.Context {
					return endpointx.InjectName(ctx, "/leo.example.demo.v1.Demo/UpdateUser")
				}),
				http1.ServerBefore(func(ctx context.Context, request *http2.Request) context.Context {
					return transportx.InjectName(ctx, transportx.HttpServer)
				}),
			}, serverOptions...)...,
		),
		getUser: http1.NewServer(
			endpoints.GetUser(),
			func(ctx context.Context, r *http2.Request) (any, error) {
				req := &GetUserRequest{}
				vars := urlx.FormFromMap(mux.Vars(r))
				var varErr error
				req.UserId, varErr = errorx.Break[uint64](varErr)(urlx.GetUint[uint64](vars, "user_id"))
				if varErr != nil {
					return nil, varErr
				}
				return req, nil
			},
			func(ctx context.Context, w http2.ResponseWriter, obj any) error {
				resp := obj.(*GetUserResponse)
				w.Header().Set("Content-Type", "application/json; charset=utf-8")
				w.WriteHeader(http2.StatusOK)
				if err := jsonx.NewEncoder(w).Encode(resp); err != nil {
					return err
				}
				return nil
			},
			append([]http1.ServerOption{
				http1.ServerBefore(func(ctx context.Context, request *http2.Request) context.Context {
					return endpointx.InjectName(ctx, "/leo.example.demo.v1.Demo/GetUser")
				}),
				http1.ServerBefore(func(ctx context.Context, request *http2.Request) context.Context {
					return transportx.InjectName(ctx, transportx.HttpServer)
				}),
			}, serverOptions...)...,
		),
		getUsers: http1.NewServer(
			endpoints.GetUsers(),
			func(ctx context.Context, r *http2.Request) (any, error) {
				req := &GetUsersRequest{}
				queries := r.URL.Query()
				var queryErr error
				req.PageNo, queryErr = errorx.Break[int32](queryErr)(urlx.GetInt[int32](queries, "page_no"))
				req.PageSize, queryErr = errorx.Break[int32](queryErr)(urlx.GetInt[int32](queries, "page_size"))
				if queryErr != nil {
					return nil, queryErr
				}
				return req, nil
			},
			func(ctx context.Context, w http2.ResponseWriter, obj any) error {
				resp := obj.(*GetUsersResponse)
				w.Header().Set("Content-Type", "application/json; charset=utf-8")
				w.WriteHeader(http2.StatusOK)
				if err := jsonx.NewEncoder(w).Encode(resp); err != nil {
					return err
				}
				return nil
			},
			append([]http1.ServerOption{
				http1.ServerBefore(func(ctx context.Context, request *http2.Request) context.Context {
					return endpointx.InjectName(ctx, "/leo.example.demo.v1.Demo/GetUsers")
				}),
				http1.ServerBefore(func(ctx context.Context, request *http2.Request) context.Context {
					return transportx.InjectName(ctx, transportx.HttpServer)
				}),
			}, serverOptions...)...,
		),
		uploadUserAvatar: http1.NewServer(
			endpoints.UploadUserAvatar(),
			func(ctx context.Context, r *http2.Request) (any, error) {
				req := &UploadUserAvatarRequest{}
				req.Avatar = &httpbody.HttpBody{}
				body, err := io.ReadAll(r.Body)
				if err != nil {
					return nil, err
				}
				req.Avatar.Data = body
				req.Avatar.ContentType = r.Header.Get("Content-Type")
				vars := urlx.FormFromMap(mux.Vars(r))
				var varErr error
				req.UserId, varErr = errorx.Break[uint64](varErr)(urlx.GetUint[uint64](vars, "user_id"))
				if varErr != nil {
					return nil, varErr
				}
				return req, nil
			},
			func(ctx context.Context, w http2.ResponseWriter, obj any) error {
				resp := obj.(*emptypb.Empty)
				w.Header().Set("Content-Type", "application/json; charset=utf-8")
				w.WriteHeader(http2.StatusOK)
				if err := jsonx.NewEncoder(w).Encode(resp); err != nil {
					return err
				}
				return nil
			},
			append([]http1.ServerOption{
				http1.ServerBefore(func(ctx context.Context, request *http2.Request) context.Context {
					return endpointx.InjectName(ctx, "/leo.example.demo.v1.Demo/UploadUserAvatar")
				}),
				http1.ServerBefore(func(ctx context.Context, request *http2.Request) context.Context {
					return transportx.InjectName(ctx, transportx.HttpServer)
				}),
			}, serverOptions...)...,
		),
		getUserAvatar: http1.NewServer(
			endpoints.GetUserAvatar(),
			func(ctx context.Context, r *http2.Request) (any, error) {
				req := &GetUserAvatarRequest{}
				vars := urlx.FormFromMap(mux.Vars(r))
				var varErr error
				req.UserId, varErr = errorx.Break[uint64](varErr)(urlx.GetUint[uint64](vars, "user_id"))
				if varErr != nil {
					return nil, varErr
				}
				return req, nil
			},
			func(ctx context.Context, w http2.ResponseWriter, obj any) error {
				resp := obj.(*httpbody.HttpBody)
				w.Header().Set("Content-Type", resp.GetContentType())
				for _, src := range resp.GetExtensions() {
					dst, err := anypb.UnmarshalNew(src, proto.UnmarshalOptions{})
					if err != nil {
						return err
					}
					metadata, ok := dst.(*structpb.Struct)
					if !ok {
						continue
					}
					for key, value := range metadata.GetFields() {
						w.Header().Add(key, string(errorx.Ignore(jsonx.Marshal(value))))
					}
				}
				w.WriteHeader(http2.StatusOK)
				if _, err := w.Write(resp.GetData()); err != nil {
					return err
				}
				return nil
			},
			append([]http1.ServerOption{
				http1.ServerBefore(func(ctx context.Context, request *http2.Request) context.Context {
					return endpointx.InjectName(ctx, "/leo.example.demo.v1.Demo/GetUserAvatar")
				}),
				http1.ServerBefore(func(ctx context.Context, request *http2.Request) context.Context {
					return transportx.InjectName(ctx, transportx.HttpServer)
				}),
			}, serverOptions...)...,
		),
		pushUsers: http1.NewServer(
			endpoints.PushUsers(),
			func(ctx context.Context, r *http2.Request) (any, error) {
				req := &http.HttpRequest{}
				req.Method = r.Method
				req.Uri = r.URL.String()
				req.Headers = make([]*http.HttpHeader, 0, len(r.Header))
				for key, values := range r.Header {
					for _, value := range values {
						req.Headers = append(req.Headers, &http.HttpHeader{Key: key, Value: value})
					}
				}
				body, err := io.ReadAll(r.Body)
				if err != nil {
					return nil, err
				}
				req.Body = body
				return req, nil
			},
			func(ctx context.Context, w http2.ResponseWriter, obj any) error {
				resp := obj.(*http.HttpResponse)
				for _, header := range resp.GetHeaders() {
					w.Header().Add(header.Key, header.Value)
				}
				w.WriteHeader(int(resp.GetStatus()))
				if _, err := w.Write(resp.GetBody()); err != nil {
					return err
				}
				return nil
			},
			append([]http1.ServerOption{
				http1.ServerBefore(func(ctx context.Context, request *http2.Request) context.Context {
					return endpointx.InjectName(ctx, "/leo.example.demo.v1.Demo/PushUsers")
				}),
				http1.ServerBefore(func(ctx context.Context, request *http2.Request) context.Context {
					return transportx.InjectName(ctx, transportx.HttpServer)
				}),
			}, serverOptions...)...,
		),
	}
}

type demoHttpClientTransports struct {
	createUser       *http1.Client
	deleteUser       *http1.Client
	updateUser       *http1.Client
	getUser          *http1.Client
	getUsers         *http1.Client
	uploadUserAvatar *http1.Client
	getUserAvatar    *http1.Client
	pushUsers        *http1.Client
}

func (t *demoHttpClientTransports) CreateUser() *http1.Client {
	return t.createUser
}

func (t *demoHttpClientTransports) DeleteUser() *http1.Client {
	return t.deleteUser
}

func (t *demoHttpClientTransports) UpdateUser() *http1.Client {
	return t.updateUser
}

func (t *demoHttpClientTransports) GetUser() *http1.Client {
	return t.getUser
}

func (t *demoHttpClientTransports) GetUsers() *http1.Client {
	return t.getUsers
}

func (t *demoHttpClientTransports) UploadUserAvatar() *http1.Client {
	return t.uploadUserAvatar
}

func (t *demoHttpClientTransports) GetUserAvatar() *http1.Client {
	return t.getUserAvatar
}

func (t *demoHttpClientTransports) PushUsers() *http1.Client {
	return t.pushUsers
}

func NewDemoHttpClientTransports(scheme string, instance string, clientOptions ...http1.ClientOption) DemoHttpClientTransports {
	router := mux.NewRouter()
	router.NewRoute().Name("/leo.example.demo.v1.Demo/CreateUser").Methods("POST").Path("/v1/user")
	router.NewRoute().Name("/leo.example.demo.v1.Demo/DeleteUser").Methods("DELETE").Path("/v1/user/{user_id}")
	router.NewRoute().Name("/leo.example.demo.v1.Demo/UpdateUser").Methods("PUT").Path("/v1/user/{user_id}")
	router.NewRoute().Name("/leo.example.demo.v1.Demo/GetUser").Methods("GET").Path("/v1/user/{user_id}")
	router.NewRoute().Name("/leo.example.demo.v1.Demo/GetUsers").Methods("GET").Path("/v1/users")
	router.NewRoute().Name("/leo.example.demo.v1.Demo/UploadUserAvatar").Methods("POST").Path("/v1/user/{user_id}")
	router.NewRoute().Name("/leo.example.demo.v1.Demo/GetUserAvatar").Methods("GET").Path("/v1/users/{user_id}")
	router.NewRoute().Name("/leo.example.demo.v1.Demo/PushUsers").Methods("POST").Path("/v1/users/csv/push")
	return &demoHttpClientTransports{
		createUser: http1.NewExplicitClient(
			func(ctx context.Context, obj interface{}) (*http2.Request, error) {
				if obj == nil {
					return nil, errors.New("request object is nil")
				}
				req, ok := obj.(*CreateUserRequest)
				if !ok {
					return nil, fmt.Errorf("invalid request object type, %T", obj)
				}
				_ = req
				var body io.Reader
				var bodyBuf bytes.Buffer
				if err := jsonx.NewEncoder(&bodyBuf).Encode(req); err != nil {
					return nil, err
				}
				body = &bodyBuf
				contentType := "application/json; charset=utf-8"
				var pairs []string
				path, err := router.Get("/leo.example.demo.v1.Demo/CreateUser").URLPath(pairs...)
				if err != nil {
					return nil, err
				}
				queries := url.Values{}
				target := &url.URL{
					Scheme:   scheme,
					Host:     instance,
					Path:     path.Path,
					RawQuery: queries.Encode(),
				}
				r, err := http2.NewRequestWithContext(ctx, "POST", target.String(), body)
				if err != nil {
					return nil, err
				}
				r.Header.Set("Content-Type", contentType)
				return r, nil
			},
			func(ctx context.Context, r *http2.Response) (interface{}, error) {
				resp := &CreateUserResponse{}
				if err := jsonx.NewDecoder(r.Body).Decode(resp); err != nil {
					return nil, err
				}
				return resp, nil
			},
			append([]http1.ClientOption{
				http1.ClientBefore(func(ctx context.Context, request *http2.Request) context.Context {
					return endpointx.InjectName(ctx, "/leo.example.demo.v1.Demo/CreateUser")
				}),
				http1.ClientBefore(func(ctx context.Context, request *http2.Request) context.Context {
					return transportx.InjectName(ctx, transportx.HttpClient)
				}),
			}, clientOptions...)...,
		),
		deleteUser: http1.NewExplicitClient(
			func(ctx context.Context, obj interface{}) (*http2.Request, error) {
				if obj == nil {
					return nil, errors.New("request object is nil")
				}
				req, ok := obj.(*DeleteUsersRequest)
				if !ok {
					return nil, fmt.Errorf("invalid request object type, %T", obj)
				}
				_ = req
				var body io.Reader
				var pairs []string
				pairs = append(pairs, "user_id", strconvx.FormatUint(req.GetUserId(), 10))
				path, err := router.Get("/leo.example.demo.v1.Demo/DeleteUser").URLPath(pairs...)
				if err != nil {
					return nil, err
				}
				queries := url.Values{}
				target := &url.URL{
					Scheme:   scheme,
					Host:     instance,
					Path:     path.Path,
					RawQuery: queries.Encode(),
				}
				r, err := http2.NewRequestWithContext(ctx, "DELETE", target.String(), body)
				if err != nil {
					return nil, err
				}
				return r, nil
			},
			func(ctx context.Context, r *http2.Response) (interface{}, error) {
				resp := &emptypb.Empty{}
				if err := jsonx.NewDecoder(r.Body).Decode(resp); err != nil {
					return nil, err
				}
				return resp, nil
			},
			append([]http1.ClientOption{
				http1.ClientBefore(func(ctx context.Context, request *http2.Request) context.Context {
					return endpointx.InjectName(ctx, "/leo.example.demo.v1.Demo/DeleteUser")
				}),
				http1.ClientBefore(func(ctx context.Context, request *http2.Request) context.Context {
					return transportx.InjectName(ctx, transportx.HttpClient)
				}),
			}, clientOptions...)...,
		),
		updateUser: http1.NewExplicitClient(
			func(ctx context.Context, obj interface{}) (*http2.Request, error) {
				if obj == nil {
					return nil, errors.New("request object is nil")
				}
				req, ok := obj.(*UpdateUserRequest)
				if !ok {
					return nil, fmt.Errorf("invalid request object type, %T", obj)
				}
				_ = req
				var body io.Reader
				var bodyBuf bytes.Buffer
				if err := jsonx.NewEncoder(&bodyBuf).Encode(req.GetUser()); err != nil {
					return nil, err
				}
				body = &bodyBuf
				contentType := "application/json; charset=utf-8"
				var pairs []string
				pairs = append(pairs, "user_id", strconvx.FormatUint(req.GetUserId(), 10))
				path, err := router.Get("/leo.example.demo.v1.Demo/UpdateUser").URLPath(pairs...)
				if err != nil {
					return nil, err
				}
				queries := url.Values{}
				target := &url.URL{
					Scheme:   scheme,
					Host:     instance,
					Path:     path.Path,
					RawQuery: queries.Encode(),
				}
				r, err := http2.NewRequestWithContext(ctx, "PUT", target.String(), body)
				if err != nil {
					return nil, err
				}
				r.Header.Set("Content-Type", contentType)
				return r, nil
			},
			func(ctx context.Context, r *http2.Response) (interface{}, error) {
				resp := &emptypb.Empty{}
				if err := jsonx.NewDecoder(r.Body).Decode(resp); err != nil {
					return nil, err
				}
				return resp, nil
			},
			append([]http1.ClientOption{
				http1.ClientBefore(func(ctx context.Context, request *http2.Request) context.Context {
					return endpointx.InjectName(ctx, "/leo.example.demo.v1.Demo/UpdateUser")
				}),
				http1.ClientBefore(func(ctx context.Context, request *http2.Request) context.Context {
					return transportx.InjectName(ctx, transportx.HttpClient)
				}),
			}, clientOptions...)...,
		),
		getUser: http1.NewExplicitClient(
			func(ctx context.Context, obj interface{}) (*http2.Request, error) {
				if obj == nil {
					return nil, errors.New("request object is nil")
				}
				req, ok := obj.(*GetUserRequest)
				if !ok {
					return nil, fmt.Errorf("invalid request object type, %T", obj)
				}
				_ = req
				var body io.Reader
				var pairs []string
				pairs = append(pairs, "user_id", strconvx.FormatUint(req.GetUserId(), 10))
				path, err := router.Get("/leo.example.demo.v1.Demo/GetUser").URLPath(pairs...)
				if err != nil {
					return nil, err
				}
				queries := url.Values{}
				target := &url.URL{
					Scheme:   scheme,
					Host:     instance,
					Path:     path.Path,
					RawQuery: queries.Encode(),
				}
				r, err := http2.NewRequestWithContext(ctx, "GET", target.String(), body)
				if err != nil {
					return nil, err
				}
				return r, nil
			},
			func(ctx context.Context, r *http2.Response) (interface{}, error) {
				resp := &GetUserResponse{}
				if err := jsonx.NewDecoder(r.Body).Decode(resp); err != nil {
					return nil, err
				}
				return resp, nil
			},
			append([]http1.ClientOption{
				http1.ClientBefore(func(ctx context.Context, request *http2.Request) context.Context {
					return endpointx.InjectName(ctx, "/leo.example.demo.v1.Demo/GetUser")
				}),
				http1.ClientBefore(func(ctx context.Context, request *http2.Request) context.Context {
					return transportx.InjectName(ctx, transportx.HttpClient)
				}),
			}, clientOptions...)...,
		),
		getUsers: http1.NewExplicitClient(
			func(ctx context.Context, obj interface{}) (*http2.Request, error) {
				if obj == nil {
					return nil, errors.New("request object is nil")
				}
				req, ok := obj.(*GetUsersRequest)
				if !ok {
					return nil, fmt.Errorf("invalid request object type, %T", obj)
				}
				_ = req
				var body io.Reader
				var pairs []string
				path, err := router.Get("/leo.example.demo.v1.Demo/GetUsers").URLPath(pairs...)
				if err != nil {
					return nil, err
				}
				queries := url.Values{}
				queries["page_no"] = append(queries["page_no"], strconvx.FormatInt(req.GetPageNo(), 10))
				queries["page_size"] = append(queries["page_size"], strconvx.FormatInt(req.GetPageSize(), 10))
				target := &url.URL{
					Scheme:   scheme,
					Host:     instance,
					Path:     path.Path,
					RawQuery: queries.Encode(),
				}
				r, err := http2.NewRequestWithContext(ctx, "GET", target.String(), body)
				if err != nil {
					return nil, err
				}
				return r, nil
			},
			func(ctx context.Context, r *http2.Response) (interface{}, error) {
				resp := &GetUsersResponse{}
				if err := jsonx.NewDecoder(r.Body).Decode(resp); err != nil {
					return nil, err
				}
				return resp, nil
			},
			append([]http1.ClientOption{
				http1.ClientBefore(func(ctx context.Context, request *http2.Request) context.Context {
					return endpointx.InjectName(ctx, "/leo.example.demo.v1.Demo/GetUsers")
				}),
				http1.ClientBefore(func(ctx context.Context, request *http2.Request) context.Context {
					return transportx.InjectName(ctx, transportx.HttpClient)
				}),
			}, clientOptions...)...,
		),
		uploadUserAvatar: http1.NewExplicitClient(
			func(ctx context.Context, obj interface{}) (*http2.Request, error) {
				if obj == nil {
					return nil, errors.New("request object is nil")
				}
				req, ok := obj.(*UploadUserAvatarRequest)
				if !ok {
					return nil, fmt.Errorf("invalid request object type, %T", obj)
				}
				_ = req
				var body io.Reader
				body = bytes.NewReader(req.GetAvatar().GetData())
				contentType := req.GetAvatar().GetContentType()
				var pairs []string
				pairs = append(pairs, "user_id", strconvx.FormatUint(req.GetUserId(), 10))
				path, err := router.Get("/leo.example.demo.v1.Demo/UploadUserAvatar").URLPath(pairs...)
				if err != nil {
					return nil, err
				}
				queries := url.Values{}
				target := &url.URL{
					Scheme:   scheme,
					Host:     instance,
					Path:     path.Path,
					RawQuery: queries.Encode(),
				}
				r, err := http2.NewRequestWithContext(ctx, "POST", target.String(), body)
				if err != nil {
					return nil, err
				}
				r.Header.Set("Content-Type", contentType)
				return r, nil
			},
			func(ctx context.Context, r *http2.Response) (interface{}, error) {
				resp := &emptypb.Empty{}
				if err := jsonx.NewDecoder(r.Body).Decode(resp); err != nil {
					return nil, err
				}
				return resp, nil
			},
			append([]http1.ClientOption{
				http1.ClientBefore(func(ctx context.Context, request *http2.Request) context.Context {
					return endpointx.InjectName(ctx, "/leo.example.demo.v1.Demo/UploadUserAvatar")
				}),
				http1.ClientBefore(func(ctx context.Context, request *http2.Request) context.Context {
					return transportx.InjectName(ctx, transportx.HttpClient)
				}),
			}, clientOptions...)...,
		),
		getUserAvatar: http1.NewExplicitClient(
			func(ctx context.Context, obj interface{}) (*http2.Request, error) {
				if obj == nil {
					return nil, errors.New("request object is nil")
				}
				req, ok := obj.(*GetUserAvatarRequest)
				if !ok {
					return nil, fmt.Errorf("invalid request object type, %T", obj)
				}
				_ = req
				var body io.Reader
				var pairs []string
				pairs = append(pairs, "user_id", strconvx.FormatUint(req.GetUserId(), 10))
				path, err := router.Get("/leo.example.demo.v1.Demo/GetUserAvatar").URLPath(pairs...)
				if err != nil {
					return nil, err
				}
				queries := url.Values{}
				target := &url.URL{
					Scheme:   scheme,
					Host:     instance,
					Path:     path.Path,
					RawQuery: queries.Encode(),
				}
				r, err := http2.NewRequestWithContext(ctx, "GET", target.String(), body)
				if err != nil {
					return nil, err
				}
				return r, nil
			},
			func(ctx context.Context, r *http2.Response) (interface{}, error) {
				resp := &httpbody.HttpBody{}
				resp.ContentType = r.Header.Get("Content-Type")
				body, err := io.ReadAll(r.Body)
				if err != nil {
					return nil, err
				}
				resp.Data = body
				return resp, nil
			},
			append([]http1.ClientOption{
				http1.ClientBefore(func(ctx context.Context, request *http2.Request) context.Context {
					return endpointx.InjectName(ctx, "/leo.example.demo.v1.Demo/GetUserAvatar")
				}),
				http1.ClientBefore(func(ctx context.Context, request *http2.Request) context.Context {
					return transportx.InjectName(ctx, transportx.HttpClient)
				}),
			}, clientOptions...)...,
		),
		pushUsers: http1.NewExplicitClient(
			func(ctx context.Context, obj interface{}) (*http2.Request, error) {
				if obj == nil {
					return nil, errors.New("request object is nil")
				}
				req, ok := obj.(*http.HttpRequest)
				if !ok {
					return nil, fmt.Errorf("invalid request object type, %T", obj)
				}
				_ = req
				var body io.Reader
				body = bytes.NewReader(req.GetBody())
				var target *url.URL
				if req.GetUri() != "" {
					uri, err := url.Parse(req.GetUri())
					if err != nil {
						return nil, err
					}
					target = uri
				} else {
					path, err := router.Get("/leo.example.demo.v1.Demo/PushUsers").URLPath()
					if err != nil {
						return nil, err
					}
					target = &url.URL{
						Scheme: scheme,
						Host:   instance,
						Path:   path.Path,
					}
				}
				method := "POST"
				if req.GetMethod() != "" {
					method = req.GetMethod()
				}
				r, err := http2.NewRequestWithContext(ctx, method, target.String(), body)
				if err != nil {
					return nil, err
				}
				for _, header := range req.GetHeaders() {
					r.Header.Add(header.GetKey(), header.GetValue())
				}
				return r, nil
			},
			func(ctx context.Context, r *http2.Response) (interface{}, error) {
				resp := &http.HttpResponse{}
				resp.Status = int32(r.StatusCode)
				resp.Reason = r.Status
				for key, values := range r.Header {
					for _, value := range values {
						resp.Headers = append(resp.Headers, &http.HttpHeader{Key: key, Value: value})
					}
				}
				body, err := io.ReadAll(r.Body)
				if err != nil {
					return nil, err
				}
				resp.Body = body
				return resp, nil
			},
			append([]http1.ClientOption{
				http1.ClientBefore(func(ctx context.Context, request *http2.Request) context.Context {
					return endpointx.InjectName(ctx, "/leo.example.demo.v1.Demo/PushUsers")
				}),
				http1.ClientBefore(func(ctx context.Context, request *http2.Request) context.Context {
					return transportx.InjectName(ctx, transportx.HttpClient)
				}),
			}, clientOptions...)...,
		),
	}
}

func NewDemoHttpServerHandler(endpoints DemoHttpServerTransports) http2.Handler {
	router := mux.NewRouter()
	router.NewRoute().Name("/leo.example.demo.v1.Demo/CreateUser").Methods("POST").Path("/v1/user").Handler(endpoints.CreateUser())
	router.NewRoute().Name("/leo.example.demo.v1.Demo/DeleteUser").Methods("DELETE").Path("/v1/user/{user_id}").Handler(endpoints.DeleteUser())
	router.NewRoute().Name("/leo.example.demo.v1.Demo/UpdateUser").Methods("PUT").Path("/v1/user/{user_id}").Handler(endpoints.UpdateUser())
	router.NewRoute().Name("/leo.example.demo.v1.Demo/GetUser").Methods("GET").Path("/v1/user/{user_id}").Handler(endpoints.GetUser())
	router.NewRoute().Name("/leo.example.demo.v1.Demo/GetUsers").Methods("GET").Path("/v1/users").Handler(endpoints.GetUsers())
	router.NewRoute().Name("/leo.example.demo.v1.Demo/UploadUserAvatar").Methods("POST").Path("/v1/user/{user_id}").Handler(endpoints.UploadUserAvatar())
	router.NewRoute().Name("/leo.example.demo.v1.Demo/GetUserAvatar").Methods("GET").Path("/v1/users/{user_id}").Handler(endpoints.GetUserAvatar())
	router.NewRoute().Name("/leo.example.demo.v1.Demo/PushUsers").Methods("POST").Path("/v1/users/csv/push").Handler(endpoints.PushUsers())
	return router
}

type demoHttpClient struct {
	createUser       endpoint.Endpoint
	deleteUser       endpoint.Endpoint
	updateUser       endpoint.Endpoint
	getUser          endpoint.Endpoint
	getUsers         endpoint.Endpoint
	uploadUserAvatar endpoint.Endpoint
	getUserAvatar    endpoint.Endpoint
	pushUsers        endpoint.Endpoint
}

func (c *demoHttpClient) CreateUser(ctx context.Context, request *CreateUserRequest) (*CreateUserResponse, error) {
	rep, err := c.createUser(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*CreateUserResponse), nil
}

func (c *demoHttpClient) DeleteUser(ctx context.Context, request *DeleteUsersRequest) (*emptypb.Empty, error) {
	rep, err := c.deleteUser(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*emptypb.Empty), nil
}

func (c *demoHttpClient) UpdateUser(ctx context.Context, request *UpdateUserRequest) (*emptypb.Empty, error) {
	rep, err := c.updateUser(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*emptypb.Empty), nil
}

func (c *demoHttpClient) GetUser(ctx context.Context, request *GetUserRequest) (*GetUserResponse, error) {
	rep, err := c.getUser(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*GetUserResponse), nil
}

func (c *demoHttpClient) GetUsers(ctx context.Context, request *GetUsersRequest) (*GetUsersResponse, error) {
	rep, err := c.getUsers(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*GetUsersResponse), nil
}

func (c *demoHttpClient) UploadUserAvatar(ctx context.Context, request *UploadUserAvatarRequest) (*emptypb.Empty, error) {
	rep, err := c.uploadUserAvatar(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*emptypb.Empty), nil
}

func (c *demoHttpClient) GetUserAvatar(ctx context.Context, request *GetUserAvatarRequest) (*httpbody.HttpBody, error) {
	rep, err := c.getUserAvatar(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*httpbody.HttpBody), nil
}

func (c *demoHttpClient) PushUsers(ctx context.Context, request *http.HttpRequest) (*http.HttpResponse, error) {
	rep, err := c.pushUsers(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*http.HttpResponse), nil
}

func NewDemoHttpClient(transports DemoHttpClientTransports, middlewares ...endpoint.Middleware) DemoService {
	return &demoHttpClient{
		createUser:       endpointx.Chain(transports.CreateUser().Endpoint(), middlewares...),
		deleteUser:       endpointx.Chain(transports.DeleteUser().Endpoint(), middlewares...),
		updateUser:       endpointx.Chain(transports.UpdateUser().Endpoint(), middlewares...),
		getUser:          endpointx.Chain(transports.GetUser().Endpoint(), middlewares...),
		getUsers:         endpointx.Chain(transports.GetUsers().Endpoint(), middlewares...),
		uploadUserAvatar: endpointx.Chain(transports.UploadUserAvatar().Endpoint(), middlewares...),
		getUserAvatar:    endpointx.Chain(transports.GetUserAvatar().Endpoint(), middlewares...),
		pushUsers:        endpointx.Chain(transports.PushUsers().Endpoint(), middlewares...),
	}
}
