// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package demo

import (
	bytes "bytes"
	context "context"
	endpoint "github.com/go-kit/kit/endpoint"
	sd "github.com/go-kit/kit/sd"
	grpc "github.com/go-kit/kit/transport/grpc"
	http "github.com/go-kit/kit/transport/http"
	jsonx "github.com/go-leo/gox/encodingx/jsonx"
	errorx "github.com/go-leo/gox/errorx"
	urlx "github.com/go-leo/gox/netx/urlx"
	strconvx "github.com/go-leo/gox/strconvx"
	cqrs "github.com/go-leo/leo/v3/cqrs"
	endpointx "github.com/go-leo/leo/v3/endpointx"
	command "github.com/go-leo/leo/v3/example/internal/demo/command"
	query "github.com/go-leo/leo/v3/example/internal/demo/query"
	metadatax "github.com/go-leo/leo/v3/metadatax"
	statusx "github.com/go-leo/leo/v3/statusx"
	transportx "github.com/go-leo/leo/v3/transportx"
	grpcx "github.com/go-leo/leo/v3/transportx/grpcx"
	httpx "github.com/go-leo/leo/v3/transportx/httpx"
	mux "github.com/gorilla/mux"
	httpbody "google.golang.org/genproto/googleapis/api/httpbody"
	proto "google.golang.org/protobuf/proto"
	anypb "google.golang.org/protobuf/types/known/anypb"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	structpb "google.golang.org/protobuf/types/known/structpb"
	io "io"
	http1 "net/http"
	url "net/url"
)

// =========================== endpoints ===========================

type DemoService interface {
	CreateUser(ctx context.Context, request *CreateUserRequest) (*CreateUserResponse, error)
	DeleteUser(ctx context.Context, request *DeleteUsersRequest) (*emptypb.Empty, error)
	UpdateUser(ctx context.Context, request *UpdateUserRequest) (*emptypb.Empty, error)
	GetUser(ctx context.Context, request *GetUserRequest) (*GetUserResponse, error)
	GetUsers(ctx context.Context, request *GetUsersRequest) (*GetUsersResponse, error)
	UploadUserAvatar(ctx context.Context, request *UploadUserAvatarRequest) (*emptypb.Empty, error)
	GetUserAvatar(ctx context.Context, request *GetUserAvatarRequest) (*httpbody.HttpBody, error)
}

type DemoEndpoints interface {
	CreateUser(ctx context.Context) endpoint.Endpoint
	DeleteUser(ctx context.Context) endpoint.Endpoint
	UpdateUser(ctx context.Context) endpoint.Endpoint
	GetUser(ctx context.Context) endpoint.Endpoint
	GetUsers(ctx context.Context) endpoint.Endpoint
	UploadUserAvatar(ctx context.Context) endpoint.Endpoint
	GetUserAvatar(ctx context.Context) endpoint.Endpoint
}

type DemoClientTransports interface {
	CreateUser() transportx.ClientTransport
	DeleteUser() transportx.ClientTransport
	UpdateUser() transportx.ClientTransport
	GetUser() transportx.ClientTransport
	GetUsers() transportx.ClientTransport
	UploadUserAvatar() transportx.ClientTransport
	GetUserAvatar() transportx.ClientTransport
}

type DemoFactories interface {
	CreateUser(middlewares ...endpoint.Middleware) sd.Factory
	DeleteUser(middlewares ...endpoint.Middleware) sd.Factory
	UpdateUser(middlewares ...endpoint.Middleware) sd.Factory
	GetUser(middlewares ...endpoint.Middleware) sd.Factory
	GetUsers(middlewares ...endpoint.Middleware) sd.Factory
	UploadUserAvatar(middlewares ...endpoint.Middleware) sd.Factory
	GetUserAvatar(middlewares ...endpoint.Middleware) sd.Factory
}

type DemoEndpointers interface {
	CreateUser() sd.Endpointer
	DeleteUser() sd.Endpointer
	UpdateUser() sd.Endpointer
	GetUser() sd.Endpointer
	GetUsers() sd.Endpointer
	UploadUserAvatar() sd.Endpointer
	GetUserAvatar() sd.Endpointer
}

type demoServerEndpoints struct {
	svc         DemoService
	middlewares []endpoint.Middleware
}

func (e *demoServerEndpoints) CreateUser(context.Context) endpoint.Endpoint {
	component := func(ctx context.Context, request any) (any, error) {
		return e.svc.CreateUser(ctx, request.(*CreateUserRequest))
	}
	return endpointx.Chain(component, e.middlewares...)
}

func (e *demoServerEndpoints) DeleteUser(context.Context) endpoint.Endpoint {
	component := func(ctx context.Context, request any) (any, error) {
		return e.svc.DeleteUser(ctx, request.(*DeleteUsersRequest))
	}
	return endpointx.Chain(component, e.middlewares...)
}

func (e *demoServerEndpoints) UpdateUser(context.Context) endpoint.Endpoint {
	component := func(ctx context.Context, request any) (any, error) {
		return e.svc.UpdateUser(ctx, request.(*UpdateUserRequest))
	}
	return endpointx.Chain(component, e.middlewares...)
}

func (e *demoServerEndpoints) GetUser(context.Context) endpoint.Endpoint {
	component := func(ctx context.Context, request any) (any, error) {
		return e.svc.GetUser(ctx, request.(*GetUserRequest))
	}
	return endpointx.Chain(component, e.middlewares...)
}

func (e *demoServerEndpoints) GetUsers(context.Context) endpoint.Endpoint {
	component := func(ctx context.Context, request any) (any, error) {
		return e.svc.GetUsers(ctx, request.(*GetUsersRequest))
	}
	return endpointx.Chain(component, e.middlewares...)
}

func (e *demoServerEndpoints) UploadUserAvatar(context.Context) endpoint.Endpoint {
	component := func(ctx context.Context, request any) (any, error) {
		return e.svc.UploadUserAvatar(ctx, request.(*UploadUserAvatarRequest))
	}
	return endpointx.Chain(component, e.middlewares...)
}

func (e *demoServerEndpoints) GetUserAvatar(context.Context) endpoint.Endpoint {
	component := func(ctx context.Context, request any) (any, error) {
		return e.svc.GetUserAvatar(ctx, request.(*GetUserAvatarRequest))
	}
	return endpointx.Chain(component, e.middlewares...)
}

func newDemoServerEndpoints(svc DemoService, middlewares ...endpoint.Middleware) DemoEndpoints {
	return &demoServerEndpoints{svc: svc, middlewares: middlewares}
}

type demoClientEndpoints struct {
	transports  DemoClientTransports
	middlewares []endpoint.Middleware
}

func (e *demoClientEndpoints) CreateUser(ctx context.Context) endpoint.Endpoint {
	return endpointx.Chain(e.transports.CreateUser().Endpoint(ctx), e.middlewares...)
}

func (e *demoClientEndpoints) DeleteUser(ctx context.Context) endpoint.Endpoint {
	return endpointx.Chain(e.transports.DeleteUser().Endpoint(ctx), e.middlewares...)
}

func (e *demoClientEndpoints) UpdateUser(ctx context.Context) endpoint.Endpoint {
	return endpointx.Chain(e.transports.UpdateUser().Endpoint(ctx), e.middlewares...)
}

func (e *demoClientEndpoints) GetUser(ctx context.Context) endpoint.Endpoint {
	return endpointx.Chain(e.transports.GetUser().Endpoint(ctx), e.middlewares...)
}

func (e *demoClientEndpoints) GetUsers(ctx context.Context) endpoint.Endpoint {
	return endpointx.Chain(e.transports.GetUsers().Endpoint(ctx), e.middlewares...)
}

func (e *demoClientEndpoints) UploadUserAvatar(ctx context.Context) endpoint.Endpoint {
	return endpointx.Chain(e.transports.UploadUserAvatar().Endpoint(ctx), e.middlewares...)
}

func (e *demoClientEndpoints) GetUserAvatar(ctx context.Context) endpoint.Endpoint {
	return endpointx.Chain(e.transports.GetUserAvatar().Endpoint(ctx), e.middlewares...)
}

func newDemoClientEndpoints(transports DemoClientTransports, middlewares ...endpoint.Middleware) DemoEndpoints {
	return &demoClientEndpoints{transports: transports, middlewares: middlewares}
}

// =========================== cqrs ===========================

// DemoAssembler responsible for completing the transformation between domain model objects and DTOs
type DemoAssembler interface {

	// FromCreateUserRequest convert request to command arguments
	FromCreateUserRequest(ctx context.Context, request *CreateUserRequest) (*command.CreateUserArgs, context.Context, error)

	// ToCreateUserResponse convert query result to response
	ToCreateUserResponse(ctx context.Context, request *CreateUserRequest, metadata metadatax.Metadata) (*CreateUserResponse, error)

	// FromDeleteUserRequest convert request to command arguments
	FromDeleteUserRequest(ctx context.Context, request *DeleteUsersRequest) (*command.DeleteUserArgs, context.Context, error)

	// ToDeleteUserResponse convert query result to response
	ToDeleteUserResponse(ctx context.Context, request *DeleteUsersRequest, metadata metadatax.Metadata) (*emptypb.Empty, error)

	// FromUpdateUserRequest convert request to command arguments
	FromUpdateUserRequest(ctx context.Context, request *UpdateUserRequest) (*command.UpdateUserArgs, context.Context, error)

	// ToUpdateUserResponse convert query result to response
	ToUpdateUserResponse(ctx context.Context, request *UpdateUserRequest, metadata metadatax.Metadata) (*emptypb.Empty, error)

	// FromGetUserRequest convert request to query arguments
	FromGetUserRequest(ctx context.Context, request *GetUserRequest) (*query.GetUserArgs, context.Context, error)

	// ToGetUserResponse convert query result to response
	ToGetUserResponse(ctx context.Context, request *GetUserRequest, res *query.GetUserRes) (*GetUserResponse, error)

	// FromGetUsersRequest convert request to query arguments
	FromGetUsersRequest(ctx context.Context, request *GetUsersRequest) (*query.GetUsersArgs, context.Context, error)

	// ToGetUsersResponse convert query result to response
	ToGetUsersResponse(ctx context.Context, request *GetUsersRequest, res *query.GetUsersRes) (*GetUsersResponse, error)

	// FromUploadUserAvatarRequest convert request to command arguments
	FromUploadUserAvatarRequest(ctx context.Context, request *UploadUserAvatarRequest) (*command.UploadUserAvatarArgs, context.Context, error)

	// ToUploadUserAvatarResponse convert query result to response
	ToUploadUserAvatarResponse(ctx context.Context, request *UploadUserAvatarRequest, metadata metadatax.Metadata) (*emptypb.Empty, error)

	// FromGetUserAvatarRequest convert request to query arguments
	FromGetUserAvatarRequest(ctx context.Context, request *GetUserAvatarRequest) (*query.GetUserAvatarArgs, context.Context, error)

	// ToGetUserAvatarResponse convert query result to response
	ToGetUserAvatarResponse(ctx context.Context, request *GetUserAvatarRequest, res *query.GetUserAvatarRes) (*httpbody.HttpBody, error)
}

// demoCqrsService implement the DemoService with CQRS pattern
type demoCqrsService struct {
	bus       cqrs.Bus
	assembler DemoAssembler
}

func (svc *demoCqrsService) CreateUser(ctx context.Context, request *CreateUserRequest) (*CreateUserResponse, error) {
	args, ctx, err := svc.assembler.FromCreateUserRequest(ctx, request)
	if err != nil {
		return nil, err
	}
	metadata, err := svc.bus.Exec(ctx, args)
	if err != nil {
		return nil, err
	}
	return svc.assembler.ToCreateUserResponse(ctx, request, metadata)
}

func (svc *demoCqrsService) DeleteUser(ctx context.Context, request *DeleteUsersRequest) (*emptypb.Empty, error) {
	args, ctx, err := svc.assembler.FromDeleteUserRequest(ctx, request)
	if err != nil {
		return nil, err
	}
	metadata, err := svc.bus.Exec(ctx, args)
	if err != nil {
		return nil, err
	}
	return svc.assembler.ToDeleteUserResponse(ctx, request, metadata)
}

func (svc *demoCqrsService) UpdateUser(ctx context.Context, request *UpdateUserRequest) (*emptypb.Empty, error) {
	args, ctx, err := svc.assembler.FromUpdateUserRequest(ctx, request)
	if err != nil {
		return nil, err
	}
	metadata, err := svc.bus.Exec(ctx, args)
	if err != nil {
		return nil, err
	}
	return svc.assembler.ToUpdateUserResponse(ctx, request, metadata)
}

func (svc *demoCqrsService) GetUser(ctx context.Context, request *GetUserRequest) (*GetUserResponse, error) {
	args, ctx, err := svc.assembler.FromGetUserRequest(ctx, request)
	if err != nil {
		return nil, err
	}
	res, err := svc.bus.Query(ctx, args)
	if err != nil {
		return nil, err
	}
	return svc.assembler.ToGetUserResponse(ctx, request, res.(*query.GetUserRes))
}

func (svc *demoCqrsService) GetUsers(ctx context.Context, request *GetUsersRequest) (*GetUsersResponse, error) {
	args, ctx, err := svc.assembler.FromGetUsersRequest(ctx, request)
	if err != nil {
		return nil, err
	}
	res, err := svc.bus.Query(ctx, args)
	if err != nil {
		return nil, err
	}
	return svc.assembler.ToGetUsersResponse(ctx, request, res.(*query.GetUsersRes))
}

func (svc *demoCqrsService) UploadUserAvatar(ctx context.Context, request *UploadUserAvatarRequest) (*emptypb.Empty, error) {
	args, ctx, err := svc.assembler.FromUploadUserAvatarRequest(ctx, request)
	if err != nil {
		return nil, err
	}
	metadata, err := svc.bus.Exec(ctx, args)
	if err != nil {
		return nil, err
	}
	return svc.assembler.ToUploadUserAvatarResponse(ctx, request, metadata)
}

func (svc *demoCqrsService) GetUserAvatar(ctx context.Context, request *GetUserAvatarRequest) (*httpbody.HttpBody, error) {
	args, ctx, err := svc.assembler.FromGetUserAvatarRequest(ctx, request)
	if err != nil {
		return nil, err
	}
	res, err := svc.bus.Query(ctx, args)
	if err != nil {
		return nil, err
	}
	return svc.assembler.ToGetUserAvatarResponse(ctx, request, res.(*query.GetUserAvatarRes))
}

func NewDemoCqrsService(bus cqrs.Bus, assembler DemoAssembler) DemoService {
	return &demoCqrsService{bus: bus, assembler: assembler}
}

func NewDemoBus(
	createUser command.CreateUser,
	deleteUser command.DeleteUser,
	updateUser command.UpdateUser,
	getUser query.GetUser,
	getUsers query.GetUsers,
	uploadUserAvatar command.UploadUserAvatar,
	getUserAvatar query.GetUserAvatar,
) (cqrs.Bus, error) {
	bus := cqrs.NewBus()
	if err := bus.RegisterCommand(createUser); err != nil {
		return nil, err
	}
	if err := bus.RegisterCommand(deleteUser); err != nil {
		return nil, err
	}
	if err := bus.RegisterCommand(updateUser); err != nil {
		return nil, err
	}
	if err := bus.RegisterQuery(getUser); err != nil {
		return nil, err
	}
	if err := bus.RegisterQuery(getUsers); err != nil {
		return nil, err
	}
	if err := bus.RegisterCommand(uploadUserAvatar); err != nil {
		return nil, err
	}
	if err := bus.RegisterQuery(getUserAvatar); err != nil {
		return nil, err
	}
	return bus, nil
}

// =========================== grpc server ===========================

type DemoGrpcServerTransports interface {
	CreateUser() *grpc.Server
	DeleteUser() *grpc.Server
	UpdateUser() *grpc.Server
	GetUser() *grpc.Server
	GetUsers() *grpc.Server
	UploadUserAvatar() *grpc.Server
	GetUserAvatar() *grpc.Server
}

type demoGrpcServerTransports struct {
	createUser       *grpc.Server
	deleteUser       *grpc.Server
	updateUser       *grpc.Server
	getUser          *grpc.Server
	getUsers         *grpc.Server
	uploadUserAvatar *grpc.Server
	getUserAvatar    *grpc.Server
}

func (t *demoGrpcServerTransports) CreateUser() *grpc.Server {
	return t.createUser
}

func (t *demoGrpcServerTransports) DeleteUser() *grpc.Server {
	return t.deleteUser
}

func (t *demoGrpcServerTransports) UpdateUser() *grpc.Server {
	return t.updateUser
}

func (t *demoGrpcServerTransports) GetUser() *grpc.Server {
	return t.getUser
}

func (t *demoGrpcServerTransports) GetUsers() *grpc.Server {
	return t.getUsers
}

func (t *demoGrpcServerTransports) UploadUserAvatar() *grpc.Server {
	return t.uploadUserAvatar
}

func (t *demoGrpcServerTransports) GetUserAvatar() *grpc.Server {
	return t.getUserAvatar
}

func newDemoGrpcServerTransports(endpoints DemoEndpoints) DemoGrpcServerTransports {
	return &demoGrpcServerTransports{
		createUser: funcName(endpoints),
		deleteUser: grpc.NewServer(
			endpoints.DeleteUser(context.TODO()),
			func(_ context.Context, v any) (any, error) { return v, nil },
			func(_ context.Context, v any) (any, error) { return v, nil },
			grpc.ServerBefore(grpcx.ServerEndpointInjector("/leo.example.demo.v1.Demo/DeleteUser")),
			grpc.ServerBefore(grpcx.ServerTransportInjector),
			grpc.ServerBefore(grpcx.IncomingMetadataInjector),
		),
		updateUser: grpc.NewServer(
			endpoints.UpdateUser(context.TODO()),
			func(_ context.Context, v any) (any, error) { return v, nil },
			func(_ context.Context, v any) (any, error) { return v, nil },
			grpc.ServerBefore(grpcx.ServerEndpointInjector("/leo.example.demo.v1.Demo/UpdateUser")),
			grpc.ServerBefore(grpcx.ServerTransportInjector),
			grpc.ServerBefore(grpcx.IncomingMetadataInjector),
		),
		getUser: grpc.NewServer(
			endpoints.GetUser(context.TODO()),
			func(_ context.Context, v any) (any, error) { return v, nil },
			func(_ context.Context, v any) (any, error) { return v, nil },
			grpc.ServerBefore(grpcx.ServerEndpointInjector("/leo.example.demo.v1.Demo/GetUser")),
			grpc.ServerBefore(grpcx.ServerTransportInjector),
			grpc.ServerBefore(grpcx.IncomingMetadataInjector),
		),
		getUsers: grpc.NewServer(
			endpoints.GetUsers(context.TODO()),
			func(_ context.Context, v any) (any, error) { return v, nil },
			func(_ context.Context, v any) (any, error) { return v, nil },
			grpc.ServerBefore(grpcx.ServerEndpointInjector("/leo.example.demo.v1.Demo/GetUsers")),
			grpc.ServerBefore(grpcx.ServerTransportInjector),
			grpc.ServerBefore(grpcx.IncomingMetadataInjector),
		),
		uploadUserAvatar: grpc.NewServer(
			endpoints.UploadUserAvatar(context.TODO()),
			func(_ context.Context, v any) (any, error) { return v, nil },
			func(_ context.Context, v any) (any, error) { return v, nil },
			grpc.ServerBefore(grpcx.ServerEndpointInjector("/leo.example.demo.v1.Demo/UploadUserAvatar")),
			grpc.ServerBefore(grpcx.ServerTransportInjector),
			grpc.ServerBefore(grpcx.IncomingMetadataInjector),
		),
		getUserAvatar: grpc.NewServer(
			endpoints.GetUserAvatar(context.TODO()),
			func(_ context.Context, v any) (any, error) { return v, nil },
			func(_ context.Context, v any) (any, error) { return v, nil },
			grpc.ServerBefore(grpcx.ServerEndpointInjector("/leo.example.demo.v1.Demo/GetUserAvatar")),
			grpc.ServerBefore(grpcx.ServerTransportInjector),
			grpc.ServerBefore(grpcx.IncomingMetadataInjector),
		),
	}
}

func funcName(endpoints DemoEndpoints) *grpc.Server {
	server := grpc.NewServer(
		endpoints.CreateUser(context.TODO()),
		func(_ context.Context, v any) (any, error) { return v, nil },
		func(_ context.Context, v any) (any, error) { return v, nil },
		grpc.ServerBefore(grpcx.ServerEndpointInjector("/leo.example.demo.v1.Demo/CreateUser")),
		grpc.ServerBefore(grpcx.ServerTransportInjector),
		grpc.ServerBefore(grpcx.IncomingMetadataInjector),
	)
	return server
}

type demoGrpcServer struct {
	createUser       *grpc.Server
	deleteUser       *grpc.Server
	updateUser       *grpc.Server
	getUser          *grpc.Server
	getUsers         *grpc.Server
	uploadUserAvatar *grpc.Server
	getUserAvatar    *grpc.Server
}

func (s *demoGrpcServer) CreateUser(ctx context.Context, request *CreateUserRequest) (*CreateUserResponse, error) {
	ctx, rep, err := s.createUser.ServeGRPC(ctx, request)
	if err != nil {
		return nil, err
	}
	_ = ctx
	return rep.(*CreateUserResponse), nil
}

func (s *demoGrpcServer) DeleteUser(ctx context.Context, request *DeleteUsersRequest) (*emptypb.Empty, error) {
	ctx, rep, err := s.deleteUser.ServeGRPC(ctx, request)
	if err != nil {
		return nil, err
	}
	_ = ctx
	return rep.(*emptypb.Empty), nil
}

func (s *demoGrpcServer) UpdateUser(ctx context.Context, request *UpdateUserRequest) (*emptypb.Empty, error) {
	ctx, rep, err := s.updateUser.ServeGRPC(ctx, request)
	if err != nil {
		return nil, err
	}
	_ = ctx
	return rep.(*emptypb.Empty), nil
}

func (s *demoGrpcServer) GetUser(ctx context.Context, request *GetUserRequest) (*GetUserResponse, error) {
	ctx, rep, err := s.getUser.ServeGRPC(ctx, request)
	if err != nil {
		return nil, err
	}
	_ = ctx
	return rep.(*GetUserResponse), nil
}

func (s *demoGrpcServer) GetUsers(ctx context.Context, request *GetUsersRequest) (*GetUsersResponse, error) {
	ctx, rep, err := s.getUsers.ServeGRPC(ctx, request)
	if err != nil {
		return nil, err
	}
	_ = ctx
	return rep.(*GetUsersResponse), nil
}

func (s *demoGrpcServer) UploadUserAvatar(ctx context.Context, request *UploadUserAvatarRequest) (*emptypb.Empty, error) {
	ctx, rep, err := s.uploadUserAvatar.ServeGRPC(ctx, request)
	if err != nil {
		return nil, err
	}
	_ = ctx
	return rep.(*emptypb.Empty), nil
}

func (s *demoGrpcServer) GetUserAvatar(ctx context.Context, request *GetUserAvatarRequest) (*httpbody.HttpBody, error) {
	ctx, rep, err := s.getUserAvatar.ServeGRPC(ctx, request)
	if err != nil {
		return nil, err
	}
	_ = ctx
	return rep.(*httpbody.HttpBody), nil
}

func NewDemoGrpcServer(svc DemoService, middlewares ...endpoint.Middleware) DemoService {
	endpoints := newDemoServerEndpoints(svc, middlewares...)
	transports := newDemoGrpcServerTransports(endpoints)
	return &demoGrpcServer{
		createUser:       transports.CreateUser(),
		deleteUser:       transports.DeleteUser(),
		updateUser:       transports.UpdateUser(),
		getUser:          transports.GetUser(),
		getUsers:         transports.GetUsers(),
		uploadUserAvatar: transports.UploadUserAvatar(),
		getUserAvatar:    transports.GetUserAvatar(),
	}
}

// =========================== grpc client ===========================

type demoGrpcClientTransports struct {
	createUser       transportx.ClientTransport
	deleteUser       transportx.ClientTransport
	updateUser       transportx.ClientTransport
	getUser          transportx.ClientTransport
	getUsers         transportx.ClientTransport
	uploadUserAvatar transportx.ClientTransport
	getUserAvatar    transportx.ClientTransport
}

func (t *demoGrpcClientTransports) CreateUser() transportx.ClientTransport {
	return t.createUser
}

func (t *demoGrpcClientTransports) DeleteUser() transportx.ClientTransport {
	return t.deleteUser
}

func (t *demoGrpcClientTransports) UpdateUser() transportx.ClientTransport {
	return t.updateUser
}

func (t *demoGrpcClientTransports) GetUser() transportx.ClientTransport {
	return t.getUser
}

func (t *demoGrpcClientTransports) GetUsers() transportx.ClientTransport {
	return t.getUsers
}

func (t *demoGrpcClientTransports) UploadUserAvatar() transportx.ClientTransport {
	return t.uploadUserAvatar
}

func (t *demoGrpcClientTransports) GetUserAvatar() transportx.ClientTransport {
	return t.getUserAvatar
}

func NewDemoGrpcClientTransports(target string, options ...transportx.ClientTransportOption) (DemoClientTransports, error) {
	t := &demoGrpcClientTransports{}
	var err error
	t.createUser, err = errorx.Break[transportx.ClientTransport](err)(_Demo_CreateUser_GrpcClient_Transport(target, options...))
	t.deleteUser, err = errorx.Break[transportx.ClientTransport](err)(_Demo_DeleteUser_GrpcClient_Transport(target, options...))
	t.updateUser, err = errorx.Break[transportx.ClientTransport](err)(_Demo_UpdateUser_GrpcClient_Transport(target, options...))
	t.getUser, err = errorx.Break[transportx.ClientTransport](err)(_Demo_GetUser_GrpcClient_Transport(target, options...))
	t.getUsers, err = errorx.Break[transportx.ClientTransport](err)(_Demo_GetUsers_GrpcClient_Transport(target, options...))
	t.uploadUserAvatar, err = errorx.Break[transportx.ClientTransport](err)(_Demo_UploadUserAvatar_GrpcClient_Transport(target, options...))
	t.getUserAvatar, err = errorx.Break[transportx.ClientTransport](err)(_Demo_GetUserAvatar_GrpcClient_Transport(target, options...))
	return t, err
}

type demoGrpcClient struct {
	endpoints DemoEndpoints
}

func (c *demoGrpcClient) CreateUser(ctx context.Context, request *CreateUserRequest) (*CreateUserResponse, error) {
	ctx = endpointx.InjectName(ctx, "/leo.example.demo.v1.Demo/CreateUser")
	ctx = transportx.InjectName(ctx, grpcx.GrpcClient)
	rep, err := c.endpoints.CreateUser(ctx)(ctx, request)
	if err != nil {
		return nil, statusx.FromGrpcError(err)
	}
	return rep.(*CreateUserResponse), nil
}

func (c *demoGrpcClient) DeleteUser(ctx context.Context, request *DeleteUsersRequest) (*emptypb.Empty, error) {
	ctx = endpointx.InjectName(ctx, "/leo.example.demo.v1.Demo/DeleteUser")
	ctx = transportx.InjectName(ctx, grpcx.GrpcClient)
	rep, err := c.endpoints.DeleteUser(ctx)(ctx, request)
	if err != nil {
		return nil, statusx.FromGrpcError(err)
	}
	return rep.(*emptypb.Empty), nil
}

func (c *demoGrpcClient) UpdateUser(ctx context.Context, request *UpdateUserRequest) (*emptypb.Empty, error) {
	ctx = endpointx.InjectName(ctx, "/leo.example.demo.v1.Demo/UpdateUser")
	ctx = transportx.InjectName(ctx, grpcx.GrpcClient)
	rep, err := c.endpoints.UpdateUser(ctx)(ctx, request)
	if err != nil {
		return nil, statusx.FromGrpcError(err)
	}
	return rep.(*emptypb.Empty), nil
}

func (c *demoGrpcClient) GetUser(ctx context.Context, request *GetUserRequest) (*GetUserResponse, error) {
	ctx = endpointx.InjectName(ctx, "/leo.example.demo.v1.Demo/GetUser")
	ctx = transportx.InjectName(ctx, grpcx.GrpcClient)
	rep, err := c.endpoints.GetUser(ctx)(ctx, request)
	if err != nil {
		return nil, statusx.FromGrpcError(err)
	}
	return rep.(*GetUserResponse), nil
}

func (c *demoGrpcClient) GetUsers(ctx context.Context, request *GetUsersRequest) (*GetUsersResponse, error) {
	ctx = endpointx.InjectName(ctx, "/leo.example.demo.v1.Demo/GetUsers")
	ctx = transportx.InjectName(ctx, grpcx.GrpcClient)
	rep, err := c.endpoints.GetUsers(ctx)(ctx, request)
	if err != nil {
		return nil, statusx.FromGrpcError(err)
	}
	return rep.(*GetUsersResponse), nil
}

func (c *demoGrpcClient) UploadUserAvatar(ctx context.Context, request *UploadUserAvatarRequest) (*emptypb.Empty, error) {
	ctx = endpointx.InjectName(ctx, "/leo.example.demo.v1.Demo/UploadUserAvatar")
	ctx = transportx.InjectName(ctx, grpcx.GrpcClient)
	rep, err := c.endpoints.UploadUserAvatar(ctx)(ctx, request)
	if err != nil {
		return nil, statusx.FromGrpcError(err)
	}
	return rep.(*emptypb.Empty), nil
}

func (c *demoGrpcClient) GetUserAvatar(ctx context.Context, request *GetUserAvatarRequest) (*httpbody.HttpBody, error) {
	ctx = endpointx.InjectName(ctx, "/leo.example.demo.v1.Demo/GetUserAvatar")
	ctx = transportx.InjectName(ctx, grpcx.GrpcClient)
	rep, err := c.endpoints.GetUserAvatar(ctx)(ctx, request)
	if err != nil {
		return nil, statusx.FromGrpcError(err)
	}
	return rep.(*httpbody.HttpBody), nil
}

func NewDemoGrpcClient(transports DemoClientTransports, middlewares ...endpoint.Middleware) DemoService {
	endpoints := newDemoClientEndpoints(transports, middlewares...)
	return &demoGrpcClient{endpoints: endpoints}
}

func _Demo_CreateUser_GrpcClient_Transport(target string, options ...transportx.ClientTransportOption) func() (transportx.ClientTransport, error) {
	return func() (transportx.ClientTransport, error) {
		return transportx.NewClientTransport(
			target,
			grpcx.ClientFactory(
				"leo.example.demo.v1.Demo",
				"CreateUser",
				func(_ context.Context, v any) (any, error) { return v, nil },
				func(_ context.Context, v any) (any, error) { return v, nil },
				CreateUserResponse{},
				grpc.ClientBefore(grpcx.OutgoingMetadataInjector),
			),
			options...,
		)
	}
}

func _Demo_DeleteUser_GrpcClient_Transport(target string, options ...transportx.ClientTransportOption) func() (transportx.ClientTransport, error) {
	return func() (transportx.ClientTransport, error) {
		return transportx.NewClientTransport(
			target,
			grpcx.ClientFactory(
				"leo.example.demo.v1.Demo",
				"DeleteUser",
				func(_ context.Context, v any) (any, error) { return v, nil },
				func(_ context.Context, v any) (any, error) { return v, nil },
				emptypb.Empty{},
				grpc.ClientBefore(grpcx.OutgoingMetadataInjector),
			),
			options...,
		)
	}
}

func _Demo_UpdateUser_GrpcClient_Transport(target string, options ...transportx.ClientTransportOption) func() (transportx.ClientTransport, error) {
	return func() (transportx.ClientTransport, error) {
		return transportx.NewClientTransport(
			target,
			grpcx.ClientFactory(
				"leo.example.demo.v1.Demo",
				"UpdateUser",
				func(_ context.Context, v any) (any, error) { return v, nil },
				func(_ context.Context, v any) (any, error) { return v, nil },
				emptypb.Empty{},
				grpc.ClientBefore(grpcx.OutgoingMetadataInjector),
			),
			options...,
		)
	}
}

func _Demo_GetUser_GrpcClient_Transport(target string, options ...transportx.ClientTransportOption) func() (transportx.ClientTransport, error) {
	return func() (transportx.ClientTransport, error) {
		return transportx.NewClientTransport(
			target,
			grpcx.ClientFactory(
				"leo.example.demo.v1.Demo",
				"GetUser",
				func(_ context.Context, v any) (any, error) { return v, nil },
				func(_ context.Context, v any) (any, error) { return v, nil },
				GetUserResponse{},
				grpc.ClientBefore(grpcx.OutgoingMetadataInjector),
			),
			options...,
		)
	}
}

func _Demo_GetUsers_GrpcClient_Transport(target string, options ...transportx.ClientTransportOption) func() (transportx.ClientTransport, error) {
	return func() (transportx.ClientTransport, error) {
		return transportx.NewClientTransport(
			target,
			grpcx.ClientFactory(
				"leo.example.demo.v1.Demo",
				"GetUsers",
				func(_ context.Context, v any) (any, error) { return v, nil },
				func(_ context.Context, v any) (any, error) { return v, nil },
				GetUsersResponse{},
				grpc.ClientBefore(grpcx.OutgoingMetadataInjector),
			),
			options...,
		)
	}
}

func _Demo_UploadUserAvatar_GrpcClient_Transport(target string, options ...transportx.ClientTransportOption) func() (transportx.ClientTransport, error) {
	return func() (transportx.ClientTransport, error) {
		return transportx.NewClientTransport(
			target,
			grpcx.ClientFactory(
				"leo.example.demo.v1.Demo",
				"UploadUserAvatar",
				func(_ context.Context, v any) (any, error) { return v, nil },
				func(_ context.Context, v any) (any, error) { return v, nil },
				emptypb.Empty{},
				grpc.ClientBefore(grpcx.OutgoingMetadataInjector),
			),
			options...,
		)
	}
}

func _Demo_GetUserAvatar_GrpcClient_Transport(target string, options ...transportx.ClientTransportOption) func() (transportx.ClientTransport, error) {
	return func() (transportx.ClientTransport, error) {
		return transportx.NewClientTransport(
			target,
			grpcx.ClientFactory(
				"leo.example.demo.v1.Demo",
				"GetUserAvatar",
				func(_ context.Context, v any) (any, error) { return v, nil },
				func(_ context.Context, v any) (any, error) { return v, nil },
				httpbody.HttpBody{},
				grpc.ClientBefore(grpcx.OutgoingMetadataInjector),
			),
			options...,
		)
	}
}

// =========================== http server ===========================

type DemoHttpServerTransports interface {
	CreateUser() *http.Server
	DeleteUser() *http.Server
	UpdateUser() *http.Server
	GetUser() *http.Server
	GetUsers() *http.Server
	UploadUserAvatar() *http.Server
	GetUserAvatar() *http.Server
}

type demoHttpServerTransports struct {
	createUser       *http.Server
	deleteUser       *http.Server
	updateUser       *http.Server
	getUser          *http.Server
	getUsers         *http.Server
	uploadUserAvatar *http.Server
	getUserAvatar    *http.Server
}

func (t *demoHttpServerTransports) CreateUser() *http.Server {
	return t.createUser
}

func (t *demoHttpServerTransports) DeleteUser() *http.Server {
	return t.deleteUser
}

func (t *demoHttpServerTransports) UpdateUser() *http.Server {
	return t.updateUser
}

func (t *demoHttpServerTransports) GetUser() *http.Server {
	return t.getUser
}

func (t *demoHttpServerTransports) GetUsers() *http.Server {
	return t.getUsers
}

func (t *demoHttpServerTransports) UploadUserAvatar() *http.Server {
	return t.uploadUserAvatar
}

func (t *demoHttpServerTransports) GetUserAvatar() *http.Server {
	return t.getUserAvatar
}

func newDemoHttpServerTransports(endpoints DemoEndpoints) DemoHttpServerTransports {
	return &demoHttpServerTransports{
		createUser: http.NewServer(
			endpoints.CreateUser(context.TODO()),
			_Demo_CreateUser_HttpServer_RequestDecoder,
			_Demo_CreateUser_HttpServer_ResponseEncoder,
			http.ServerBefore(httpx.EndpointInjector("/leo.example.demo.v1.Demo/CreateUser")),
			http.ServerBefore(httpx.TransportInjector(httpx.HttpServer)),
			http.ServerBefore(httpx.IncomingMetadataInjector),
			http.ServerBefore(httpx.IncomingTimeLimiter),
			http.ServerFinalizer(httpx.CancelInvoker),
			http.ServerErrorEncoder(httpx.ErrorEncoder),
		),
		deleteUser: http.NewServer(
			endpoints.DeleteUser(context.TODO()),
			_Demo_DeleteUser_HttpServer_RequestDecoder,
			_Demo_DeleteUser_HttpServer_ResponseEncoder,
			http.ServerBefore(httpx.EndpointInjector("/leo.example.demo.v1.Demo/DeleteUser")),
			http.ServerBefore(httpx.TransportInjector(httpx.HttpServer)),
			http.ServerBefore(httpx.IncomingMetadataInjector),
			http.ServerBefore(httpx.IncomingTimeLimiter),
			http.ServerFinalizer(httpx.CancelInvoker),
			http.ServerErrorEncoder(httpx.ErrorEncoder),
		),
		updateUser: http.NewServer(
			endpoints.UpdateUser(context.TODO()),
			_Demo_UpdateUser_HttpServer_RequestDecoder,
			_Demo_UpdateUser_HttpServer_ResponseEncoder,
			http.ServerBefore(httpx.EndpointInjector("/leo.example.demo.v1.Demo/UpdateUser")),
			http.ServerBefore(httpx.TransportInjector(httpx.HttpServer)),
			http.ServerBefore(httpx.IncomingMetadataInjector),
			http.ServerBefore(httpx.IncomingTimeLimiter),
			http.ServerFinalizer(httpx.CancelInvoker),
			http.ServerErrorEncoder(httpx.ErrorEncoder),
		),
		getUser: http.NewServer(
			endpoints.GetUser(context.TODO()),
			_Demo_GetUser_HttpServer_RequestDecoder,
			_Demo_GetUser_HttpServer_ResponseEncoder,
			http.ServerBefore(httpx.EndpointInjector("/leo.example.demo.v1.Demo/GetUser")),
			http.ServerBefore(httpx.TransportInjector(httpx.HttpServer)),
			http.ServerBefore(httpx.IncomingMetadataInjector),
			http.ServerBefore(httpx.IncomingTimeLimiter),
			http.ServerFinalizer(httpx.CancelInvoker),
			http.ServerErrorEncoder(httpx.ErrorEncoder),
		),
		getUsers: http.NewServer(
			endpoints.GetUsers(context.TODO()),
			_Demo_GetUsers_HttpServer_RequestDecoder,
			_Demo_GetUsers_HttpServer_ResponseEncoder,
			http.ServerBefore(httpx.EndpointInjector("/leo.example.demo.v1.Demo/GetUsers")),
			http.ServerBefore(httpx.TransportInjector(httpx.HttpServer)),
			http.ServerBefore(httpx.IncomingMetadataInjector),
			http.ServerBefore(httpx.IncomingTimeLimiter),
			http.ServerFinalizer(httpx.CancelInvoker),
			http.ServerErrorEncoder(httpx.ErrorEncoder),
		),
		uploadUserAvatar: http.NewServer(
			endpoints.UploadUserAvatar(context.TODO()),
			_Demo_UploadUserAvatar_HttpServer_RequestDecoder,
			_Demo_UploadUserAvatar_HttpServer_ResponseEncoder,
			http.ServerBefore(httpx.EndpointInjector("/leo.example.demo.v1.Demo/UploadUserAvatar")),
			http.ServerBefore(httpx.TransportInjector(httpx.HttpServer)),
			http.ServerBefore(httpx.IncomingMetadataInjector),
			http.ServerBefore(httpx.IncomingTimeLimiter),
			http.ServerFinalizer(httpx.CancelInvoker),
			http.ServerErrorEncoder(httpx.ErrorEncoder),
		),
		getUserAvatar: http.NewServer(
			endpoints.GetUserAvatar(context.TODO()),
			_Demo_GetUserAvatar_HttpServer_RequestDecoder,
			_Demo_GetUserAvatar_HttpServer_ResponseEncoder,
			http.ServerBefore(httpx.EndpointInjector("/leo.example.demo.v1.Demo/GetUserAvatar")),
			http.ServerBefore(httpx.TransportInjector(httpx.HttpServer)),
			http.ServerBefore(httpx.IncomingMetadataInjector),
			http.ServerBefore(httpx.IncomingTimeLimiter),
			http.ServerFinalizer(httpx.CancelInvoker),
			http.ServerErrorEncoder(httpx.ErrorEncoder),
		),
	}
}

func AppendDemoHttpRouter(router *mux.Router, svc DemoService, middlewares ...endpoint.Middleware) *mux.Router {
	endpoints := newDemoServerEndpoints(svc, middlewares...)
	transports := newDemoHttpServerTransports(endpoints)
	router.NewRoute().Name("/leo.example.demo.v1.Demo/CreateUser").Methods("POST").Path("/v1/user").Handler(transports.CreateUser())
	router.NewRoute().Name("/leo.example.demo.v1.Demo/DeleteUser").Methods("DELETE").Path("/v1/user/{user_id}").Handler(transports.DeleteUser())
	router.NewRoute().Name("/leo.example.demo.v1.Demo/UpdateUser").Methods("PUT").Path("/v1/user/{user_id}").Handler(transports.UpdateUser())
	router.NewRoute().Name("/leo.example.demo.v1.Demo/GetUser").Methods("GET").Path("/v1/user/{user_id}").Handler(transports.GetUser())
	router.NewRoute().Name("/leo.example.demo.v1.Demo/GetUsers").Methods("GET").Path("/v1/users").Handler(transports.GetUsers())
	router.NewRoute().Name("/leo.example.demo.v1.Demo/UploadUserAvatar").Methods("POST").Path("/v1/user/{user_id}").Handler(transports.UploadUserAvatar())
	router.NewRoute().Name("/leo.example.demo.v1.Demo/GetUserAvatar").Methods("GET").Path("/v1/users/{user_id}").Handler(transports.GetUserAvatar())
	return router
}

// =========================== http client ===========================

type demoHttpClientTransports struct {
	createUser       transportx.ClientTransport
	deleteUser       transportx.ClientTransport
	updateUser       transportx.ClientTransport
	getUser          transportx.ClientTransport
	getUsers         transportx.ClientTransport
	uploadUserAvatar transportx.ClientTransport
	getUserAvatar    transportx.ClientTransport
}

func (t *demoHttpClientTransports) CreateUser() transportx.ClientTransport {
	return t.createUser
}

func (t *demoHttpClientTransports) DeleteUser() transportx.ClientTransport {
	return t.deleteUser
}

func (t *demoHttpClientTransports) UpdateUser() transportx.ClientTransport {
	return t.updateUser
}

func (t *demoHttpClientTransports) GetUser() transportx.ClientTransport {
	return t.getUser
}

func (t *demoHttpClientTransports) GetUsers() transportx.ClientTransport {
	return t.getUsers
}

func (t *demoHttpClientTransports) UploadUserAvatar() transportx.ClientTransport {
	return t.uploadUserAvatar
}

func (t *demoHttpClientTransports) GetUserAvatar() transportx.ClientTransport {
	return t.getUserAvatar
}

func NewDemoHttpClientTransports(target string, options ...transportx.ClientTransportOption) (DemoClientTransports, error) {
	router := mux.NewRouter()
	router.NewRoute().Name("/leo.example.demo.v1.Demo/CreateUser").Methods("POST").Path("/v1/user")
	router.NewRoute().Name("/leo.example.demo.v1.Demo/DeleteUser").Methods("DELETE").Path("/v1/user/{user_id}")
	router.NewRoute().Name("/leo.example.demo.v1.Demo/UpdateUser").Methods("PUT").Path("/v1/user/{user_id}")
	router.NewRoute().Name("/leo.example.demo.v1.Demo/GetUser").Methods("GET").Path("/v1/user/{user_id}")
	router.NewRoute().Name("/leo.example.demo.v1.Demo/GetUsers").Methods("GET").Path("/v1/users")
	router.NewRoute().Name("/leo.example.demo.v1.Demo/UploadUserAvatar").Methods("POST").Path("/v1/user/{user_id}")
	router.NewRoute().Name("/leo.example.demo.v1.Demo/GetUserAvatar").Methods("GET").Path("/v1/users/{user_id}")
	t := &demoHttpClientTransports{}
	var err error
	t.createUser, err = errorx.Break[transportx.ClientTransport](err)(func() (transportx.ClientTransport, error) {
		return transportx.NewClientTransport(
			target,
			httpx.ClientFactory(
				_Demo_CreateUser_HttpClient_RequestEncoder(router),
				_Demo_CreateUser_HttpClient_ResponseDecoder,
				http.ClientBefore(httpx.OutgoingMetadataInjector),
				http.ClientBefore(httpx.OutgoingTimeLimiter),
			),
			options...,
		)
	})
	t.deleteUser, err = errorx.Break[transportx.ClientTransport](err)(func() (transportx.ClientTransport, error) {
		return transportx.NewClientTransport(
			target,
			httpx.ClientFactory(
				_Demo_DeleteUser_HttpClient_RequestEncoder(router),
				_Demo_DeleteUser_HttpClient_ResponseDecoder,
				http.ClientBefore(httpx.OutgoingMetadataInjector),
				http.ClientBefore(httpx.OutgoingTimeLimiter),
			),
			options...,
		)
	})
	t.updateUser, err = errorx.Break[transportx.ClientTransport](err)(func() (transportx.ClientTransport, error) {
		return transportx.NewClientTransport(
			target,
			httpx.ClientFactory(
				_Demo_UpdateUser_HttpClient_RequestEncoder(router),
				_Demo_UpdateUser_HttpClient_ResponseDecoder,
				http.ClientBefore(httpx.OutgoingMetadataInjector),
				http.ClientBefore(httpx.OutgoingTimeLimiter),
			),
			options...,
		)
	})
	t.getUser, err = errorx.Break[transportx.ClientTransport](err)(func() (transportx.ClientTransport, error) {
		return transportx.NewClientTransport(
			target,
			httpx.ClientFactory(
				_Demo_GetUser_HttpClient_RequestEncoder(router),
				_Demo_GetUser_HttpClient_ResponseDecoder,
				http.ClientBefore(httpx.OutgoingMetadataInjector),
				http.ClientBefore(httpx.OutgoingTimeLimiter),
			),
			options...,
		)
	})
	t.getUsers, err = errorx.Break[transportx.ClientTransport](err)(func() (transportx.ClientTransport, error) {
		return transportx.NewClientTransport(
			target,
			httpx.ClientFactory(
				_Demo_GetUsers_HttpClient_RequestEncoder(router),
				_Demo_GetUsers_HttpClient_ResponseDecoder,
				http.ClientBefore(httpx.OutgoingMetadataInjector),
				http.ClientBefore(httpx.OutgoingTimeLimiter),
			),
			options...,
		)
	})
	t.uploadUserAvatar, err = errorx.Break[transportx.ClientTransport](err)(func() (transportx.ClientTransport, error) {
		return transportx.NewClientTransport(
			target,
			httpx.ClientFactory(
				_Demo_UploadUserAvatar_HttpClient_RequestEncoder(router),
				_Demo_UploadUserAvatar_HttpClient_ResponseDecoder,
				http.ClientBefore(httpx.OutgoingMetadataInjector),
				http.ClientBefore(httpx.OutgoingTimeLimiter),
			),
			options...,
		)
	})
	t.getUserAvatar, err = errorx.Break[transportx.ClientTransport](err)(func() (transportx.ClientTransport, error) {
		return transportx.NewClientTransport(
			target,
			httpx.ClientFactory(
				_Demo_GetUserAvatar_HttpClient_RequestEncoder(router),
				_Demo_GetUserAvatar_HttpClient_ResponseDecoder,
				http.ClientBefore(httpx.OutgoingMetadataInjector),
				http.ClientBefore(httpx.OutgoingTimeLimiter),
			),
			options...,
		)
	})
	return t, err
}

type demoHttpClient struct {
	endpoints DemoEndpoints
}

func (c *demoHttpClient) CreateUser(ctx context.Context, request *CreateUserRequest) (*CreateUserResponse, error) {
	ctx = endpointx.InjectName(ctx, "/leo.example.demo.v1.Demo/CreateUser")
	ctx = transportx.InjectName(ctx, httpx.HttpClient)
	rep, err := c.endpoints.CreateUser(ctx)(ctx, request)
	if err != nil {
		return nil, statusx.From(err)
	}
	return rep.(*CreateUserResponse), nil
}

func (c *demoHttpClient) DeleteUser(ctx context.Context, request *DeleteUsersRequest) (*emptypb.Empty, error) {
	ctx = endpointx.InjectName(ctx, "/leo.example.demo.v1.Demo/DeleteUser")
	ctx = transportx.InjectName(ctx, httpx.HttpClient)
	rep, err := c.endpoints.DeleteUser(ctx)(ctx, request)
	if err != nil {
		return nil, statusx.From(err)
	}
	return rep.(*emptypb.Empty), nil
}

func (c *demoHttpClient) UpdateUser(ctx context.Context, request *UpdateUserRequest) (*emptypb.Empty, error) {
	ctx = endpointx.InjectName(ctx, "/leo.example.demo.v1.Demo/UpdateUser")
	ctx = transportx.InjectName(ctx, httpx.HttpClient)
	rep, err := c.endpoints.UpdateUser(ctx)(ctx, request)
	if err != nil {
		return nil, statusx.From(err)
	}
	return rep.(*emptypb.Empty), nil
}

func (c *demoHttpClient) GetUser(ctx context.Context, request *GetUserRequest) (*GetUserResponse, error) {
	ctx = endpointx.InjectName(ctx, "/leo.example.demo.v1.Demo/GetUser")
	ctx = transportx.InjectName(ctx, httpx.HttpClient)
	rep, err := c.endpoints.GetUser(ctx)(ctx, request)
	if err != nil {
		return nil, statusx.From(err)
	}
	return rep.(*GetUserResponse), nil
}

func (c *demoHttpClient) GetUsers(ctx context.Context, request *GetUsersRequest) (*GetUsersResponse, error) {
	ctx = endpointx.InjectName(ctx, "/leo.example.demo.v1.Demo/GetUsers")
	ctx = transportx.InjectName(ctx, httpx.HttpClient)
	rep, err := c.endpoints.GetUsers(ctx)(ctx, request)
	if err != nil {
		return nil, statusx.From(err)
	}
	return rep.(*GetUsersResponse), nil
}

func (c *demoHttpClient) UploadUserAvatar(ctx context.Context, request *UploadUserAvatarRequest) (*emptypb.Empty, error) {
	ctx = endpointx.InjectName(ctx, "/leo.example.demo.v1.Demo/UploadUserAvatar")
	ctx = transportx.InjectName(ctx, httpx.HttpClient)
	rep, err := c.endpoints.UploadUserAvatar(ctx)(ctx, request)
	if err != nil {
		return nil, statusx.From(err)
	}
	return rep.(*emptypb.Empty), nil
}

func (c *demoHttpClient) GetUserAvatar(ctx context.Context, request *GetUserAvatarRequest) (*httpbody.HttpBody, error) {
	ctx = endpointx.InjectName(ctx, "/leo.example.demo.v1.Demo/GetUserAvatar")
	ctx = transportx.InjectName(ctx, httpx.HttpClient)
	rep, err := c.endpoints.GetUserAvatar(ctx)(ctx, request)
	if err != nil {
		return nil, statusx.From(err)
	}
	return rep.(*httpbody.HttpBody), nil
}

func NewDemoHttpClient(transports DemoClientTransports, middlewares ...endpoint.Middleware) DemoService {
	endpoints := newDemoClientEndpoints(transports, middlewares...)
	return &demoHttpClient{endpoints: endpoints}
}

// =========================== http coder ===========================

func _Demo_CreateUser_HttpServer_RequestDecoder(ctx context.Context, r *http1.Request) (any, error) {
	req := &CreateUserRequest{}
	if err := jsonx.NewDecoder(r.Body).Decode(req); err != nil {
		return nil, statusx.ErrInvalidArgument.With(statusx.Wrap(err))
	}
	return req, nil
}

func _Demo_CreateUser_HttpClient_RequestEncoder(router *mux.Router) func(scheme string, instance string) http.CreateRequestFunc {
	return func(scheme string, instance string) http.CreateRequestFunc {
		return func(ctx context.Context, obj any) (*http1.Request, error) {
			if obj == nil {
				return nil, statusx.ErrInvalidArgument.With(statusx.Message("request is nil"))
			}
			req, ok := obj.(*CreateUserRequest)
			if !ok {
				return nil, statusx.ErrInvalidArgument.With(statusx.Message("invalid request type, %T", obj))
			}
			_ = req
			var body io.Reader
			var bodyBuf bytes.Buffer
			if err := jsonx.NewEncoder(&bodyBuf).Encode(req); err != nil {
				return nil, statusx.ErrInvalidArgument.With(statusx.Wrap(err))
			}
			body = &bodyBuf
			contentType := "application/json; charset=utf-8"
			var pairs []string
			path, err := router.Get("/leo.example.demo.v1.Demo/CreateUser").URLPath(pairs...)
			if err != nil {
				return nil, statusx.ErrInvalidArgument.With(statusx.Wrap(err))
			}
			queries := url.Values{}
			target := &url.URL{
				Scheme:   scheme,
				Host:     instance,
				Path:     path.Path,
				RawQuery: queries.Encode(),
			}
			r, err := http1.NewRequestWithContext(ctx, "POST", target.String(), body)
			if err != nil {
				return nil, statusx.ErrInvalidArgument.With(statusx.Wrap(err))
			}
			r.Header.Set("Content-Type", contentType)
			return r, nil
		}
	}
}

func _Demo_CreateUser_HttpServer_ResponseEncoder(ctx context.Context, w http1.ResponseWriter, obj any) error {
	resp := obj.(*CreateUserResponse)
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(http1.StatusOK)
	if err := jsonx.NewEncoder(w).Encode(resp); err != nil {
		return statusx.ErrInternal.With(statusx.Wrap(err))
	}
	return nil
}

func _Demo_CreateUser_HttpClient_ResponseDecoder(ctx context.Context, r *http1.Response) (any, error) {
	if httpx.IsErrorResponse(r) {
		return nil, httpx.ErrorDecoder(ctx, r)
	}
	resp := &CreateUserResponse{}
	if err := jsonx.NewDecoder(r.Body).Decode(resp); err != nil {
		return nil, err
	}
	return resp, nil
}

func _Demo_DeleteUser_HttpServer_RequestDecoder(ctx context.Context, r *http1.Request) (any, error) {
	req := &DeleteUsersRequest{}
	vars := urlx.FormFromMap(mux.Vars(r))
	var varErr error
	req.UserId, varErr = errorx.Break[uint64](varErr)(urlx.GetUint[uint64](vars, "user_id"))
	if varErr != nil {
		return nil, statusx.ErrInvalidArgument.With(statusx.Wrap(varErr))
	}
	return req, nil
}

func _Demo_DeleteUser_HttpClient_RequestEncoder(router *mux.Router) func(scheme string, instance string) http.CreateRequestFunc {
	return func(scheme string, instance string) http.CreateRequestFunc {
		return func(ctx context.Context, obj any) (*http1.Request, error) {
			if obj == nil {
				return nil, statusx.ErrInvalidArgument.With(statusx.Message("request is nil"))
			}
			req, ok := obj.(*DeleteUsersRequest)
			if !ok {
				return nil, statusx.ErrInvalidArgument.With(statusx.Message("invalid request type, %T", obj))
			}
			_ = req
			var body io.Reader
			var pairs []string
			pairs = append(pairs, "user_id", strconvx.FormatUint(req.GetUserId(), 10))
			path, err := router.Get("/leo.example.demo.v1.Demo/DeleteUser").URLPath(pairs...)
			if err != nil {
				return nil, statusx.ErrInvalidArgument.With(statusx.Wrap(err))
			}
			queries := url.Values{}
			target := &url.URL{
				Scheme:   scheme,
				Host:     instance,
				Path:     path.Path,
				RawQuery: queries.Encode(),
			}
			r, err := http1.NewRequestWithContext(ctx, "DELETE", target.String(), body)
			if err != nil {
				return nil, statusx.ErrInvalidArgument.With(statusx.Wrap(err))
			}
			return r, nil
		}
	}
}

func _Demo_DeleteUser_HttpServer_ResponseEncoder(ctx context.Context, w http1.ResponseWriter, obj any) error {
	resp := obj.(*emptypb.Empty)
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(http1.StatusOK)
	if err := jsonx.NewEncoder(w).Encode(resp); err != nil {
		return statusx.ErrInternal.With(statusx.Wrap(err))
	}
	return nil
}

func _Demo_DeleteUser_HttpClient_ResponseDecoder(ctx context.Context, r *http1.Response) (any, error) {
	if httpx.IsErrorResponse(r) {
		return nil, httpx.ErrorDecoder(ctx, r)
	}
	resp := &emptypb.Empty{}
	if err := jsonx.NewDecoder(r.Body).Decode(resp); err != nil {
		return nil, err
	}
	return resp, nil
}

func _Demo_UpdateUser_HttpServer_RequestDecoder(ctx context.Context, r *http1.Request) (any, error) {
	req := &UpdateUserRequest{}
	if err := jsonx.NewDecoder(r.Body).Decode(&req.User); err != nil {
		return nil, statusx.ErrInvalidArgument.With(statusx.Wrap(err))
	}
	vars := urlx.FormFromMap(mux.Vars(r))
	var varErr error
	req.UserId, varErr = errorx.Break[uint64](varErr)(urlx.GetUint[uint64](vars, "user_id"))
	if varErr != nil {
		return nil, statusx.ErrInvalidArgument.With(statusx.Wrap(varErr))
	}
	return req, nil
}

func _Demo_UpdateUser_HttpClient_RequestEncoder(router *mux.Router) func(scheme string, instance string) http.CreateRequestFunc {
	return func(scheme string, instance string) http.CreateRequestFunc {
		return func(ctx context.Context, obj any) (*http1.Request, error) {
			if obj == nil {
				return nil, statusx.ErrInvalidArgument.With(statusx.Message("request is nil"))
			}
			req, ok := obj.(*UpdateUserRequest)
			if !ok {
				return nil, statusx.ErrInvalidArgument.With(statusx.Message("invalid request type, %T", obj))
			}
			_ = req
			var body io.Reader
			var bodyBuf bytes.Buffer
			if err := jsonx.NewEncoder(&bodyBuf).Encode(req.GetUser()); err != nil {
				return nil, statusx.ErrInvalidArgument.With(statusx.Wrap(err))
			}
			body = &bodyBuf
			contentType := "application/json; charset=utf-8"
			var pairs []string
			pairs = append(pairs, "user_id", strconvx.FormatUint(req.GetUserId(), 10))
			path, err := router.Get("/leo.example.demo.v1.Demo/UpdateUser").URLPath(pairs...)
			if err != nil {
				return nil, statusx.ErrInvalidArgument.With(statusx.Wrap(err))
			}
			queries := url.Values{}
			target := &url.URL{
				Scheme:   scheme,
				Host:     instance,
				Path:     path.Path,
				RawQuery: queries.Encode(),
			}
			r, err := http1.NewRequestWithContext(ctx, "PUT", target.String(), body)
			if err != nil {
				return nil, statusx.ErrInvalidArgument.With(statusx.Wrap(err))
			}
			r.Header.Set("Content-Type", contentType)
			return r, nil
		}
	}
}

func _Demo_UpdateUser_HttpServer_ResponseEncoder(ctx context.Context, w http1.ResponseWriter, obj any) error {
	resp := obj.(*emptypb.Empty)
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(http1.StatusOK)
	if err := jsonx.NewEncoder(w).Encode(resp); err != nil {
		return statusx.ErrInternal.With(statusx.Wrap(err))
	}
	return nil
}

func _Demo_UpdateUser_HttpClient_ResponseDecoder(ctx context.Context, r *http1.Response) (any, error) {
	if httpx.IsErrorResponse(r) {
		return nil, httpx.ErrorDecoder(ctx, r)
	}
	resp := &emptypb.Empty{}
	if err := jsonx.NewDecoder(r.Body).Decode(resp); err != nil {
		return nil, err
	}
	return resp, nil
}

func _Demo_GetUser_HttpServer_RequestDecoder(ctx context.Context, r *http1.Request) (any, error) {
	req := &GetUserRequest{}
	vars := urlx.FormFromMap(mux.Vars(r))
	var varErr error
	req.UserId, varErr = errorx.Break[uint64](varErr)(urlx.GetUint[uint64](vars, "user_id"))
	if varErr != nil {
		return nil, statusx.ErrInvalidArgument.With(statusx.Wrap(varErr))
	}
	return req, nil
}

func _Demo_GetUser_HttpClient_RequestEncoder(router *mux.Router) func(scheme string, instance string) http.CreateRequestFunc {
	return func(scheme string, instance string) http.CreateRequestFunc {
		return func(ctx context.Context, obj any) (*http1.Request, error) {
			if obj == nil {
				return nil, statusx.ErrInvalidArgument.With(statusx.Message("request is nil"))
			}
			req, ok := obj.(*GetUserRequest)
			if !ok {
				return nil, statusx.ErrInvalidArgument.With(statusx.Message("invalid request type, %T", obj))
			}
			_ = req
			var body io.Reader
			var pairs []string
			pairs = append(pairs, "user_id", strconvx.FormatUint(req.GetUserId(), 10))
			path, err := router.Get("/leo.example.demo.v1.Demo/GetUser").URLPath(pairs...)
			if err != nil {
				return nil, statusx.ErrInvalidArgument.With(statusx.Wrap(err))
			}
			queries := url.Values{}
			target := &url.URL{
				Scheme:   scheme,
				Host:     instance,
				Path:     path.Path,
				RawQuery: queries.Encode(),
			}
			r, err := http1.NewRequestWithContext(ctx, "GET", target.String(), body)
			if err != nil {
				return nil, statusx.ErrInvalidArgument.With(statusx.Wrap(err))
			}
			return r, nil
		}
	}
}

func _Demo_GetUser_HttpServer_ResponseEncoder(ctx context.Context, w http1.ResponseWriter, obj any) error {
	resp := obj.(*GetUserResponse)
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(http1.StatusOK)
	if err := jsonx.NewEncoder(w).Encode(resp); err != nil {
		return statusx.ErrInternal.With(statusx.Wrap(err))
	}
	return nil
}

func _Demo_GetUser_HttpClient_ResponseDecoder(ctx context.Context, r *http1.Response) (any, error) {
	if httpx.IsErrorResponse(r) {
		return nil, httpx.ErrorDecoder(ctx, r)
	}
	resp := &GetUserResponse{}
	if err := jsonx.NewDecoder(r.Body).Decode(resp); err != nil {
		return nil, err
	}
	return resp, nil
}

func _Demo_GetUsers_HttpServer_RequestDecoder(ctx context.Context, r *http1.Request) (any, error) {
	req := &GetUsersRequest{}
	queries := r.URL.Query()
	var queryErr error
	req.PageNo, queryErr = errorx.Break[int32](queryErr)(urlx.GetInt[int32](queries, "page_no"))
	req.PageSize, queryErr = errorx.Break[int32](queryErr)(urlx.GetInt[int32](queries, "page_size"))
	if queryErr != nil {
		return nil, statusx.ErrInvalidArgument.With(statusx.Wrap(queryErr))
	}
	return req, nil
}

func _Demo_GetUsers_HttpClient_RequestEncoder(router *mux.Router) func(scheme string, instance string) http.CreateRequestFunc {
	return func(scheme string, instance string) http.CreateRequestFunc {
		return func(ctx context.Context, obj any) (*http1.Request, error) {
			if obj == nil {
				return nil, statusx.ErrInvalidArgument.With(statusx.Message("request is nil"))
			}
			req, ok := obj.(*GetUsersRequest)
			if !ok {
				return nil, statusx.ErrInvalidArgument.With(statusx.Message("invalid request type, %T", obj))
			}
			_ = req
			var body io.Reader
			var pairs []string
			path, err := router.Get("/leo.example.demo.v1.Demo/GetUsers").URLPath(pairs...)
			if err != nil {
				return nil, statusx.ErrInvalidArgument.With(statusx.Wrap(err))
			}
			queries := url.Values{}
			queries["page_no"] = append(queries["page_no"], strconvx.FormatInt(req.GetPageNo(), 10))
			queries["page_size"] = append(queries["page_size"], strconvx.FormatInt(req.GetPageSize(), 10))
			target := &url.URL{
				Scheme:   scheme,
				Host:     instance,
				Path:     path.Path,
				RawQuery: queries.Encode(),
			}
			r, err := http1.NewRequestWithContext(ctx, "GET", target.String(), body)
			if err != nil {
				return nil, statusx.ErrInvalidArgument.With(statusx.Wrap(err))
			}
			return r, nil
		}
	}
}

func _Demo_GetUsers_HttpServer_ResponseEncoder(ctx context.Context, w http1.ResponseWriter, obj any) error {
	resp := obj.(*GetUsersResponse)
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(http1.StatusOK)
	if err := jsonx.NewEncoder(w).Encode(resp); err != nil {
		return statusx.ErrInternal.With(statusx.Wrap(err))
	}
	return nil
}

func _Demo_GetUsers_HttpClient_ResponseDecoder(ctx context.Context, r *http1.Response) (any, error) {
	if httpx.IsErrorResponse(r) {
		return nil, httpx.ErrorDecoder(ctx, r)
	}
	resp := &GetUsersResponse{}
	if err := jsonx.NewDecoder(r.Body).Decode(resp); err != nil {
		return nil, err
	}
	return resp, nil
}

func _Demo_UploadUserAvatar_HttpServer_RequestDecoder(ctx context.Context, r *http1.Request) (any, error) {
	req := &UploadUserAvatarRequest{}
	req.Avatar = &httpbody.HttpBody{}
	body, err := io.ReadAll(r.Body)
	if err != nil {
		return nil, statusx.ErrInvalidArgument.With(statusx.Wrap(err))
	}
	req.Avatar.Data = body
	req.Avatar.ContentType = r.Header.Get("Content-Type")
	vars := urlx.FormFromMap(mux.Vars(r))
	var varErr error
	req.UserId, varErr = errorx.Break[uint64](varErr)(urlx.GetUint[uint64](vars, "user_id"))
	if varErr != nil {
		return nil, statusx.ErrInvalidArgument.With(statusx.Wrap(varErr))
	}
	return req, nil
}

func _Demo_UploadUserAvatar_HttpClient_RequestEncoder(router *mux.Router) func(scheme string, instance string) http.CreateRequestFunc {
	return func(scheme string, instance string) http.CreateRequestFunc {
		return func(ctx context.Context, obj any) (*http1.Request, error) {
			if obj == nil {
				return nil, statusx.ErrInvalidArgument.With(statusx.Message("request is nil"))
			}
			req, ok := obj.(*UploadUserAvatarRequest)
			if !ok {
				return nil, statusx.ErrInvalidArgument.With(statusx.Message("invalid request type, %T", obj))
			}
			_ = req
			var body io.Reader
			body = bytes.NewReader(req.GetAvatar().GetData())
			contentType := req.GetAvatar().GetContentType()
			var pairs []string
			pairs = append(pairs, "user_id", strconvx.FormatUint(req.GetUserId(), 10))
			path, err := router.Get("/leo.example.demo.v1.Demo/UploadUserAvatar").URLPath(pairs...)
			if err != nil {
				return nil, statusx.ErrInvalidArgument.With(statusx.Wrap(err))
			}
			queries := url.Values{}
			target := &url.URL{
				Scheme:   scheme,
				Host:     instance,
				Path:     path.Path,
				RawQuery: queries.Encode(),
			}
			r, err := http1.NewRequestWithContext(ctx, "POST", target.String(), body)
			if err != nil {
				return nil, statusx.ErrInvalidArgument.With(statusx.Wrap(err))
			}
			r.Header.Set("Content-Type", contentType)
			return r, nil
		}
	}
}

func _Demo_UploadUserAvatar_HttpServer_ResponseEncoder(ctx context.Context, w http1.ResponseWriter, obj any) error {
	resp := obj.(*emptypb.Empty)
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(http1.StatusOK)
	if err := jsonx.NewEncoder(w).Encode(resp); err != nil {
		return statusx.ErrInternal.With(statusx.Wrap(err))
	}
	return nil
}

func _Demo_UploadUserAvatar_HttpClient_ResponseDecoder(ctx context.Context, r *http1.Response) (any, error) {
	if httpx.IsErrorResponse(r) {
		return nil, httpx.ErrorDecoder(ctx, r)
	}
	resp := &emptypb.Empty{}
	if err := jsonx.NewDecoder(r.Body).Decode(resp); err != nil {
		return nil, err
	}
	return resp, nil
}

func _Demo_GetUserAvatar_HttpServer_RequestDecoder(ctx context.Context, r *http1.Request) (any, error) {
	req := &GetUserAvatarRequest{}
	vars := urlx.FormFromMap(mux.Vars(r))
	var varErr error
	req.UserId, varErr = errorx.Break[uint64](varErr)(urlx.GetUint[uint64](vars, "user_id"))
	if varErr != nil {
		return nil, statusx.ErrInvalidArgument.With(statusx.Wrap(varErr))
	}
	return req, nil
}

func _Demo_GetUserAvatar_HttpClient_RequestEncoder(router *mux.Router) func(scheme string, instance string) http.CreateRequestFunc {
	return func(scheme string, instance string) http.CreateRequestFunc {
		return func(ctx context.Context, obj any) (*http1.Request, error) {
			if obj == nil {
				return nil, statusx.ErrInvalidArgument.With(statusx.Message("request is nil"))
			}
			req, ok := obj.(*GetUserAvatarRequest)
			if !ok {
				return nil, statusx.ErrInvalidArgument.With(statusx.Message("invalid request type, %T", obj))
			}
			_ = req
			var body io.Reader
			var pairs []string
			pairs = append(pairs, "user_id", strconvx.FormatUint(req.GetUserId(), 10))
			path, err := router.Get("/leo.example.demo.v1.Demo/GetUserAvatar").URLPath(pairs...)
			if err != nil {
				return nil, statusx.ErrInvalidArgument.With(statusx.Wrap(err))
			}
			queries := url.Values{}
			target := &url.URL{
				Scheme:   scheme,
				Host:     instance,
				Path:     path.Path,
				RawQuery: queries.Encode(),
			}
			r, err := http1.NewRequestWithContext(ctx, "GET", target.String(), body)
			if err != nil {
				return nil, statusx.ErrInvalidArgument.With(statusx.Wrap(err))
			}
			return r, nil
		}
	}
}

func _Demo_GetUserAvatar_HttpServer_ResponseEncoder(ctx context.Context, w http1.ResponseWriter, obj any) error {
	resp := obj.(*httpbody.HttpBody)
	w.Header().Set("Content-Type", resp.GetContentType())
	for _, src := range resp.GetExtensions() {
		dst, err := anypb.UnmarshalNew(src, proto.UnmarshalOptions{})
		if err != nil {
			return statusx.ErrInternal.With(statusx.Wrap(err))
		}
		metadata, ok := dst.(*structpb.Struct)
		if !ok {
			continue
		}
		for key, value := range metadata.GetFields() {
			w.Header().Add(key, string(errorx.Ignore(jsonx.Marshal(value))))
		}
	}
	w.WriteHeader(http1.StatusOK)
	if _, err := w.Write(resp.GetData()); err != nil {
		return statusx.ErrInternal.With(statusx.Wrap(err))
	}
	return nil
}

func _Demo_GetUserAvatar_HttpClient_ResponseDecoder(ctx context.Context, r *http1.Response) (any, error) {
	if httpx.IsErrorResponse(r) {
		return nil, httpx.ErrorDecoder(ctx, r)
	}
	resp := &httpbody.HttpBody{}
	resp.ContentType = r.Header.Get("Content-Type")
	body, err := io.ReadAll(r.Body)
	if err != nil {
		return nil, err
	}
	resp.Data = body
	return resp, nil
}
