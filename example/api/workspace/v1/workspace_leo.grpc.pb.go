// Code generated by protoc-gen-go-leo. DO NOT EDIT.

package workspace

import (
	context "context"
	endpoint "github.com/go-kit/kit/endpoint"
	grpc "github.com/go-kit/kit/transport/grpc"
	endpointx "github.com/go-leo/leo/v3/endpointx"
	metadatax "github.com/go-leo/leo/v3/metadatax"
	stainx "github.com/go-leo/leo/v3/stainx"
	grpctransportx "github.com/go-leo/leo/v3/transportx/grpctransportx"
	grpc1 "google.golang.org/grpc"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	io "io"
)

func NewWorkspacesGrpcServer(svc WorkspacesService, opts ...grpctransportx.ServerOption) WorkspacesServer {
	options := grpctransportx.NewServerOptions(opts...)
	endpoints := &workspacesServerEndpoints{
		svc:         svc,
		middlewares: options.Middlewares(),
	}
	transports := &workspacesGrpcServerTransports{
		endpoints: endpoints,
	}
	return &workspacesGrpcServer{
		listWorkspaces:  transports.ListWorkspaces(),
		getWorkspace:    transports.GetWorkspace(),
		createWorkspace: transports.CreateWorkspace(),
		updateWorkspace: transports.UpdateWorkspace(),
		deleteWorkspace: transports.DeleteWorkspace(),
	}
}

func NewWorkspacesGrpcClient(target string, opts ...grpctransportx.ClientOption) WorkspacesService {
	options := grpctransportx.NewClientOptions(opts...)
	transports := &workspacesGrpcClientTransports{
		dialOptions:   options.DialOptions(),
		clientOptions: options.ClientTransportOptions(),
		middlewares:   options.Middlewares(),
	}
	factories := &workspacesFactories{
		transports: transports,
	}
	endpointer := &workspacesEndpointers{
		target:    target,
		builder:   options.Builder(),
		factories: factories,
		logger:    options.Logger(),
		options:   options.EndpointerOptions(),
	}
	balancers := &workspacesBalancers{
		factory:    options.BalancerFactory(),
		endpointer: endpointer,
	}
	endpoints := &workspacesClientEndpoints{
		balancers: balancers,
	}
	return &workspacesClientService{
		endpoints:     endpoints,
		transportName: grpctransportx.GrpcClient,
	}
}

type workspacesGrpcServerTransports struct {
	endpoints WorkspacesServerEndpoints
}

func (t *workspacesGrpcServerTransports) ListWorkspaces() grpc.Handler {
	return grpc.NewServer(
		t.endpoints.ListWorkspaces(context.TODO()),
		func(_ context.Context, v any) (any, error) { return v, nil },
		func(_ context.Context, v any) (any, error) { return v, nil },
		grpc.ServerBefore(grpctransportx.ServerEndpointInjector("/google.example.endpointsapis.v1.Workspaces/ListWorkspaces")),
		grpc.ServerBefore(grpctransportx.ServerTransportInjector),
		grpc.ServerBefore(metadatax.GrpcIncomingInjector),
		grpc.ServerBefore(stainx.GrpcIncomingInjector),
	)
}

func (t *workspacesGrpcServerTransports) GetWorkspace() grpc.Handler {
	return grpc.NewServer(
		t.endpoints.GetWorkspace(context.TODO()),
		func(_ context.Context, v any) (any, error) { return v, nil },
		func(_ context.Context, v any) (any, error) { return v, nil },
		grpc.ServerBefore(grpctransportx.ServerEndpointInjector("/google.example.endpointsapis.v1.Workspaces/GetWorkspace")),
		grpc.ServerBefore(grpctransportx.ServerTransportInjector),
		grpc.ServerBefore(metadatax.GrpcIncomingInjector),
		grpc.ServerBefore(stainx.GrpcIncomingInjector),
	)
}

func (t *workspacesGrpcServerTransports) CreateWorkspace() grpc.Handler {
	return grpc.NewServer(
		t.endpoints.CreateWorkspace(context.TODO()),
		func(_ context.Context, v any) (any, error) { return v, nil },
		func(_ context.Context, v any) (any, error) { return v, nil },
		grpc.ServerBefore(grpctransportx.ServerEndpointInjector("/google.example.endpointsapis.v1.Workspaces/CreateWorkspace")),
		grpc.ServerBefore(grpctransportx.ServerTransportInjector),
		grpc.ServerBefore(metadatax.GrpcIncomingInjector),
		grpc.ServerBefore(stainx.GrpcIncomingInjector),
	)
}

func (t *workspacesGrpcServerTransports) UpdateWorkspace() grpc.Handler {
	return grpc.NewServer(
		t.endpoints.UpdateWorkspace(context.TODO()),
		func(_ context.Context, v any) (any, error) { return v, nil },
		func(_ context.Context, v any) (any, error) { return v, nil },
		grpc.ServerBefore(grpctransportx.ServerEndpointInjector("/google.example.endpointsapis.v1.Workspaces/UpdateWorkspace")),
		grpc.ServerBefore(grpctransportx.ServerTransportInjector),
		grpc.ServerBefore(metadatax.GrpcIncomingInjector),
		grpc.ServerBefore(stainx.GrpcIncomingInjector),
	)
}

func (t *workspacesGrpcServerTransports) DeleteWorkspace() grpc.Handler {
	return grpc.NewServer(
		t.endpoints.DeleteWorkspace(context.TODO()),
		func(_ context.Context, v any) (any, error) { return v, nil },
		func(_ context.Context, v any) (any, error) { return v, nil },
		grpc.ServerBefore(grpctransportx.ServerEndpointInjector("/google.example.endpointsapis.v1.Workspaces/DeleteWorkspace")),
		grpc.ServerBefore(grpctransportx.ServerTransportInjector),
		grpc.ServerBefore(metadatax.GrpcIncomingInjector),
		grpc.ServerBefore(stainx.GrpcIncomingInjector),
	)
}

type workspacesGrpcServer struct {
	listWorkspaces  grpc.Handler
	getWorkspace    grpc.Handler
	createWorkspace grpc.Handler
	updateWorkspace grpc.Handler
	deleteWorkspace grpc.Handler
}

func (s *workspacesGrpcServer) ListWorkspaces(ctx context.Context, request *ListWorkspacesRequest) (*ListWorkspacesResponse, error) {
	ctx, rep, err := s.listWorkspaces.ServeGRPC(ctx, request)
	if err != nil {
		return nil, err
	}
	_ = ctx
	return rep.(*ListWorkspacesResponse), nil
}

func (s *workspacesGrpcServer) GetWorkspace(ctx context.Context, request *GetWorkspaceRequest) (*Workspace, error) {
	ctx, rep, err := s.getWorkspace.ServeGRPC(ctx, request)
	if err != nil {
		return nil, err
	}
	_ = ctx
	return rep.(*Workspace), nil
}

func (s *workspacesGrpcServer) CreateWorkspace(ctx context.Context, request *CreateWorkspaceRequest) (*Workspace, error) {
	ctx, rep, err := s.createWorkspace.ServeGRPC(ctx, request)
	if err != nil {
		return nil, err
	}
	_ = ctx
	return rep.(*Workspace), nil
}

func (s *workspacesGrpcServer) UpdateWorkspace(ctx context.Context, request *UpdateWorkspaceRequest) (*Workspace, error) {
	ctx, rep, err := s.updateWorkspace.ServeGRPC(ctx, request)
	if err != nil {
		return nil, err
	}
	_ = ctx
	return rep.(*Workspace), nil
}

func (s *workspacesGrpcServer) DeleteWorkspace(ctx context.Context, request *DeleteWorkspaceRequest) (*emptypb.Empty, error) {
	ctx, rep, err := s.deleteWorkspace.ServeGRPC(ctx, request)
	if err != nil {
		return nil, err
	}
	_ = ctx
	return rep.(*emptypb.Empty), nil
}

func (s *workspacesGrpcServer) mustEmbedUnimplementedWorkspacesServer() {}

type workspacesGrpcClientTransports struct {
	dialOptions   []grpc1.DialOption
	clientOptions []grpc.ClientOption
	middlewares   []endpoint.Middleware
}

func (t *workspacesGrpcClientTransports) ListWorkspaces(ctx context.Context, instance string) (endpoint.Endpoint, io.Closer, error) {
	conn, err := grpc1.NewClient(instance, t.dialOptions...)
	if err != nil {
		return nil, nil, err
	}
	opts := []grpc.ClientOption{
		grpc.ClientBefore(metadatax.GrpcOutgoingInjector),
		grpc.ClientBefore(stainx.GrpcOutgoingInjector),
	}
	opts = append(opts, t.clientOptions...)
	client := grpc.NewClient(
		conn,
		"google.example.endpointsapis.v1.Workspaces",
		"ListWorkspaces",
		func(_ context.Context, v any) (any, error) { return v, nil },
		func(_ context.Context, v any) (any, error) { return v, nil },
		ListWorkspacesResponse{},
		opts...)
	return endpointx.Chain(client.Endpoint(), t.middlewares...), conn, nil
}

func (t *workspacesGrpcClientTransports) GetWorkspace(ctx context.Context, instance string) (endpoint.Endpoint, io.Closer, error) {
	conn, err := grpc1.NewClient(instance, t.dialOptions...)
	if err != nil {
		return nil, nil, err
	}
	opts := []grpc.ClientOption{
		grpc.ClientBefore(metadatax.GrpcOutgoingInjector),
		grpc.ClientBefore(stainx.GrpcOutgoingInjector),
	}
	opts = append(opts, t.clientOptions...)
	client := grpc.NewClient(
		conn,
		"google.example.endpointsapis.v1.Workspaces",
		"GetWorkspace",
		func(_ context.Context, v any) (any, error) { return v, nil },
		func(_ context.Context, v any) (any, error) { return v, nil },
		Workspace{},
		opts...)
	return endpointx.Chain(client.Endpoint(), t.middlewares...), conn, nil
}

func (t *workspacesGrpcClientTransports) CreateWorkspace(ctx context.Context, instance string) (endpoint.Endpoint, io.Closer, error) {
	conn, err := grpc1.NewClient(instance, t.dialOptions...)
	if err != nil {
		return nil, nil, err
	}
	opts := []grpc.ClientOption{
		grpc.ClientBefore(metadatax.GrpcOutgoingInjector),
		grpc.ClientBefore(stainx.GrpcOutgoingInjector),
	}
	opts = append(opts, t.clientOptions...)
	client := grpc.NewClient(
		conn,
		"google.example.endpointsapis.v1.Workspaces",
		"CreateWorkspace",
		func(_ context.Context, v any) (any, error) { return v, nil },
		func(_ context.Context, v any) (any, error) { return v, nil },
		Workspace{},
		opts...)
	return endpointx.Chain(client.Endpoint(), t.middlewares...), conn, nil
}

func (t *workspacesGrpcClientTransports) UpdateWorkspace(ctx context.Context, instance string) (endpoint.Endpoint, io.Closer, error) {
	conn, err := grpc1.NewClient(instance, t.dialOptions...)
	if err != nil {
		return nil, nil, err
	}
	opts := []grpc.ClientOption{
		grpc.ClientBefore(metadatax.GrpcOutgoingInjector),
		grpc.ClientBefore(stainx.GrpcOutgoingInjector),
	}
	opts = append(opts, t.clientOptions...)
	client := grpc.NewClient(
		conn,
		"google.example.endpointsapis.v1.Workspaces",
		"UpdateWorkspace",
		func(_ context.Context, v any) (any, error) { return v, nil },
		func(_ context.Context, v any) (any, error) { return v, nil },
		Workspace{},
		opts...)
	return endpointx.Chain(client.Endpoint(), t.middlewares...), conn, nil
}

func (t *workspacesGrpcClientTransports) DeleteWorkspace(ctx context.Context, instance string) (endpoint.Endpoint, io.Closer, error) {
	conn, err := grpc1.NewClient(instance, t.dialOptions...)
	if err != nil {
		return nil, nil, err
	}
	opts := []grpc.ClientOption{
		grpc.ClientBefore(metadatax.GrpcOutgoingInjector),
		grpc.ClientBefore(stainx.GrpcOutgoingInjector),
	}
	opts = append(opts, t.clientOptions...)
	client := grpc.NewClient(
		conn,
		"google.example.endpointsapis.v1.Workspaces",
		"DeleteWorkspace",
		func(_ context.Context, v any) (any, error) { return v, nil },
		func(_ context.Context, v any) (any, error) { return v, nil },
		emptypb.Empty{},
		opts...)
	return endpointx.Chain(client.Endpoint(), t.middlewares...), conn, nil
}
