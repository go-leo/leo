// Code generated by protoc-gen-go-leo. DO NOT EDIT.

package workspace

import (
	context "context"
	cqrs "github.com/go-leo/leo/v3/cqrs"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

func NewWorkspacesCqrsService[
	ListWorkspacesQueryType ListWorkspacesQuery, ListWorkspacesResultType ListWorkspacesResult,
	GetWorkspaceQueryType GetWorkspaceQuery, GetWorkspaceResultType GetWorkspaceResult,
	CreateWorkspaceQueryType CreateWorkspaceQuery, CreateWorkspaceResultType CreateWorkspaceResult,
	UpdateWorkspaceQueryType UpdateWorkspaceQuery, UpdateWorkspaceResultType UpdateWorkspaceResult,
	DeleteWorkspaceCommandType DeleteWorkspaceCommand,
](
	listWorkspacesHandler cqrs.QueryHandler[ListWorkspacesQueryType, ListWorkspacesResultType],
	getWorkspaceHandler cqrs.QueryHandler[GetWorkspaceQueryType, GetWorkspaceResultType],
	createWorkspaceHandler cqrs.QueryHandler[CreateWorkspaceQueryType, CreateWorkspaceResultType],
	updateWorkspaceHandler cqrs.QueryHandler[UpdateWorkspaceQueryType, UpdateWorkspaceResultType],
	deleteWorkspaceHandler cqrs.CommandHandler[DeleteWorkspaceCommandType],
) (WorkspacesService, error) {
	var bus cqrs.SampleBus
	if err := bus.RegisterQuery(listWorkspacesHandler); err != nil {
		return nil, err
	}
	if err := bus.RegisterQuery(getWorkspaceHandler); err != nil {
		return nil, err
	}
	if err := bus.RegisterQuery(createWorkspaceHandler); err != nil {
		return nil, err
	}
	if err := bus.RegisterQuery(updateWorkspaceHandler); err != nil {
		return nil, err
	}
	if err := bus.RegisterCommand(deleteWorkspaceHandler); err != nil {
		return nil, err
	}
	return &workspacesCqrsService[
		ListWorkspacesQueryType, ListWorkspacesResultType,
		GetWorkspaceQueryType, GetWorkspaceResultType,
		CreateWorkspaceQueryType, CreateWorkspaceResultType,
		UpdateWorkspaceQueryType, UpdateWorkspaceResultType,
		DeleteWorkspaceCommandType,
	]{bus: &bus}, nil
}

type workspacesCqrsService[
	ListWorkspacesQueryType ListWorkspacesQuery, ListWorkspacesResultType ListWorkspacesResult,
	GetWorkspaceQueryType GetWorkspaceQuery, GetWorkspaceResultType GetWorkspaceResult,
	CreateWorkspaceQueryType CreateWorkspaceQuery, CreateWorkspaceResultType CreateWorkspaceResult,
	UpdateWorkspaceQueryType UpdateWorkspaceQuery, UpdateWorkspaceResultType UpdateWorkspaceResult,
	DeleteWorkspaceCommandType DeleteWorkspaceCommand,
] struct {
	bus cqrs.Bus
}

func (svc *workspacesCqrsService[
	ListWorkspacesQueryType, ListWorkspacesResultType,
	GetWorkspaceQueryType, GetWorkspaceResultType,
	CreateWorkspaceQueryType, CreateWorkspaceResultType,
	UpdateWorkspaceQueryType, UpdateWorkspaceResultType,
	DeleteWorkspaceCommandType,
]) ListWorkspaces(ctx context.Context, request *ListWorkspacesRequest) (*ListWorkspacesResponse, error) {
	var query ListWorkspacesQueryType
	q, ctx, err := query.From(ctx, request)
	if err != nil {
		return nil, err
	}
	r, err := svc.bus.Query(ctx, q)
	if err != nil {
		return nil, err
	}
	return r.(ListWorkspacesResultType).To(ctx)
}

func (svc *workspacesCqrsService[
	ListWorkspacesQueryType, ListWorkspacesResultType,
	GetWorkspaceQueryType, GetWorkspaceResultType,
	CreateWorkspaceQueryType, CreateWorkspaceResultType,
	UpdateWorkspaceQueryType, UpdateWorkspaceResultType,
	DeleteWorkspaceCommandType,
]) GetWorkspace(ctx context.Context, request *GetWorkspaceRequest) (*Workspace, error) {
	var query GetWorkspaceQueryType
	q, ctx, err := query.From(ctx, request)
	if err != nil {
		return nil, err
	}
	r, err := svc.bus.Query(ctx, q)
	if err != nil {
		return nil, err
	}
	return r.(GetWorkspaceResultType).To(ctx)
}

func (svc *workspacesCqrsService[
	ListWorkspacesQueryType, ListWorkspacesResultType,
	GetWorkspaceQueryType, GetWorkspaceResultType,
	CreateWorkspaceQueryType, CreateWorkspaceResultType,
	UpdateWorkspaceQueryType, UpdateWorkspaceResultType,
	DeleteWorkspaceCommandType,
]) CreateWorkspace(ctx context.Context, request *CreateWorkspaceRequest) (*Workspace, error) {
	var query CreateWorkspaceQueryType
	q, ctx, err := query.From(ctx, request)
	if err != nil {
		return nil, err
	}
	r, err := svc.bus.Query(ctx, q)
	if err != nil {
		return nil, err
	}
	return r.(CreateWorkspaceResultType).To(ctx)
}

func (svc *workspacesCqrsService[
	ListWorkspacesQueryType, ListWorkspacesResultType,
	GetWorkspaceQueryType, GetWorkspaceResultType,
	CreateWorkspaceQueryType, CreateWorkspaceResultType,
	UpdateWorkspaceQueryType, UpdateWorkspaceResultType,
	DeleteWorkspaceCommandType,
]) UpdateWorkspace(ctx context.Context, request *UpdateWorkspaceRequest) (*Workspace, error) {
	var query UpdateWorkspaceQueryType
	q, ctx, err := query.From(ctx, request)
	if err != nil {
		return nil, err
	}
	r, err := svc.bus.Query(ctx, q)
	if err != nil {
		return nil, err
	}
	return r.(UpdateWorkspaceResultType).To(ctx)
}

func (svc *workspacesCqrsService[
	ListWorkspacesQueryType, ListWorkspacesResultType,
	GetWorkspaceQueryType, GetWorkspaceResultType,
	CreateWorkspaceQueryType, CreateWorkspaceResultType,
	UpdateWorkspaceQueryType, UpdateWorkspaceResultType,
	DeleteWorkspaceCommandType,
]) DeleteWorkspace(ctx context.Context, request *DeleteWorkspaceRequest) (*emptypb.Empty, error) {
	var command DeleteWorkspaceCommandType
	cmd, ctx, err := command.From(ctx, request)
	if err != nil {
		return nil, err
	}
	if err := svc.bus.Exec(ctx, cmd); err != nil {
		return nil, err
	}
	return new(emptypb.Empty), nil
}

type (
	DeleteWorkspaceCommand interface {
		isDeleteWorkspaceCommand_Kind()
		From(context.Context, *DeleteWorkspaceRequest) (DeleteWorkspaceCommand, context.Context, error)
	}
	UnimplementedDeleteWorkspaceCommand struct{}
)

type (
	ListWorkspacesQuery interface {
		isListWorkspacesQuery_Kind()
		From(context.Context, *ListWorkspacesRequest) (ListWorkspacesQuery, context.Context, error)
	}
	ListWorkspacesResult interface {
		isListWorkspacesResult_Kind()
		To(context.Context) (*ListWorkspacesResponse, error)
	}
	UnimplementedListWorkspacesQuery  struct{}
	UnimplementedListWorkspacesResult struct{}

	GetWorkspaceQuery interface {
		isGetWorkspaceQuery_Kind()
		From(context.Context, *GetWorkspaceRequest) (GetWorkspaceQuery, context.Context, error)
	}
	GetWorkspaceResult interface {
		isGetWorkspaceResult_Kind()
		To(context.Context) (*Workspace, error)
	}
	UnimplementedGetWorkspaceQuery  struct{}
	UnimplementedGetWorkspaceResult struct{}

	CreateWorkspaceQuery interface {
		isCreateWorkspaceQuery_Kind()
		From(context.Context, *CreateWorkspaceRequest) (CreateWorkspaceQuery, context.Context, error)
	}
	CreateWorkspaceResult interface {
		isCreateWorkspaceResult_Kind()
		To(context.Context) (*Workspace, error)
	}
	UnimplementedCreateWorkspaceQuery  struct{}
	UnimplementedCreateWorkspaceResult struct{}

	UpdateWorkspaceQuery interface {
		isUpdateWorkspaceQuery_Kind()
		From(context.Context, *UpdateWorkspaceRequest) (UpdateWorkspaceQuery, context.Context, error)
	}
	UpdateWorkspaceResult interface {
		isUpdateWorkspaceResult_Kind()
		To(context.Context) (*Workspace, error)
	}
	UnimplementedUpdateWorkspaceQuery  struct{}
	UnimplementedUpdateWorkspaceResult struct{}
)

func (UnimplementedDeleteWorkspaceCommand) isDeleteWorkspaceCommand_Kind() {}
func (UnimplementedDeleteWorkspaceCommand) From(context.Context, *DeleteWorkspaceRequest) (DeleteWorkspaceCommand, context.Context, error) {
	panic("implement me")
	return nil, nil, nil
}
func (UnimplementedListWorkspacesQuery) isListWorkspacesQuery_Kind() {}
func (UnimplementedListWorkspacesQuery) From(context.Context, *ListWorkspacesRequest) (ListWorkspacesQuery, context.Context, error) {
	panic("implement me")
	return nil, nil, nil
}
func (UnimplementedListWorkspacesResult) isListWorkspacesResult_Kind() {}
func (UnimplementedListWorkspacesResult) To(context.Context) (*ListWorkspacesResponse, error) {
	panic("implement me")
	return nil, nil
}

func (UnimplementedGetWorkspaceQuery) isGetWorkspaceQuery_Kind() {}
func (UnimplementedGetWorkspaceQuery) From(context.Context, *GetWorkspaceRequest) (GetWorkspaceQuery, context.Context, error) {
	panic("implement me")
	return nil, nil, nil
}
func (UnimplementedGetWorkspaceResult) isGetWorkspaceResult_Kind() {}
func (UnimplementedGetWorkspaceResult) To(context.Context) (*Workspace, error) {
	panic("implement me")
	return nil, nil
}

func (UnimplementedCreateWorkspaceQuery) isCreateWorkspaceQuery_Kind() {}
func (UnimplementedCreateWorkspaceQuery) From(context.Context, *CreateWorkspaceRequest) (CreateWorkspaceQuery, context.Context, error) {
	panic("implement me")
	return nil, nil, nil
}
func (UnimplementedCreateWorkspaceResult) isCreateWorkspaceResult_Kind() {}
func (UnimplementedCreateWorkspaceResult) To(context.Context) (*Workspace, error) {
	panic("implement me")
	return nil, nil
}

func (UnimplementedUpdateWorkspaceQuery) isUpdateWorkspaceQuery_Kind() {}
func (UnimplementedUpdateWorkspaceQuery) From(context.Context, *UpdateWorkspaceRequest) (UpdateWorkspaceQuery, context.Context, error) {
	panic("implement me")
	return nil, nil, nil
}
func (UnimplementedUpdateWorkspaceResult) isUpdateWorkspaceResult_Kind() {}
func (UnimplementedUpdateWorkspaceResult) To(context.Context) (*Workspace, error) {
	panic("implement me")
	return nil, nil
}

// f.File.Desc.Path(): workspace/v1/workspace.proto
// protoFilePath: /Users/stuff/Workspace/github/go-leo/leo/example/api/workspace/v1/workspace.proto<nil>
// loopPath: /Users/stuff/Workspace/github/go-leo/leo/example/api/workspace/v1/workspace.proto
// cqDirPath: /Users/stuff/Workspace/github/go-leo/leo/example/api/workspace/v1/cq
// loopPath: /Users/stuff/Workspace/github/go-leo/leo/example/api/workspace/v1
// cqDirPath: /Users/stuff/Workspace/github/go-leo/leo/example/api/workspace/cq
// loopPath: /Users/stuff/Workspace/github/go-leo/leo/example/api/workspace
// cqDirPath: /Users/stuff/Workspace/github/go-leo/leo/example/api/cq
// loopPath: /Users/stuff/Workspace/github/go-leo/leo/example/api
// cqDirPath: /Users/stuff/Workspace/github/go-leo/leo/example/cq
// -- cqDirPath: /Users/stuff/Workspace/github/go-leo/leo/example/cq
// loopPath: /Users/stuff/Workspace/github/go-leo/leo/example
// goMode.Module.Mod.Path: github.com/go-leo/leo/v3
// loopPath: /Users/stuff/Workspace/github/go-leo/leo
// loopPath: /Users/stuff/Workspace/github/go-leo
// loopPath: /Users/stuff/Workspace/github
// loopPath: /Users/stuff/Workspace
// loopPath: /Users/stuff
// loopPath: /Users
// loopPath: /
// rel: ../../../cq
// cmdFilename: ../../../cq/list_workspaces_leo.command.pb.go
