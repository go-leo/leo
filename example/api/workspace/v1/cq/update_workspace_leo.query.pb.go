// Code generated by protoc-gen-go-leo. DO NOT EDIT.
// If you want edit it, can move this file to another directory.

package cq

import (
	context "context"
	cqrs "github.com/go-leo/leo/v3/cqrs"
	v1 "github.com/go-leo/leo/v3/example/api/workspace/v1"
)

var _ UpdateWorkspaceHandler = (*updateWorkspaceHandler)(nil)

type UpdateWorkspaceHandler cqrs.QueryHandler[UpdateWorkspaceQuery, UpdateWorkspaceResult]

type UpdateWorkspaceQuery struct {
	v1.UnimplementedUpdateWorkspaceQuery
}

func (UpdateWorkspaceQuery) From(ctx context.Context, req *v1.UpdateWorkspaceRequest) (v1.UpdateWorkspaceQuery, context.Context, error) {
	panic("implement me")
	return UpdateWorkspaceQuery{}, ctx, nil
}

type UpdateWorkspaceResult struct {
	v1.UnimplementedUpdateWorkspaceResult
}

func (r UpdateWorkspaceResult) To(ctx context.Context) (*v1.Workspace, error) {
	panic("implement me")
	return &v1.Workspace{}, nil
}

func NewUpdateWorkspaceHandler() UpdateWorkspaceHandler {
	return &updateWorkspaceHandler{}
}

type updateWorkspaceHandler struct {
}

func (h *updateWorkspaceHandler) Handle(ctx context.Context, q UpdateWorkspaceQuery) (UpdateWorkspaceResult, error) {
	// TODO implement me
	panic("implement me")
}
