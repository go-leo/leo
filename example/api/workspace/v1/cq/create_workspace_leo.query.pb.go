// Code generated by protoc-gen-go-leo. DO NOT EDIT.
// If you want edit it, can move this file to another directory.

package cq

import (
	context "context"
	cqrs "github.com/go-leo/leo/v3/cqrs"
	v1 "github.com/go-leo/leo/v3/example/api/workspace/v1"
)

var _ CreateWorkspaceHandler = (*createWorkspaceHandler)(nil)

type CreateWorkspaceHandler cqrs.QueryHandler[CreateWorkspaceQuery, CreateWorkspaceResult]

type CreateWorkspaceQuery struct {
	v1.UnimplementedCreateWorkspaceQuery
}

func (CreateWorkspaceQuery) From(ctx context.Context, req *v1.CreateWorkspaceRequest) (v1.CreateWorkspaceQuery, context.Context, error) {
	panic("implement me")
	return CreateWorkspaceQuery{}, ctx, nil
}

type CreateWorkspaceResult struct {
	v1.UnimplementedCreateWorkspaceResult
}

func (r CreateWorkspaceResult) To(ctx context.Context) (*v1.Workspace, error) {
	panic("implement me")
	return &v1.Workspace{}, nil
}

func NewCreateWorkspaceHandler() CreateWorkspaceHandler {
	return &createWorkspaceHandler{}
}

type createWorkspaceHandler struct {
}

func (h *createWorkspaceHandler) Handle(ctx context.Context, q CreateWorkspaceQuery) (CreateWorkspaceResult, error) {
	// TODO implement me
	panic("implement me")
}
