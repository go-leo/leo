// Code generated by protoc-gen-leo-http. DO NOT EDIT.

package endpointsapis

import (
	bytes "bytes"
	context "context"
	fmt "fmt"
	endpoint "github.com/go-kit/kit/endpoint"
	http "github.com/go-kit/kit/transport/http"
	jsonx "github.com/go-leo/gox/encodingx/jsonx"
	errorx "github.com/go-leo/gox/errorx"
	urlx "github.com/go-leo/gox/netx/urlx"
	strconvx "github.com/go-leo/gox/strconvx"
	endpointx "github.com/go-leo/leo/v3/endpointx"
	statusx "github.com/go-leo/leo/v3/statusx"
	httpx "github.com/go-leo/leo/v3/transportx/httpx"
	mux "github.com/gorilla/mux"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	io "io"
	http1 "net/http"
	url "net/url"
	strings "strings"
)

// =========================== http router ===========================

func appendWorkspacesHttpRoutes(router *mux.Router) *mux.Router {
	router.NewRoute().Name("/google.example.endpointsapis.v1.Workspaces/ListWorkspaces").Methods("GET").Path("/v1/projects/{project}/locations/{location}/workspaces")
	router.NewRoute().Name("/google.example.endpointsapis.v1.Workspaces/GetWorkspace").Methods("GET").Path("/v1/projects/{project}/locations/{location}/workspaces/{workspac}")
	router.NewRoute().Name("/google.example.endpointsapis.v1.Workspaces/CreateWorkspace").Methods("POST").Path("/v1/projects/{project}/locations/{location}/workspaces")
	router.NewRoute().Name("/google.example.endpointsapis.v1.Workspaces/UpdateWorkspace").Methods("PATCH").Path("/v1/projects/{project}/locations/{location}/Workspaces/{Workspac}")
	router.NewRoute().Name("/google.example.endpointsapis.v1.Workspaces/DeleteWorkspace").Methods("DELETE").Path("/v1/projects/{project}/locations/{location}/workspaces/{workspac}")
	return router
}

// =========================== http server ===========================

type WorkspacesHttpServerRequestDecoder interface {
	ListWorkspaces() http.DecodeRequestFunc
	GetWorkspace() http.DecodeRequestFunc
	CreateWorkspace() http.DecodeRequestFunc
	UpdateWorkspace() http.DecodeRequestFunc
	DeleteWorkspace() http.DecodeRequestFunc
}

type WorkspacesHttpServerResponseEncoder interface {
	ListWorkspaces() http.EncodeResponseFunc
	GetWorkspace() http.EncodeResponseFunc
	CreateWorkspace() http.EncodeResponseFunc
	UpdateWorkspace() http.EncodeResponseFunc
	DeleteWorkspace() http.EncodeResponseFunc
}

type workspacesHttpServerTransports struct {
	endpoints       WorkspacesServerEndpoints
	requestDecoder  WorkspacesHttpServerRequestDecoder
	responseEncoder WorkspacesHttpServerResponseEncoder
}

func (t *workspacesHttpServerTransports) ListWorkspaces() http1.Handler {
	return http.NewServer(
		t.endpoints.ListWorkspaces(context.TODO()),
		t.requestDecoder.ListWorkspaces(),
		t.responseEncoder.ListWorkspaces(),
		http.ServerBefore(httpx.EndpointInjector("/google.example.endpointsapis.v1.Workspaces/ListWorkspaces")),
		http.ServerBefore(httpx.ServerTransportInjector),
		http.ServerBefore(httpx.IncomingMetadataInjector),
		http.ServerBefore(httpx.IncomingTimeLimitInjector),
		http.ServerBefore(httpx.IncomingStainInjector),
		http.ServerFinalizer(httpx.CancelInvoker),
		http.ServerErrorEncoder(httpx.ErrorEncoder),
	)
}

func (t *workspacesHttpServerTransports) GetWorkspace() http1.Handler {
	return http.NewServer(
		t.endpoints.GetWorkspace(context.TODO()),
		t.requestDecoder.GetWorkspace(),
		t.responseEncoder.GetWorkspace(),
		http.ServerBefore(httpx.EndpointInjector("/google.example.endpointsapis.v1.Workspaces/GetWorkspace")),
		http.ServerBefore(httpx.ServerTransportInjector),
		http.ServerBefore(httpx.IncomingMetadataInjector),
		http.ServerBefore(httpx.IncomingTimeLimitInjector),
		http.ServerBefore(httpx.IncomingStainInjector),
		http.ServerFinalizer(httpx.CancelInvoker),
		http.ServerErrorEncoder(httpx.ErrorEncoder),
	)
}

func (t *workspacesHttpServerTransports) CreateWorkspace() http1.Handler {
	return http.NewServer(
		t.endpoints.CreateWorkspace(context.TODO()),
		t.requestDecoder.CreateWorkspace(),
		t.responseEncoder.CreateWorkspace(),
		http.ServerBefore(httpx.EndpointInjector("/google.example.endpointsapis.v1.Workspaces/CreateWorkspace")),
		http.ServerBefore(httpx.ServerTransportInjector),
		http.ServerBefore(httpx.IncomingMetadataInjector),
		http.ServerBefore(httpx.IncomingTimeLimitInjector),
		http.ServerBefore(httpx.IncomingStainInjector),
		http.ServerFinalizer(httpx.CancelInvoker),
		http.ServerErrorEncoder(httpx.ErrorEncoder),
	)
}

func (t *workspacesHttpServerTransports) UpdateWorkspace() http1.Handler {
	return http.NewServer(
		t.endpoints.UpdateWorkspace(context.TODO()),
		t.requestDecoder.UpdateWorkspace(),
		t.responseEncoder.UpdateWorkspace(),
		http.ServerBefore(httpx.EndpointInjector("/google.example.endpointsapis.v1.Workspaces/UpdateWorkspace")),
		http.ServerBefore(httpx.ServerTransportInjector),
		http.ServerBefore(httpx.IncomingMetadataInjector),
		http.ServerBefore(httpx.IncomingTimeLimitInjector),
		http.ServerBefore(httpx.IncomingStainInjector),
		http.ServerFinalizer(httpx.CancelInvoker),
		http.ServerErrorEncoder(httpx.ErrorEncoder),
	)
}

func (t *workspacesHttpServerTransports) DeleteWorkspace() http1.Handler {
	return http.NewServer(
		t.endpoints.DeleteWorkspace(context.TODO()),
		t.requestDecoder.DeleteWorkspace(),
		t.responseEncoder.DeleteWorkspace(),
		http.ServerBefore(httpx.EndpointInjector("/google.example.endpointsapis.v1.Workspaces/DeleteWorkspace")),
		http.ServerBefore(httpx.ServerTransportInjector),
		http.ServerBefore(httpx.IncomingMetadataInjector),
		http.ServerBefore(httpx.IncomingTimeLimitInjector),
		http.ServerBefore(httpx.IncomingStainInjector),
		http.ServerFinalizer(httpx.CancelInvoker),
		http.ServerErrorEncoder(httpx.ErrorEncoder),
	)
}

func AppendWorkspacesHttpRoutes(router *mux.Router, svc WorkspacesService, middlewares ...endpoint.Middleware) *mux.Router {
	endpoints := newWorkspacesServerEndpoints(svc, middlewares...)
	transports := &workspacesHttpServerTransports{
		endpoints:       endpoints,
		requestDecoder:  workspacesHttpServerRequestDecoder{},
		responseEncoder: workspacesHttpServerResponseEncoder{},
	}
	router = appendWorkspacesHttpRoutes(router)
	router.Get("/google.example.endpointsapis.v1.Workspaces/ListWorkspaces").Handler(transports.ListWorkspaces())
	router.Get("/google.example.endpointsapis.v1.Workspaces/GetWorkspace").Handler(transports.GetWorkspace())
	router.Get("/google.example.endpointsapis.v1.Workspaces/CreateWorkspace").Handler(transports.CreateWorkspace())
	router.Get("/google.example.endpointsapis.v1.Workspaces/UpdateWorkspace").Handler(transports.UpdateWorkspace())
	router.Get("/google.example.endpointsapis.v1.Workspaces/DeleteWorkspace").Handler(transports.DeleteWorkspace())
	return router
}

// =========================== http client ===========================

type workspacesHttpClientTransports struct {
	scheme        string
	router        *mux.Router
	clientOptions []http.ClientOption
	middlewares   []endpoint.Middleware
}

func (t *workspacesHttpClientTransports) ListWorkspaces(ctx context.Context, instance string) (endpoint.Endpoint, io.Closer, error) {
	opts := []http.ClientOption{
		http.ClientBefore(httpx.OutgoingMetadataInjector),
		http.ClientBefore(httpx.OutgoingTimeLimitInjector),
		http.ClientBefore(httpx.OutgoingStainInjector),
	}
	opts = append(opts, t.clientOptions...)
	client := http.NewExplicitClient(
		_Workspaces_ListWorkspaces_HttpClient_RequestEncoder(t.router)(t.scheme, instance),
		_Workspaces_ListWorkspaces_HttpClient_ResponseDecoder,
		opts...,
	)
	return endpointx.Chain(client.Endpoint(), t.middlewares...), nil, nil
}

func (t *workspacesHttpClientTransports) GetWorkspace(ctx context.Context, instance string) (endpoint.Endpoint, io.Closer, error) {
	opts := []http.ClientOption{
		http.ClientBefore(httpx.OutgoingMetadataInjector),
		http.ClientBefore(httpx.OutgoingTimeLimitInjector),
		http.ClientBefore(httpx.OutgoingStainInjector),
	}
	opts = append(opts, t.clientOptions...)
	client := http.NewExplicitClient(
		_Workspaces_GetWorkspace_HttpClient_RequestEncoder(t.router)(t.scheme, instance),
		_Workspaces_GetWorkspace_HttpClient_ResponseDecoder,
		opts...,
	)
	return endpointx.Chain(client.Endpoint(), t.middlewares...), nil, nil
}

func (t *workspacesHttpClientTransports) CreateWorkspace(ctx context.Context, instance string) (endpoint.Endpoint, io.Closer, error) {
	opts := []http.ClientOption{
		http.ClientBefore(httpx.OutgoingMetadataInjector),
		http.ClientBefore(httpx.OutgoingTimeLimitInjector),
		http.ClientBefore(httpx.OutgoingStainInjector),
	}
	opts = append(opts, t.clientOptions...)
	client := http.NewExplicitClient(
		_Workspaces_CreateWorkspace_HttpClient_RequestEncoder(t.router)(t.scheme, instance),
		_Workspaces_CreateWorkspace_HttpClient_ResponseDecoder,
		opts...,
	)
	return endpointx.Chain(client.Endpoint(), t.middlewares...), nil, nil
}

func (t *workspacesHttpClientTransports) UpdateWorkspace(ctx context.Context, instance string) (endpoint.Endpoint, io.Closer, error) {
	opts := []http.ClientOption{
		http.ClientBefore(httpx.OutgoingMetadataInjector),
		http.ClientBefore(httpx.OutgoingTimeLimitInjector),
		http.ClientBefore(httpx.OutgoingStainInjector),
	}
	opts = append(opts, t.clientOptions...)
	client := http.NewExplicitClient(
		_Workspaces_UpdateWorkspace_HttpClient_RequestEncoder(t.router)(t.scheme, instance),
		_Workspaces_UpdateWorkspace_HttpClient_ResponseDecoder,
		opts...,
	)
	return endpointx.Chain(client.Endpoint(), t.middlewares...), nil, nil
}

func (t *workspacesHttpClientTransports) DeleteWorkspace(ctx context.Context, instance string) (endpoint.Endpoint, io.Closer, error) {
	opts := []http.ClientOption{
		http.ClientBefore(httpx.OutgoingMetadataInjector),
		http.ClientBefore(httpx.OutgoingTimeLimitInjector),
		http.ClientBefore(httpx.OutgoingStainInjector),
	}
	opts = append(opts, t.clientOptions...)
	client := http.NewExplicitClient(
		_Workspaces_DeleteWorkspace_HttpClient_RequestEncoder(t.router)(t.scheme, instance),
		_Workspaces_DeleteWorkspace_HttpClient_ResponseDecoder,
		opts...,
	)
	return endpointx.Chain(client.Endpoint(), t.middlewares...), nil, nil
}

func newWorkspacesHttpClientTransports(scheme string, clientOptions []http.ClientOption, middlewares []endpoint.Middleware) WorkspacesClientTransports {
	return &workspacesHttpClientTransports{
		scheme:        scheme,
		router:        appendWorkspacesHttpRoutes(mux.NewRouter()),
		clientOptions: clientOptions,
		middlewares:   middlewares,
	}
}

func NewWorkspacesHttpClient(target string, opts ...httpx.ClientOption) WorkspacesService {
	options := httpx.NewClientOptions(opts...)
	transports := newWorkspacesHttpClientTransports(options.Scheme(), options.ClientTransportOptions(), options.Middlewares())
	endpoints := newWorkspacesClientEndpoints(target, transports, options.InstancerFactory(), options.EndpointerOptions(), options.BalancerFactory(), options.Logger())
	return newWorkspacesClientService(endpoints, httpx.HttpClient)
}

// =========================== http coder ===========================

type workspacesHttpServerRequestDecoder struct{}

func (workspacesHttpServerRequestDecoder) ListWorkspaces() http.DecodeRequestFunc {
	return func(ctx context.Context, r *http1.Request) (any, error) {
		req := &ListWorkspacesRequest{}
		vars := urlx.FormFromMap(mux.Vars(r))
		var varErr error
		req.Parent = fmt.Sprintf("projects/%s/locations/%s", vars.Get("project"), vars.Get("location"))
		if varErr != nil {
			return nil, statusx.ErrInvalidArgument.With(statusx.Wrap(varErr))
		}
		queries := r.URL.Query()
		var queryErr error
		req.PageSize, queryErr = errorx.Break[int32](queryErr)(urlx.GetInt[int32](queries, "page_size"))
		req.PageToken = queries.Get("page_token")
		if queryErr != nil {
			return nil, statusx.ErrInvalidArgument.With(statusx.Wrap(queryErr))
		}
		return req, nil
	}
}
func (workspacesHttpServerRequestDecoder) GetWorkspace() http.DecodeRequestFunc {
	return func(ctx context.Context, r *http1.Request) (any, error) {
		req := &GetWorkspaceRequest{}
		vars := urlx.FormFromMap(mux.Vars(r))
		var varErr error
		req.Name = fmt.Sprintf("projects/%s/locations/%s/workspaces/%s", vars.Get("project"), vars.Get("location"), vars.Get("workspac"))
		if varErr != nil {
			return nil, statusx.ErrInvalidArgument.With(statusx.Wrap(varErr))
		}
		return req, nil
	}
}
func (workspacesHttpServerRequestDecoder) CreateWorkspace() http.DecodeRequestFunc {
	return func(ctx context.Context, r *http1.Request) (any, error) {
		req := &CreateWorkspaceRequest{}
		if err := jsonx.NewDecoder(r.Body).Decode(&req.Workspace); err != nil {
			return nil, statusx.ErrInvalidArgument.With(statusx.Wrap(err))
		}
		vars := urlx.FormFromMap(mux.Vars(r))
		var varErr error
		req.Parent = fmt.Sprintf("projects/%s/locations/%s", vars.Get("project"), vars.Get("location"))
		if varErr != nil {
			return nil, statusx.ErrInvalidArgument.With(statusx.Wrap(varErr))
		}
		return req, nil
	}
}
func (workspacesHttpServerRequestDecoder) UpdateWorkspace() http.DecodeRequestFunc {
	return func(ctx context.Context, r *http1.Request) (any, error) {
		req := &UpdateWorkspaceRequest{}
		if err := jsonx.NewDecoder(r.Body).Decode(&req.Workspace); err != nil {
			return nil, statusx.ErrInvalidArgument.With(statusx.Wrap(err))
		}
		vars := urlx.FormFromMap(mux.Vars(r))
		var varErr error
		req.Name = fmt.Sprintf("projects/%s/locations/%s/Workspaces/%s", vars.Get("project"), vars.Get("location"), vars.Get("Workspac"))
		if varErr != nil {
			return nil, statusx.ErrInvalidArgument.With(statusx.Wrap(varErr))
		}
		return req, nil
	}
}
func (workspacesHttpServerRequestDecoder) DeleteWorkspace() http.DecodeRequestFunc {
	return func(ctx context.Context, r *http1.Request) (any, error) {
		req := &DeleteWorkspaceRequest{}
		vars := urlx.FormFromMap(mux.Vars(r))
		var varErr error
		req.Name = fmt.Sprintf("projects/%s/locations/%s/workspaces/%s", vars.Get("project"), vars.Get("location"), vars.Get("workspac"))
		if varErr != nil {
			return nil, statusx.ErrInvalidArgument.With(statusx.Wrap(varErr))
		}
		return req, nil
	}
}

type workspacesHttpServerResponseEncoder struct{}

func (workspacesHttpServerResponseEncoder) ListWorkspaces() http.EncodeResponseFunc {
	return func(ctx context.Context, w http1.ResponseWriter, obj any) error {
		resp := obj.(*ListWorkspacesResponse)
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(http1.StatusOK)
		if err := jsonx.NewEncoder(w).Encode(resp); err != nil {
			return statusx.ErrInternal.With(statusx.Wrap(err))
		}
		return nil
	}

}
func (workspacesHttpServerResponseEncoder) GetWorkspace() http.EncodeResponseFunc {
	return func(ctx context.Context, w http1.ResponseWriter, obj any) error {
		resp := obj.(*Workspace)
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(http1.StatusOK)
		if err := jsonx.NewEncoder(w).Encode(resp); err != nil {
			return statusx.ErrInternal.With(statusx.Wrap(err))
		}
		return nil
	}

}
func (workspacesHttpServerResponseEncoder) CreateWorkspace() http.EncodeResponseFunc {
	return func(ctx context.Context, w http1.ResponseWriter, obj any) error {
		resp := obj.(*Workspace)
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(http1.StatusOK)
		if err := jsonx.NewEncoder(w).Encode(resp); err != nil {
			return statusx.ErrInternal.With(statusx.Wrap(err))
		}
		return nil
	}

}
func (workspacesHttpServerResponseEncoder) UpdateWorkspace() http.EncodeResponseFunc {
	return func(ctx context.Context, w http1.ResponseWriter, obj any) error {
		resp := obj.(*Workspace)
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(http1.StatusOK)
		if err := jsonx.NewEncoder(w).Encode(resp); err != nil {
			return statusx.ErrInternal.With(statusx.Wrap(err))
		}
		return nil
	}

}
func (workspacesHttpServerResponseEncoder) DeleteWorkspace() http.EncodeResponseFunc {
	return func(ctx context.Context, w http1.ResponseWriter, obj any) error {
		resp := obj.(*emptypb.Empty)
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(http1.StatusOK)
		if err := jsonx.NewEncoder(w).Encode(resp); err != nil {
			return statusx.ErrInternal.With(statusx.Wrap(err))
		}
		return nil
	}

}

func _Workspaces_ListWorkspaces_HttpClient_RequestEncoder(router *mux.Router) func(scheme string, instance string) http.CreateRequestFunc {
	return func(scheme string, instance string) http.CreateRequestFunc {
		return func(ctx context.Context, obj any) (*http1.Request, error) {
			if obj == nil {
				return nil, statusx.ErrInvalidArgument.With(statusx.Message("request is nil"))
			}
			req, ok := obj.(*ListWorkspacesRequest)
			if !ok {
				return nil, statusx.ErrInvalidArgument.With(statusx.Message("invalid request type, %T", obj))
			}
			_ = req
			var body io.Reader
			var pairs []string
			namedPathParameter := req.GetParent()
			namedPathValues := strings.Split(namedPathParameter, "/")
			if len(namedPathValues) != 4 {
				return nil, statusx.ErrInvalidArgument.With(statusx.Message("invalid named path parameter, %s", namedPathParameter))
			}
			pairs = append(pairs, "project", namedPathValues[1], "location", namedPathValues[3])
			path, err := router.Get("/google.example.endpointsapis.v1.Workspaces/ListWorkspaces").URLPath(pairs...)
			if err != nil {
				return nil, statusx.ErrInvalidArgument.With(statusx.Wrap(err))
			}
			queries := url.Values{}
			queries["page_size"] = append(queries["page_size"], strconvx.FormatInt(req.GetPageSize(), 10))
			queries["page_token"] = append(queries["page_token"], req.GetPageToken())
			target := &url.URL{
				Scheme:   scheme,
				Host:     instance,
				Path:     path.Path,
				RawQuery: queries.Encode(),
			}
			r, err := http1.NewRequestWithContext(ctx, "GET", target.String(), body)
			if err != nil {
				return nil, statusx.ErrInvalidArgument.With(statusx.Wrap(err))
			}
			return r, nil
		}
	}
}

func _Workspaces_ListWorkspaces_HttpClient_ResponseDecoder(ctx context.Context, r *http1.Response) (any, error) {
	if httpx.IsErrorResponse(r) {
		return nil, httpx.ErrorDecoder(ctx, r)
	}
	resp := &ListWorkspacesResponse{}
	if err := jsonx.NewDecoder(r.Body).Decode(resp); err != nil {
		return nil, err
	}
	return resp, nil
}

func _Workspaces_GetWorkspace_HttpClient_RequestEncoder(router *mux.Router) func(scheme string, instance string) http.CreateRequestFunc {
	return func(scheme string, instance string) http.CreateRequestFunc {
		return func(ctx context.Context, obj any) (*http1.Request, error) {
			if obj == nil {
				return nil, statusx.ErrInvalidArgument.With(statusx.Message("request is nil"))
			}
			req, ok := obj.(*GetWorkspaceRequest)
			if !ok {
				return nil, statusx.ErrInvalidArgument.With(statusx.Message("invalid request type, %T", obj))
			}
			_ = req
			var body io.Reader
			var pairs []string
			namedPathParameter := req.GetName()
			namedPathValues := strings.Split(namedPathParameter, "/")
			if len(namedPathValues) != 6 {
				return nil, statusx.ErrInvalidArgument.With(statusx.Message("invalid named path parameter, %s", namedPathParameter))
			}
			pairs = append(pairs, "project", namedPathValues[1], "location", namedPathValues[3], "workspac", namedPathValues[5])
			path, err := router.Get("/google.example.endpointsapis.v1.Workspaces/GetWorkspace").URLPath(pairs...)
			if err != nil {
				return nil, statusx.ErrInvalidArgument.With(statusx.Wrap(err))
			}
			queries := url.Values{}
			target := &url.URL{
				Scheme:   scheme,
				Host:     instance,
				Path:     path.Path,
				RawQuery: queries.Encode(),
			}
			r, err := http1.NewRequestWithContext(ctx, "GET", target.String(), body)
			if err != nil {
				return nil, statusx.ErrInvalidArgument.With(statusx.Wrap(err))
			}
			return r, nil
		}
	}
}

func _Workspaces_GetWorkspace_HttpClient_ResponseDecoder(ctx context.Context, r *http1.Response) (any, error) {
	if httpx.IsErrorResponse(r) {
		return nil, httpx.ErrorDecoder(ctx, r)
	}
	resp := &Workspace{}
	if err := jsonx.NewDecoder(r.Body).Decode(resp); err != nil {
		return nil, err
	}
	return resp, nil
}

func _Workspaces_CreateWorkspace_HttpClient_RequestEncoder(router *mux.Router) func(scheme string, instance string) http.CreateRequestFunc {
	return func(scheme string, instance string) http.CreateRequestFunc {
		return func(ctx context.Context, obj any) (*http1.Request, error) {
			if obj == nil {
				return nil, statusx.ErrInvalidArgument.With(statusx.Message("request is nil"))
			}
			req, ok := obj.(*CreateWorkspaceRequest)
			if !ok {
				return nil, statusx.ErrInvalidArgument.With(statusx.Message("invalid request type, %T", obj))
			}
			_ = req
			var body io.Reader
			var bodyBuf bytes.Buffer
			if err := jsonx.NewEncoder(&bodyBuf).Encode(req.GetWorkspace()); err != nil {
				return nil, statusx.ErrInvalidArgument.With(statusx.Wrap(err))
			}
			body = &bodyBuf
			contentType := "application/json; charset=utf-8"
			var pairs []string
			namedPathParameter := req.GetParent()
			namedPathValues := strings.Split(namedPathParameter, "/")
			if len(namedPathValues) != 4 {
				return nil, statusx.ErrInvalidArgument.With(statusx.Message("invalid named path parameter, %s", namedPathParameter))
			}
			pairs = append(pairs, "project", namedPathValues[1], "location", namedPathValues[3])
			path, err := router.Get("/google.example.endpointsapis.v1.Workspaces/CreateWorkspace").URLPath(pairs...)
			if err != nil {
				return nil, statusx.ErrInvalidArgument.With(statusx.Wrap(err))
			}
			queries := url.Values{}
			target := &url.URL{
				Scheme:   scheme,
				Host:     instance,
				Path:     path.Path,
				RawQuery: queries.Encode(),
			}
			r, err := http1.NewRequestWithContext(ctx, "POST", target.String(), body)
			if err != nil {
				return nil, statusx.ErrInvalidArgument.With(statusx.Wrap(err))
			}
			r.Header.Set("Content-Type", contentType)
			return r, nil
		}
	}
}

func _Workspaces_CreateWorkspace_HttpClient_ResponseDecoder(ctx context.Context, r *http1.Response) (any, error) {
	if httpx.IsErrorResponse(r) {
		return nil, httpx.ErrorDecoder(ctx, r)
	}
	resp := &Workspace{}
	if err := jsonx.NewDecoder(r.Body).Decode(resp); err != nil {
		return nil, err
	}
	return resp, nil
}

func _Workspaces_UpdateWorkspace_HttpClient_RequestEncoder(router *mux.Router) func(scheme string, instance string) http.CreateRequestFunc {
	return func(scheme string, instance string) http.CreateRequestFunc {
		return func(ctx context.Context, obj any) (*http1.Request, error) {
			if obj == nil {
				return nil, statusx.ErrInvalidArgument.With(statusx.Message("request is nil"))
			}
			req, ok := obj.(*UpdateWorkspaceRequest)
			if !ok {
				return nil, statusx.ErrInvalidArgument.With(statusx.Message("invalid request type, %T", obj))
			}
			_ = req
			var body io.Reader
			var bodyBuf bytes.Buffer
			if err := jsonx.NewEncoder(&bodyBuf).Encode(req.GetWorkspace()); err != nil {
				return nil, statusx.ErrInvalidArgument.With(statusx.Wrap(err))
			}
			body = &bodyBuf
			contentType := "application/json; charset=utf-8"
			var pairs []string
			namedPathParameter := req.GetName()
			namedPathValues := strings.Split(namedPathParameter, "/")
			if len(namedPathValues) != 6 {
				return nil, statusx.ErrInvalidArgument.With(statusx.Message("invalid named path parameter, %s", namedPathParameter))
			}
			pairs = append(pairs, "project", namedPathValues[1], "location", namedPathValues[3], "Workspac", namedPathValues[5])
			path, err := router.Get("/google.example.endpointsapis.v1.Workspaces/UpdateWorkspace").URLPath(pairs...)
			if err != nil {
				return nil, statusx.ErrInvalidArgument.With(statusx.Wrap(err))
			}
			queries := url.Values{}
			target := &url.URL{
				Scheme:   scheme,
				Host:     instance,
				Path:     path.Path,
				RawQuery: queries.Encode(),
			}
			r, err := http1.NewRequestWithContext(ctx, "PATCH", target.String(), body)
			if err != nil {
				return nil, statusx.ErrInvalidArgument.With(statusx.Wrap(err))
			}
			r.Header.Set("Content-Type", contentType)
			return r, nil
		}
	}
}

func _Workspaces_UpdateWorkspace_HttpClient_ResponseDecoder(ctx context.Context, r *http1.Response) (any, error) {
	if httpx.IsErrorResponse(r) {
		return nil, httpx.ErrorDecoder(ctx, r)
	}
	resp := &Workspace{}
	if err := jsonx.NewDecoder(r.Body).Decode(resp); err != nil {
		return nil, err
	}
	return resp, nil
}

func _Workspaces_DeleteWorkspace_HttpClient_RequestEncoder(router *mux.Router) func(scheme string, instance string) http.CreateRequestFunc {
	return func(scheme string, instance string) http.CreateRequestFunc {
		return func(ctx context.Context, obj any) (*http1.Request, error) {
			if obj == nil {
				return nil, statusx.ErrInvalidArgument.With(statusx.Message("request is nil"))
			}
			req, ok := obj.(*DeleteWorkspaceRequest)
			if !ok {
				return nil, statusx.ErrInvalidArgument.With(statusx.Message("invalid request type, %T", obj))
			}
			_ = req
			var body io.Reader
			var pairs []string
			namedPathParameter := req.GetName()
			namedPathValues := strings.Split(namedPathParameter, "/")
			if len(namedPathValues) != 6 {
				return nil, statusx.ErrInvalidArgument.With(statusx.Message("invalid named path parameter, %s", namedPathParameter))
			}
			pairs = append(pairs, "project", namedPathValues[1], "location", namedPathValues[3], "workspac", namedPathValues[5])
			path, err := router.Get("/google.example.endpointsapis.v1.Workspaces/DeleteWorkspace").URLPath(pairs...)
			if err != nil {
				return nil, statusx.ErrInvalidArgument.With(statusx.Wrap(err))
			}
			queries := url.Values{}
			target := &url.URL{
				Scheme:   scheme,
				Host:     instance,
				Path:     path.Path,
				RawQuery: queries.Encode(),
			}
			r, err := http1.NewRequestWithContext(ctx, "DELETE", target.String(), body)
			if err != nil {
				return nil, statusx.ErrInvalidArgument.With(statusx.Wrap(err))
			}
			return r, nil
		}
	}
}

func _Workspaces_DeleteWorkspace_HttpClient_ResponseDecoder(ctx context.Context, r *http1.Response) (any, error) {
	if httpx.IsErrorResponse(r) {
		return nil, httpx.ErrorDecoder(ctx, r)
	}
	resp := &emptypb.Empty{}
	if err := jsonx.NewDecoder(r.Body).Decode(resp); err != nil {
		return nil, err
	}
	return resp, nil
}
