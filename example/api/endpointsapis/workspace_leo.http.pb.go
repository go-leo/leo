// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package endpointsapis

import (
	bytes "bytes"
	context "context"
	errors "errors"
	fmt "fmt"
	endpoint "github.com/go-kit/kit/endpoint"
	http "github.com/go-kit/kit/transport/http"
	jsonx "github.com/go-leo/gox/encodingx/jsonx"
	errorx "github.com/go-leo/gox/errorx"
	urlx "github.com/go-leo/gox/netx/urlx"
	strconvx "github.com/go-leo/gox/strconvx"
	endpointx "github.com/go-leo/leo/v3/endpointx"
	mux "github.com/gorilla/mux"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	io "io"
	http1 "net/http"
	url "net/url"
	strings "strings"
)

func NewWorkspacesHTTPServer(
	endpoints interface {
		ListWorkspaces() endpoint.Endpoint
		GetWorkspace() endpoint.Endpoint
		CreateWorkspace() endpoint.Endpoint
		UpdateWorkspace() endpoint.Endpoint
		DeleteWorkspace() endpoint.Endpoint
	},
	opts []http.ServerOption,
	mdw ...endpoint.Middleware,
) http1.Handler {
	router := mux.NewRouter()
	router.NewRoute().
		Name("/google.example.endpointsapis.v1.Workspaces/ListWorkspaces").
		Methods("GET").
		Path("/v1/projects/{project}/locations/{location}/workspaces").
		Handler(http.NewServer(
			endpointx.Chain(endpoints.ListWorkspaces(), mdw...),
			func(ctx context.Context, r *http1.Request) (any, error) {
				req := &ListWorkspacesRequest{}
				vars := urlx.FormFromMap(mux.Vars(r))
				var varErr error
				req.Parent = fmt.Sprintf("projects/%s/locations/%s", vars.Get("project"), vars.Get("location"))
				if varErr != nil {
					return nil, varErr
				}
				queries := r.URL.Query()
				var queryErr error
				req.PageSize, queryErr = errorx.Break[int32](queryErr)(urlx.GetInt[int32](queries, "page_size"))
				req.PageToken = queries.Get("page_token")
				if queryErr != nil {
					return nil, queryErr
				}
				return req, nil
			},
			func(ctx context.Context, w http1.ResponseWriter, obj any) error {
				resp := obj.(*ListWorkspacesResponse)
				w.WriteHeader(http1.StatusOK)
				w.Header().Set("Content-Type", "application/json; charset=utf-8")
				if err := jsonx.NewEncoder(w).Encode(resp); err != nil {
					return err
				}
				return nil
			},
			opts...,
		))
	router.NewRoute().
		Name("/google.example.endpointsapis.v1.Workspaces/GetWorkspace").
		Methods("GET").
		Path("/v1/projects/{project}/locations/{location}/workspaces/{workspac}").
		Handler(http.NewServer(
			endpointx.Chain(endpoints.GetWorkspace(), mdw...),
			func(ctx context.Context, r *http1.Request) (any, error) {
				req := &GetWorkspaceRequest{}
				vars := urlx.FormFromMap(mux.Vars(r))
				var varErr error
				req.Name = fmt.Sprintf("projects/%s/locations/%s/workspaces/%s", vars.Get("project"), vars.Get("location"), vars.Get("workspac"))
				if varErr != nil {
					return nil, varErr
				}
				return req, nil
			},
			func(ctx context.Context, w http1.ResponseWriter, obj any) error {
				resp := obj.(*Workspace)
				w.WriteHeader(http1.StatusOK)
				w.Header().Set("Content-Type", "application/json; charset=utf-8")
				if err := jsonx.NewEncoder(w).Encode(resp); err != nil {
					return err
				}
				return nil
			},
			opts...,
		))
	router.NewRoute().
		Name("/google.example.endpointsapis.v1.Workspaces/CreateWorkspace").
		Methods("POST").
		Path("/v1/projects/{project}/locations/{location}/workspaces").
		Handler(http.NewServer(
			endpointx.Chain(endpoints.CreateWorkspace(), mdw...),
			func(ctx context.Context, r *http1.Request) (any, error) {
				req := &CreateWorkspaceRequest{}
				if err := jsonx.NewDecoder(r.Body).Decode(req.Workspace); err != nil {
					return nil, err
				}
				vars := urlx.FormFromMap(mux.Vars(r))
				var varErr error
				req.Parent = fmt.Sprintf("projects/%s/locations/%s", vars.Get("project"), vars.Get("location"))
				if varErr != nil {
					return nil, varErr
				}
				return req, nil
			},
			func(ctx context.Context, w http1.ResponseWriter, obj any) error {
				resp := obj.(*Workspace)
				w.WriteHeader(http1.StatusOK)
				w.Header().Set("Content-Type", "application/json; charset=utf-8")
				if err := jsonx.NewEncoder(w).Encode(resp); err != nil {
					return err
				}
				return nil
			},
			opts...,
		))
	router.NewRoute().
		Name("/google.example.endpointsapis.v1.Workspaces/UpdateWorkspace").
		Methods("PATCH").
		Path("/v1/projects/{project}/locations/{location}/Workspaces/{Workspac}").
		Handler(http.NewServer(
			endpointx.Chain(endpoints.UpdateWorkspace(), mdw...),
			func(ctx context.Context, r *http1.Request) (any, error) {
				req := &UpdateWorkspaceRequest{}
				if err := jsonx.NewDecoder(r.Body).Decode(req.Workspace); err != nil {
					return nil, err
				}
				vars := urlx.FormFromMap(mux.Vars(r))
				var varErr error
				req.Name = fmt.Sprintf("projects/%s/locations/%s/Workspaces/%s", vars.Get("project"), vars.Get("location"), vars.Get("Workspac"))
				if varErr != nil {
					return nil, varErr
				}
				return req, nil
			},
			func(ctx context.Context, w http1.ResponseWriter, obj any) error {
				resp := obj.(*Workspace)
				w.WriteHeader(http1.StatusOK)
				w.Header().Set("Content-Type", "application/json; charset=utf-8")
				if err := jsonx.NewEncoder(w).Encode(resp); err != nil {
					return err
				}
				return nil
			},
			opts...,
		))
	router.NewRoute().
		Name("/google.example.endpointsapis.v1.Workspaces/DeleteWorkspace").
		Methods("DELETE").
		Path("/v1/projects/{project}/locations/{location}/workspaces/{workspac}").
		Handler(http.NewServer(
			endpointx.Chain(endpoints.DeleteWorkspace(), mdw...),
			func(ctx context.Context, r *http1.Request) (any, error) {
				req := &DeleteWorkspaceRequest{}
				vars := urlx.FormFromMap(mux.Vars(r))
				var varErr error
				req.Name = fmt.Sprintf("projects/%s/locations/%s/workspaces/%s", vars.Get("project"), vars.Get("location"), vars.Get("workspac"))
				if varErr != nil {
					return nil, varErr
				}
				return req, nil
			},
			func(ctx context.Context, w http1.ResponseWriter, obj any) error {
				resp := obj.(*emptypb.Empty)
				w.WriteHeader(http1.StatusOK)
				w.Header().Set("Content-Type", "application/json; charset=utf-8")
				if err := jsonx.NewEncoder(w).Encode(resp); err != nil {
					return err
				}
				return nil
			},
			opts...,
		))
	return router
}

type workspacesHTTPClient struct {
	listWorkspaces  endpoint.Endpoint
	getWorkspace    endpoint.Endpoint
	createWorkspace endpoint.Endpoint
	updateWorkspace endpoint.Endpoint
	deleteWorkspace endpoint.Endpoint
}

func (c *workspacesHTTPClient) ListWorkspaces(ctx context.Context, request *ListWorkspacesRequest) (*ListWorkspacesResponse, error) {
	rep, err := c.listWorkspaces(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*ListWorkspacesResponse), nil
}

func (c *workspacesHTTPClient) GetWorkspace(ctx context.Context, request *GetWorkspaceRequest) (*Workspace, error) {
	rep, err := c.getWorkspace(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*Workspace), nil
}

func (c *workspacesHTTPClient) CreateWorkspace(ctx context.Context, request *CreateWorkspaceRequest) (*Workspace, error) {
	rep, err := c.createWorkspace(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*Workspace), nil
}

func (c *workspacesHTTPClient) UpdateWorkspace(ctx context.Context, request *UpdateWorkspaceRequest) (*Workspace, error) {
	rep, err := c.updateWorkspace(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*Workspace), nil
}

func (c *workspacesHTTPClient) DeleteWorkspace(ctx context.Context, request *DeleteWorkspaceRequest) (*emptypb.Empty, error) {
	rep, err := c.deleteWorkspace(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*emptypb.Empty), nil
}

func NewWorkspacesHTTPClient(
	scheme string,
	instance string,
	opts []http.ClientOption,
	mdw ...endpoint.Middleware,
) interface {
	ListWorkspaces(ctx context.Context, request *ListWorkspacesRequest) (*ListWorkspacesResponse, error)
	GetWorkspace(ctx context.Context, request *GetWorkspaceRequest) (*Workspace, error)
	CreateWorkspace(ctx context.Context, request *CreateWorkspaceRequest) (*Workspace, error)
	UpdateWorkspace(ctx context.Context, request *UpdateWorkspaceRequest) (*Workspace, error)
	DeleteWorkspace(ctx context.Context, request *DeleteWorkspaceRequest) (*emptypb.Empty, error)
} {
	router := mux.NewRouter()
	router.NewRoute().
		Name("/google.example.endpointsapis.v1.Workspaces/ListWorkspaces").
		Methods("GET").
		Path("/v1/projects/{project}/locations/{location}/workspaces")
	router.NewRoute().
		Name("/google.example.endpointsapis.v1.Workspaces/GetWorkspace").
		Methods("GET").
		Path("/v1/projects/{project}/locations/{location}/workspaces/{workspac}")
	router.NewRoute().
		Name("/google.example.endpointsapis.v1.Workspaces/CreateWorkspace").
		Methods("POST").
		Path("/v1/projects/{project}/locations/{location}/workspaces")
	router.NewRoute().
		Name("/google.example.endpointsapis.v1.Workspaces/UpdateWorkspace").
		Methods("PATCH").
		Path("/v1/projects/{project}/locations/{location}/Workspaces/{Workspac}")
	router.NewRoute().
		Name("/google.example.endpointsapis.v1.Workspaces/DeleteWorkspace").
		Methods("DELETE").
		Path("/v1/projects/{project}/locations/{location}/workspaces/{workspac}")
	return &workspacesHTTPClient{
		listWorkspaces: endpointx.Chain(
			http.NewExplicitClient(
				func(ctx context.Context, obj interface{}) (*http1.Request, error) {
					if obj == nil {
						return nil, errors.New("request object is nil")
					}
					req, ok := obj.(*ListWorkspacesRequest)
					if !ok {
						return nil, fmt.Errorf("invalid request object type, %T", obj)
					}
					_ = req
					var body io.Reader
					var pairs []string
					namedPathParameter := req.GetParent()
					namedPathValues := strings.Split(namedPathParameter, "/")
					if len(namedPathValues) != 4 {
						return nil, fmt.Errorf("invalid named path parameter, %s", namedPathParameter)
					}
					pairs = append(pairs, "project", namedPathValues[1], "location", namedPathValues[3])
					path, err := router.Get("/google.example.endpointsapis.v1.Workspaces/ListWorkspaces").URLPath(pairs...)
					if err != nil {
						return nil, err
					}
					queries := url.Values{}
					queries["page_size"] = append(queries["page_size"], strconvx.FormatInt(req.GetPageSize(), 10))
					queries["page_token"] = append(queries["page_token"], req.GetPageToken())
					target := &url.URL{
						Scheme:   scheme,
						Host:     instance,
						Path:     path.Path,
						RawQuery: queries.Encode(),
					}
					r, err := http1.NewRequestWithContext(ctx, "GET", target.String(), body)
					if err != nil {
						return nil, err
					}
					return r, nil
				},
				func(ctx context.Context, r *http1.Response) (interface{}, error) {
					resp := &ListWorkspacesResponse{}
					if err := jsonx.NewDecoder(r.Body).Decode(resp); err != nil {
						return nil, err
					}
					return resp, nil
				},
				opts...,
			).Endpoint(),
			mdw...),
		getWorkspace: endpointx.Chain(
			http.NewExplicitClient(
				func(ctx context.Context, obj interface{}) (*http1.Request, error) {
					if obj == nil {
						return nil, errors.New("request object is nil")
					}
					req, ok := obj.(*GetWorkspaceRequest)
					if !ok {
						return nil, fmt.Errorf("invalid request object type, %T", obj)
					}
					_ = req
					var body io.Reader
					var pairs []string
					namedPathParameter := req.GetName()
					namedPathValues := strings.Split(namedPathParameter, "/")
					if len(namedPathValues) != 6 {
						return nil, fmt.Errorf("invalid named path parameter, %s", namedPathParameter)
					}
					pairs = append(pairs, "project", namedPathValues[1], "location", namedPathValues[3], "workspac", namedPathValues[5])
					path, err := router.Get("/google.example.endpointsapis.v1.Workspaces/GetWorkspace").URLPath(pairs...)
					if err != nil {
						return nil, err
					}
					queries := url.Values{}
					target := &url.URL{
						Scheme:   scheme,
						Host:     instance,
						Path:     path.Path,
						RawQuery: queries.Encode(),
					}
					r, err := http1.NewRequestWithContext(ctx, "GET", target.String(), body)
					if err != nil {
						return nil, err
					}
					return r, nil
				},
				func(ctx context.Context, r *http1.Response) (interface{}, error) {
					resp := &Workspace{}
					if err := jsonx.NewDecoder(r.Body).Decode(resp); err != nil {
						return nil, err
					}
					return resp, nil
				},
				opts...,
			).Endpoint(),
			mdw...),
		createWorkspace: endpointx.Chain(
			http.NewExplicitClient(
				func(ctx context.Context, obj interface{}) (*http1.Request, error) {
					if obj == nil {
						return nil, errors.New("request object is nil")
					}
					req, ok := obj.(*CreateWorkspaceRequest)
					if !ok {
						return nil, fmt.Errorf("invalid request object type, %T", obj)
					}
					_ = req
					var body io.Reader
					var bodyBuf bytes.Buffer
					if err := jsonx.NewEncoder(&bodyBuf).Encode(req.GetWorkspace()); err != nil {
						return nil, err
					}
					body = &bodyBuf
					contentType := "application/json; charset=utf-8"
					var pairs []string
					namedPathParameter := req.GetParent()
					namedPathValues := strings.Split(namedPathParameter, "/")
					if len(namedPathValues) != 4 {
						return nil, fmt.Errorf("invalid named path parameter, %s", namedPathParameter)
					}
					pairs = append(pairs, "project", namedPathValues[1], "location", namedPathValues[3])
					path, err := router.Get("/google.example.endpointsapis.v1.Workspaces/CreateWorkspace").URLPath(pairs...)
					if err != nil {
						return nil, err
					}
					queries := url.Values{}
					target := &url.URL{
						Scheme:   scheme,
						Host:     instance,
						Path:     path.Path,
						RawQuery: queries.Encode(),
					}
					r, err := http1.NewRequestWithContext(ctx, "POST", target.String(), body)
					if err != nil {
						return nil, err
					}
					r.Header.Set("Content-Type", contentType)
					return r, nil
				},
				func(ctx context.Context, r *http1.Response) (interface{}, error) {
					resp := &Workspace{}
					if err := jsonx.NewDecoder(r.Body).Decode(resp); err != nil {
						return nil, err
					}
					return resp, nil
				},
				opts...,
			).Endpoint(),
			mdw...),
		updateWorkspace: endpointx.Chain(
			http.NewExplicitClient(
				func(ctx context.Context, obj interface{}) (*http1.Request, error) {
					if obj == nil {
						return nil, errors.New("request object is nil")
					}
					req, ok := obj.(*UpdateWorkspaceRequest)
					if !ok {
						return nil, fmt.Errorf("invalid request object type, %T", obj)
					}
					_ = req
					var body io.Reader
					var bodyBuf bytes.Buffer
					if err := jsonx.NewEncoder(&bodyBuf).Encode(req.GetWorkspace()); err != nil {
						return nil, err
					}
					body = &bodyBuf
					contentType := "application/json; charset=utf-8"
					var pairs []string
					namedPathParameter := req.GetName()
					namedPathValues := strings.Split(namedPathParameter, "/")
					if len(namedPathValues) != 6 {
						return nil, fmt.Errorf("invalid named path parameter, %s", namedPathParameter)
					}
					pairs = append(pairs, "project", namedPathValues[1], "location", namedPathValues[3], "Workspac", namedPathValues[5])
					path, err := router.Get("/google.example.endpointsapis.v1.Workspaces/UpdateWorkspace").URLPath(pairs...)
					if err != nil {
						return nil, err
					}
					queries := url.Values{}
					target := &url.URL{
						Scheme:   scheme,
						Host:     instance,
						Path:     path.Path,
						RawQuery: queries.Encode(),
					}
					r, err := http1.NewRequestWithContext(ctx, "PATCH", target.String(), body)
					if err != nil {
						return nil, err
					}
					r.Header.Set("Content-Type", contentType)
					return r, nil
				},
				func(ctx context.Context, r *http1.Response) (interface{}, error) {
					resp := &Workspace{}
					if err := jsonx.NewDecoder(r.Body).Decode(resp); err != nil {
						return nil, err
					}
					return resp, nil
				},
				opts...,
			).Endpoint(),
			mdw...),
		deleteWorkspace: endpointx.Chain(
			http.NewExplicitClient(
				func(ctx context.Context, obj interface{}) (*http1.Request, error) {
					if obj == nil {
						return nil, errors.New("request object is nil")
					}
					req, ok := obj.(*DeleteWorkspaceRequest)
					if !ok {
						return nil, fmt.Errorf("invalid request object type, %T", obj)
					}
					_ = req
					var body io.Reader
					var pairs []string
					namedPathParameter := req.GetName()
					namedPathValues := strings.Split(namedPathParameter, "/")
					if len(namedPathValues) != 6 {
						return nil, fmt.Errorf("invalid named path parameter, %s", namedPathParameter)
					}
					pairs = append(pairs, "project", namedPathValues[1], "location", namedPathValues[3], "workspac", namedPathValues[5])
					path, err := router.Get("/google.example.endpointsapis.v1.Workspaces/DeleteWorkspace").URLPath(pairs...)
					if err != nil {
						return nil, err
					}
					queries := url.Values{}
					target := &url.URL{
						Scheme:   scheme,
						Host:     instance,
						Path:     path.Path,
						RawQuery: queries.Encode(),
					}
					r, err := http1.NewRequestWithContext(ctx, "DELETE", target.String(), body)
					if err != nil {
						return nil, err
					}
					return r, nil
				},
				func(ctx context.Context, r *http1.Response) (interface{}, error) {
					resp := &emptypb.Empty{}
					if err := jsonx.NewDecoder(r.Body).Decode(resp); err != nil {
						return nil, err
					}
					return resp, nil
				},
				opts...,
			).Endpoint(),
			mdw...),
	}
}
