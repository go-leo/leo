// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package endpointsapis

import (
	context "context"
	fmt "fmt"
	endpoint "github.com/go-kit/kit/endpoint"
	http "github.com/go-kit/kit/transport/http"
	endpointx "github.com/go-leo/kitx/endpointx"
	mux "github.com/gorilla/mux"
	http1 "net/http"
)

func NewWorkspacesHTTPServer(
	endpoints interface {
		ListWorkspaces() endpoint.Endpoint
		GetWorkspace() endpoint.Endpoint
		CreateWorkspace() endpoint.Endpoint
		UpdateWorkspace() endpoint.Endpoint
		DeleteWorkspace() endpoint.Endpoint
	},
	mdw []endpoint.Middleware,
	opts ...http.ServerOption,
) http1.Handler {
	r := mux.NewRouter()
	r.Methods("GET").
		Path("/v1/projects/{project}/locations/{location}/workspaces").
		Handler(http.NewServer(
			endpointx.Chain(endpoints.ListWorkspaces(), mdw...),
			func(ctx context.Context, r *http1.Request) (any, error) {
				var req *ListWorkspacesRequest
				vars := mux.Vars(r)
				req.Parent = fmt.Sprintf("projects/%s/locations/%s", vars["project"], vars["location"])
				return nil, nil
			},
			func(ctx context.Context, w http1.ResponseWriter, resp any) error {
				return nil
			},
			opts...,
		))
	r.Methods("GET").
		Path("/v1/projects/{project}/locations/{location}/workspaces/{workspace}").
		Handler(http.NewServer(
			endpointx.Chain(endpoints.GetWorkspace(), mdw...),
			func(ctx context.Context, r *http1.Request) (any, error) {
				var req *GetWorkspaceRequest
				vars := mux.Vars(r)
				req.Name = fmt.Sprintf("projects/%s/locations/%s/workspaces/%s", vars["project"], vars["location"], vars["workspace"])
				return nil, nil
			},
			func(ctx context.Context, w http1.ResponseWriter, resp any) error {
				return nil
			},
			opts...,
		))
	r.Methods("POST").
		Path("/v1/projects/{project}/locations/{location}/workspaces").
		Handler(http.NewServer(
			endpointx.Chain(endpoints.CreateWorkspace(), mdw...),
			func(ctx context.Context, r *http1.Request) (any, error) {
				var req *CreateWorkspaceRequest
				vars := mux.Vars(r)
				req.Parent = fmt.Sprintf("projects/%s/locations/%s", vars["project"], vars["location"])
				return nil, nil
			},
			func(ctx context.Context, w http1.ResponseWriter, resp any) error {
				return nil
			},
			opts...,
		))
	r.Methods("PATCH").
		Path("/v1/projects/{project}/locations/{location}/Workspaces/{Workspace}").
		Handler(http.NewServer(
			endpointx.Chain(endpoints.UpdateWorkspace(), mdw...),
			func(ctx context.Context, r *http1.Request) (any, error) {
				var req *UpdateWorkspaceRequest
				vars := mux.Vars(r)
				req.Name = fmt.Sprintf("projects/%s/locations/%s/Workspaces/%s", vars["project"], vars["location"], vars["Workspace"])
				return nil, nil
			},
			func(ctx context.Context, w http1.ResponseWriter, resp any) error {
				return nil
			},
			opts...,
		))
	r.Methods("DELETE").
		Path("/v1/projects/{project}/locations/{location}/workspaces/{workspace}").
		Handler(http.NewServer(
			endpointx.Chain(endpoints.DeleteWorkspace(), mdw...),
			func(ctx context.Context, r *http1.Request) (any, error) {
				var req *DeleteWorkspaceRequest
				vars := mux.Vars(r)
				req.Name = fmt.Sprintf("projects/%s/locations/%s/workspaces/%s", vars["project"], vars["location"], vars["workspace"])
				return nil, nil
			},
			func(ctx context.Context, w http1.ResponseWriter, resp any) error {
				return nil
			},
			opts...,
		))
	return r
}
