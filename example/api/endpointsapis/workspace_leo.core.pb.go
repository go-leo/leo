// Code generated by protoc-gen-leo-core. DO NOT EDIT.

package endpointsapis

import (
	context "context"
	endpoint "github.com/go-kit/kit/endpoint"
	sd "github.com/go-kit/kit/sd"
	endpointx "github.com/go-leo/leo/v3/endpointx"
	transportx "github.com/go-leo/leo/v3/transportx"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	io "io"
)

type WorkspacesService interface {
	ListWorkspaces(ctx context.Context, request *ListWorkspacesRequest) (*ListWorkspacesResponse, error)
	GetWorkspace(ctx context.Context, request *GetWorkspaceRequest) (*Workspace, error)
	CreateWorkspace(ctx context.Context, request *CreateWorkspaceRequest) (*Workspace, error)
	UpdateWorkspace(ctx context.Context, request *UpdateWorkspaceRequest) (*Workspace, error)
	DeleteWorkspace(ctx context.Context, request *DeleteWorkspaceRequest) (*emptypb.Empty, error)
}

type WorkspacesEndpoints interface {
	ListWorkspaces(ctx context.Context) endpoint.Endpoint
	GetWorkspace(ctx context.Context) endpoint.Endpoint
	CreateWorkspace(ctx context.Context) endpoint.Endpoint
	UpdateWorkspace(ctx context.Context) endpoint.Endpoint
	DeleteWorkspace(ctx context.Context) endpoint.Endpoint
}

type WorkspacesClientTransports interface {
	ListWorkspaces() transportx.ClientTransport
	GetWorkspace() transportx.ClientTransport
	CreateWorkspace() transportx.ClientTransport
	UpdateWorkspace() transportx.ClientTransport
	DeleteWorkspace() transportx.ClientTransport
}

type WorkspacesClientTransportsV2 interface {
	ListWorkspaces(ctx context.Context, instance string) (endpoint.Endpoint, io.Closer, error)
	GetWorkspace(ctx context.Context, instance string) (endpoint.Endpoint, io.Closer, error)
	CreateWorkspace(ctx context.Context, instance string) (endpoint.Endpoint, io.Closer, error)
	UpdateWorkspace(ctx context.Context, instance string) (endpoint.Endpoint, io.Closer, error)
	DeleteWorkspace(ctx context.Context, instance string) (endpoint.Endpoint, io.Closer, error)
}

type WorkspacesFactories interface {
	ListWorkspaces(ctx context.Context) sd.Factory
	GetWorkspace(ctx context.Context) sd.Factory
	CreateWorkspace(ctx context.Context) sd.Factory
	UpdateWorkspace(ctx context.Context) sd.Factory
	DeleteWorkspace(ctx context.Context) sd.Factory
}

type WorkspacesEndpointers interface {
	ListWorkspaces() sd.Endpointer
	GetWorkspace() sd.Endpointer
	CreateWorkspace() sd.Endpointer
	UpdateWorkspace() sd.Endpointer
	DeleteWorkspace() sd.Endpointer
}

type workspacesServerEndpoints struct {
	svc         WorkspacesService
	middlewares []endpoint.Middleware
}

func (e *workspacesServerEndpoints) ListWorkspaces(context.Context) endpoint.Endpoint {
	component := func(ctx context.Context, request any) (any, error) {
		return e.svc.ListWorkspaces(ctx, request.(*ListWorkspacesRequest))
	}
	return endpointx.Chain(component, e.middlewares...)
}

func (e *workspacesServerEndpoints) GetWorkspace(context.Context) endpoint.Endpoint {
	component := func(ctx context.Context, request any) (any, error) {
		return e.svc.GetWorkspace(ctx, request.(*GetWorkspaceRequest))
	}
	return endpointx.Chain(component, e.middlewares...)
}

func (e *workspacesServerEndpoints) CreateWorkspace(context.Context) endpoint.Endpoint {
	component := func(ctx context.Context, request any) (any, error) {
		return e.svc.CreateWorkspace(ctx, request.(*CreateWorkspaceRequest))
	}
	return endpointx.Chain(component, e.middlewares...)
}

func (e *workspacesServerEndpoints) UpdateWorkspace(context.Context) endpoint.Endpoint {
	component := func(ctx context.Context, request any) (any, error) {
		return e.svc.UpdateWorkspace(ctx, request.(*UpdateWorkspaceRequest))
	}
	return endpointx.Chain(component, e.middlewares...)
}

func (e *workspacesServerEndpoints) DeleteWorkspace(context.Context) endpoint.Endpoint {
	component := func(ctx context.Context, request any) (any, error) {
		return e.svc.DeleteWorkspace(ctx, request.(*DeleteWorkspaceRequest))
	}
	return endpointx.Chain(component, e.middlewares...)
}

func newWorkspacesServerEndpoints(svc WorkspacesService, middlewares ...endpoint.Middleware) WorkspacesEndpoints {
	return &workspacesServerEndpoints{svc: svc, middlewares: middlewares}
}

type workspacesClientEndpoints struct {
	transports  WorkspacesClientTransports
	middlewares []endpoint.Middleware
}

func (e *workspacesClientEndpoints) ListWorkspaces(ctx context.Context) endpoint.Endpoint {
	return endpointx.Chain(e.transports.ListWorkspaces().Endpoint(ctx), e.middlewares...)
}

func (e *workspacesClientEndpoints) GetWorkspace(ctx context.Context) endpoint.Endpoint {
	return endpointx.Chain(e.transports.GetWorkspace().Endpoint(ctx), e.middlewares...)
}

func (e *workspacesClientEndpoints) CreateWorkspace(ctx context.Context) endpoint.Endpoint {
	return endpointx.Chain(e.transports.CreateWorkspace().Endpoint(ctx), e.middlewares...)
}

func (e *workspacesClientEndpoints) UpdateWorkspace(ctx context.Context) endpoint.Endpoint {
	return endpointx.Chain(e.transports.UpdateWorkspace().Endpoint(ctx), e.middlewares...)
}

func (e *workspacesClientEndpoints) DeleteWorkspace(ctx context.Context) endpoint.Endpoint {
	return endpointx.Chain(e.transports.DeleteWorkspace().Endpoint(ctx), e.middlewares...)
}

func newWorkspacesClientEndpoints(transports WorkspacesClientTransports, middlewares ...endpoint.Middleware) WorkspacesEndpoints {
	return &workspacesClientEndpoints{transports: transports, middlewares: middlewares}
}

type workspacesFactories struct {
	transports WorkspacesClientTransportsV2
}

func (f *workspacesFactories) ListWorkspaces(ctx context.Context) sd.Factory {
	return func(instance string) (endpoint.Endpoint, io.Closer, error) {
		return f.transports.ListWorkspaces(ctx, instance)
	}
}

func (f *workspacesFactories) GetWorkspace(ctx context.Context) sd.Factory {
	return func(instance string) (endpoint.Endpoint, io.Closer, error) {
		return f.transports.GetWorkspace(ctx, instance)
	}
}

func (f *workspacesFactories) CreateWorkspace(ctx context.Context) sd.Factory {
	return func(instance string) (endpoint.Endpoint, io.Closer, error) {
		return f.transports.CreateWorkspace(ctx, instance)
	}
}

func (f *workspacesFactories) UpdateWorkspace(ctx context.Context) sd.Factory {
	return func(instance string) (endpoint.Endpoint, io.Closer, error) {
		return f.transports.UpdateWorkspace(ctx, instance)
	}
}

func (f *workspacesFactories) DeleteWorkspace(ctx context.Context) sd.Factory {
	return func(instance string) (endpoint.Endpoint, io.Closer, error) {
		return f.transports.DeleteWorkspace(ctx, instance)
	}
}

func newWorkspacesFactories(transports WorkspacesClientTransportsV2) WorkspacesFactories {
	return &workspacesFactories{transports: transports}
}
