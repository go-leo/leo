// Code generated by protoc-gen-go-leo. DO NOT EDIT.
// If you want edit it, can move this file to another directory.

package cq

import (
	context "context"
	cqrs "github.com/go-leo/leo/v3/cqrs"
	v1 "github.com/go-leo/leo/v3/example/api/helloworld/v1"
)

var _ SayHelloHandler = (*sayHelloHandler)(nil)

type SayHelloHandler cqrs.QueryHandler[SayHelloQuery, SayHelloResult]

type SayHelloQuery struct {
	v1.UnimplementedSayHelloQuery
}

func (SayHelloQuery) From(ctx context.Context, req *v1.HelloRequest) (v1.SayHelloQuery, context.Context, error) {
	panic("implement me")
	return SayHelloQuery{}, ctx, nil
}

type SayHelloResult struct {
	v1.UnimplementedSayHelloResult
}

func (r SayHelloResult) To(ctx context.Context) (*v1.HelloReply, error) {
	panic("implement me")
	return &v1.HelloReply{}, nil
}

func NewSayHelloHandler() SayHelloHandler {
	return &sayHelloHandler{}
}

type sayHelloHandler struct {
}

func (h *sayHelloHandler) Handle(ctx context.Context, q SayHelloQuery) (SayHelloResult, error) {
	// TODO implement me
	panic("implement me")
}
