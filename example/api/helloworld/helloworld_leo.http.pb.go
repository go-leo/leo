// Code generated by protoc-gen-leo-http. DO NOT EDIT.

package helloworld

import (
	context "context"
	endpoint "github.com/go-kit/kit/endpoint"
	http "github.com/go-kit/kit/transport/http"
	jsonx "github.com/go-leo/gox/encodingx/jsonx"
	errorx "github.com/go-leo/gox/errorx"
	urlx "github.com/go-leo/gox/netx/urlx"
	endpointx "github.com/go-leo/leo/v3/endpointx"
	statusx "github.com/go-leo/leo/v3/statusx"
	transportx "github.com/go-leo/leo/v3/transportx"
	httpx "github.com/go-leo/leo/v3/transportx/httpx"
	mux "github.com/gorilla/mux"
	io "io"
	http1 "net/http"
	url "net/url"
)

// =========================== http router ===========================

func appendGreeterHttpRoutes(router *mux.Router) *mux.Router {
	router.NewRoute().Name("/helloworld.Greeter/SayHello").Methods("GET").Path("/helloworld/{name}")
	return router
}

// =========================== http server ===========================

func AppendGreeterHttpRoutes(router *mux.Router, svc GreeterService, middlewares ...endpoint.Middleware) *mux.Router {
	endpoints := newGreeterServerEndpoints(svc, middlewares...)
	router = appendGreeterHttpRoutes(router)
	router.Get("/helloworld.Greeter/SayHello").Handler(_Greeter_SayHello_HttpServer_Transport(endpoints))
	return router
}

// =========================== http client ===========================

type greeterHttpClientTransports struct {
	sayHello transportx.ClientTransport
}

func (t *greeterHttpClientTransports) SayHello() transportx.ClientTransport {
	return t.sayHello
}

func NewGreeterHttpClientTransports(target string, options ...httpx.ClientTransportOption) (GreeterClientTransports, error) {
	router := appendGreeterHttpRoutes(mux.NewRouter())
	_ = router
	t := &greeterHttpClientTransports{}
	var err error
	t.sayHello, err = errorx.Break[transportx.ClientTransport](err)(_Greeter_SayHello_HttpClient_Transport(target, router, options...))
	return t, err
}

type greeterHttpClient struct {
	endpoints GreeterEndpoints
}

func (c *greeterHttpClient) SayHello(ctx context.Context, request *HelloRequest) (*HelloReply, error) {
	ctx = endpointx.InjectName(ctx, "/helloworld.Greeter/SayHello")
	ctx = transportx.InjectName(ctx, httpx.HttpClient)
	rep, err := c.endpoints.SayHello(ctx)(ctx, request)
	if err != nil {
		return nil, statusx.From(err)
	}
	return rep.(*HelloReply), nil
}

func NewGreeterHttpClient(transports GreeterClientTransports, middlewares ...endpoint.Middleware) GreeterService {
	endpoints := newGreeterClientEndpoints(transports, middlewares...)
	return &greeterHttpClient{endpoints: endpoints}
}

// =========================== http transport ===========================

func _Greeter_SayHello_HttpServer_Transport(endpoints GreeterEndpoints) *http.Server {
	return http.NewServer(
		endpoints.SayHello(context.TODO()),
		_Greeter_SayHello_HttpServer_RequestDecoder,
		_Greeter_SayHello_HttpServer_ResponseEncoder,
		http.ServerBefore(httpx.EndpointInjector("/helloworld.Greeter/SayHello")),
		http.ServerBefore(httpx.TransportInjector(httpx.HttpServer)),
		http.ServerBefore(httpx.IncomingMetadataInjector),
		http.ServerBefore(httpx.IncomingTimeLimiter),
		http.ServerFinalizer(httpx.CancelInvoker),
		http.ServerErrorEncoder(httpx.ErrorEncoder),
	)
}

func _Greeter_SayHello_HttpClient_Transport(target string, router *mux.Router, options ...httpx.ClientTransportOption) func() (transportx.ClientTransport, error) {
	return func() (transportx.ClientTransport, error) {
		return httpx.NewClientTransport(
			target,
			httpx.ClientFactory(
				_Greeter_SayHello_HttpClient_RequestEncoder(router),
				_Greeter_SayHello_HttpClient_ResponseDecoder,
				http.ClientBefore(httpx.OutgoingMetadataInjector),
				http.ClientBefore(httpx.OutgoingTimeLimiter),
			),
			options...,
		)
	}
}

// =========================== http coder ===========================

func _Greeter_SayHello_HttpServer_RequestDecoder(ctx context.Context, r *http1.Request) (any, error) {
	req := &HelloRequest{}
	vars := urlx.FormFromMap(mux.Vars(r))
	var varErr error
	req.Name = vars.Get("name")
	if varErr != nil {
		return nil, statusx.ErrInvalidArgument.With(statusx.Wrap(varErr))
	}
	return req, nil
}

func _Greeter_SayHello_HttpClient_RequestEncoder(router *mux.Router) func(scheme string, instance string) http.CreateRequestFunc {
	return func(scheme string, instance string) http.CreateRequestFunc {
		return func(ctx context.Context, obj any) (*http1.Request, error) {
			if obj == nil {
				return nil, statusx.ErrInvalidArgument.With(statusx.Message("request is nil"))
			}
			req, ok := obj.(*HelloRequest)
			if !ok {
				return nil, statusx.ErrInvalidArgument.With(statusx.Message("invalid request type, %T", obj))
			}
			_ = req
			var body io.Reader
			var pairs []string
			pairs = append(pairs, "name", req.GetName())
			path, err := router.Get("/helloworld.Greeter/SayHello").URLPath(pairs...)
			if err != nil {
				return nil, statusx.ErrInvalidArgument.With(statusx.Wrap(err))
			}
			queries := url.Values{}
			target := &url.URL{
				Scheme:   scheme,
				Host:     instance,
				Path:     path.Path,
				RawQuery: queries.Encode(),
			}
			r, err := http1.NewRequestWithContext(ctx, "GET", target.String(), body)
			if err != nil {
				return nil, statusx.ErrInvalidArgument.With(statusx.Wrap(err))
			}
			return r, nil
		}
	}
}

func _Greeter_SayHello_HttpServer_ResponseEncoder(ctx context.Context, w http1.ResponseWriter, obj any) error {
	resp := obj.(*HelloReply)
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(http1.StatusOK)
	if err := jsonx.NewEncoder(w).Encode(resp); err != nil {
		return statusx.ErrInternal.With(statusx.Wrap(err))
	}
	return nil
}

func _Greeter_SayHello_HttpClient_ResponseDecoder(ctx context.Context, r *http1.Response) (any, error) {
	if httpx.IsErrorResponse(r) {
		return nil, httpx.ErrorDecoder(ctx, r)
	}
	resp := &HelloReply{}
	if err := jsonx.NewDecoder(r.Body).Decode(resp); err != nil {
		return nil, err
	}
	return resp, nil
}
