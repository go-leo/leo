// Code generated by protoc-gen-leo-http. DO NOT EDIT.

package helloworld

import (
	context "context"
	endpoint "github.com/go-kit/kit/endpoint"
	http "github.com/go-kit/kit/transport/http"
	jsonx "github.com/go-leo/gox/encodingx/jsonx"
	urlx "github.com/go-leo/gox/netx/urlx"
	endpointx "github.com/go-leo/leo/v3/endpointx"
	statusx "github.com/go-leo/leo/v3/statusx"
	httpx "github.com/go-leo/leo/v3/transportx/httpx"
	mux "github.com/gorilla/mux"
	io "io"
	http1 "net/http"
	url "net/url"
)

// =========================== http router ===========================

func appendGreeterHttpRoutes(router *mux.Router) *mux.Router {
	router.NewRoute().Name("/helloworld.Greeter/SayHello").Methods("GET").Path("/helloworld/{name}")
	return router
}

// =========================== http server ===========================

type GreeterHttpServerRequestDecoder interface {
	SayHello() http.DecodeRequestFunc
}

type GreeterHttpServerResponseEncoder interface {
	SayHello() http.EncodeResponseFunc
}

type GreeterHttpServerTransports interface {
	SayHello() http1.Handler
}

type greeterHttpServerTransports struct {
	endpoints       GreeterServerEndpoints
	requestDecoder  GreeterHttpServerRequestDecoder
	responseEncoder GreeterHttpServerResponseEncoder
}

func (t *greeterHttpServerTransports) SayHello() http1.Handler {
	return http.NewServer(
		t.endpoints.SayHello(context.TODO()),
		t.requestDecoder.SayHello(),
		t.responseEncoder.SayHello(),
		http.ServerBefore(httpx.EndpointInjector("/helloworld.Greeter/SayHello")),
		http.ServerBefore(httpx.ServerTransportInjector),
		http.ServerBefore(httpx.IncomingMetadataInjector),
		http.ServerBefore(httpx.IncomingTimeLimitInjector),
		http.ServerBefore(httpx.IncomingStainInjector),
		http.ServerFinalizer(httpx.CancelInvoker),
		http.ServerErrorEncoder(httpx.ErrorEncoder),
	)
}

func newGreeterHttpServerTransports(svc GreeterService, middlewares ...endpoint.Middleware) GreeterHttpServerTransports {
	endpoints := newGreeterServerEndpoints(svc, middlewares...)
	return &greeterHttpServerTransports{
		endpoints:       endpoints,
		requestDecoder:  greeterHttpServerRequestDecoder{},
		responseEncoder: greeterHttpServerResponseEncoder{},
	}
}
func AppendGreeterHttpRoutes(router *mux.Router, svc GreeterService, middlewares ...endpoint.Middleware) *mux.Router {
	transports := newGreeterHttpServerTransports(svc, middlewares...)
	router = appendGreeterHttpRoutes(router)
	router.Get("/helloworld.Greeter/SayHello").Handler(transports.SayHello())
	return router
}

// =========================== http client ===========================

type greeterHttpClientTransports struct {
	scheme        string
	router        *mux.Router
	clientOptions []http.ClientOption
	middlewares   []endpoint.Middleware
}

func (t *greeterHttpClientTransports) SayHello(ctx context.Context, instance string) (endpoint.Endpoint, io.Closer, error) {
	opts := []http.ClientOption{
		http.ClientBefore(httpx.OutgoingMetadataInjector),
		http.ClientBefore(httpx.OutgoingTimeLimitInjector),
		http.ClientBefore(httpx.OutgoingStainInjector),
	}
	opts = append(opts, t.clientOptions...)
	client := http.NewExplicitClient(
		_Greeter_SayHello_HttpClient_RequestEncoder(t.router)(t.scheme, instance),
		_Greeter_SayHello_HttpClient_ResponseDecoder,
		opts...,
	)
	return endpointx.Chain(client.Endpoint(), t.middlewares...), nil, nil
}

func newGreeterHttpClientTransports(scheme string, clientOptions []http.ClientOption, middlewares []endpoint.Middleware) GreeterClientTransports {
	return &greeterHttpClientTransports{
		scheme:        scheme,
		router:        appendGreeterHttpRoutes(mux.NewRouter()),
		clientOptions: clientOptions,
		middlewares:   middlewares,
	}
}

func NewGreeterHttpClient(target string, opts ...httpx.ClientOption) GreeterService {
	options := httpx.NewClientOptions(opts...)
	transports := newGreeterHttpClientTransports(options.Scheme(), options.ClientTransportOptions(), options.Middlewares())
	endpoints := newGreeterClientEndpoints(target, transports, options.InstancerFactory(), options.EndpointerOptions(), options.BalancerFactory(), options.Logger())
	return newGreeterClientService(endpoints, httpx.HttpClient)
}

// =========================== http coder ===========================

type greeterHttpServerRequestDecoder struct{}

func (greeterHttpServerRequestDecoder) SayHello() http.DecodeRequestFunc {
	return func(ctx context.Context, r *http1.Request) (any, error) {
		req := &HelloRequest{}
		vars := urlx.FormFromMap(mux.Vars(r))
		var varErr error
		req.Name = vars.Get("name")
		if varErr != nil {
			return nil, statusx.ErrInvalidArgument.With(statusx.Wrap(varErr))
		}
		return req, nil
	}
}

type greeterHttpServerResponseEncoder struct{}

func (greeterHttpServerResponseEncoder) SayHello() http.EncodeResponseFunc {
	return func(ctx context.Context, w http1.ResponseWriter, obj any) error {
		resp := obj.(*HelloReply)
		w.Header().Set("Content-Type", "application/json; charset=utf-8")
		w.WriteHeader(http1.StatusOK)
		if err := jsonx.NewEncoder(w).Encode(resp); err != nil {
			return statusx.ErrInternal.With(statusx.Wrap(err))
		}
		return nil
	}

}

func _Greeter_SayHello_HttpClient_RequestEncoder(router *mux.Router) func(scheme string, instance string) http.CreateRequestFunc {
	return func(scheme string, instance string) http.CreateRequestFunc {
		return func(ctx context.Context, obj any) (*http1.Request, error) {
			if obj == nil {
				return nil, statusx.ErrInvalidArgument.With(statusx.Message("request is nil"))
			}
			req, ok := obj.(*HelloRequest)
			if !ok {
				return nil, statusx.ErrInvalidArgument.With(statusx.Message("invalid request type, %T", obj))
			}
			_ = req
			var body io.Reader
			var pairs []string
			pairs = append(pairs, "name", req.GetName())
			path, err := router.Get("/helloworld.Greeter/SayHello").URLPath(pairs...)
			if err != nil {
				return nil, statusx.ErrInvalidArgument.With(statusx.Wrap(err))
			}
			queries := url.Values{}
			target := &url.URL{
				Scheme:   scheme,
				Host:     instance,
				Path:     path.Path,
				RawQuery: queries.Encode(),
			}
			r, err := http1.NewRequestWithContext(ctx, "GET", target.String(), body)
			if err != nil {
				return nil, statusx.ErrInvalidArgument.With(statusx.Wrap(err))
			}
			return r, nil
		}
	}
}

func _Greeter_SayHello_HttpClient_ResponseDecoder(ctx context.Context, r *http1.Response) (any, error) {
	if httpx.IsErrorResponse(r) {
		return nil, httpx.ErrorDecoder(ctx, r)
	}
	resp := &HelloReply{}
	if err := jsonx.NewDecoder(r.Body).Decode(resp); err != nil {
		return nil, err
	}
	return resp, nil
}
