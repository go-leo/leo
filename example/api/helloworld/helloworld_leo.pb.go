// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package helloworld

import (
	bytes "bytes"
	context "context"
	errors "errors"
	fmt "fmt"
	endpoint "github.com/go-kit/kit/endpoint"
	sd "github.com/go-kit/kit/sd"
	grpc "github.com/go-kit/kit/transport/grpc"
	http "github.com/go-kit/kit/transport/http"
	jsonx "github.com/go-leo/gox/encodingx/jsonx"
	errorx "github.com/go-leo/gox/errorx"
	endpointx "github.com/go-leo/leo/v3/endpointx"
	statusx "github.com/go-leo/leo/v3/statusx"
	transportx "github.com/go-leo/leo/v3/transportx"
	grpcx "github.com/go-leo/leo/v3/transportx/grpcx"
	httpx "github.com/go-leo/leo/v3/transportx/httpx"
	mux "github.com/gorilla/mux"
	io "io"
	http1 "net/http"
	url "net/url"
)

// =========================== endpoints ===========================

type GreeterService interface {
	SayHello(ctx context.Context, request *HelloRequest) (*HelloReply, error)
}

type GreeterEndpoints interface {
	SayHello(ctx context.Context) endpoint.Endpoint
}

type GreeterClientTransports interface {
	SayHello() transportx.ClientTransport
}

type GreeterFactories interface {
	SayHello(middlewares ...endpoint.Middleware) sd.Factory
}

type GreeterEndpointers interface {
	SayHello() sd.Endpointer
}

type greeterServerEndpoints struct {
	svc         GreeterService
	middlewares []endpoint.Middleware
}

func (e *greeterServerEndpoints) SayHello(context.Context) endpoint.Endpoint {
	component := func(ctx context.Context, request any) (any, error) {
		return e.svc.SayHello(ctx, request.(*HelloRequest))
	}
	return endpointx.Chain(component, e.middlewares...)
}

func newGreeterServerEndpoints(svc GreeterService, middlewares ...endpoint.Middleware) GreeterEndpoints {
	return &greeterServerEndpoints{svc: svc, middlewares: middlewares}
}

type greeterClientEndpoints struct {
	transports  GreeterClientTransports
	middlewares []endpoint.Middleware
}

func (e *greeterClientEndpoints) SayHello(ctx context.Context) endpoint.Endpoint {
	return endpointx.Chain(e.transports.SayHello().Endpoint(ctx), e.middlewares...)
}

func newGreeterClientEndpoints(transports GreeterClientTransports, middlewares ...endpoint.Middleware) GreeterEndpoints {
	return &greeterClientEndpoints{transports: transports, middlewares: middlewares}
}

// =========================== cqrs ===========================

// =========================== grpc server ===========================

type GreeterGrpcServerTransports interface {
	SayHello() *grpc.Server
}

type greeterGrpcServerTransports struct {
	sayHello *grpc.Server
}

func (t *greeterGrpcServerTransports) SayHello() *grpc.Server {
	return t.sayHello
}

func newGreeterGrpcServerTransports(endpoints GreeterEndpoints) GreeterGrpcServerTransports {
	return &greeterGrpcServerTransports{
		sayHello: grpc.NewServer(
			endpoints.SayHello(context.TODO()),
			func(_ context.Context, v any) (any, error) { return v, nil },
			func(_ context.Context, v any) (any, error) { return v, nil },
			grpc.ServerBefore(grpcx.ServerEndpointInjector("/helloworld.Greeter/SayHello")),
			grpc.ServerBefore(grpcx.ServerTransportInjector),
			grpc.ServerBefore(grpcx.IncomingMetadataInjector),
		),
	}
}

type greeterGrpcServer struct {
	sayHello *grpc.Server
}

func (s *greeterGrpcServer) SayHello(ctx context.Context, request *HelloRequest) (*HelloReply, error) {
	ctx, rep, err := s.sayHello.ServeGRPC(ctx, request)
	if err != nil {
		return nil, err
	}
	_ = ctx
	return rep.(*HelloReply), nil
}

func NewGreeterGrpcServer(svc GreeterService, middlewares ...endpoint.Middleware) GreeterService {
	endpoints := newGreeterServerEndpoints(svc, middlewares...)
	transports := newGreeterGrpcServerTransports(endpoints)
	return &greeterGrpcServer{
		sayHello: transports.SayHello(),
	}
}

// =========================== grpc client ===========================

type greeterGrpcClientTransports struct {
	sayHello transportx.ClientTransport
}

func (t *greeterGrpcClientTransports) SayHello() transportx.ClientTransport {
	return t.sayHello
}

func NewGreeterGrpcClientTransports(target string, options ...transportx.ClientTransportOption) (GreeterClientTransports, error) {
	t := &greeterGrpcClientTransports{}
	var err error
	t.sayHello, err = errorx.Break[transportx.ClientTransport](err)(func() (transportx.ClientTransport, error) {
		return transportx.NewClientTransport(
			target,
			grpcx.ClientFactory(
				"helloworld.Greeter",
				"SayHello",
				func(_ context.Context, v any) (any, error) { return v, nil },
				func(_ context.Context, v any) (any, error) { return v, nil },
				HelloReply{},
				grpc.ClientBefore(grpcx.OutgoingMetadataInjector),
			),
			options...,
		)
	})
	return t, err
}

type greeterGrpcClient struct {
	endpoints GreeterEndpoints
}

func (c *greeterGrpcClient) SayHello(ctx context.Context, request *HelloRequest) (*HelloReply, error) {
	ctx = endpointx.InjectName(ctx, "/helloworld.Greeter/SayHello")
	ctx = transportx.InjectName(ctx, grpcx.GrpcClient)
	rep, err := c.endpoints.SayHello(ctx)(ctx, request)
	if err != nil {
		return nil, statusx.FromGrpcError(err)
	}
	return rep.(*HelloReply), nil
}

func NewGreeterGrpcClient(transports GreeterClientTransports, middlewares ...endpoint.Middleware) GreeterService {
	endpoints := newGreeterClientEndpoints(transports, middlewares...)
	return &greeterGrpcClient{endpoints: endpoints}
}

// =========================== http server ===========================

type GreeterHttpServerTransports interface {
	SayHello() *http.Server
}

type greeterHttpServerTransports struct {
	sayHello *http.Server
}

func (t *greeterHttpServerTransports) SayHello() *http.Server {
	return t.sayHello
}

func newGreeterHttpServerTransports(endpoints GreeterEndpoints) GreeterHttpServerTransports {
	return &greeterHttpServerTransports{
		sayHello: http.NewServer(
			endpoints.SayHello(context.TODO()),
			_Greeter_SayHello_HttpServer_RequestDecoder,
			_Greeter_SayHello_HttpServer_ResponseEncoder,
			http.ServerBefore(httpx.EndpointInjector("/helloworld.Greeter/SayHello")),
			http.ServerBefore(httpx.TransportInjector(httpx.HttpServer)),
			http.ServerBefore(httpx.IncomingMetadataInjector),
			http.ServerErrorEncoder(httpx.ErrorEncoder),
			http.ServerBefore(httpx.TimeoutController),
			http.ServerFinalizer(httpx.CancelInvoker),
		),
	}
}

func AppendGreeterHttpRouter(router *mux.Router, svc GreeterService, middlewares ...endpoint.Middleware) *mux.Router {
	endpoints := newGreeterServerEndpoints(svc, middlewares...)
	transports := newGreeterHttpServerTransports(endpoints)
	router.NewRoute().Name("/helloworld.Greeter/SayHello").Methods("POST").Path("/helloworld.Greeter/SayHello").Handler(transports.SayHello())
	return router
}

// =========================== http client ===========================

type greeterHttpClientTransports struct {
	sayHello transportx.ClientTransport
}

func (t *greeterHttpClientTransports) SayHello() transportx.ClientTransport {
	return t.sayHello
}

func NewGreeterHttpClientTransports(target string, options ...transportx.ClientTransportOption) (GreeterClientTransports, error) {
	router := mux.NewRouter()
	router.NewRoute().Name("/helloworld.Greeter/SayHello").Methods("POST").Path("/helloworld.Greeter/SayHello")
	t := &greeterHttpClientTransports{}
	var err error
	t.sayHello, err = errorx.Break[transportx.ClientTransport](err)(func() (transportx.ClientTransport, error) {
		return transportx.NewClientTransport(
			target,
			httpx.ClientFactory(
				_Greeter_SayHello_HttpClient_RequestEncoder(router),
				_Greeter_SayHello_HttpClient_ResponseDecoder,
				http.ClientBefore(httpx.OutgoingMetadataInjector),
			),
			options...,
		)
	})
	return t, err
}

type greeterHttpClient struct {
	endpoints GreeterEndpoints
}

func (c *greeterHttpClient) SayHello(ctx context.Context, request *HelloRequest) (*HelloReply, error) {
	ctx = endpointx.InjectName(ctx, "/helloworld.Greeter/SayHello")
	ctx = transportx.InjectName(ctx, httpx.HttpClient)
	rep, err := c.endpoints.SayHello(ctx)(ctx, request)
	if err != nil {
		return nil, statusx.From(err)
	}
	return rep.(*HelloReply), nil
}

func NewGreeterHttpClient(transports GreeterClientTransports, middlewares ...endpoint.Middleware) GreeterService {
	endpoints := newGreeterClientEndpoints(transports, middlewares...)
	return &greeterHttpClient{endpoints: endpoints}
}

// =========================== http coder ===========================

func _Greeter_SayHello_HttpServer_RequestDecoder(ctx context.Context, r *http1.Request) (any, error) {
	req := &HelloRequest{}
	if err := jsonx.NewDecoder(r.Body).Decode(req); err != nil {
		return nil, statusx.ErrInvalidArgument.With(statusx.Wrap(err))
	}
	return req, nil
}

func _Greeter_SayHello_HttpClient_RequestEncoder(router *mux.Router) func(scheme string, instance string) http.CreateRequestFunc {
	return func(scheme string, instance string) http.CreateRequestFunc {
		return func(ctx context.Context, obj any) (*http1.Request, error) {
			if obj == nil {
				return nil, errors.New("request object is nil")
			}
			req, ok := obj.(*HelloRequest)
			if !ok {
				return nil, fmt.Errorf("invalid request object type, %T", obj)
			}
			_ = req
			var body io.Reader
			var bodyBuf bytes.Buffer
			if err := jsonx.NewEncoder(&bodyBuf).Encode(req); err != nil {
				return nil, err
			}
			body = &bodyBuf
			contentType := "application/json; charset=utf-8"
			var pairs []string
			path, err := router.Get("/helloworld.Greeter/SayHello").URLPath(pairs...)
			if err != nil {
				return nil, err
			}
			queries := url.Values{}
			target := &url.URL{
				Scheme:   scheme,
				Host:     instance,
				Path:     path.Path,
				RawQuery: queries.Encode(),
			}
			r, err := http1.NewRequestWithContext(ctx, "POST", target.String(), body)
			if err != nil {
				return nil, err
			}
			r.Header.Set("Content-Type", contentType)
			return r, nil
		}
	}
}

func _Greeter_SayHello_HttpServer_ResponseEncoder(ctx context.Context, w http1.ResponseWriter, obj any) error {
	resp := obj.(*HelloReply)
	w.Header().Set("Content-Type", "application/json; charset=utf-8")
	w.WriteHeader(http1.StatusOK)
	if err := jsonx.NewEncoder(w).Encode(resp); err != nil {
		return statusx.ErrInternal.With(statusx.Wrap(err))
	}
	return nil
}

func _Greeter_SayHello_HttpClient_ResponseDecoder(ctx context.Context, r *http1.Response) (any, error) {
	if httpx.IsErrorResponse(r) {
		return nil, httpx.ErrorDecoder(ctx, r)
	}
	resp := &HelloReply{}
	if err := jsonx.NewDecoder(r.Body).Decode(resp); err != nil {
		return nil, err
	}
	return resp, nil
}
