// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package helloworld

import (
	context "context"
	endpoint "github.com/go-kit/kit/endpoint"
	grpc "github.com/go-kit/kit/transport/grpc"
	endpointx "github.com/go-leo/leo/v3/endpointx"
	grpc1 "google.golang.org/grpc"
)

// =========================== endpoints ===========================

type GreeterService interface {
	SayHello(ctx context.Context, request *HelloRequest) (*HelloReply, error)
}

type GreeterEndpoints interface {
	SayHello() endpoint.Endpoint
}

type greeterEndpoints struct {
	svc         GreeterService
	middlewares []endpoint.Middleware
}

func (e *greeterEndpoints) SayHello() endpoint.Endpoint {
	component := func(ctx context.Context, request any) (any, error) {
		return e.svc.SayHello(ctx, request.(*HelloRequest))
	}
	return endpointx.Chain(component, e.middlewares...)
}

func NewGreeterEndpoints(svc GreeterService, middlewares ...endpoint.Middleware) GreeterEndpoints {
	return &greeterEndpoints{svc: svc, middlewares: middlewares}
}

// =========================== cqrs ===========================

// =========================== grpc transports ===========================

type GreeterGrpcServerTransports interface {
	SayHello() *grpc.Server
}

type GreeterGrpcClientTransports interface {
	SayHello() *grpc.Client
}

type greeterGrpcServerTransports struct {
	sayHello *grpc.Server
}

func (t *greeterGrpcServerTransports) SayHello() *grpc.Server {
	return t.sayHello
}

func NewGreeterGrpcServerTransports(endpoints GreeterEndpoints, serverOptions ...grpc.ServerOption) GreeterGrpcServerTransports {
	return &greeterGrpcServerTransports{
		sayHello: grpc.NewServer(
			endpoints.SayHello(),
			func(_ context.Context, v any) (any, error) { return v, nil },
			func(_ context.Context, v any) (any, error) { return v, nil },
			serverOptions...,
		),
	}
}

type greeterGrpcClientTransports struct {
	sayHello *grpc.Client
}

func (t *greeterGrpcClientTransports) SayHello() *grpc.Client {
	return t.sayHello
}

func NewGreeterGrpcClientTransports(conn *grpc1.ClientConn, clientOptions ...grpc.ClientOption) GreeterGrpcClientTransports {
	return &greeterGrpcClientTransports{
		sayHello: grpc.NewClient(
			conn,
			"helloworld.Greeter",
			"SayHello",
			func(_ context.Context, v any) (any, error) { return v, nil },
			func(_ context.Context, v any) (any, error) { return v, nil },
			HelloReply{},
			clientOptions...,
		),
	}
}

type greeterGrpcServer struct {
	sayHello *grpc.Server
}

func (s *greeterGrpcServer) SayHello(ctx context.Context, request *HelloRequest) (*HelloReply, error) {
	ctx, rep, err := s.sayHello.ServeGRPC(ctx, request)
	if err != nil {
		return nil, err
	}
	_ = ctx
	return rep.(*HelloReply), nil
}

func NewGreeterGrpcServer(transports GreeterGrpcServerTransports) GreeterService {
	return &greeterGrpcServer{
		sayHello: transports.SayHello(),
	}
}

type greeterGrpcClient struct {
	sayHello endpoint.Endpoint
}

func (c *greeterGrpcClient) SayHello(ctx context.Context, request *HelloRequest) (*HelloReply, error) {
	rep, err := c.sayHello(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*HelloReply), nil
}

func NewGreeterGrpcClient(transports GreeterGrpcClientTransports, middlewares ...endpoint.Middleware) GreeterService {
	return &greeterGrpcClient{
		sayHello: endpointx.Chain(transports.SayHello().Endpoint(), middlewares...),
	}
}
