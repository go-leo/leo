// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package helloworld

import (
	context "context"
	endpoint "github.com/go-kit/kit/endpoint"
	grpc "github.com/go-kit/kit/transport/grpc"
	endpointx "github.com/go-leo/leo/v3/endpointx"
	grpc1 "google.golang.org/grpc"
)

type greeterGRPCServer struct {
	sayHello grpc.Handler
}

func (s *greeterGRPCServer) SayHello(ctx context.Context, request *HelloRequest) (*HelloReply, error) {
	ctx, rep, err := s.sayHello.ServeGRPC(ctx, request)
	if err != nil {
		return nil, err
	}
	_ = ctx
	return rep.(*HelloReply), nil
}

func NewGreeterGRPCServer(
	endpoints interface {
		SayHello() endpoint.Endpoint
	},
	opts []grpc.ServerOption,
	middlewares ...endpoint.Middleware,
) interface {
	SayHello(ctx context.Context, request *HelloRequest) (*HelloReply, error)
} {
	return &greeterGRPCServer{
		sayHello: grpc.NewServer(
			endpointx.Chain(endpoints.SayHello(), middlewares...),
			func(_ context.Context, v any) (any, error) { return v, nil },
			func(_ context.Context, v any) (any, error) { return v, nil },
			opts...,
		),
	}
}

type greeterGRPCClient struct {
	sayHello endpoint.Endpoint
}

func (c *greeterGRPCClient) SayHello(ctx context.Context, request *HelloRequest) (*HelloReply, error) {
	rep, err := c.sayHello(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*HelloReply), nil
}

func NewGreeterGRPCClient(
	conn *grpc1.ClientConn,
	opts []grpc.ClientOption,
	middlewares ...endpoint.Middleware,
) interface {
	SayHello(ctx context.Context, request *HelloRequest) (*HelloReply, error)
} {
	return &greeterGRPCClient{
		sayHello: endpointx.Chain(
			grpc.NewClient(
				conn,
				"helloworld.Greeter",
				"SayHello",
				func(_ context.Context, v any) (any, error) { return v, nil },
				func(_ context.Context, v any) (any, error) { return v, nil },
				HelloReply{},
				opts...,
			).Endpoint(),
			middlewares...),
	}
}
