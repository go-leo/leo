// Code generated by protoc-gen-leo-grpc. DO NOT EDIT.

package helloworld

import (
	context "context"
	endpoint "github.com/go-kit/kit/endpoint"
	grpc "github.com/go-kit/kit/transport/grpc"
	errorx "github.com/go-leo/gox/errorx"
	endpointx "github.com/go-leo/leo/v3/endpointx"
	statusx "github.com/go-leo/leo/v3/statusx"
	transportx "github.com/go-leo/leo/v3/transportx"
	grpcx "github.com/go-leo/leo/v3/transportx/grpcx"
)

// =========================== grpc server ===========================

type GreeterGrpcServerTransports interface {
	SayHello() *grpc.Server
}

type greeterGrpcServerTransports struct {
	sayHello *grpc.Server
}

func (t *greeterGrpcServerTransports) SayHello() *grpc.Server {
	return t.sayHello
}

func newGreeterGrpcServerTransports(endpoints GreeterEndpoints) GreeterGrpcServerTransports {
	return &greeterGrpcServerTransports{
		sayHello: _Greeter_SayHello_GrpcServer_Transport(endpoints),
	}
}

type greeterGrpcServer struct {
	sayHello *grpc.Server
}

func (s *greeterGrpcServer) SayHello(ctx context.Context, request *HelloRequest) (*HelloReply, error) {
	ctx, rep, err := s.sayHello.ServeGRPC(ctx, request)
	if err != nil {
		return nil, err
	}
	_ = ctx
	return rep.(*HelloReply), nil
}

func NewGreeterGrpcServer(svc GreeterService, middlewares ...endpoint.Middleware) GreeterService {
	endpoints := newGreeterServerEndpoints(svc, middlewares...)
	transports := newGreeterGrpcServerTransports(endpoints)
	return &greeterGrpcServer{
		sayHello: transports.SayHello(),
	}
}

// =========================== grpc client ===========================

type greeterGrpcClientTransports struct {
	sayHello transportx.ClientTransport
}

func (t *greeterGrpcClientTransports) SayHello() transportx.ClientTransport {
	return t.sayHello
}

func NewGreeterGrpcClientTransports(target string, options ...transportx.ClientTransportOption) (GreeterClientTransports, error) {
	t := &greeterGrpcClientTransports{}
	var err error
	t.sayHello, err = errorx.Break[transportx.ClientTransport](err)(_Greeter_SayHello_GrpcClient_Transport(target, options...))
	return t, err
}

type greeterGrpcClient struct {
	endpoints GreeterEndpoints
}

func (c *greeterGrpcClient) SayHello(ctx context.Context, request *HelloRequest) (*HelloReply, error) {
	ctx = endpointx.InjectName(ctx, "/helloworld.Greeter/SayHello")
	ctx = transportx.InjectName(ctx, grpcx.GrpcClient)
	rep, err := c.endpoints.SayHello(ctx)(ctx, request)
	if err != nil {
		return nil, statusx.FromGrpcError(err)
	}
	return rep.(*HelloReply), nil
}

func NewGreeterGrpcClient(transports GreeterClientTransports, middlewares ...endpoint.Middleware) GreeterService {
	endpoints := newGreeterClientEndpoints(transports, middlewares...)
	return &greeterGrpcClient{endpoints: endpoints}
}

// =========================== grpc transport ===========================

func _Greeter_SayHello_GrpcServer_Transport(endpoints GreeterEndpoints) *grpc.Server {
	return grpc.NewServer(
		endpoints.SayHello(context.TODO()),
		func(_ context.Context, v any) (any, error) { return v, nil },
		func(_ context.Context, v any) (any, error) { return v, nil },
		grpc.ServerBefore(grpcx.ServerEndpointInjector("/helloworld.Greeter/SayHello")),
		grpc.ServerBefore(grpcx.ServerTransportInjector),
		grpc.ServerBefore(grpcx.IncomingMetadataInjector),
	)
}

func _Greeter_SayHello_GrpcClient_Transport(target string, options ...transportx.ClientTransportOption) func() (transportx.ClientTransport, error) {
	return func() (transportx.ClientTransport, error) {
		return transportx.NewClientTransport(
			target,
			grpcx.ClientFactory(
				"helloworld.Greeter",
				"SayHello",
				func(_ context.Context, v any) (any, error) { return v, nil },
				func(_ context.Context, v any) (any, error) { return v, nil },
				HelloReply{},
				grpc.ClientBefore(grpcx.OutgoingMetadataInjector),
				grpc.ClientBefore(grpcx.OutgoingStain),
			),
			options...,
		)
	}
}
