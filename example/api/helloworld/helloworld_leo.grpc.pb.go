// Code generated by protoc-gen-leo-grpc. DO NOT EDIT.

package helloworld

import (
	context "context"
	endpoint "github.com/go-kit/kit/endpoint"
	grpc "github.com/go-kit/kit/transport/grpc"
	endpointx "github.com/go-leo/leo/v3/endpointx"
	statusx "github.com/go-leo/leo/v3/statusx"
	transportx "github.com/go-leo/leo/v3/transportx"
	grpcx "github.com/go-leo/leo/v3/transportx/grpcx"
	grpc1 "google.golang.org/grpc"
	io "io"
)

// =========================== grpc server ===========================

type GreeterGrpcServerTransports interface {
	SayHello() *grpc.Server
}

type greeterGrpcServerTransports struct {
	sayHello *grpc.Server
}

func (t *greeterGrpcServerTransports) SayHello() *grpc.Server {
	return t.sayHello
}

func newGreeterGrpcServerTransports(endpoints GreeterEndpoints) GreeterGrpcServerTransports {
	return &greeterGrpcServerTransports{
		sayHello: _Greeter_SayHello_GrpcServer_Transport(endpoints),
	}
}

type greeterGrpcServer struct {
	sayHello *grpc.Server
}

func (s *greeterGrpcServer) SayHello(ctx context.Context, request *HelloRequest) (*HelloReply, error) {
	ctx, rep, err := s.sayHello.ServeGRPC(ctx, request)
	if err != nil {
		return nil, err
	}
	_ = ctx
	return rep.(*HelloReply), nil
}

func NewGreeterGrpcServer(svc GreeterService, middlewares ...endpoint.Middleware) GreeterService {
	endpoints := newGreeterServerEndpoints(svc, middlewares...)
	transports := newGreeterGrpcServerTransports(endpoints)
	return &greeterGrpcServer{
		sayHello: transports.SayHello(),
	}
}

// =========================== grpc client ===========================

type greeterGrpcClientTransports struct {
	dialOptions   []grpc1.DialOption
	clientOptions []grpc.ClientOption
	middlewares   []endpoint.Middleware
}

func (t *greeterGrpcClientTransports) SayHello(ctx context.Context, instance string) (endpoint.Endpoint, io.Closer, error) {
	conn, err := grpc1.NewClient(instance, t.dialOptions...)
	if err != nil {
		return nil, nil, err
	}
	opts := []grpc.ClientOption{
		grpc.ClientBefore(grpcx.OutgoingMetadataInjector),
		grpc.ClientBefore(grpcx.OutgoingStain),
	}
	opts = append(opts, t.clientOptions...)
	client := grpc.NewClient(
		conn,
		"helloworld.Greeter",
		"SayHello",
		func(_ context.Context, v any) (any, error) { return v, nil },
		func(_ context.Context, v any) (any, error) { return v, nil },
		HelloReply{},
		opts...)
	return endpointx.Chain(client.Endpoint(), t.middlewares...), conn, nil
}

func newGreeterGrpcClientTransports(
	dialOptions []grpc1.DialOption,
	clientOptions []grpc.ClientOption,
	middlewares []endpoint.Middleware,
) GreeterClientTransports {
	return &greeterGrpcClientTransports{
		dialOptions:   dialOptions,
		clientOptions: clientOptions,
		middlewares:   middlewares,
	}
}

type greeterGrpcClient struct {
	balancers GreeterBalancers
}

func (c *greeterGrpcClient) SayHello(ctx context.Context, request *HelloRequest) (*HelloReply, error) {
	ctx = endpointx.InjectName(ctx, "/helloworld.Greeter/SayHello")
	ctx = transportx.InjectName(ctx, grpcx.GrpcClient)
	balancer, err := c.balancers.SayHello(ctx)
	if err != nil {
		return nil, err
	}
	endpoint, err := balancer.Endpoint()
	if err != nil {
		return nil, err
	}
	rep, err := endpoint(ctx, request)
	if err != nil {
		return nil, statusx.FromGrpcError(err)
	}
	return rep.(*HelloReply), nil
}

func NewGreeterGrpcClient(target string, opts ...grpcx.ClientOption) GreeterService {
	options := grpcx.NewClientOptions(opts...)
	transports := newGreeterGrpcClientTransports(options.DialOptions(), options.ClientTransportOptions(), options.Middlewares())
	factories := newGreeterFactories(transports)
	endpointers := newGreeterEndpointers(target, options.InstancerFactory(), factories, options.Logger(), options.EndpointerOptions()...)
	balancers := newGreeterBalancers(options.BalancerFactory(), endpointers)
	return &greeterHttpClient{balancers: balancers}
}

// =========================== grpc transport ===========================

func _Greeter_SayHello_GrpcServer_Transport(endpoints GreeterEndpoints) *grpc.Server {
	return grpc.NewServer(
		endpoints.SayHello(context.TODO()),
		func(_ context.Context, v any) (any, error) { return v, nil },
		func(_ context.Context, v any) (any, error) { return v, nil },
		grpc.ServerBefore(grpcx.ServerEndpointInjector("/helloworld.Greeter/SayHello")),
		grpc.ServerBefore(grpcx.ServerTransportInjector),
		grpc.ServerBefore(grpcx.IncomingMetadataInjector),
	)
}
