// Code generated by protoc-gen-leo-http. DO NOT EDIT.

package helloworld

import (
	context "context"
	endpoint "github.com/go-kit/kit/endpoint"
	"github.com/go-kit/kit/sd"
	"github.com/go-kit/kit/sd/lb"
	"github.com/go-kit/kit/transport/http"
	"github.com/go-kit/log"
	endpointx "github.com/go-leo/leo/v3/endpointx"
	statusx "github.com/go-leo/leo/v3/statusx"
	transportx "github.com/go-leo/leo/v3/transportx"
	httpx "github.com/go-leo/leo/v3/transportx/httpx"
)

type greeterHttpClientV2 struct {
	target             string
	GreeterEndpointers GreeterEndpointers
}

func (c *greeterHttpClientV2) SayHello(ctx context.Context, request *HelloRequest) (*HelloReply, error) {
	ctx = endpointx.InjectName(ctx, "/helloworld.Greeter/SayHello")
	ctx = transportx.InjectName(ctx, httpx.HttpClient)
	ctx = httpx.InjectTarget(ctx, c.target)
	endpointer := c.GreeterEndpointers.SayHello(ctx)
	balancer := lb.NewRoundRobin(endpointer)
	endpoint, err := balancer.Endpoint()
	if err != nil {
		return nil, err
	}
	rep, err := endpoint(ctx, request)
	if err != nil {
		return nil, statusx.From(err)
	}
	return rep.(*HelloReply), nil
}

func NewGreeterHttpClientV2(
	scheme string,
	clientOptions []http.ClientOption,
	middlewares []endpoint.Middleware,
	target string,
	instancer sd.Instancer,
	EndpointerOptions []sd.EndpointerOption,
	log log.Logger,
) (GreeterService, error) {
	transportsV2 := NewGreeterHttpClientTransportsV2(scheme, clientOptions, middlewares)
	factories := newGreeterFactories(transportsV2)
	endpointers := newGreeterEndpointers(instancer, factories, log, EndpointerOptions...)
	return &greeterHttpClientV2{
		target:             target,
		GreeterEndpointers: endpointers,
	}, nil
}
