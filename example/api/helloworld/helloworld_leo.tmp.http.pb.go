// Code generated by protoc-gen-leo-http. DO NOT EDIT.

package helloworld

import (
	context "context"
	endpointx "github.com/go-leo/leo/v3/endpointx"
	statusx "github.com/go-leo/leo/v3/statusx"
	transportx "github.com/go-leo/leo/v3/transportx"
	httpx "github.com/go-leo/leo/v3/transportx/httpx"
)

type greeterHttpClientV2 struct {
	balancers GreeterBalancers
}

func (c *greeterHttpClientV2) SayHello(ctx context.Context, request *HelloRequest) (*HelloReply, error) {
	ctx = endpointx.InjectName(ctx, "/helloworld.Greeter/SayHello")
	ctx = transportx.InjectName(ctx, httpx.HttpClient)
	balancer, err := c.balancers.SayHello(ctx)
	if err != nil {
		return nil, err
	}
	endpoint, err := balancer.Endpoint()
	if err != nil {
		return nil, err
	}
	rep, err := endpoint(ctx, request)
	if err != nil {
		return nil, statusx.From(err)
	}
	return rep.(*HelloReply), nil
}

func NewGreeterHttpClientV2(target string, opts ...httpx.ClientOption) (GreeterService, error) {
	options := httpx.NewClientOptions(opts...)
	transportsV2 := newGreeterHttpClientTransports(options.Scheme(), options.ClientTransportOptions(), options.Middlewares())
	factories := newGreeterFactories(transportsV2)
	endpointers := newGreeterEndpointers(target, options.InstancerFactory(), factories, options.Logger(), options.EndpointerOptions()...)
	balancers := newGreeterBalancers(options.BalancerFactory(), endpointers)
	return &greeterHttpClientV2{balancers: balancers}, nil
}
