// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.3
// source: api/path/path.proto

package path

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Path_String_FullMethodName          = "/leo.example.demo.v1.Path/String"
	Path_OptString_FullMethodName       = "/leo.example.demo.v1.Path/OptString"
	Path_WrapString_FullMethodName      = "/leo.example.demo.v1.Path/WrapString"
	Path_EmbedString_FullMethodName     = "/leo.example.demo.v1.Path/EmbedString"
	Path_EmbedOptString_FullMethodName  = "/leo.example.demo.v1.Path/EmbedOptString"
	Path_EmbedWrapString_FullMethodName = "/leo.example.demo.v1.Path/EmbedWrapString"
)

// PathClient is the client API for Path service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PathClient interface {
	String(ctx context.Context, in *NamedPathRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	OptString(ctx context.Context, in *NamedPathRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	WrapString(ctx context.Context, in *NamedPathRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	EmbedString(ctx context.Context, in *EmbedNamedPathRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	EmbedOptString(ctx context.Context, in *EmbedNamedPathRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	EmbedWrapString(ctx context.Context, in *EmbedNamedPathRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type pathClient struct {
	cc grpc.ClientConnInterface
}

func NewPathClient(cc grpc.ClientConnInterface) PathClient {
	return &pathClient{cc}
}

func (c *pathClient) String(ctx context.Context, in *NamedPathRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Path_String_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pathClient) OptString(ctx context.Context, in *NamedPathRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Path_OptString_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pathClient) WrapString(ctx context.Context, in *NamedPathRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Path_WrapString_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pathClient) EmbedString(ctx context.Context, in *EmbedNamedPathRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Path_EmbedString_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pathClient) EmbedOptString(ctx context.Context, in *EmbedNamedPathRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Path_EmbedOptString_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pathClient) EmbedWrapString(ctx context.Context, in *EmbedNamedPathRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Path_EmbedWrapString_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PathServer is the server API for Path service.
// All implementations should embed UnimplementedPathServer
// for forward compatibility
type PathServer interface {
	String(context.Context, *NamedPathRequest) (*emptypb.Empty, error)
	OptString(context.Context, *NamedPathRequest) (*emptypb.Empty, error)
	WrapString(context.Context, *NamedPathRequest) (*emptypb.Empty, error)
	EmbedString(context.Context, *EmbedNamedPathRequest) (*emptypb.Empty, error)
	EmbedOptString(context.Context, *EmbedNamedPathRequest) (*emptypb.Empty, error)
	EmbedWrapString(context.Context, *EmbedNamedPathRequest) (*emptypb.Empty, error)
}

// UnimplementedPathServer should be embedded to have forward compatible implementations.
type UnimplementedPathServer struct {
}

func (UnimplementedPathServer) String(context.Context, *NamedPathRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method String not implemented")
}
func (UnimplementedPathServer) OptString(context.Context, *NamedPathRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OptString not implemented")
}
func (UnimplementedPathServer) WrapString(context.Context, *NamedPathRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WrapString not implemented")
}
func (UnimplementedPathServer) EmbedString(context.Context, *EmbedNamedPathRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EmbedString not implemented")
}
func (UnimplementedPathServer) EmbedOptString(context.Context, *EmbedNamedPathRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EmbedOptString not implemented")
}
func (UnimplementedPathServer) EmbedWrapString(context.Context, *EmbedNamedPathRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EmbedWrapString not implemented")
}

// UnsafePathServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PathServer will
// result in compilation errors.
type UnsafePathServer interface {
	mustEmbedUnimplementedPathServer()
}

func RegisterPathServer(s grpc.ServiceRegistrar, srv PathServer) {
	s.RegisterService(&Path_ServiceDesc, srv)
}

func _Path_String_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NamedPathRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PathServer).String(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Path_String_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PathServer).String(ctx, req.(*NamedPathRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Path_OptString_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NamedPathRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PathServer).OptString(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Path_OptString_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PathServer).OptString(ctx, req.(*NamedPathRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Path_WrapString_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NamedPathRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PathServer).WrapString(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Path_WrapString_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PathServer).WrapString(ctx, req.(*NamedPathRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Path_EmbedString_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmbedNamedPathRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PathServer).EmbedString(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Path_EmbedString_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PathServer).EmbedString(ctx, req.(*EmbedNamedPathRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Path_EmbedOptString_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmbedNamedPathRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PathServer).EmbedOptString(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Path_EmbedOptString_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PathServer).EmbedOptString(ctx, req.(*EmbedNamedPathRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Path_EmbedWrapString_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmbedNamedPathRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PathServer).EmbedWrapString(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Path_EmbedWrapString_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PathServer).EmbedWrapString(ctx, req.(*EmbedNamedPathRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Path_ServiceDesc is the grpc.ServiceDesc for Path service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Path_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "leo.example.demo.v1.Path",
	HandlerType: (*PathServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "String",
			Handler:    _Path_String_Handler,
		},
		{
			MethodName: "OptString",
			Handler:    _Path_OptString_Handler,
		},
		{
			MethodName: "WrapString",
			Handler:    _Path_WrapString_Handler,
		},
		{
			MethodName: "EmbedString",
			Handler:    _Path_EmbedString_Handler,
		},
		{
			MethodName: "EmbedOptString",
			Handler:    _Path_EmbedOptString_Handler,
		},
		{
			MethodName: "EmbedWrapString",
			Handler:    _Path_EmbedWrapString_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/path/path.proto",
}
