// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.3
// source: api/path/named_path.proto

package path

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	NamedPath_NamedPathString_FullMethodName          = "/leo.example.path.v1.NamedPath/NamedPathString"
	NamedPath_NamedPathOptString_FullMethodName       = "/leo.example.path.v1.NamedPath/NamedPathOptString"
	NamedPath_NamedPathWrapString_FullMethodName      = "/leo.example.path.v1.NamedPath/NamedPathWrapString"
	NamedPath_EmbedNamedPathString_FullMethodName     = "/leo.example.path.v1.NamedPath/EmbedNamedPathString"
	NamedPath_EmbedNamedPathOptString_FullMethodName  = "/leo.example.path.v1.NamedPath/EmbedNamedPathOptString"
	NamedPath_EmbedNamedPathWrapString_FullMethodName = "/leo.example.path.v1.NamedPath/EmbedNamedPathWrapString"
)

// NamedPathClient is the client API for NamedPath service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NamedPathClient interface {
	NamedPathString(ctx context.Context, in *NamedPathRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	NamedPathOptString(ctx context.Context, in *NamedPathRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	NamedPathWrapString(ctx context.Context, in *NamedPathRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	EmbedNamedPathString(ctx context.Context, in *EmbedNamedPathRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	EmbedNamedPathOptString(ctx context.Context, in *EmbedNamedPathRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	EmbedNamedPathWrapString(ctx context.Context, in *EmbedNamedPathRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type namedPathClient struct {
	cc grpc.ClientConnInterface
}

func NewNamedPathClient(cc grpc.ClientConnInterface) NamedPathClient {
	return &namedPathClient{cc}
}

func (c *namedPathClient) NamedPathString(ctx context.Context, in *NamedPathRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, NamedPath_NamedPathString_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namedPathClient) NamedPathOptString(ctx context.Context, in *NamedPathRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, NamedPath_NamedPathOptString_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namedPathClient) NamedPathWrapString(ctx context.Context, in *NamedPathRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, NamedPath_NamedPathWrapString_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namedPathClient) EmbedNamedPathString(ctx context.Context, in *EmbedNamedPathRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, NamedPath_EmbedNamedPathString_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namedPathClient) EmbedNamedPathOptString(ctx context.Context, in *EmbedNamedPathRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, NamedPath_EmbedNamedPathOptString_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namedPathClient) EmbedNamedPathWrapString(ctx context.Context, in *EmbedNamedPathRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, NamedPath_EmbedNamedPathWrapString_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NamedPathServer is the server API for NamedPath service.
// All implementations should embed UnimplementedNamedPathServer
// for forward compatibility
type NamedPathServer interface {
	NamedPathString(context.Context, *NamedPathRequest) (*emptypb.Empty, error)
	NamedPathOptString(context.Context, *NamedPathRequest) (*emptypb.Empty, error)
	NamedPathWrapString(context.Context, *NamedPathRequest) (*emptypb.Empty, error)
	EmbedNamedPathString(context.Context, *EmbedNamedPathRequest) (*emptypb.Empty, error)
	EmbedNamedPathOptString(context.Context, *EmbedNamedPathRequest) (*emptypb.Empty, error)
	EmbedNamedPathWrapString(context.Context, *EmbedNamedPathRequest) (*emptypb.Empty, error)
}

// UnimplementedNamedPathServer should be embedded to have forward compatible implementations.
type UnimplementedNamedPathServer struct {
}

func (UnimplementedNamedPathServer) NamedPathString(context.Context, *NamedPathRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NamedPathString not implemented")
}
func (UnimplementedNamedPathServer) NamedPathOptString(context.Context, *NamedPathRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NamedPathOptString not implemented")
}
func (UnimplementedNamedPathServer) NamedPathWrapString(context.Context, *NamedPathRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NamedPathWrapString not implemented")
}
func (UnimplementedNamedPathServer) EmbedNamedPathString(context.Context, *EmbedNamedPathRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EmbedNamedPathString not implemented")
}
func (UnimplementedNamedPathServer) EmbedNamedPathOptString(context.Context, *EmbedNamedPathRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EmbedNamedPathOptString not implemented")
}
func (UnimplementedNamedPathServer) EmbedNamedPathWrapString(context.Context, *EmbedNamedPathRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EmbedNamedPathWrapString not implemented")
}

// UnsafeNamedPathServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NamedPathServer will
// result in compilation errors.
type UnsafeNamedPathServer interface {
	mustEmbedUnimplementedNamedPathServer()
}

func RegisterNamedPathServer(s grpc.ServiceRegistrar, srv NamedPathServer) {
	s.RegisterService(&NamedPath_ServiceDesc, srv)
}

func _NamedPath_NamedPathString_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NamedPathRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamedPathServer).NamedPathString(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NamedPath_NamedPathString_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamedPathServer).NamedPathString(ctx, req.(*NamedPathRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NamedPath_NamedPathOptString_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NamedPathRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamedPathServer).NamedPathOptString(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NamedPath_NamedPathOptString_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamedPathServer).NamedPathOptString(ctx, req.(*NamedPathRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NamedPath_NamedPathWrapString_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NamedPathRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamedPathServer).NamedPathWrapString(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NamedPath_NamedPathWrapString_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamedPathServer).NamedPathWrapString(ctx, req.(*NamedPathRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NamedPath_EmbedNamedPathString_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmbedNamedPathRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamedPathServer).EmbedNamedPathString(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NamedPath_EmbedNamedPathString_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamedPathServer).EmbedNamedPathString(ctx, req.(*EmbedNamedPathRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NamedPath_EmbedNamedPathOptString_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmbedNamedPathRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamedPathServer).EmbedNamedPathOptString(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NamedPath_EmbedNamedPathOptString_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamedPathServer).EmbedNamedPathOptString(ctx, req.(*EmbedNamedPathRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NamedPath_EmbedNamedPathWrapString_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmbedNamedPathRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamedPathServer).EmbedNamedPathWrapString(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NamedPath_EmbedNamedPathWrapString_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamedPathServer).EmbedNamedPathWrapString(ctx, req.(*EmbedNamedPathRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NamedPath_ServiceDesc is the grpc.ServiceDesc for NamedPath service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NamedPath_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "leo.example.path.v1.NamedPath",
	HandlerType: (*NamedPathServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NamedPathString",
			Handler:    _NamedPath_NamedPathString_Handler,
		},
		{
			MethodName: "NamedPathOptString",
			Handler:    _NamedPath_NamedPathOptString_Handler,
		},
		{
			MethodName: "NamedPathWrapString",
			Handler:    _NamedPath_NamedPathWrapString_Handler,
		},
		{
			MethodName: "EmbedNamedPathString",
			Handler:    _NamedPath_EmbedNamedPathString_Handler,
		},
		{
			MethodName: "EmbedNamedPathOptString",
			Handler:    _NamedPath_EmbedNamedPathOptString_Handler,
		},
		{
			MethodName: "EmbedNamedPathWrapString",
			Handler:    _NamedPath_EmbedNamedPathWrapString_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/path/named_path.proto",
}
