// Code generated by protoc-gen-leo-core. DO NOT EDIT.

package path

import (
	context "context"
	endpoint "github.com/go-kit/kit/endpoint"
	sd "github.com/go-kit/kit/sd"
	endpointx "github.com/go-leo/leo/v3/endpointx"
	transportx "github.com/go-leo/leo/v3/transportx"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

type NamedPathService interface {
	NamedPathString(ctx context.Context, request *NamedPathRequest) (*emptypb.Empty, error)
	NamedPathOptString(ctx context.Context, request *NamedPathRequest) (*emptypb.Empty, error)
	NamedPathWrapString(ctx context.Context, request *NamedPathRequest) (*emptypb.Empty, error)
	EmbedNamedPathString(ctx context.Context, request *EmbedNamedPathRequest) (*emptypb.Empty, error)
	EmbedNamedPathOptString(ctx context.Context, request *EmbedNamedPathRequest) (*emptypb.Empty, error)
	EmbedNamedPathWrapString(ctx context.Context, request *EmbedNamedPathRequest) (*emptypb.Empty, error)
}

type NamedPathEndpoints interface {
	NamedPathString(ctx context.Context) endpoint.Endpoint
	NamedPathOptString(ctx context.Context) endpoint.Endpoint
	NamedPathWrapString(ctx context.Context) endpoint.Endpoint
	EmbedNamedPathString(ctx context.Context) endpoint.Endpoint
	EmbedNamedPathOptString(ctx context.Context) endpoint.Endpoint
	EmbedNamedPathWrapString(ctx context.Context) endpoint.Endpoint
}

type NamedPathClientTransports interface {
	NamedPathString() transportx.ClientTransport
	NamedPathOptString() transportx.ClientTransport
	NamedPathWrapString() transportx.ClientTransport
	EmbedNamedPathString() transportx.ClientTransport
	EmbedNamedPathOptString() transportx.ClientTransport
	EmbedNamedPathWrapString() transportx.ClientTransport
}

type NamedPathFactories interface {
	NamedPathString(middlewares ...endpoint.Middleware) sd.Factory
	NamedPathOptString(middlewares ...endpoint.Middleware) sd.Factory
	NamedPathWrapString(middlewares ...endpoint.Middleware) sd.Factory
	EmbedNamedPathString(middlewares ...endpoint.Middleware) sd.Factory
	EmbedNamedPathOptString(middlewares ...endpoint.Middleware) sd.Factory
	EmbedNamedPathWrapString(middlewares ...endpoint.Middleware) sd.Factory
}

type NamedPathEndpointers interface {
	NamedPathString() sd.Endpointer
	NamedPathOptString() sd.Endpointer
	NamedPathWrapString() sd.Endpointer
	EmbedNamedPathString() sd.Endpointer
	EmbedNamedPathOptString() sd.Endpointer
	EmbedNamedPathWrapString() sd.Endpointer
}

type namedPathServerEndpoints struct {
	svc         NamedPathService
	middlewares []endpoint.Middleware
}

func (e *namedPathServerEndpoints) NamedPathString(context.Context) endpoint.Endpoint {
	component := func(ctx context.Context, request any) (any, error) {
		return e.svc.NamedPathString(ctx, request.(*NamedPathRequest))
	}
	return endpointx.Chain(component, e.middlewares...)
}

func (e *namedPathServerEndpoints) NamedPathOptString(context.Context) endpoint.Endpoint {
	component := func(ctx context.Context, request any) (any, error) {
		return e.svc.NamedPathOptString(ctx, request.(*NamedPathRequest))
	}
	return endpointx.Chain(component, e.middlewares...)
}

func (e *namedPathServerEndpoints) NamedPathWrapString(context.Context) endpoint.Endpoint {
	component := func(ctx context.Context, request any) (any, error) {
		return e.svc.NamedPathWrapString(ctx, request.(*NamedPathRequest))
	}
	return endpointx.Chain(component, e.middlewares...)
}

func (e *namedPathServerEndpoints) EmbedNamedPathString(context.Context) endpoint.Endpoint {
	component := func(ctx context.Context, request any) (any, error) {
		return e.svc.EmbedNamedPathString(ctx, request.(*EmbedNamedPathRequest))
	}
	return endpointx.Chain(component, e.middlewares...)
}

func (e *namedPathServerEndpoints) EmbedNamedPathOptString(context.Context) endpoint.Endpoint {
	component := func(ctx context.Context, request any) (any, error) {
		return e.svc.EmbedNamedPathOptString(ctx, request.(*EmbedNamedPathRequest))
	}
	return endpointx.Chain(component, e.middlewares...)
}

func (e *namedPathServerEndpoints) EmbedNamedPathWrapString(context.Context) endpoint.Endpoint {
	component := func(ctx context.Context, request any) (any, error) {
		return e.svc.EmbedNamedPathWrapString(ctx, request.(*EmbedNamedPathRequest))
	}
	return endpointx.Chain(component, e.middlewares...)
}

func newNamedPathServerEndpoints(svc NamedPathService, middlewares ...endpoint.Middleware) NamedPathEndpoints {
	return &namedPathServerEndpoints{svc: svc, middlewares: middlewares}
}

type namedPathClientEndpoints struct {
	transports  NamedPathClientTransports
	middlewares []endpoint.Middleware
}

func (e *namedPathClientEndpoints) NamedPathString(ctx context.Context) endpoint.Endpoint {
	return endpointx.Chain(e.transports.NamedPathString().Endpoint(ctx), e.middlewares...)
}

func (e *namedPathClientEndpoints) NamedPathOptString(ctx context.Context) endpoint.Endpoint {
	return endpointx.Chain(e.transports.NamedPathOptString().Endpoint(ctx), e.middlewares...)
}

func (e *namedPathClientEndpoints) NamedPathWrapString(ctx context.Context) endpoint.Endpoint {
	return endpointx.Chain(e.transports.NamedPathWrapString().Endpoint(ctx), e.middlewares...)
}

func (e *namedPathClientEndpoints) EmbedNamedPathString(ctx context.Context) endpoint.Endpoint {
	return endpointx.Chain(e.transports.EmbedNamedPathString().Endpoint(ctx), e.middlewares...)
}

func (e *namedPathClientEndpoints) EmbedNamedPathOptString(ctx context.Context) endpoint.Endpoint {
	return endpointx.Chain(e.transports.EmbedNamedPathOptString().Endpoint(ctx), e.middlewares...)
}

func (e *namedPathClientEndpoints) EmbedNamedPathWrapString(ctx context.Context) endpoint.Endpoint {
	return endpointx.Chain(e.transports.EmbedNamedPathWrapString().Endpoint(ctx), e.middlewares...)
}

func newNamedPathClientEndpoints(transports NamedPathClientTransports, middlewares ...endpoint.Middleware) NamedPathEndpoints {
	return &namedPathClientEndpoints{transports: transports, middlewares: middlewares}
}
