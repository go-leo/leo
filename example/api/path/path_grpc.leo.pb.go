// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package path

import (
	context "context"
	endpoint "github.com/go-kit/kit/endpoint"
	grpc "github.com/go-kit/kit/transport/grpc"
	endpointx "github.com/go-leo/kitx/endpointx"
	grpc1 "google.golang.org/grpc"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

type gRPCPathServer struct {
	string grpc.Handler

	optString grpc.Handler

	wrapString grpc.Handler

	embedString grpc.Handler

	embedOptString grpc.Handler

	embedWrapString grpc.Handler
}

func (s *gRPCPathServer) String(ctx context.Context, request *NamedPathRequest) (*emptypb.Empty, error) {
	ctx, rep, err := s.string.ServeGRPC(ctx, request)
	if err != nil {
		return nil, err
	}
	_ = ctx
	return rep.(*emptypb.Empty), nil
}

func (s *gRPCPathServer) OptString(ctx context.Context, request *NamedPathRequest) (*emptypb.Empty, error) {
	ctx, rep, err := s.optString.ServeGRPC(ctx, request)
	if err != nil {
		return nil, err
	}
	_ = ctx
	return rep.(*emptypb.Empty), nil
}

func (s *gRPCPathServer) WrapString(ctx context.Context, request *NamedPathRequest) (*emptypb.Empty, error) {
	ctx, rep, err := s.wrapString.ServeGRPC(ctx, request)
	if err != nil {
		return nil, err
	}
	_ = ctx
	return rep.(*emptypb.Empty), nil
}

func (s *gRPCPathServer) EmbedString(ctx context.Context, request *EmbedNamedPathRequest) (*emptypb.Empty, error) {
	ctx, rep, err := s.embedString.ServeGRPC(ctx, request)
	if err != nil {
		return nil, err
	}
	_ = ctx
	return rep.(*emptypb.Empty), nil
}

func (s *gRPCPathServer) EmbedOptString(ctx context.Context, request *EmbedNamedPathRequest) (*emptypb.Empty, error) {
	ctx, rep, err := s.embedOptString.ServeGRPC(ctx, request)
	if err != nil {
		return nil, err
	}
	_ = ctx
	return rep.(*emptypb.Empty), nil
}

func (s *gRPCPathServer) EmbedWrapString(ctx context.Context, request *EmbedNamedPathRequest) (*emptypb.Empty, error) {
	ctx, rep, err := s.embedWrapString.ServeGRPC(ctx, request)
	if err != nil {
		return nil, err
	}
	_ = ctx
	return rep.(*emptypb.Empty), nil
}

func NewPathGRPCServer(
	endpoints interface {
		String() endpoint.Endpoint
		OptString() endpoint.Endpoint
		WrapString() endpoint.Endpoint
		EmbedString() endpoint.Endpoint
		EmbedOptString() endpoint.Endpoint
		EmbedWrapString() endpoint.Endpoint
	},
	mdw []endpoint.Middleware,
	opts ...grpc.ServerOption,
) interface {
	String(ctx context.Context, request *NamedPathRequest) (*emptypb.Empty, error)
	OptString(ctx context.Context, request *NamedPathRequest) (*emptypb.Empty, error)
	WrapString(ctx context.Context, request *NamedPathRequest) (*emptypb.Empty, error)
	EmbedString(ctx context.Context, request *EmbedNamedPathRequest) (*emptypb.Empty, error)
	EmbedOptString(ctx context.Context, request *EmbedNamedPathRequest) (*emptypb.Empty, error)
	EmbedWrapString(ctx context.Context, request *EmbedNamedPathRequest) (*emptypb.Empty, error)
} {
	return &gRPCPathServer{
		string: grpc.NewServer(
			endpointx.Chain(endpoints.String(), mdw...),
			func(_ context.Context, v any) (any, error) { return v, nil },
			func(_ context.Context, v any) (any, error) { return v, nil },
			opts...,
		),
		optString: grpc.NewServer(
			endpointx.Chain(endpoints.OptString(), mdw...),
			func(_ context.Context, v any) (any, error) { return v, nil },
			func(_ context.Context, v any) (any, error) { return v, nil },
			opts...,
		),
		wrapString: grpc.NewServer(
			endpointx.Chain(endpoints.WrapString(), mdw...),
			func(_ context.Context, v any) (any, error) { return v, nil },
			func(_ context.Context, v any) (any, error) { return v, nil },
			opts...,
		),
		embedString: grpc.NewServer(
			endpointx.Chain(endpoints.EmbedString(), mdw...),
			func(_ context.Context, v any) (any, error) { return v, nil },
			func(_ context.Context, v any) (any, error) { return v, nil },
			opts...,
		),
		embedOptString: grpc.NewServer(
			endpointx.Chain(endpoints.EmbedOptString(), mdw...),
			func(_ context.Context, v any) (any, error) { return v, nil },
			func(_ context.Context, v any) (any, error) { return v, nil },
			opts...,
		),
		embedWrapString: grpc.NewServer(
			endpointx.Chain(endpoints.EmbedWrapString(), mdw...),
			func(_ context.Context, v any) (any, error) { return v, nil },
			func(_ context.Context, v any) (any, error) { return v, nil },
			opts...,
		),
	}
}

type gRPCPathClient struct {
	string          endpoint.Endpoint
	optString       endpoint.Endpoint
	wrapString      endpoint.Endpoint
	embedString     endpoint.Endpoint
	embedOptString  endpoint.Endpoint
	embedWrapString endpoint.Endpoint
}

func (c *gRPCPathClient) String(ctx context.Context, request *NamedPathRequest) (*emptypb.Empty, error) {
	rep, err := c.string(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*emptypb.Empty), nil
}

func (c *gRPCPathClient) OptString(ctx context.Context, request *NamedPathRequest) (*emptypb.Empty, error) {
	rep, err := c.optString(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*emptypb.Empty), nil
}

func (c *gRPCPathClient) WrapString(ctx context.Context, request *NamedPathRequest) (*emptypb.Empty, error) {
	rep, err := c.wrapString(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*emptypb.Empty), nil
}

func (c *gRPCPathClient) EmbedString(ctx context.Context, request *EmbedNamedPathRequest) (*emptypb.Empty, error) {
	rep, err := c.embedString(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*emptypb.Empty), nil
}

func (c *gRPCPathClient) EmbedOptString(ctx context.Context, request *EmbedNamedPathRequest) (*emptypb.Empty, error) {
	rep, err := c.embedOptString(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*emptypb.Empty), nil
}

func (c *gRPCPathClient) EmbedWrapString(ctx context.Context, request *EmbedNamedPathRequest) (*emptypb.Empty, error) {
	rep, err := c.embedWrapString(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*emptypb.Empty), nil
}

func NewPathGRPCClient(
	conn *grpc1.ClientConn,
	mdw []endpoint.Middleware,
	opts ...grpc.ClientOption,
) interface {
	String(ctx context.Context, request *NamedPathRequest) (*emptypb.Empty, error)
	OptString(ctx context.Context, request *NamedPathRequest) (*emptypb.Empty, error)
	WrapString(ctx context.Context, request *NamedPathRequest) (*emptypb.Empty, error)
	EmbedString(ctx context.Context, request *EmbedNamedPathRequest) (*emptypb.Empty, error)
	EmbedOptString(ctx context.Context, request *EmbedNamedPathRequest) (*emptypb.Empty, error)
	EmbedWrapString(ctx context.Context, request *EmbedNamedPathRequest) (*emptypb.Empty, error)
} {
	return &gRPCPathClient{
		string: endpointx.Chain(
			grpc.NewClient(
				conn,
				"leo.example.demo.v1.Path",
				"String",
				func(_ context.Context, v any) (any, error) { return v, nil },
				func(_ context.Context, v any) (any, error) { return v, nil },
				emptypb.Empty{},
				opts...,
			).Endpoint(),
			mdw...),
		optString: endpointx.Chain(
			grpc.NewClient(
				conn,
				"leo.example.demo.v1.Path",
				"OptString",
				func(_ context.Context, v any) (any, error) { return v, nil },
				func(_ context.Context, v any) (any, error) { return v, nil },
				emptypb.Empty{},
				opts...,
			).Endpoint(),
			mdw...),
		wrapString: endpointx.Chain(
			grpc.NewClient(
				conn,
				"leo.example.demo.v1.Path",
				"WrapString",
				func(_ context.Context, v any) (any, error) { return v, nil },
				func(_ context.Context, v any) (any, error) { return v, nil },
				emptypb.Empty{},
				opts...,
			).Endpoint(),
			mdw...),
		embedString: endpointx.Chain(
			grpc.NewClient(
				conn,
				"leo.example.demo.v1.Path",
				"EmbedString",
				func(_ context.Context, v any) (any, error) { return v, nil },
				func(_ context.Context, v any) (any, error) { return v, nil },
				emptypb.Empty{},
				opts...,
			).Endpoint(),
			mdw...),
		embedOptString: endpointx.Chain(
			grpc.NewClient(
				conn,
				"leo.example.demo.v1.Path",
				"EmbedOptString",
				func(_ context.Context, v any) (any, error) { return v, nil },
				func(_ context.Context, v any) (any, error) { return v, nil },
				emptypb.Empty{},
				opts...,
			).Endpoint(),
			mdw...),
		embedWrapString: endpointx.Chain(
			grpc.NewClient(
				conn,
				"leo.example.demo.v1.Path",
				"EmbedWrapString",
				func(_ context.Context, v any) (any, error) { return v, nil },
				func(_ context.Context, v any) (any, error) { return v, nil },
				emptypb.Empty{},
				opts...,
			).Endpoint(),
			mdw...),
	}
}
