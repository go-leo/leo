// Code generated by protoc-gen-leo-core. DO NOT EDIT.

package path

import (
	context "context"
	endpoint "github.com/go-kit/kit/endpoint"
	sd "github.com/go-kit/kit/sd"
	lb "github.com/go-kit/kit/sd/lb"
	log "github.com/go-kit/log"
	lazyloadx "github.com/go-leo/gox/syncx/lazyloadx"
	endpointx "github.com/go-leo/leo/v3/endpointx"
	sdx "github.com/go-leo/leo/v3/sdx"
	lbx "github.com/go-leo/leo/v3/sdx/lbx"
	stain "github.com/go-leo/leo/v3/sdx/stain"
	statusx "github.com/go-leo/leo/v3/statusx"
	transportx "github.com/go-leo/leo/v3/transportx"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	io "io"
)

// MixPathService is a service
type MixPathService interface {
	MixPath(ctx context.Context, request *MixPathRequest) (*emptypb.Empty, error)
}

// MixPathServerEndpoints is server endpoints
type MixPathServerEndpoints interface {
	MixPath(ctx context.Context) endpoint.Endpoint
}

// MixPathClientEndpoints is client endpoints
type MixPathClientEndpoints interface {
	MixPath(ctx context.Context) (endpoint.Endpoint, error)
}

// MixPathClientTransports is client transports
type MixPathClientTransports interface {
	MixPath(ctx context.Context, instance string) (endpoint.Endpoint, io.Closer, error)
}

// MixPathFactories is client factories
type MixPathFactories interface {
	MixPath(ctx context.Context) sd.Factory
}

// MixPathEndpointers is client endpointers
type MixPathEndpointers interface {
	MixPath(ctx context.Context, color string) (sd.Endpointer, error)
}

// MixPathBalancers is client balancers
type MixPathBalancers interface {
	MixPath(ctx context.Context) (lb.Balancer, error)
}

// mixPathServerEndpoints implements MixPathServerEndpoints
type mixPathServerEndpoints struct {
	svc         MixPathService
	middlewares []endpoint.Middleware
}

func (e *mixPathServerEndpoints) MixPath(context.Context) endpoint.Endpoint {
	component := func(ctx context.Context, request any) (any, error) {
		return e.svc.MixPath(ctx, request.(*MixPathRequest))
	}
	return endpointx.Chain(component, e.middlewares...)
}
func newMixPathServerEndpoints(svc MixPathService, middlewares ...endpoint.Middleware) MixPathServerEndpoints {
	return &mixPathServerEndpoints{svc: svc, middlewares: middlewares}
}

// mixPathClientEndpoints implements MixPathClientEndpoints
type mixPathClientEndpoints struct {
	balancers MixPathBalancers
}

func (e *mixPathClientEndpoints) MixPath(ctx context.Context) (endpoint.Endpoint, error) {
	balancer, err := e.balancers.MixPath(ctx)
	if err != nil {
		return nil, err
	}
	return balancer.Endpoint()
}
func newMixPathClientEndpoints(
	target string,
	transports MixPathClientTransports,
	builder sdx.Builder,
	endpointerOptions []sd.EndpointerOption,
	balancerFactory lbx.BalancerFactory,
	logger log.Logger,
) MixPathClientEndpoints {
	factories := newMixPathFactories(transports)
	endpointers := newMixPathEndpointers(target, builder, factories, logger, endpointerOptions...)
	balancers := newMixPathBalancers(balancerFactory, endpointers)
	return &mixPathClientEndpoints{balancers: balancers}
}

// mixPathFactories implements MixPathFactories
type mixPathFactories struct {
	transports MixPathClientTransports
}

func (f *mixPathFactories) MixPath(ctx context.Context) sd.Factory {
	return func(instance string) (endpoint.Endpoint, io.Closer, error) {
		return f.transports.MixPath(ctx, instance)
	}
}
func newMixPathFactories(transports MixPathClientTransports) MixPathFactories {
	return &mixPathFactories{transports: transports}
}

// mixPathEndpointers implements MixPathEndpointers
type mixPathEndpointers struct {
	target    string
	builder   sdx.Builder
	factories MixPathFactories
	logger    log.Logger
	options   []sd.EndpointerOption
}

func (e *mixPathEndpointers) MixPath(ctx context.Context, color string) (sd.Endpointer, error) {
	return sdx.NewEndpointer(ctx, e.target, color, e.builder, e.factories.MixPath(ctx), e.logger, e.options...)
}
func newMixPathEndpointers(
	target string,
	builder sdx.Builder,
	factories MixPathFactories,
	logger log.Logger,
	options ...sd.EndpointerOption,
) MixPathEndpointers {
	return &mixPathEndpointers{
		target:    target,
		builder:   builder,
		factories: factories,
		logger:    logger,
		options:   options,
	}
}

// mixPathBalancers implements MixPathBalancers
type mixPathBalancers struct {
	factory    lbx.BalancerFactory
	endpointer MixPathEndpointers
	mixPath    lazyloadx.Group[lb.Balancer]
}

func (b *mixPathBalancers) MixPath(ctx context.Context) (lb.Balancer, error) {
	color, _ := stain.ExtractColor(ctx)
	balancer, err, _ := b.mixPath.LoadOrNew(color, lbx.NewBalancer(ctx, b.factory, b.endpointer.MixPath))
	return balancer, err
}
func newMixPathBalancers(factory lbx.BalancerFactory, endpointer MixPathEndpointers) MixPathBalancers {
	return &mixPathBalancers{
		factory:    factory,
		endpointer: endpointer,
		mixPath:    lazyloadx.Group[lb.Balancer]{},
	}
}

// mixPathClientService implements MixPathClientService
type mixPathClientService struct {
	endpoints     MixPathClientEndpoints
	transportName string
}

func (c *mixPathClientService) MixPath(ctx context.Context, request *MixPathRequest) (*emptypb.Empty, error) {
	ctx = endpointx.InjectName(ctx, "/leo.example.path.v1.MixPath/MixPath")
	ctx = transportx.InjectName(ctx, c.transportName)
	endpoint, err := c.endpoints.MixPath(ctx)
	if err != nil {
		return nil, err
	}
	rep, err := endpoint(ctx, request)
	if err != nil {
		return nil, statusx.From(err)
	}
	return rep.(*emptypb.Empty), nil
}
func newMixPathClientService(endpoints MixPathClientEndpoints, transportName string) MixPathService {
	return &mixPathClientService{endpoints: endpoints, transportName: transportName}
}
