// Code generated by protoc-gen-leo-grpc. DO NOT EDIT.

package path

import (
	context "context"
	endpoint "github.com/go-kit/kit/endpoint"
	grpc "github.com/go-kit/kit/transport/grpc"
	endpointx "github.com/go-leo/leo/v3/endpointx"
	grpcx "github.com/go-leo/leo/v3/transportx/grpcx"
	grpc1 "google.golang.org/grpc"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	io "io"
)

// =========================== grpc server ===========================

type MixPathGrpcServerTransports interface {
	MixPath() *grpc.Server
}

type mixPathGrpcServerTransports struct {
	mixPath *grpc.Server
}

func (t *mixPathGrpcServerTransports) MixPath() *grpc.Server {
	return t.mixPath
}

func newMixPathGrpcServerTransports(endpoints MixPathEndpoints) MixPathGrpcServerTransports {
	return &mixPathGrpcServerTransports{
		mixPath: _MixPath_MixPath_GrpcServer_Transport(endpoints),
	}
}

type mixPathGrpcServer struct {
	mixPath *grpc.Server
}

func (s *mixPathGrpcServer) MixPath(ctx context.Context, request *MixPathRequest) (*emptypb.Empty, error) {
	ctx, rep, err := s.mixPath.ServeGRPC(ctx, request)
	if err != nil {
		return nil, err
	}
	_ = ctx
	return rep.(*emptypb.Empty), nil
}

func NewMixPathGrpcServer(svc MixPathService, middlewares ...endpoint.Middleware) MixPathService {
	endpoints := newMixPathServerEndpoints(svc, middlewares...)
	transports := newMixPathGrpcServerTransports(endpoints)
	return &mixPathGrpcServer{
		mixPath: transports.MixPath(),
	}
}

// =========================== grpc client ===========================

type mixPathGrpcClientTransports struct {
	dialOptions   []grpc1.DialOption
	clientOptions []grpc.ClientOption
	middlewares   []endpoint.Middleware
}

func (t *mixPathGrpcClientTransports) MixPath(ctx context.Context, instance string) (endpoint.Endpoint, io.Closer, error) {
	conn, err := grpc1.NewClient(instance, t.dialOptions...)
	if err != nil {
		return nil, nil, err
	}
	opts := []grpc.ClientOption{
		grpc.ClientBefore(grpcx.OutgoingMetadataInjector),
		grpc.ClientBefore(grpcx.OutgoingStain),
	}
	opts = append(opts, t.clientOptions...)
	client := grpc.NewClient(
		conn,
		"leo.example.path.v1.MixPath",
		"MixPath",
		func(_ context.Context, v any) (any, error) { return v, nil },
		func(_ context.Context, v any) (any, error) { return v, nil },
		emptypb.Empty{},
		opts...)
	return endpointx.Chain(client.Endpoint(), t.middlewares...), conn, nil
}

func newMixPathGrpcClientTransports(
	dialOptions []grpc1.DialOption,
	clientOptions []grpc.ClientOption,
	middlewares []endpoint.Middleware,
) MixPathClientTransports {
	return &mixPathGrpcClientTransports{
		dialOptions:   dialOptions,
		clientOptions: clientOptions,
		middlewares:   middlewares,
	}
}

func NewMixPathGrpcClient(target string, opts ...grpcx.ClientOption) MixPathService {
	options := grpcx.NewClientOptions(opts...)
	transports := newMixPathGrpcClientTransports(options.DialOptions(), options.ClientTransportOptions(), options.Middlewares())
	endpoints := newMixPathClientEndpoints(target, transports, options.InstancerFactory(), options.EndpointerOptions(), options.BalancerFactory(), options.Logger())
	return newMixPathClientService(endpoints, grpcx.GrpcClient)
}

// =========================== grpc transport ===========================

func _MixPath_MixPath_GrpcServer_Transport(endpoints MixPathEndpoints) *grpc.Server {
	return grpc.NewServer(
		endpoints.MixPath(context.TODO()),
		func(_ context.Context, v any) (any, error) { return v, nil },
		func(_ context.Context, v any) (any, error) { return v, nil },
		grpc.ServerBefore(grpcx.ServerEndpointInjector("/leo.example.path.v1.MixPath/MixPath")),
		grpc.ServerBefore(grpcx.ServerTransportInjector),
		grpc.ServerBefore(grpcx.IncomingMetadataInjector),
	)
}
