// Code generated by protoc-gen-leo-grpc. DO NOT EDIT.

package path

import (
	context "context"
	endpoint "github.com/go-kit/kit/endpoint"
	grpc "github.com/go-kit/kit/transport/grpc"
	errorx "github.com/go-leo/gox/errorx"
	endpointx "github.com/go-leo/leo/v3/endpointx"
	statusx "github.com/go-leo/leo/v3/statusx"
	transportx "github.com/go-leo/leo/v3/transportx"
	grpcx "github.com/go-leo/leo/v3/transportx/grpcx"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// =========================== grpc server ===========================

type MixPathGrpcServerTransports interface {
	MixPath() *grpc.Server
}

type mixPathGrpcServerTransports struct {
	mixPath *grpc.Server
}

func (t *mixPathGrpcServerTransports) MixPath() *grpc.Server {
	return t.mixPath
}

func newMixPathGrpcServerTransports(endpoints MixPathEndpoints) MixPathGrpcServerTransports {
	return &mixPathGrpcServerTransports{
		mixPath: _MixPath_MixPath_GrpcServer_Transport(endpoints),
	}
}

type mixPathGrpcServer struct {
	mixPath *grpc.Server
}

func (s *mixPathGrpcServer) MixPath(ctx context.Context, request *MixPathRequest) (*emptypb.Empty, error) {
	ctx, rep, err := s.mixPath.ServeGRPC(ctx, request)
	if err != nil {
		return nil, err
	}
	_ = ctx
	return rep.(*emptypb.Empty), nil
}

func NewMixPathGrpcServer(svc MixPathService, middlewares ...endpoint.Middleware) MixPathService {
	endpoints := newMixPathServerEndpoints(svc, middlewares...)
	transports := newMixPathGrpcServerTransports(endpoints)
	return &mixPathGrpcServer{
		mixPath: transports.MixPath(),
	}
}

// =========================== grpc client ===========================

type mixPathGrpcClientTransports struct {
	mixPath transportx.ClientTransport
}

func (t *mixPathGrpcClientTransports) MixPath() transportx.ClientTransport {
	return t.mixPath
}

func NewMixPathGrpcClientTransports(target string, options ...transportx.ClientTransportOption) (MixPathClientTransports, error) {
	t := &mixPathGrpcClientTransports{}
	var err error
	t.mixPath, err = errorx.Break[transportx.ClientTransport](err)(_MixPath_MixPath_GrpcClient_Transport(target, options...))
	return t, err
}

type mixPathGrpcClient struct {
	endpoints MixPathEndpoints
}

func (c *mixPathGrpcClient) MixPath(ctx context.Context, request *MixPathRequest) (*emptypb.Empty, error) {
	ctx = endpointx.InjectName(ctx, "/leo.example.path.v1.MixPath/MixPath")
	ctx = transportx.InjectName(ctx, grpcx.GrpcClient)
	rep, err := c.endpoints.MixPath(ctx)(ctx, request)
	if err != nil {
		return nil, statusx.FromGrpcError(err)
	}
	return rep.(*emptypb.Empty), nil
}

func NewMixPathGrpcClient(transports MixPathClientTransports, middlewares ...endpoint.Middleware) MixPathService {
	endpoints := newMixPathClientEndpoints(transports, middlewares...)
	return &mixPathGrpcClient{endpoints: endpoints}
}

// =========================== grpc transport ===========================

func _MixPath_MixPath_GrpcServer_Transport(endpoints MixPathEndpoints) *grpc.Server {
	return grpc.NewServer(
		endpoints.MixPath(context.TODO()),
		func(_ context.Context, v any) (any, error) { return v, nil },
		func(_ context.Context, v any) (any, error) { return v, nil },
		grpc.ServerBefore(grpcx.ServerEndpointInjector("/leo.example.path.v1.MixPath/MixPath")),
		grpc.ServerBefore(grpcx.ServerTransportInjector),
		grpc.ServerBefore(grpcx.IncomingMetadataInjector),
	)
}

func _MixPath_MixPath_GrpcClient_Transport(target string, options ...transportx.ClientTransportOption) func() (transportx.ClientTransport, error) {
	return func() (transportx.ClientTransport, error) {
		return transportx.NewClientTransport(
			target,
			grpcx.ClientFactory(
				"leo.example.path.v1.MixPath",
				"MixPath",
				func(_ context.Context, v any) (any, error) { return v, nil },
				func(_ context.Context, v any) (any, error) { return v, nil },
				emptypb.Empty{},
				grpc.ClientBefore(grpcx.OutgoingMetadataInjector),
			),
			options...,
		)
	}
}
