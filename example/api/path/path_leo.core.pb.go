// Code generated by protoc-gen-leo-core. DO NOT EDIT.

package path

import (
	context "context"
	endpoint "github.com/go-kit/kit/endpoint"
	sd "github.com/go-kit/kit/sd"
	endpointx "github.com/go-leo/leo/v3/endpointx"
	transportx "github.com/go-leo/leo/v3/transportx"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

type PathService interface {
	BoolPath(ctx context.Context, request *PathRequest) (*emptypb.Empty, error)
	Int32Path(ctx context.Context, request *PathRequest) (*emptypb.Empty, error)
	Int64Path(ctx context.Context, request *PathRequest) (*emptypb.Empty, error)
	Uint32Path(ctx context.Context, request *PathRequest) (*emptypb.Empty, error)
	Uint64Path(ctx context.Context, request *PathRequest) (*emptypb.Empty, error)
	FloatPath(ctx context.Context, request *PathRequest) (*emptypb.Empty, error)
	DoublePath(ctx context.Context, request *PathRequest) (*emptypb.Empty, error)
	StringPath(ctx context.Context, request *PathRequest) (*emptypb.Empty, error)
	EnumPath(ctx context.Context, request *PathRequest) (*emptypb.Empty, error)
}

type PathEndpoints interface {
	BoolPath(ctx context.Context) endpoint.Endpoint
	Int32Path(ctx context.Context) endpoint.Endpoint
	Int64Path(ctx context.Context) endpoint.Endpoint
	Uint32Path(ctx context.Context) endpoint.Endpoint
	Uint64Path(ctx context.Context) endpoint.Endpoint
	FloatPath(ctx context.Context) endpoint.Endpoint
	DoublePath(ctx context.Context) endpoint.Endpoint
	StringPath(ctx context.Context) endpoint.Endpoint
	EnumPath(ctx context.Context) endpoint.Endpoint
}

type PathClientTransports interface {
	BoolPath() transportx.ClientTransport
	Int32Path() transportx.ClientTransport
	Int64Path() transportx.ClientTransport
	Uint32Path() transportx.ClientTransport
	Uint64Path() transportx.ClientTransport
	FloatPath() transportx.ClientTransport
	DoublePath() transportx.ClientTransport
	StringPath() transportx.ClientTransport
	EnumPath() transportx.ClientTransport
}

type PathFactories interface {
	BoolPath(middlewares ...endpoint.Middleware) sd.Factory
	Int32Path(middlewares ...endpoint.Middleware) sd.Factory
	Int64Path(middlewares ...endpoint.Middleware) sd.Factory
	Uint32Path(middlewares ...endpoint.Middleware) sd.Factory
	Uint64Path(middlewares ...endpoint.Middleware) sd.Factory
	FloatPath(middlewares ...endpoint.Middleware) sd.Factory
	DoublePath(middlewares ...endpoint.Middleware) sd.Factory
	StringPath(middlewares ...endpoint.Middleware) sd.Factory
	EnumPath(middlewares ...endpoint.Middleware) sd.Factory
}

type PathEndpointers interface {
	BoolPath() sd.Endpointer
	Int32Path() sd.Endpointer
	Int64Path() sd.Endpointer
	Uint32Path() sd.Endpointer
	Uint64Path() sd.Endpointer
	FloatPath() sd.Endpointer
	DoublePath() sd.Endpointer
	StringPath() sd.Endpointer
	EnumPath() sd.Endpointer
}

type pathServerEndpoints struct {
	svc         PathService
	middlewares []endpoint.Middleware
}

func (e *pathServerEndpoints) BoolPath(context.Context) endpoint.Endpoint {
	component := func(ctx context.Context, request any) (any, error) {
		return e.svc.BoolPath(ctx, request.(*PathRequest))
	}
	return endpointx.Chain(component, e.middlewares...)
}

func (e *pathServerEndpoints) Int32Path(context.Context) endpoint.Endpoint {
	component := func(ctx context.Context, request any) (any, error) {
		return e.svc.Int32Path(ctx, request.(*PathRequest))
	}
	return endpointx.Chain(component, e.middlewares...)
}

func (e *pathServerEndpoints) Int64Path(context.Context) endpoint.Endpoint {
	component := func(ctx context.Context, request any) (any, error) {
		return e.svc.Int64Path(ctx, request.(*PathRequest))
	}
	return endpointx.Chain(component, e.middlewares...)
}

func (e *pathServerEndpoints) Uint32Path(context.Context) endpoint.Endpoint {
	component := func(ctx context.Context, request any) (any, error) {
		return e.svc.Uint32Path(ctx, request.(*PathRequest))
	}
	return endpointx.Chain(component, e.middlewares...)
}

func (e *pathServerEndpoints) Uint64Path(context.Context) endpoint.Endpoint {
	component := func(ctx context.Context, request any) (any, error) {
		return e.svc.Uint64Path(ctx, request.(*PathRequest))
	}
	return endpointx.Chain(component, e.middlewares...)
}

func (e *pathServerEndpoints) FloatPath(context.Context) endpoint.Endpoint {
	component := func(ctx context.Context, request any) (any, error) {
		return e.svc.FloatPath(ctx, request.(*PathRequest))
	}
	return endpointx.Chain(component, e.middlewares...)
}

func (e *pathServerEndpoints) DoublePath(context.Context) endpoint.Endpoint {
	component := func(ctx context.Context, request any) (any, error) {
		return e.svc.DoublePath(ctx, request.(*PathRequest))
	}
	return endpointx.Chain(component, e.middlewares...)
}

func (e *pathServerEndpoints) StringPath(context.Context) endpoint.Endpoint {
	component := func(ctx context.Context, request any) (any, error) {
		return e.svc.StringPath(ctx, request.(*PathRequest))
	}
	return endpointx.Chain(component, e.middlewares...)
}

func (e *pathServerEndpoints) EnumPath(context.Context) endpoint.Endpoint {
	component := func(ctx context.Context, request any) (any, error) {
		return e.svc.EnumPath(ctx, request.(*PathRequest))
	}
	return endpointx.Chain(component, e.middlewares...)
}

func newPathServerEndpoints(svc PathService, middlewares ...endpoint.Middleware) PathEndpoints {
	return &pathServerEndpoints{svc: svc, middlewares: middlewares}
}

type pathClientEndpoints struct {
	transports  PathClientTransports
	middlewares []endpoint.Middleware
}

func (e *pathClientEndpoints) BoolPath(ctx context.Context) endpoint.Endpoint {
	return endpointx.Chain(e.transports.BoolPath().Endpoint(ctx), e.middlewares...)
}

func (e *pathClientEndpoints) Int32Path(ctx context.Context) endpoint.Endpoint {
	return endpointx.Chain(e.transports.Int32Path().Endpoint(ctx), e.middlewares...)
}

func (e *pathClientEndpoints) Int64Path(ctx context.Context) endpoint.Endpoint {
	return endpointx.Chain(e.transports.Int64Path().Endpoint(ctx), e.middlewares...)
}

func (e *pathClientEndpoints) Uint32Path(ctx context.Context) endpoint.Endpoint {
	return endpointx.Chain(e.transports.Uint32Path().Endpoint(ctx), e.middlewares...)
}

func (e *pathClientEndpoints) Uint64Path(ctx context.Context) endpoint.Endpoint {
	return endpointx.Chain(e.transports.Uint64Path().Endpoint(ctx), e.middlewares...)
}

func (e *pathClientEndpoints) FloatPath(ctx context.Context) endpoint.Endpoint {
	return endpointx.Chain(e.transports.FloatPath().Endpoint(ctx), e.middlewares...)
}

func (e *pathClientEndpoints) DoublePath(ctx context.Context) endpoint.Endpoint {
	return endpointx.Chain(e.transports.DoublePath().Endpoint(ctx), e.middlewares...)
}

func (e *pathClientEndpoints) StringPath(ctx context.Context) endpoint.Endpoint {
	return endpointx.Chain(e.transports.StringPath().Endpoint(ctx), e.middlewares...)
}

func (e *pathClientEndpoints) EnumPath(ctx context.Context) endpoint.Endpoint {
	return endpointx.Chain(e.transports.EnumPath().Endpoint(ctx), e.middlewares...)
}

func newPathClientEndpoints(transports PathClientTransports, middlewares ...endpoint.Middleware) PathEndpoints {
	return &pathClientEndpoints{transports: transports, middlewares: middlewares}
}
