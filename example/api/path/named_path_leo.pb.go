// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package path

import (
	context "context"
	errors "errors"
	fmt "fmt"
	endpoint "github.com/go-kit/kit/endpoint"
	grpc "github.com/go-kit/kit/transport/grpc"
	http "github.com/go-kit/kit/transport/http"
	jsonx "github.com/go-leo/gox/encodingx/jsonx"
	urlx "github.com/go-leo/gox/netx/urlx"
	endpointx "github.com/go-leo/leo/v3/endpointx"
	mux "github.com/gorilla/mux"
	grpc1 "google.golang.org/grpc"
	metadata "google.golang.org/grpc/metadata"
	proto "google.golang.org/protobuf/proto"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	io "io"
	http1 "net/http"
	url "net/url"
	strings "strings"
)

// =========================== endpoints ===========================

type NamedPathService interface {
	NamedPathString(ctx context.Context, request *NamedPathRequest) (*emptypb.Empty, error)
	NamedPathOptString(ctx context.Context, request *NamedPathRequest) (*emptypb.Empty, error)
	NamedPathWrapString(ctx context.Context, request *NamedPathRequest) (*emptypb.Empty, error)
	EmbedNamedPathString(ctx context.Context, request *EmbedNamedPathRequest) (*emptypb.Empty, error)
	EmbedNamedPathOptString(ctx context.Context, request *EmbedNamedPathRequest) (*emptypb.Empty, error)
	EmbedNamedPathWrapString(ctx context.Context, request *EmbedNamedPathRequest) (*emptypb.Empty, error)
}

type NamedPathEndpoints interface {
	NamedPathString() endpoint.Endpoint
	NamedPathOptString() endpoint.Endpoint
	NamedPathWrapString() endpoint.Endpoint
	EmbedNamedPathString() endpoint.Endpoint
	EmbedNamedPathOptString() endpoint.Endpoint
	EmbedNamedPathWrapString() endpoint.Endpoint
}

type namedPathEndpoints struct {
	svc         NamedPathService
	middlewares []endpoint.Middleware
}

func (e *namedPathEndpoints) NamedPathString() endpoint.Endpoint {
	component := func(ctx context.Context, request any) (any, error) {
		return e.svc.NamedPathString(ctx, request.(*NamedPathRequest))
	}
	return endpointx.Chain(component, e.middlewares...)
}

func (e *namedPathEndpoints) NamedPathOptString() endpoint.Endpoint {
	component := func(ctx context.Context, request any) (any, error) {
		return e.svc.NamedPathOptString(ctx, request.(*NamedPathRequest))
	}
	return endpointx.Chain(component, e.middlewares...)
}

func (e *namedPathEndpoints) NamedPathWrapString() endpoint.Endpoint {
	component := func(ctx context.Context, request any) (any, error) {
		return e.svc.NamedPathWrapString(ctx, request.(*NamedPathRequest))
	}
	return endpointx.Chain(component, e.middlewares...)
}

func (e *namedPathEndpoints) EmbedNamedPathString() endpoint.Endpoint {
	component := func(ctx context.Context, request any) (any, error) {
		return e.svc.EmbedNamedPathString(ctx, request.(*EmbedNamedPathRequest))
	}
	return endpointx.Chain(component, e.middlewares...)
}

func (e *namedPathEndpoints) EmbedNamedPathOptString() endpoint.Endpoint {
	component := func(ctx context.Context, request any) (any, error) {
		return e.svc.EmbedNamedPathOptString(ctx, request.(*EmbedNamedPathRequest))
	}
	return endpointx.Chain(component, e.middlewares...)
}

func (e *namedPathEndpoints) EmbedNamedPathWrapString() endpoint.Endpoint {
	component := func(ctx context.Context, request any) (any, error) {
		return e.svc.EmbedNamedPathWrapString(ctx, request.(*EmbedNamedPathRequest))
	}
	return endpointx.Chain(component, e.middlewares...)
}

func NewNamedPathEndpoints(svc NamedPathService, middlewares ...endpoint.Middleware) NamedPathEndpoints {
	return &namedPathEndpoints{svc: svc, middlewares: middlewares}
}

// =========================== cqrs ===========================

// =========================== grpc transports ===========================

type NamedPathGrpcServerTransports interface {
	NamedPathString() *grpc.Server
	NamedPathOptString() *grpc.Server
	NamedPathWrapString() *grpc.Server
	EmbedNamedPathString() *grpc.Server
	EmbedNamedPathOptString() *grpc.Server
	EmbedNamedPathWrapString() *grpc.Server
}

type NamedPathGrpcClientTransports interface {
	NamedPathString() *grpc.Client
	NamedPathOptString() *grpc.Client
	NamedPathWrapString() *grpc.Client
	EmbedNamedPathString() *grpc.Client
	EmbedNamedPathOptString() *grpc.Client
	EmbedNamedPathWrapString() *grpc.Client
}

type namedPathGrpcServerTransports struct {
	namedPathString          *grpc.Server
	namedPathOptString       *grpc.Server
	namedPathWrapString      *grpc.Server
	embedNamedPathString     *grpc.Server
	embedNamedPathOptString  *grpc.Server
	embedNamedPathWrapString *grpc.Server
}

func (t *namedPathGrpcServerTransports) NamedPathString() *grpc.Server {
	return t.namedPathString
}

func (t *namedPathGrpcServerTransports) NamedPathOptString() *grpc.Server {
	return t.namedPathOptString
}

func (t *namedPathGrpcServerTransports) NamedPathWrapString() *grpc.Server {
	return t.namedPathWrapString
}

func (t *namedPathGrpcServerTransports) EmbedNamedPathString() *grpc.Server {
	return t.embedNamedPathString
}

func (t *namedPathGrpcServerTransports) EmbedNamedPathOptString() *grpc.Server {
	return t.embedNamedPathOptString
}

func (t *namedPathGrpcServerTransports) EmbedNamedPathWrapString() *grpc.Server {
	return t.embedNamedPathWrapString
}

func NewNamedPathGrpcServerTransports(endpoints NamedPathEndpoints, serverOptions ...grpc.ServerOption) NamedPathGrpcServerTransports {
	return &namedPathGrpcServerTransports{
		namedPathString: grpc.NewServer(
			endpoints.NamedPathString(),
			func(_ context.Context, v any) (any, error) { return v, nil },
			func(_ context.Context, v any) (any, error) { return v, nil },
			append([]grpc.ServerOption{
				grpc.ServerBefore(func(ctx context.Context, md metadata.MD) context.Context {
					return endpointx.InjectName(ctx, "/leo.example.path.v1.NamedPath/NamedPathString")
				}),
			}, serverOptions...)...,
		),
		namedPathOptString: grpc.NewServer(
			endpoints.NamedPathOptString(),
			func(_ context.Context, v any) (any, error) { return v, nil },
			func(_ context.Context, v any) (any, error) { return v, nil },
			append([]grpc.ServerOption{
				grpc.ServerBefore(func(ctx context.Context, md metadata.MD) context.Context {
					return endpointx.InjectName(ctx, "/leo.example.path.v1.NamedPath/NamedPathOptString")
				}),
			}, serverOptions...)...,
		),
		namedPathWrapString: grpc.NewServer(
			endpoints.NamedPathWrapString(),
			func(_ context.Context, v any) (any, error) { return v, nil },
			func(_ context.Context, v any) (any, error) { return v, nil },
			append([]grpc.ServerOption{
				grpc.ServerBefore(func(ctx context.Context, md metadata.MD) context.Context {
					return endpointx.InjectName(ctx, "/leo.example.path.v1.NamedPath/NamedPathWrapString")
				}),
			}, serverOptions...)...,
		),
		embedNamedPathString: grpc.NewServer(
			endpoints.EmbedNamedPathString(),
			func(_ context.Context, v any) (any, error) { return v, nil },
			func(_ context.Context, v any) (any, error) { return v, nil },
			append([]grpc.ServerOption{
				grpc.ServerBefore(func(ctx context.Context, md metadata.MD) context.Context {
					return endpointx.InjectName(ctx, "/leo.example.path.v1.NamedPath/EmbedNamedPathString")
				}),
			}, serverOptions...)...,
		),
		embedNamedPathOptString: grpc.NewServer(
			endpoints.EmbedNamedPathOptString(),
			func(_ context.Context, v any) (any, error) { return v, nil },
			func(_ context.Context, v any) (any, error) { return v, nil },
			append([]grpc.ServerOption{
				grpc.ServerBefore(func(ctx context.Context, md metadata.MD) context.Context {
					return endpointx.InjectName(ctx, "/leo.example.path.v1.NamedPath/EmbedNamedPathOptString")
				}),
			}, serverOptions...)...,
		),
		embedNamedPathWrapString: grpc.NewServer(
			endpoints.EmbedNamedPathWrapString(),
			func(_ context.Context, v any) (any, error) { return v, nil },
			func(_ context.Context, v any) (any, error) { return v, nil },
			append([]grpc.ServerOption{
				grpc.ServerBefore(func(ctx context.Context, md metadata.MD) context.Context {
					return endpointx.InjectName(ctx, "/leo.example.path.v1.NamedPath/EmbedNamedPathWrapString")
				}),
			}, serverOptions...)...,
		),
	}
}

type namedPathGrpcClientTransports struct {
	namedPathString          *grpc.Client
	namedPathOptString       *grpc.Client
	namedPathWrapString      *grpc.Client
	embedNamedPathString     *grpc.Client
	embedNamedPathOptString  *grpc.Client
	embedNamedPathWrapString *grpc.Client
}

func (t *namedPathGrpcClientTransports) NamedPathString() *grpc.Client {
	return t.namedPathString
}

func (t *namedPathGrpcClientTransports) NamedPathOptString() *grpc.Client {
	return t.namedPathOptString
}

func (t *namedPathGrpcClientTransports) NamedPathWrapString() *grpc.Client {
	return t.namedPathWrapString
}

func (t *namedPathGrpcClientTransports) EmbedNamedPathString() *grpc.Client {
	return t.embedNamedPathString
}

func (t *namedPathGrpcClientTransports) EmbedNamedPathOptString() *grpc.Client {
	return t.embedNamedPathOptString
}

func (t *namedPathGrpcClientTransports) EmbedNamedPathWrapString() *grpc.Client {
	return t.embedNamedPathWrapString
}

func NewNamedPathGrpcClientTransports(conn *grpc1.ClientConn, clientOptions ...grpc.ClientOption) NamedPathGrpcClientTransports {
	return &namedPathGrpcClientTransports{
		namedPathString: grpc.NewClient(
			conn,
			"leo.example.path.v1.NamedPath",
			"NamedPathString",
			func(_ context.Context, v any) (any, error) { return v, nil },
			func(_ context.Context, v any) (any, error) { return v, nil },
			emptypb.Empty{},
			append([]grpc.ClientOption{
				grpc.ClientBefore(func(ctx context.Context, md *metadata.MD) context.Context {
					return endpointx.InjectName(ctx, "/leo.example.path.v1.NamedPath/NamedPathString")
				}),
			}, clientOptions...)...,
		),
		namedPathOptString: grpc.NewClient(
			conn,
			"leo.example.path.v1.NamedPath",
			"NamedPathOptString",
			func(_ context.Context, v any) (any, error) { return v, nil },
			func(_ context.Context, v any) (any, error) { return v, nil },
			emptypb.Empty{},
			append([]grpc.ClientOption{
				grpc.ClientBefore(func(ctx context.Context, md *metadata.MD) context.Context {
					return endpointx.InjectName(ctx, "/leo.example.path.v1.NamedPath/NamedPathOptString")
				}),
			}, clientOptions...)...,
		),
		namedPathWrapString: grpc.NewClient(
			conn,
			"leo.example.path.v1.NamedPath",
			"NamedPathWrapString",
			func(_ context.Context, v any) (any, error) { return v, nil },
			func(_ context.Context, v any) (any, error) { return v, nil },
			emptypb.Empty{},
			append([]grpc.ClientOption{
				grpc.ClientBefore(func(ctx context.Context, md *metadata.MD) context.Context {
					return endpointx.InjectName(ctx, "/leo.example.path.v1.NamedPath/NamedPathWrapString")
				}),
			}, clientOptions...)...,
		),
		embedNamedPathString: grpc.NewClient(
			conn,
			"leo.example.path.v1.NamedPath",
			"EmbedNamedPathString",
			func(_ context.Context, v any) (any, error) { return v, nil },
			func(_ context.Context, v any) (any, error) { return v, nil },
			emptypb.Empty{},
			append([]grpc.ClientOption{
				grpc.ClientBefore(func(ctx context.Context, md *metadata.MD) context.Context {
					return endpointx.InjectName(ctx, "/leo.example.path.v1.NamedPath/EmbedNamedPathString")
				}),
			}, clientOptions...)...,
		),
		embedNamedPathOptString: grpc.NewClient(
			conn,
			"leo.example.path.v1.NamedPath",
			"EmbedNamedPathOptString",
			func(_ context.Context, v any) (any, error) { return v, nil },
			func(_ context.Context, v any) (any, error) { return v, nil },
			emptypb.Empty{},
			append([]grpc.ClientOption{
				grpc.ClientBefore(func(ctx context.Context, md *metadata.MD) context.Context {
					return endpointx.InjectName(ctx, "/leo.example.path.v1.NamedPath/EmbedNamedPathOptString")
				}),
			}, clientOptions...)...,
		),
		embedNamedPathWrapString: grpc.NewClient(
			conn,
			"leo.example.path.v1.NamedPath",
			"EmbedNamedPathWrapString",
			func(_ context.Context, v any) (any, error) { return v, nil },
			func(_ context.Context, v any) (any, error) { return v, nil },
			emptypb.Empty{},
			append([]grpc.ClientOption{
				grpc.ClientBefore(func(ctx context.Context, md *metadata.MD) context.Context {
					return endpointx.InjectName(ctx, "/leo.example.path.v1.NamedPath/EmbedNamedPathWrapString")
				}),
			}, clientOptions...)...,
		),
	}
}

type namedPathGrpcServer struct {
	namedPathString          *grpc.Server
	namedPathOptString       *grpc.Server
	namedPathWrapString      *grpc.Server
	embedNamedPathString     *grpc.Server
	embedNamedPathOptString  *grpc.Server
	embedNamedPathWrapString *grpc.Server
}

func (s *namedPathGrpcServer) NamedPathString(ctx context.Context, request *NamedPathRequest) (*emptypb.Empty, error) {
	ctx, rep, err := s.namedPathString.ServeGRPC(ctx, request)
	if err != nil {
		return nil, err
	}
	_ = ctx
	return rep.(*emptypb.Empty), nil
}

func (s *namedPathGrpcServer) NamedPathOptString(ctx context.Context, request *NamedPathRequest) (*emptypb.Empty, error) {
	ctx, rep, err := s.namedPathOptString.ServeGRPC(ctx, request)
	if err != nil {
		return nil, err
	}
	_ = ctx
	return rep.(*emptypb.Empty), nil
}

func (s *namedPathGrpcServer) NamedPathWrapString(ctx context.Context, request *NamedPathRequest) (*emptypb.Empty, error) {
	ctx, rep, err := s.namedPathWrapString.ServeGRPC(ctx, request)
	if err != nil {
		return nil, err
	}
	_ = ctx
	return rep.(*emptypb.Empty), nil
}

func (s *namedPathGrpcServer) EmbedNamedPathString(ctx context.Context, request *EmbedNamedPathRequest) (*emptypb.Empty, error) {
	ctx, rep, err := s.embedNamedPathString.ServeGRPC(ctx, request)
	if err != nil {
		return nil, err
	}
	_ = ctx
	return rep.(*emptypb.Empty), nil
}

func (s *namedPathGrpcServer) EmbedNamedPathOptString(ctx context.Context, request *EmbedNamedPathRequest) (*emptypb.Empty, error) {
	ctx, rep, err := s.embedNamedPathOptString.ServeGRPC(ctx, request)
	if err != nil {
		return nil, err
	}
	_ = ctx
	return rep.(*emptypb.Empty), nil
}

func (s *namedPathGrpcServer) EmbedNamedPathWrapString(ctx context.Context, request *EmbedNamedPathRequest) (*emptypb.Empty, error) {
	ctx, rep, err := s.embedNamedPathWrapString.ServeGRPC(ctx, request)
	if err != nil {
		return nil, err
	}
	_ = ctx
	return rep.(*emptypb.Empty), nil
}

func NewNamedPathGrpcServer(transports NamedPathGrpcServerTransports) NamedPathService {
	return &namedPathGrpcServer{
		namedPathString:          transports.NamedPathString(),
		namedPathOptString:       transports.NamedPathOptString(),
		namedPathWrapString:      transports.NamedPathWrapString(),
		embedNamedPathString:     transports.EmbedNamedPathString(),
		embedNamedPathOptString:  transports.EmbedNamedPathOptString(),
		embedNamedPathWrapString: transports.EmbedNamedPathWrapString(),
	}
}

type namedPathGrpcClient struct {
	namedPathString          endpoint.Endpoint
	namedPathOptString       endpoint.Endpoint
	namedPathWrapString      endpoint.Endpoint
	embedNamedPathString     endpoint.Endpoint
	embedNamedPathOptString  endpoint.Endpoint
	embedNamedPathWrapString endpoint.Endpoint
}

func (c *namedPathGrpcClient) NamedPathString(ctx context.Context, request *NamedPathRequest) (*emptypb.Empty, error) {
	rep, err := c.namedPathString(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*emptypb.Empty), nil
}

func (c *namedPathGrpcClient) NamedPathOptString(ctx context.Context, request *NamedPathRequest) (*emptypb.Empty, error) {
	rep, err := c.namedPathOptString(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*emptypb.Empty), nil
}

func (c *namedPathGrpcClient) NamedPathWrapString(ctx context.Context, request *NamedPathRequest) (*emptypb.Empty, error) {
	rep, err := c.namedPathWrapString(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*emptypb.Empty), nil
}

func (c *namedPathGrpcClient) EmbedNamedPathString(ctx context.Context, request *EmbedNamedPathRequest) (*emptypb.Empty, error) {
	rep, err := c.embedNamedPathString(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*emptypb.Empty), nil
}

func (c *namedPathGrpcClient) EmbedNamedPathOptString(ctx context.Context, request *EmbedNamedPathRequest) (*emptypb.Empty, error) {
	rep, err := c.embedNamedPathOptString(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*emptypb.Empty), nil
}

func (c *namedPathGrpcClient) EmbedNamedPathWrapString(ctx context.Context, request *EmbedNamedPathRequest) (*emptypb.Empty, error) {
	rep, err := c.embedNamedPathWrapString(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*emptypb.Empty), nil
}

func NewNamedPathGrpcClient(transports NamedPathGrpcClientTransports, middlewares ...endpoint.Middleware) NamedPathService {
	return &namedPathGrpcClient{
		namedPathString:          endpointx.Chain(transports.NamedPathString().Endpoint(), middlewares...),
		namedPathOptString:       endpointx.Chain(transports.NamedPathOptString().Endpoint(), middlewares...),
		namedPathWrapString:      endpointx.Chain(transports.NamedPathWrapString().Endpoint(), middlewares...),
		embedNamedPathString:     endpointx.Chain(transports.EmbedNamedPathString().Endpoint(), middlewares...),
		embedNamedPathOptString:  endpointx.Chain(transports.EmbedNamedPathOptString().Endpoint(), middlewares...),
		embedNamedPathWrapString: endpointx.Chain(transports.EmbedNamedPathWrapString().Endpoint(), middlewares...),
	}
}

// =========================== http transports ===========================

type NamedPathHttpServerTransports interface {
	NamedPathString() *http.Server
	NamedPathOptString() *http.Server
	NamedPathWrapString() *http.Server
	EmbedNamedPathString() *http.Server
	EmbedNamedPathOptString() *http.Server
	EmbedNamedPathWrapString() *http.Server
}

type NamedPathHttpClientTransports interface {
	NamedPathString() *http.Client
	NamedPathOptString() *http.Client
	NamedPathWrapString() *http.Client
	EmbedNamedPathString() *http.Client
	EmbedNamedPathOptString() *http.Client
	EmbedNamedPathWrapString() *http.Client
}

type namedPathHttpServerTransports struct {
	namedPathString          *http.Server
	namedPathOptString       *http.Server
	namedPathWrapString      *http.Server
	embedNamedPathString     *http.Server
	embedNamedPathOptString  *http.Server
	embedNamedPathWrapString *http.Server
}

func (t *namedPathHttpServerTransports) NamedPathString() *http.Server {
	return t.namedPathString
}

func (t *namedPathHttpServerTransports) NamedPathOptString() *http.Server {
	return t.namedPathOptString
}

func (t *namedPathHttpServerTransports) NamedPathWrapString() *http.Server {
	return t.namedPathWrapString
}

func (t *namedPathHttpServerTransports) EmbedNamedPathString() *http.Server {
	return t.embedNamedPathString
}

func (t *namedPathHttpServerTransports) EmbedNamedPathOptString() *http.Server {
	return t.embedNamedPathOptString
}

func (t *namedPathHttpServerTransports) EmbedNamedPathWrapString() *http.Server {
	return t.embedNamedPathWrapString
}

func NewNamedPathHttpServerTransports(endpoints NamedPathEndpoints, serverOptions ...http.ServerOption) NamedPathHttpServerTransports {
	return &namedPathHttpServerTransports{
		namedPathString: http.NewServer(
			endpoints.NamedPathString(),
			func(ctx context.Context, r *http1.Request) (any, error) {
				req := &NamedPathRequest{}
				vars := urlx.FormFromMap(mux.Vars(r))
				var varErr error
				req.String_ = fmt.Sprintf("classes/%s/shelves/%s/books/%s/families/%s", vars.Get("class"), vars.Get("shelf"), vars.Get("book"), vars.Get("family"))
				if varErr != nil {
					return nil, varErr
				}
				queries := r.URL.Query()
				var queryErr error
				req.OptString = proto.String(queries.Get("opt_string"))
				req.WrapString = wrapperspb.String(queries.Get("wrap_string"))
				if queryErr != nil {
					return nil, queryErr
				}
				return req, nil
			},
			func(ctx context.Context, w http1.ResponseWriter, obj any) error {
				resp := obj.(*emptypb.Empty)
				w.Header().Set("Content-Type", "application/json; charset=utf-8")
				w.WriteHeader(http1.StatusOK)
				if err := jsonx.NewEncoder(w).Encode(resp); err != nil {
					return err
				}
				return nil
			},
			append([]http.ServerOption{
				http.ServerBefore(func(ctx context.Context, request *http1.Request) context.Context {
					return endpointx.InjectName(ctx, "/leo.example.path.v1.NamedPath/NamedPathString")
				}),
			}, serverOptions...)...,
		),
		namedPathOptString: http.NewServer(
			endpoints.NamedPathOptString(),
			func(ctx context.Context, r *http1.Request) (any, error) {
				req := &NamedPathRequest{}
				vars := urlx.FormFromMap(mux.Vars(r))
				var varErr error
				req.OptString = proto.String(fmt.Sprintf("classes/%s/shelves/%s/books/%s/families/%s", vars.Get("class"), vars.Get("shelf"), vars.Get("book"), vars.Get("family")))
				if varErr != nil {
					return nil, varErr
				}
				queries := r.URL.Query()
				var queryErr error
				req.String_ = queries.Get("string")
				req.WrapString = wrapperspb.String(queries.Get("wrap_string"))
				if queryErr != nil {
					return nil, queryErr
				}
				return req, nil
			},
			func(ctx context.Context, w http1.ResponseWriter, obj any) error {
				resp := obj.(*emptypb.Empty)
				w.Header().Set("Content-Type", "application/json; charset=utf-8")
				w.WriteHeader(http1.StatusOK)
				if err := jsonx.NewEncoder(w).Encode(resp); err != nil {
					return err
				}
				return nil
			},
			append([]http.ServerOption{
				http.ServerBefore(func(ctx context.Context, request *http1.Request) context.Context {
					return endpointx.InjectName(ctx, "/leo.example.path.v1.NamedPath/NamedPathOptString")
				}),
			}, serverOptions...)...,
		),
		namedPathWrapString: http.NewServer(
			endpoints.NamedPathWrapString(),
			func(ctx context.Context, r *http1.Request) (any, error) {
				req := &NamedPathRequest{}
				vars := urlx.FormFromMap(mux.Vars(r))
				var varErr error
				req.WrapString = wrapperspb.String(fmt.Sprintf("classes/%s/shelves/%s/books/%s/families/%s", vars.Get("class"), vars.Get("shelf"), vars.Get("book"), vars.Get("family")))
				if varErr != nil {
					return nil, varErr
				}
				queries := r.URL.Query()
				var queryErr error
				req.String_ = queries.Get("string")
				req.OptString = proto.String(queries.Get("opt_string"))
				if queryErr != nil {
					return nil, queryErr
				}
				return req, nil
			},
			func(ctx context.Context, w http1.ResponseWriter, obj any) error {
				resp := obj.(*emptypb.Empty)
				w.Header().Set("Content-Type", "application/json; charset=utf-8")
				w.WriteHeader(http1.StatusOK)
				if err := jsonx.NewEncoder(w).Encode(resp); err != nil {
					return err
				}
				return nil
			},
			append([]http.ServerOption{
				http.ServerBefore(func(ctx context.Context, request *http1.Request) context.Context {
					return endpointx.InjectName(ctx, "/leo.example.path.v1.NamedPath/NamedPathWrapString")
				}),
			}, serverOptions...)...,
		),
		embedNamedPathString: http.NewServer(
			endpoints.EmbedNamedPathString(),
			func(ctx context.Context, r *http1.Request) (any, error) {
				req := &EmbedNamedPathRequest{}
				vars := urlx.FormFromMap(mux.Vars(r))
				var varErr error
				if req.Embed == nil {
					req.Embed = &NamedPathRequest{}
				}
				req.Embed.String_ = fmt.Sprintf("classes/%s/shelves/%s/books/%s/families/%s", vars.Get("class"), vars.Get("shelf"), vars.Get("book"), vars.Get("family"))
				if varErr != nil {
					return nil, varErr
				}
				return req, nil
			},
			func(ctx context.Context, w http1.ResponseWriter, obj any) error {
				resp := obj.(*emptypb.Empty)
				w.Header().Set("Content-Type", "application/json; charset=utf-8")
				w.WriteHeader(http1.StatusOK)
				if err := jsonx.NewEncoder(w).Encode(resp); err != nil {
					return err
				}
				return nil
			},
			append([]http.ServerOption{
				http.ServerBefore(func(ctx context.Context, request *http1.Request) context.Context {
					return endpointx.InjectName(ctx, "/leo.example.path.v1.NamedPath/EmbedNamedPathString")
				}),
			}, serverOptions...)...,
		),
		embedNamedPathOptString: http.NewServer(
			endpoints.EmbedNamedPathOptString(),
			func(ctx context.Context, r *http1.Request) (any, error) {
				req := &EmbedNamedPathRequest{}
				vars := urlx.FormFromMap(mux.Vars(r))
				var varErr error
				if req.Embed == nil {
					req.Embed = &NamedPathRequest{}
				}
				req.Embed.OptString = proto.String(fmt.Sprintf("classes/%s/shelves/%s/books/%s/families/%s", vars.Get("class"), vars.Get("shelf"), vars.Get("book"), vars.Get("family")))
				if varErr != nil {
					return nil, varErr
				}
				return req, nil
			},
			func(ctx context.Context, w http1.ResponseWriter, obj any) error {
				resp := obj.(*emptypb.Empty)
				w.Header().Set("Content-Type", "application/json; charset=utf-8")
				w.WriteHeader(http1.StatusOK)
				if err := jsonx.NewEncoder(w).Encode(resp); err != nil {
					return err
				}
				return nil
			},
			append([]http.ServerOption{
				http.ServerBefore(func(ctx context.Context, request *http1.Request) context.Context {
					return endpointx.InjectName(ctx, "/leo.example.path.v1.NamedPath/EmbedNamedPathOptString")
				}),
			}, serverOptions...)...,
		),
		embedNamedPathWrapString: http.NewServer(
			endpoints.EmbedNamedPathWrapString(),
			func(ctx context.Context, r *http1.Request) (any, error) {
				req := &EmbedNamedPathRequest{}
				vars := urlx.FormFromMap(mux.Vars(r))
				var varErr error
				if req.Embed == nil {
					req.Embed = &NamedPathRequest{}
				}
				req.Embed.WrapString = wrapperspb.String(fmt.Sprintf("classes/%s/shelves/%s/books/%s/families/%s", vars.Get("class"), vars.Get("shelf"), vars.Get("book"), vars.Get("family")))
				if varErr != nil {
					return nil, varErr
				}
				return req, nil
			},
			func(ctx context.Context, w http1.ResponseWriter, obj any) error {
				resp := obj.(*emptypb.Empty)
				w.Header().Set("Content-Type", "application/json; charset=utf-8")
				w.WriteHeader(http1.StatusOK)
				if err := jsonx.NewEncoder(w).Encode(resp); err != nil {
					return err
				}
				return nil
			},
			append([]http.ServerOption{
				http.ServerBefore(func(ctx context.Context, request *http1.Request) context.Context {
					return endpointx.InjectName(ctx, "/leo.example.path.v1.NamedPath/EmbedNamedPathWrapString")
				}),
			}, serverOptions...)...,
		),
	}
}

type namedPathHttpClientTransports struct {
	namedPathString          *http.Client
	namedPathOptString       *http.Client
	namedPathWrapString      *http.Client
	embedNamedPathString     *http.Client
	embedNamedPathOptString  *http.Client
	embedNamedPathWrapString *http.Client
}

func (t *namedPathHttpClientTransports) NamedPathString() *http.Client {
	return t.namedPathString
}

func (t *namedPathHttpClientTransports) NamedPathOptString() *http.Client {
	return t.namedPathOptString
}

func (t *namedPathHttpClientTransports) NamedPathWrapString() *http.Client {
	return t.namedPathWrapString
}

func (t *namedPathHttpClientTransports) EmbedNamedPathString() *http.Client {
	return t.embedNamedPathString
}

func (t *namedPathHttpClientTransports) EmbedNamedPathOptString() *http.Client {
	return t.embedNamedPathOptString
}

func (t *namedPathHttpClientTransports) EmbedNamedPathWrapString() *http.Client {
	return t.embedNamedPathWrapString
}

func NewNamedPathHttpClientTransports(scheme string, instance string, clientOptions ...http.ClientOption) NamedPathHttpClientTransports {
	router := mux.NewRouter()
	router.NewRoute().Name("/leo.example.path.v1.NamedPath/NamedPathString").Methods("GET").Path("/v1/string/classes/{class}/shelves/{shelf}/books/{book}/families/{family}")
	router.NewRoute().Name("/leo.example.path.v1.NamedPath/NamedPathOptString").Methods("GET").Path("/v1/opt_string/classes/{class}/shelves/{shelf}/books/{book}/families/{family}")
	router.NewRoute().Name("/leo.example.path.v1.NamedPath/NamedPathWrapString").Methods("GET").Path("/v1/wrap_string/classes/{class}/shelves/{shelf}/books/{book}/families/{family}")
	router.NewRoute().Name("/leo.example.path.v1.NamedPath/EmbedNamedPathString").Methods("GET").Path("/v1/embed/string/classes/{class}/shelves/{shelf}/books/{book}/families/{family}")
	router.NewRoute().Name("/leo.example.path.v1.NamedPath/EmbedNamedPathOptString").Methods("GET").Path("/v1/embed/opt_string/classes/{class}/shelves/{shelf}/books/{book}/families/{family}")
	router.NewRoute().Name("/leo.example.path.v1.NamedPath/EmbedNamedPathWrapString").Methods("GET").Path("/v1/embed/wrap_string/classes/{class}/shelves/{shelf}/books/{book}/families/{family}")
	return &namedPathHttpClientTransports{
		namedPathString: http.NewExplicitClient(
			func(ctx context.Context, obj interface{}) (*http1.Request, error) {
				if obj == nil {
					return nil, errors.New("request object is nil")
				}
				req, ok := obj.(*NamedPathRequest)
				if !ok {
					return nil, fmt.Errorf("invalid request object type, %T", obj)
				}
				_ = req
				var body io.Reader
				var pairs []string
				namedPathParameter := req.GetString_()
				namedPathValues := strings.Split(namedPathParameter, "/")
				if len(namedPathValues) != 8 {
					return nil, fmt.Errorf("invalid named path parameter, %s", namedPathParameter)
				}
				pairs = append(pairs, "class", namedPathValues[1], "shelf", namedPathValues[3], "book", namedPathValues[5], "family", namedPathValues[7])
				path, err := router.Get("/leo.example.path.v1.NamedPath/NamedPathString").URLPath(pairs...)
				if err != nil {
					return nil, err
				}
				queries := url.Values{}
				queries["opt_string"] = append(queries["opt_string"], req.GetOptString())
				queries["wrap_string"] = append(queries["wrap_string"], req.GetWrapString().GetValue())
				target := &url.URL{
					Scheme:   scheme,
					Host:     instance,
					Path:     path.Path,
					RawQuery: queries.Encode(),
				}
				r, err := http1.NewRequestWithContext(ctx, "GET", target.String(), body)
				if err != nil {
					return nil, err
				}
				return r, nil
			},
			func(ctx context.Context, r *http1.Response) (interface{}, error) {
				resp := &emptypb.Empty{}
				if err := jsonx.NewDecoder(r.Body).Decode(resp); err != nil {
					return nil, err
				}
				return resp, nil
			},
			append([]http.ClientOption{
				http.ClientBefore(func(ctx context.Context, request *http1.Request) context.Context {
					return endpointx.InjectName(ctx, "/leo.example.path.v1.NamedPath/NamedPathString")
				}),
			}, clientOptions...)...,
		),
		namedPathOptString: http.NewExplicitClient(
			func(ctx context.Context, obj interface{}) (*http1.Request, error) {
				if obj == nil {
					return nil, errors.New("request object is nil")
				}
				req, ok := obj.(*NamedPathRequest)
				if !ok {
					return nil, fmt.Errorf("invalid request object type, %T", obj)
				}
				_ = req
				var body io.Reader
				var pairs []string
				namedPathParameter := req.GetOptString()
				namedPathValues := strings.Split(namedPathParameter, "/")
				if len(namedPathValues) != 8 {
					return nil, fmt.Errorf("invalid named path parameter, %s", namedPathParameter)
				}
				pairs = append(pairs, "class", namedPathValues[1], "shelf", namedPathValues[3], "book", namedPathValues[5], "family", namedPathValues[7])
				path, err := router.Get("/leo.example.path.v1.NamedPath/NamedPathOptString").URLPath(pairs...)
				if err != nil {
					return nil, err
				}
				queries := url.Values{}
				queries["string"] = append(queries["string"], req.GetString_())
				queries["wrap_string"] = append(queries["wrap_string"], req.GetWrapString().GetValue())
				target := &url.URL{
					Scheme:   scheme,
					Host:     instance,
					Path:     path.Path,
					RawQuery: queries.Encode(),
				}
				r, err := http1.NewRequestWithContext(ctx, "GET", target.String(), body)
				if err != nil {
					return nil, err
				}
				return r, nil
			},
			func(ctx context.Context, r *http1.Response) (interface{}, error) {
				resp := &emptypb.Empty{}
				if err := jsonx.NewDecoder(r.Body).Decode(resp); err != nil {
					return nil, err
				}
				return resp, nil
			},
			append([]http.ClientOption{
				http.ClientBefore(func(ctx context.Context, request *http1.Request) context.Context {
					return endpointx.InjectName(ctx, "/leo.example.path.v1.NamedPath/NamedPathOptString")
				}),
			}, clientOptions...)...,
		),
		namedPathWrapString: http.NewExplicitClient(
			func(ctx context.Context, obj interface{}) (*http1.Request, error) {
				if obj == nil {
					return nil, errors.New("request object is nil")
				}
				req, ok := obj.(*NamedPathRequest)
				if !ok {
					return nil, fmt.Errorf("invalid request object type, %T", obj)
				}
				_ = req
				var body io.Reader
				var pairs []string
				namedPathParameter := req.GetWrapString().GetValue()
				namedPathValues := strings.Split(namedPathParameter, "/")
				if len(namedPathValues) != 8 {
					return nil, fmt.Errorf("invalid named path parameter, %s", namedPathParameter)
				}
				pairs = append(pairs, "class", namedPathValues[1], "shelf", namedPathValues[3], "book", namedPathValues[5], "family", namedPathValues[7])
				path, err := router.Get("/leo.example.path.v1.NamedPath/NamedPathWrapString").URLPath(pairs...)
				if err != nil {
					return nil, err
				}
				queries := url.Values{}
				queries["string"] = append(queries["string"], req.GetString_())
				queries["opt_string"] = append(queries["opt_string"], req.GetOptString())
				target := &url.URL{
					Scheme:   scheme,
					Host:     instance,
					Path:     path.Path,
					RawQuery: queries.Encode(),
				}
				r, err := http1.NewRequestWithContext(ctx, "GET", target.String(), body)
				if err != nil {
					return nil, err
				}
				return r, nil
			},
			func(ctx context.Context, r *http1.Response) (interface{}, error) {
				resp := &emptypb.Empty{}
				if err := jsonx.NewDecoder(r.Body).Decode(resp); err != nil {
					return nil, err
				}
				return resp, nil
			},
			append([]http.ClientOption{
				http.ClientBefore(func(ctx context.Context, request *http1.Request) context.Context {
					return endpointx.InjectName(ctx, "/leo.example.path.v1.NamedPath/NamedPathWrapString")
				}),
			}, clientOptions...)...,
		),
		embedNamedPathString: http.NewExplicitClient(
			func(ctx context.Context, obj interface{}) (*http1.Request, error) {
				if obj == nil {
					return nil, errors.New("request object is nil")
				}
				req, ok := obj.(*EmbedNamedPathRequest)
				if !ok {
					return nil, fmt.Errorf("invalid request object type, %T", obj)
				}
				_ = req
				var body io.Reader
				var pairs []string
				namedPathParameter := req.GetEmbed().GetString_()
				namedPathValues := strings.Split(namedPathParameter, "/")
				if len(namedPathValues) != 8 {
					return nil, fmt.Errorf("invalid named path parameter, %s", namedPathParameter)
				}
				pairs = append(pairs, "class", namedPathValues[1], "shelf", namedPathValues[3], "book", namedPathValues[5], "family", namedPathValues[7])
				path, err := router.Get("/leo.example.path.v1.NamedPath/EmbedNamedPathString").URLPath(pairs...)
				if err != nil {
					return nil, err
				}
				queries := url.Values{}
				target := &url.URL{
					Scheme:   scheme,
					Host:     instance,
					Path:     path.Path,
					RawQuery: queries.Encode(),
				}
				r, err := http1.NewRequestWithContext(ctx, "GET", target.String(), body)
				if err != nil {
					return nil, err
				}
				return r, nil
			},
			func(ctx context.Context, r *http1.Response) (interface{}, error) {
				resp := &emptypb.Empty{}
				if err := jsonx.NewDecoder(r.Body).Decode(resp); err != nil {
					return nil, err
				}
				return resp, nil
			},
			append([]http.ClientOption{
				http.ClientBefore(func(ctx context.Context, request *http1.Request) context.Context {
					return endpointx.InjectName(ctx, "/leo.example.path.v1.NamedPath/EmbedNamedPathString")
				}),
			}, clientOptions...)...,
		),
		embedNamedPathOptString: http.NewExplicitClient(
			func(ctx context.Context, obj interface{}) (*http1.Request, error) {
				if obj == nil {
					return nil, errors.New("request object is nil")
				}
				req, ok := obj.(*EmbedNamedPathRequest)
				if !ok {
					return nil, fmt.Errorf("invalid request object type, %T", obj)
				}
				_ = req
				var body io.Reader
				var pairs []string
				namedPathParameter := req.GetEmbed().GetOptString()
				namedPathValues := strings.Split(namedPathParameter, "/")
				if len(namedPathValues) != 8 {
					return nil, fmt.Errorf("invalid named path parameter, %s", namedPathParameter)
				}
				pairs = append(pairs, "class", namedPathValues[1], "shelf", namedPathValues[3], "book", namedPathValues[5], "family", namedPathValues[7])
				path, err := router.Get("/leo.example.path.v1.NamedPath/EmbedNamedPathOptString").URLPath(pairs...)
				if err != nil {
					return nil, err
				}
				queries := url.Values{}
				target := &url.URL{
					Scheme:   scheme,
					Host:     instance,
					Path:     path.Path,
					RawQuery: queries.Encode(),
				}
				r, err := http1.NewRequestWithContext(ctx, "GET", target.String(), body)
				if err != nil {
					return nil, err
				}
				return r, nil
			},
			func(ctx context.Context, r *http1.Response) (interface{}, error) {
				resp := &emptypb.Empty{}
				if err := jsonx.NewDecoder(r.Body).Decode(resp); err != nil {
					return nil, err
				}
				return resp, nil
			},
			append([]http.ClientOption{
				http.ClientBefore(func(ctx context.Context, request *http1.Request) context.Context {
					return endpointx.InjectName(ctx, "/leo.example.path.v1.NamedPath/EmbedNamedPathOptString")
				}),
			}, clientOptions...)...,
		),
		embedNamedPathWrapString: http.NewExplicitClient(
			func(ctx context.Context, obj interface{}) (*http1.Request, error) {
				if obj == nil {
					return nil, errors.New("request object is nil")
				}
				req, ok := obj.(*EmbedNamedPathRequest)
				if !ok {
					return nil, fmt.Errorf("invalid request object type, %T", obj)
				}
				_ = req
				var body io.Reader
				var pairs []string
				namedPathParameter := req.GetEmbed().GetWrapString().GetValue()
				namedPathValues := strings.Split(namedPathParameter, "/")
				if len(namedPathValues) != 8 {
					return nil, fmt.Errorf("invalid named path parameter, %s", namedPathParameter)
				}
				pairs = append(pairs, "class", namedPathValues[1], "shelf", namedPathValues[3], "book", namedPathValues[5], "family", namedPathValues[7])
				path, err := router.Get("/leo.example.path.v1.NamedPath/EmbedNamedPathWrapString").URLPath(pairs...)
				if err != nil {
					return nil, err
				}
				queries := url.Values{}
				target := &url.URL{
					Scheme:   scheme,
					Host:     instance,
					Path:     path.Path,
					RawQuery: queries.Encode(),
				}
				r, err := http1.NewRequestWithContext(ctx, "GET", target.String(), body)
				if err != nil {
					return nil, err
				}
				return r, nil
			},
			func(ctx context.Context, r *http1.Response) (interface{}, error) {
				resp := &emptypb.Empty{}
				if err := jsonx.NewDecoder(r.Body).Decode(resp); err != nil {
					return nil, err
				}
				return resp, nil
			},
			append([]http.ClientOption{
				http.ClientBefore(func(ctx context.Context, request *http1.Request) context.Context {
					return endpointx.InjectName(ctx, "/leo.example.path.v1.NamedPath/EmbedNamedPathWrapString")
				}),
			}, clientOptions...)...,
		),
	}
}

func NewNamedPathHttpServerHandler(endpoints NamedPathHttpServerTransports) http1.Handler {
	router := mux.NewRouter()
	router.NewRoute().Name("/leo.example.path.v1.NamedPath/NamedPathString").Methods("GET").Path("/v1/string/classes/{class}/shelves/{shelf}/books/{book}/families/{family}").Handler(endpoints.NamedPathString())
	router.NewRoute().Name("/leo.example.path.v1.NamedPath/NamedPathOptString").Methods("GET").Path("/v1/opt_string/classes/{class}/shelves/{shelf}/books/{book}/families/{family}").Handler(endpoints.NamedPathOptString())
	router.NewRoute().Name("/leo.example.path.v1.NamedPath/NamedPathWrapString").Methods("GET").Path("/v1/wrap_string/classes/{class}/shelves/{shelf}/books/{book}/families/{family}").Handler(endpoints.NamedPathWrapString())
	router.NewRoute().Name("/leo.example.path.v1.NamedPath/EmbedNamedPathString").Methods("GET").Path("/v1/embed/string/classes/{class}/shelves/{shelf}/books/{book}/families/{family}").Handler(endpoints.EmbedNamedPathString())
	router.NewRoute().Name("/leo.example.path.v1.NamedPath/EmbedNamedPathOptString").Methods("GET").Path("/v1/embed/opt_string/classes/{class}/shelves/{shelf}/books/{book}/families/{family}").Handler(endpoints.EmbedNamedPathOptString())
	router.NewRoute().Name("/leo.example.path.v1.NamedPath/EmbedNamedPathWrapString").Methods("GET").Path("/v1/embed/wrap_string/classes/{class}/shelves/{shelf}/books/{book}/families/{family}").Handler(endpoints.EmbedNamedPathWrapString())
	return router
}

type namedPathHttpClient struct {
	namedPathString          endpoint.Endpoint
	namedPathOptString       endpoint.Endpoint
	namedPathWrapString      endpoint.Endpoint
	embedNamedPathString     endpoint.Endpoint
	embedNamedPathOptString  endpoint.Endpoint
	embedNamedPathWrapString endpoint.Endpoint
}

func (c *namedPathHttpClient) NamedPathString(ctx context.Context, request *NamedPathRequest) (*emptypb.Empty, error) {
	rep, err := c.namedPathString(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*emptypb.Empty), nil
}

func (c *namedPathHttpClient) NamedPathOptString(ctx context.Context, request *NamedPathRequest) (*emptypb.Empty, error) {
	rep, err := c.namedPathOptString(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*emptypb.Empty), nil
}

func (c *namedPathHttpClient) NamedPathWrapString(ctx context.Context, request *NamedPathRequest) (*emptypb.Empty, error) {
	rep, err := c.namedPathWrapString(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*emptypb.Empty), nil
}

func (c *namedPathHttpClient) EmbedNamedPathString(ctx context.Context, request *EmbedNamedPathRequest) (*emptypb.Empty, error) {
	rep, err := c.embedNamedPathString(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*emptypb.Empty), nil
}

func (c *namedPathHttpClient) EmbedNamedPathOptString(ctx context.Context, request *EmbedNamedPathRequest) (*emptypb.Empty, error) {
	rep, err := c.embedNamedPathOptString(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*emptypb.Empty), nil
}

func (c *namedPathHttpClient) EmbedNamedPathWrapString(ctx context.Context, request *EmbedNamedPathRequest) (*emptypb.Empty, error) {
	rep, err := c.embedNamedPathWrapString(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*emptypb.Empty), nil
}

func NewNamedPathHttpClient(transports NamedPathHttpClientTransports, middlewares ...endpoint.Middleware) NamedPathService {
	return &namedPathHttpClient{
		namedPathString:          endpointx.Chain(transports.NamedPathString().Endpoint(), middlewares...),
		namedPathOptString:       endpointx.Chain(transports.NamedPathOptString().Endpoint(), middlewares...),
		namedPathWrapString:      endpointx.Chain(transports.NamedPathWrapString().Endpoint(), middlewares...),
		embedNamedPathString:     endpointx.Chain(transports.EmbedNamedPathString().Endpoint(), middlewares...),
		embedNamedPathOptString:  endpointx.Chain(transports.EmbedNamedPathOptString().Endpoint(), middlewares...),
		embedNamedPathWrapString: endpointx.Chain(transports.EmbedNamedPathWrapString().Endpoint(), middlewares...),
	}
}
