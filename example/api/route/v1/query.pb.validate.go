// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: route/v1/query.proto

package route

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on BoolQueryRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *BoolQueryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BoolQueryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BoolQueryRequestMultiError, or nil if none found.
func (m *BoolQueryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *BoolQueryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Bool

	if all {
		switch v := interface{}(m.GetWrapBool()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BoolQueryRequestValidationError{
					field:  "WrapBool",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BoolQueryRequestValidationError{
					field:  "WrapBool",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWrapBool()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BoolQueryRequestValidationError{
				field:  "WrapBool",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.OptBool != nil {
		// no validation rules for OptBool
	}

	if len(errors) > 0 {
		return BoolQueryRequestMultiError(errors)
	}

	return nil
}

// BoolQueryRequestMultiError is an error wrapping multiple validation errors
// returned by BoolQueryRequest.ValidateAll() if the designated constraints
// aren't met.
type BoolQueryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BoolQueryRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BoolQueryRequestMultiError) AllErrors() []error { return m }

// BoolQueryRequestValidationError is the validation error returned by
// BoolQueryRequest.Validate if the designated constraints aren't met.
type BoolQueryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BoolQueryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BoolQueryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BoolQueryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BoolQueryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BoolQueryRequestValidationError) ErrorName() string { return "BoolQueryRequestValidationError" }

// Error satisfies the builtin error interface
func (e BoolQueryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBoolQueryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BoolQueryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BoolQueryRequestValidationError{}

// Validate checks the field values on Int32QueryRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *Int32QueryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Int32QueryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Int32QueryRequestMultiError, or nil if none found.
func (m *Int32QueryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *Int32QueryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Int32

	// no validation rules for Sint32

	// no validation rules for Sfixed32

	if all {
		switch v := interface{}(m.GetWrapInt32()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, Int32QueryRequestValidationError{
					field:  "WrapInt32",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, Int32QueryRequestValidationError{
					field:  "WrapInt32",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWrapInt32()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return Int32QueryRequestValidationError{
				field:  "WrapInt32",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.OptInt32 != nil {
		// no validation rules for OptInt32
	}

	if m.OptSint32 != nil {
		// no validation rules for OptSint32
	}

	if m.OptSfixed32 != nil {
		// no validation rules for OptSfixed32
	}

	if len(errors) > 0 {
		return Int32QueryRequestMultiError(errors)
	}

	return nil
}

// Int32QueryRequestMultiError is an error wrapping multiple validation errors
// returned by Int32QueryRequest.ValidateAll() if the designated constraints
// aren't met.
type Int32QueryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Int32QueryRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Int32QueryRequestMultiError) AllErrors() []error { return m }

// Int32QueryRequestValidationError is the validation error returned by
// Int32QueryRequest.Validate if the designated constraints aren't met.
type Int32QueryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Int32QueryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Int32QueryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Int32QueryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Int32QueryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Int32QueryRequestValidationError) ErrorName() string {
	return "Int32QueryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e Int32QueryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInt32QueryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Int32QueryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Int32QueryRequestValidationError{}

// Validate checks the field values on Int64QueryRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *Int64QueryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Int64QueryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Int64QueryRequestMultiError, or nil if none found.
func (m *Int64QueryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *Int64QueryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Int64

	// no validation rules for Sint64

	// no validation rules for Sfixed64

	if all {
		switch v := interface{}(m.GetWrapInt64()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, Int64QueryRequestValidationError{
					field:  "WrapInt64",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, Int64QueryRequestValidationError{
					field:  "WrapInt64",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWrapInt64()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return Int64QueryRequestValidationError{
				field:  "WrapInt64",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.OptInt64 != nil {
		// no validation rules for OptInt64
	}

	if m.OptSint64 != nil {
		// no validation rules for OptSint64
	}

	if m.OptSfixed64 != nil {
		// no validation rules for OptSfixed64
	}

	if len(errors) > 0 {
		return Int64QueryRequestMultiError(errors)
	}

	return nil
}

// Int64QueryRequestMultiError is an error wrapping multiple validation errors
// returned by Int64QueryRequest.ValidateAll() if the designated constraints
// aren't met.
type Int64QueryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Int64QueryRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Int64QueryRequestMultiError) AllErrors() []error { return m }

// Int64QueryRequestValidationError is the validation error returned by
// Int64QueryRequest.Validate if the designated constraints aren't met.
type Int64QueryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Int64QueryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Int64QueryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Int64QueryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Int64QueryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Int64QueryRequestValidationError) ErrorName() string {
	return "Int64QueryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e Int64QueryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInt64QueryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Int64QueryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Int64QueryRequestValidationError{}

// Validate checks the field values on Uint32QueryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *Uint32QueryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Uint32QueryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Uint32QueryRequestMultiError, or nil if none found.
func (m *Uint32QueryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *Uint32QueryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uint32

	// no validation rules for Fixed32

	if all {
		switch v := interface{}(m.GetWrapUint32()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, Uint32QueryRequestValidationError{
					field:  "WrapUint32",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, Uint32QueryRequestValidationError{
					field:  "WrapUint32",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWrapUint32()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return Uint32QueryRequestValidationError{
				field:  "WrapUint32",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.OptUint32 != nil {
		// no validation rules for OptUint32
	}

	if m.OptFixed32 != nil {
		// no validation rules for OptFixed32
	}

	if len(errors) > 0 {
		return Uint32QueryRequestMultiError(errors)
	}

	return nil
}

// Uint32QueryRequestMultiError is an error wrapping multiple validation errors
// returned by Uint32QueryRequest.ValidateAll() if the designated constraints
// aren't met.
type Uint32QueryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Uint32QueryRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Uint32QueryRequestMultiError) AllErrors() []error { return m }

// Uint32QueryRequestValidationError is the validation error returned by
// Uint32QueryRequest.Validate if the designated constraints aren't met.
type Uint32QueryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Uint32QueryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Uint32QueryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Uint32QueryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Uint32QueryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Uint32QueryRequestValidationError) ErrorName() string {
	return "Uint32QueryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e Uint32QueryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUint32QueryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Uint32QueryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Uint32QueryRequestValidationError{}

// Validate checks the field values on Uint64QueryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *Uint64QueryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Uint64QueryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Uint64QueryRequestMultiError, or nil if none found.
func (m *Uint64QueryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *Uint64QueryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Uint64

	// no validation rules for Fixed64

	if all {
		switch v := interface{}(m.GetWrapUint64()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, Uint64QueryRequestValidationError{
					field:  "WrapUint64",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, Uint64QueryRequestValidationError{
					field:  "WrapUint64",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWrapUint64()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return Uint64QueryRequestValidationError{
				field:  "WrapUint64",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.OptUint64 != nil {
		// no validation rules for OptUint64
	}

	if m.OptFixed64 != nil {
		// no validation rules for OptFixed64
	}

	if len(errors) > 0 {
		return Uint64QueryRequestMultiError(errors)
	}

	return nil
}

// Uint64QueryRequestMultiError is an error wrapping multiple validation errors
// returned by Uint64QueryRequest.ValidateAll() if the designated constraints
// aren't met.
type Uint64QueryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Uint64QueryRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Uint64QueryRequestMultiError) AllErrors() []error { return m }

// Uint64QueryRequestValidationError is the validation error returned by
// Uint64QueryRequest.Validate if the designated constraints aren't met.
type Uint64QueryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Uint64QueryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Uint64QueryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Uint64QueryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Uint64QueryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Uint64QueryRequestValidationError) ErrorName() string {
	return "Uint64QueryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e Uint64QueryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUint64QueryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Uint64QueryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Uint64QueryRequestValidationError{}

// Validate checks the field values on FloatQueryRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *FloatQueryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FloatQueryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FloatQueryRequestMultiError, or nil if none found.
func (m *FloatQueryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *FloatQueryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Float

	if all {
		switch v := interface{}(m.GetWrapFloat()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FloatQueryRequestValidationError{
					field:  "WrapFloat",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FloatQueryRequestValidationError{
					field:  "WrapFloat",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWrapFloat()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FloatQueryRequestValidationError{
				field:  "WrapFloat",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.OptFloat != nil {
		// no validation rules for OptFloat
	}

	if len(errors) > 0 {
		return FloatQueryRequestMultiError(errors)
	}

	return nil
}

// FloatQueryRequestMultiError is an error wrapping multiple validation errors
// returned by FloatQueryRequest.ValidateAll() if the designated constraints
// aren't met.
type FloatQueryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FloatQueryRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FloatQueryRequestMultiError) AllErrors() []error { return m }

// FloatQueryRequestValidationError is the validation error returned by
// FloatQueryRequest.Validate if the designated constraints aren't met.
type FloatQueryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FloatQueryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FloatQueryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FloatQueryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FloatQueryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FloatQueryRequestValidationError) ErrorName() string {
	return "FloatQueryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e FloatQueryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFloatQueryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FloatQueryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FloatQueryRequestValidationError{}

// Validate checks the field values on DoubleQueryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DoubleQueryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DoubleQueryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DoubleQueryRequestMultiError, or nil if none found.
func (m *DoubleQueryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DoubleQueryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Double

	if all {
		switch v := interface{}(m.GetWrapDouble()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DoubleQueryRequestValidationError{
					field:  "WrapDouble",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DoubleQueryRequestValidationError{
					field:  "WrapDouble",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWrapDouble()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DoubleQueryRequestValidationError{
				field:  "WrapDouble",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.OptDouble != nil {
		// no validation rules for OptDouble
	}

	if len(errors) > 0 {
		return DoubleQueryRequestMultiError(errors)
	}

	return nil
}

// DoubleQueryRequestMultiError is an error wrapping multiple validation errors
// returned by DoubleQueryRequest.ValidateAll() if the designated constraints
// aren't met.
type DoubleQueryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DoubleQueryRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DoubleQueryRequestMultiError) AllErrors() []error { return m }

// DoubleQueryRequestValidationError is the validation error returned by
// DoubleQueryRequest.Validate if the designated constraints aren't met.
type DoubleQueryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DoubleQueryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DoubleQueryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DoubleQueryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DoubleQueryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DoubleQueryRequestValidationError) ErrorName() string {
	return "DoubleQueryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DoubleQueryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDoubleQueryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DoubleQueryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DoubleQueryRequestValidationError{}

// Validate checks the field values on StringQueryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StringQueryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StringQueryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StringQueryRequestMultiError, or nil if none found.
func (m *StringQueryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *StringQueryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for String_

	if all {
		switch v := interface{}(m.GetWrapString()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StringQueryRequestValidationError{
					field:  "WrapString",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StringQueryRequestValidationError{
					field:  "WrapString",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetWrapString()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StringQueryRequestValidationError{
				field:  "WrapString",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.OptString != nil {
		// no validation rules for OptString
	}

	if len(errors) > 0 {
		return StringQueryRequestMultiError(errors)
	}

	return nil
}

// StringQueryRequestMultiError is an error wrapping multiple validation errors
// returned by StringQueryRequest.ValidateAll() if the designated constraints
// aren't met.
type StringQueryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StringQueryRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StringQueryRequestMultiError) AllErrors() []error { return m }

// StringQueryRequestValidationError is the validation error returned by
// StringQueryRequest.Validate if the designated constraints aren't met.
type StringQueryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StringQueryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StringQueryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StringQueryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StringQueryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StringQueryRequestValidationError) ErrorName() string {
	return "StringQueryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e StringQueryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStringQueryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StringQueryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StringQueryRequestValidationError{}

// Validate checks the field values on EnumQueryRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *EnumQueryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EnumQueryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// EnumQueryRequestMultiError, or nil if none found.
func (m *EnumQueryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *EnumQueryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Status

	if m.OptStatus != nil {
		// no validation rules for OptStatus
	}

	if len(errors) > 0 {
		return EnumQueryRequestMultiError(errors)
	}

	return nil
}

// EnumQueryRequestMultiError is an error wrapping multiple validation errors
// returned by EnumQueryRequest.ValidateAll() if the designated constraints
// aren't met.
type EnumQueryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EnumQueryRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EnumQueryRequestMultiError) AllErrors() []error { return m }

// EnumQueryRequestValidationError is the validation error returned by
// EnumQueryRequest.Validate if the designated constraints aren't met.
type EnumQueryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EnumQueryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EnumQueryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EnumQueryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EnumQueryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EnumQueryRequestValidationError) ErrorName() string { return "EnumQueryRequestValidationError" }

// Error satisfies the builtin error interface
func (e EnumQueryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEnumQueryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EnumQueryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EnumQueryRequestValidationError{}
