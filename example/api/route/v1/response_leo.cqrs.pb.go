// Code generated by protoc-gen-go-leo. DO NOT EDIT.

package route

import (
	context "context"
	cqrs "github.com/go-leo/leo/v3/cqrs"
	httpbody "google.golang.org/genproto/googleapis/api/httpbody"
	http "google.golang.org/genproto/googleapis/rpc/http"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

func NewResponseCqrsService[
	OmittedResponseQueryType OmittedResponseQuery, OmittedResponseResultType OmittedResponseResult,
	StarResponseQueryType StarResponseQuery, StarResponseResultType StarResponseResult,
	NamedResponseQueryType NamedResponseQuery, NamedResponseResultType NamedResponseResult,
	HttpBodyResponseQueryType HttpBodyResponseQuery, HttpBodyResponseResultType HttpBodyResponseResult,
	HttpBodyNamedResponseQueryType HttpBodyNamedResponseQuery, HttpBodyNamedResponseResultType HttpBodyNamedResponseResult,
	HttpResponseQueryType HttpResponseQuery, HttpResponseResultType HttpResponseResult,
](
	omittedResponseHandler cqrs.QueryHandler[OmittedResponseQueryType, OmittedResponseResultType],
	starResponseHandler cqrs.QueryHandler[StarResponseQueryType, StarResponseResultType],
	namedResponseHandler cqrs.QueryHandler[NamedResponseQueryType, NamedResponseResultType],
	httpBodyResponseHandler cqrs.QueryHandler[HttpBodyResponseQueryType, HttpBodyResponseResultType],
	httpBodyNamedResponseHandler cqrs.QueryHandler[HttpBodyNamedResponseQueryType, HttpBodyNamedResponseResultType],
	httpResponseHandler cqrs.QueryHandler[HttpResponseQueryType, HttpResponseResultType],
) (ResponseService, error) {
	var bus cqrs.SampleBus
	if err := bus.RegisterQuery(omittedResponseHandler); err != nil {
		return nil, err
	}
	if err := bus.RegisterQuery(starResponseHandler); err != nil {
		return nil, err
	}
	if err := bus.RegisterQuery(namedResponseHandler); err != nil {
		return nil, err
	}
	if err := bus.RegisterQuery(httpBodyResponseHandler); err != nil {
		return nil, err
	}
	if err := bus.RegisterQuery(httpBodyNamedResponseHandler); err != nil {
		return nil, err
	}
	if err := bus.RegisterQuery(httpResponseHandler); err != nil {
		return nil, err
	}
	return &responseCqrsService[
		OmittedResponseQueryType, OmittedResponseResultType,
		StarResponseQueryType, StarResponseResultType,
		NamedResponseQueryType, NamedResponseResultType,
		HttpBodyResponseQueryType, HttpBodyResponseResultType,
		HttpBodyNamedResponseQueryType, HttpBodyNamedResponseResultType,
		HttpResponseQueryType, HttpResponseResultType,
	]{bus: &bus}, nil
}

type responseCqrsService[
	OmittedResponseQueryType OmittedResponseQuery, OmittedResponseResultType OmittedResponseResult,
	StarResponseQueryType StarResponseQuery, StarResponseResultType StarResponseResult,
	NamedResponseQueryType NamedResponseQuery, NamedResponseResultType NamedResponseResult,
	HttpBodyResponseQueryType HttpBodyResponseQuery, HttpBodyResponseResultType HttpBodyResponseResult,
	HttpBodyNamedResponseQueryType HttpBodyNamedResponseQuery, HttpBodyNamedResponseResultType HttpBodyNamedResponseResult,
	HttpResponseQueryType HttpResponseQuery, HttpResponseResultType HttpResponseResult,
] struct {
	bus cqrs.Bus
}

func (svc *responseCqrsService[
	OmittedResponseQueryType, OmittedResponseResultType,
	StarResponseQueryType, StarResponseResultType,
	NamedResponseQueryType, NamedResponseResultType,
	HttpBodyResponseQueryType, HttpBodyResponseResultType,
	HttpBodyNamedResponseQueryType, HttpBodyNamedResponseResultType,
	HttpResponseQueryType, HttpResponseResultType,
]) OmittedResponse(ctx context.Context, request *emptypb.Empty) (*UserResponse, error) {
	var query OmittedResponseQueryType
	q, ctx, err := query.From(ctx, request)
	if err != nil {
		return nil, err
	}
	r, err := svc.bus.Query(ctx, q)
	if err != nil {
		return nil, err
	}
	return r.(OmittedResponseResultType).To(ctx)
}

func (svc *responseCqrsService[
	OmittedResponseQueryType, OmittedResponseResultType,
	StarResponseQueryType, StarResponseResultType,
	NamedResponseQueryType, NamedResponseResultType,
	HttpBodyResponseQueryType, HttpBodyResponseResultType,
	HttpBodyNamedResponseQueryType, HttpBodyNamedResponseResultType,
	HttpResponseQueryType, HttpResponseResultType,
]) StarResponse(ctx context.Context, request *emptypb.Empty) (*UserResponse, error) {
	var query StarResponseQueryType
	q, ctx, err := query.From(ctx, request)
	if err != nil {
		return nil, err
	}
	r, err := svc.bus.Query(ctx, q)
	if err != nil {
		return nil, err
	}
	return r.(StarResponseResultType).To(ctx)
}

func (svc *responseCqrsService[
	OmittedResponseQueryType, OmittedResponseResultType,
	StarResponseQueryType, StarResponseResultType,
	NamedResponseQueryType, NamedResponseResultType,
	HttpBodyResponseQueryType, HttpBodyResponseResultType,
	HttpBodyNamedResponseQueryType, HttpBodyNamedResponseResultType,
	HttpResponseQueryType, HttpResponseResultType,
]) NamedResponse(ctx context.Context, request *emptypb.Empty) (*UserResponse, error) {
	var query NamedResponseQueryType
	q, ctx, err := query.From(ctx, request)
	if err != nil {
		return nil, err
	}
	r, err := svc.bus.Query(ctx, q)
	if err != nil {
		return nil, err
	}
	return r.(NamedResponseResultType).To(ctx)
}

func (svc *responseCqrsService[
	OmittedResponseQueryType, OmittedResponseResultType,
	StarResponseQueryType, StarResponseResultType,
	NamedResponseQueryType, NamedResponseResultType,
	HttpBodyResponseQueryType, HttpBodyResponseResultType,
	HttpBodyNamedResponseQueryType, HttpBodyNamedResponseResultType,
	HttpResponseQueryType, HttpResponseResultType,
]) HttpBodyResponse(ctx context.Context, request *emptypb.Empty) (*httpbody.HttpBody, error) {
	var query HttpBodyResponseQueryType
	q, ctx, err := query.From(ctx, request)
	if err != nil {
		return nil, err
	}
	r, err := svc.bus.Query(ctx, q)
	if err != nil {
		return nil, err
	}
	return r.(HttpBodyResponseResultType).To(ctx)
}

func (svc *responseCqrsService[
	OmittedResponseQueryType, OmittedResponseResultType,
	StarResponseQueryType, StarResponseResultType,
	NamedResponseQueryType, NamedResponseResultType,
	HttpBodyResponseQueryType, HttpBodyResponseResultType,
	HttpBodyNamedResponseQueryType, HttpBodyNamedResponseResultType,
	HttpResponseQueryType, HttpResponseResultType,
]) HttpBodyNamedResponse(ctx context.Context, request *emptypb.Empty) (*HttpBody, error) {
	var query HttpBodyNamedResponseQueryType
	q, ctx, err := query.From(ctx, request)
	if err != nil {
		return nil, err
	}
	r, err := svc.bus.Query(ctx, q)
	if err != nil {
		return nil, err
	}
	return r.(HttpBodyNamedResponseResultType).To(ctx)
}

func (svc *responseCqrsService[
	OmittedResponseQueryType, OmittedResponseResultType,
	StarResponseQueryType, StarResponseResultType,
	NamedResponseQueryType, NamedResponseResultType,
	HttpBodyResponseQueryType, HttpBodyResponseResultType,
	HttpBodyNamedResponseQueryType, HttpBodyNamedResponseResultType,
	HttpResponseQueryType, HttpResponseResultType,
]) HttpResponse(ctx context.Context, request *emptypb.Empty) (*http.HttpResponse, error) {
	var query HttpResponseQueryType
	q, ctx, err := query.From(ctx, request)
	if err != nil {
		return nil, err
	}
	r, err := svc.bus.Query(ctx, q)
	if err != nil {
		return nil, err
	}
	return r.(HttpResponseResultType).To(ctx)
}

type (
	OmittedResponseQuery interface {
		isOmittedResponseQuery_Kind()
		From(context.Context, *emptypb.Empty) (OmittedResponseQuery, context.Context, error)
	}
	OmittedResponseResult interface {
		isOmittedResponseResult_Kind()
		To(context.Context) (*UserResponse, error)
	}
	UnimplementedOmittedResponseQuery  struct{}
	UnimplementedOmittedResponseResult struct{}

	StarResponseQuery interface {
		isStarResponseQuery_Kind()
		From(context.Context, *emptypb.Empty) (StarResponseQuery, context.Context, error)
	}
	StarResponseResult interface {
		isStarResponseResult_Kind()
		To(context.Context) (*UserResponse, error)
	}
	UnimplementedStarResponseQuery  struct{}
	UnimplementedStarResponseResult struct{}

	NamedResponseQuery interface {
		isNamedResponseQuery_Kind()
		From(context.Context, *emptypb.Empty) (NamedResponseQuery, context.Context, error)
	}
	NamedResponseResult interface {
		isNamedResponseResult_Kind()
		To(context.Context) (*UserResponse, error)
	}
	UnimplementedNamedResponseQuery  struct{}
	UnimplementedNamedResponseResult struct{}

	HttpBodyResponseQuery interface {
		isHttpBodyResponseQuery_Kind()
		From(context.Context, *emptypb.Empty) (HttpBodyResponseQuery, context.Context, error)
	}
	HttpBodyResponseResult interface {
		isHttpBodyResponseResult_Kind()
		To(context.Context) (*httpbody.HttpBody, error)
	}
	UnimplementedHttpBodyResponseQuery  struct{}
	UnimplementedHttpBodyResponseResult struct{}

	HttpBodyNamedResponseQuery interface {
		isHttpBodyNamedResponseQuery_Kind()
		From(context.Context, *emptypb.Empty) (HttpBodyNamedResponseQuery, context.Context, error)
	}
	HttpBodyNamedResponseResult interface {
		isHttpBodyNamedResponseResult_Kind()
		To(context.Context) (*HttpBody, error)
	}
	UnimplementedHttpBodyNamedResponseQuery  struct{}
	UnimplementedHttpBodyNamedResponseResult struct{}

	HttpResponseQuery interface {
		isHttpResponseQuery_Kind()
		From(context.Context, *emptypb.Empty) (HttpResponseQuery, context.Context, error)
	}
	HttpResponseResult interface {
		isHttpResponseResult_Kind()
		To(context.Context) (*http.HttpResponse, error)
	}
	UnimplementedHttpResponseQuery  struct{}
	UnimplementedHttpResponseResult struct{}
)

func (UnimplementedOmittedResponseQuery) isOmittedResponseQuery_Kind() {}
func (UnimplementedOmittedResponseQuery) From(context.Context, *emptypb.Empty) (OmittedResponseQuery, context.Context, error) {
	panic("implement me")
	return nil, nil, nil
}
func (UnimplementedOmittedResponseResult) isOmittedResponseResult_Kind() {}
func (UnimplementedOmittedResponseResult) To(context.Context) (*UserResponse, error) {
	panic("implement me")
	return nil, nil
}

func (UnimplementedStarResponseQuery) isStarResponseQuery_Kind() {}
func (UnimplementedStarResponseQuery) From(context.Context, *emptypb.Empty) (StarResponseQuery, context.Context, error) {
	panic("implement me")
	return nil, nil, nil
}
func (UnimplementedStarResponseResult) isStarResponseResult_Kind() {}
func (UnimplementedStarResponseResult) To(context.Context) (*UserResponse, error) {
	panic("implement me")
	return nil, nil
}

func (UnimplementedNamedResponseQuery) isNamedResponseQuery_Kind() {}
func (UnimplementedNamedResponseQuery) From(context.Context, *emptypb.Empty) (NamedResponseQuery, context.Context, error) {
	panic("implement me")
	return nil, nil, nil
}
func (UnimplementedNamedResponseResult) isNamedResponseResult_Kind() {}
func (UnimplementedNamedResponseResult) To(context.Context) (*UserResponse, error) {
	panic("implement me")
	return nil, nil
}

func (UnimplementedHttpBodyResponseQuery) isHttpBodyResponseQuery_Kind() {}
func (UnimplementedHttpBodyResponseQuery) From(context.Context, *emptypb.Empty) (HttpBodyResponseQuery, context.Context, error) {
	panic("implement me")
	return nil, nil, nil
}
func (UnimplementedHttpBodyResponseResult) isHttpBodyResponseResult_Kind() {}
func (UnimplementedHttpBodyResponseResult) To(context.Context) (*httpbody.HttpBody, error) {
	panic("implement me")
	return nil, nil
}

func (UnimplementedHttpBodyNamedResponseQuery) isHttpBodyNamedResponseQuery_Kind() {}
func (UnimplementedHttpBodyNamedResponseQuery) From(context.Context, *emptypb.Empty) (HttpBodyNamedResponseQuery, context.Context, error) {
	panic("implement me")
	return nil, nil, nil
}
func (UnimplementedHttpBodyNamedResponseResult) isHttpBodyNamedResponseResult_Kind() {}
func (UnimplementedHttpBodyNamedResponseResult) To(context.Context) (*HttpBody, error) {
	panic("implement me")
	return nil, nil
}

func (UnimplementedHttpResponseQuery) isHttpResponseQuery_Kind() {}
func (UnimplementedHttpResponseQuery) From(context.Context, *emptypb.Empty) (HttpResponseQuery, context.Context, error) {
	panic("implement me")
	return nil, nil, nil
}
func (UnimplementedHttpResponseResult) isHttpResponseResult_Kind() {}
func (UnimplementedHttpResponseResult) To(context.Context) (*http.HttpResponse, error) {
	panic("implement me")
	return nil, nil
}
