// Code generated by protoc-gen-go-leo. DO NOT EDIT.

package route

import (
	context "context"
	cqrs "github.com/go-leo/leo/v3/cqrs"
	httpbody "google.golang.org/genproto/googleapis/api/httpbody"
	http "google.golang.org/genproto/googleapis/rpc/http"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

func NewBodyCqrsService[
	StarBodyCommandType StarBodyCommand,
	NamedBodyCommandType NamedBodyCommand,
	NonBodyCommandType NonBodyCommand,
	HttpBodyStarBodyCommandType HttpBodyStarBodyCommand,
	HttpBodyNamedBodyCommandType HttpBodyNamedBodyCommand,
	HttpRequestCommandType HttpRequestCommand,
](
	starBodyHandler cqrs.CommandHandler[StarBodyCommandType],
	namedBodyHandler cqrs.CommandHandler[NamedBodyCommandType],
	nonBodyHandler cqrs.CommandHandler[NonBodyCommandType],
	httpBodyStarBodyHandler cqrs.CommandHandler[HttpBodyStarBodyCommandType],
	httpBodyNamedBodyHandler cqrs.CommandHandler[HttpBodyNamedBodyCommandType],
	httpRequestHandler cqrs.CommandHandler[HttpRequestCommandType],
) (BodyService, error) {
	var bus cqrs.SampleBus
	if err := bus.RegisterCommand(starBodyHandler); err != nil {
		return nil, err
	}
	if err := bus.RegisterCommand(namedBodyHandler); err != nil {
		return nil, err
	}
	if err := bus.RegisterCommand(nonBodyHandler); err != nil {
		return nil, err
	}
	if err := bus.RegisterCommand(httpBodyStarBodyHandler); err != nil {
		return nil, err
	}
	if err := bus.RegisterCommand(httpBodyNamedBodyHandler); err != nil {
		return nil, err
	}
	if err := bus.RegisterCommand(httpRequestHandler); err != nil {
		return nil, err
	}
	return &bodyCqrsService{bus: &bus}, nil
}

type bodyCqrsService struct {
	bus cqrs.Bus
}

func (svc *bodyCqrsService) StarBody(ctx context.Context, request *BodyRequest) (*emptypb.Empty, error) {
	var command StarBodyCommand
	command, ctx, err := command.From(ctx, request)
	if err != nil {
		return nil, err
	}

	if err := svc.bus.Exec(ctx, command); err != nil {
		return nil, err
	}
	return new(emptypb.Empty), nil
}

func (svc *bodyCqrsService) NamedBody(ctx context.Context, request *BodyRequest) (*emptypb.Empty, error) {
	var command NamedBodyCommand
	command, ctx, err := command.From(ctx, request)
	if err != nil {
		return nil, err
	}

	if err := svc.bus.Exec(ctx, command); err != nil {
		return nil, err
	}
	return new(emptypb.Empty), nil
}

func (svc *bodyCqrsService) NonBody(ctx context.Context, request *emptypb.Empty) (*emptypb.Empty, error) {
	var command NonBodyCommand
	command, ctx, err := command.From(ctx, request)
	if err != nil {
		return nil, err
	}

	if err := svc.bus.Exec(ctx, command); err != nil {
		return nil, err
	}
	return new(emptypb.Empty), nil
}

func (svc *bodyCqrsService) HttpBodyStarBody(ctx context.Context, request *httpbody.HttpBody) (*emptypb.Empty, error) {
	var command HttpBodyStarBodyCommand
	command, ctx, err := command.From(ctx, request)
	if err != nil {
		return nil, err
	}

	if err := svc.bus.Exec(ctx, command); err != nil {
		return nil, err
	}
	return new(emptypb.Empty), nil
}

func (svc *bodyCqrsService) HttpBodyNamedBody(ctx context.Context, request *HttpBodyRequest) (*emptypb.Empty, error) {
	var command HttpBodyNamedBodyCommand
	command, ctx, err := command.From(ctx, request)
	if err != nil {
		return nil, err
	}

	if err := svc.bus.Exec(ctx, command); err != nil {
		return nil, err
	}
	return new(emptypb.Empty), nil
}

func (svc *bodyCqrsService) HttpRequest(ctx context.Context, request *http.HttpRequest) (*emptypb.Empty, error) {
	var command HttpRequestCommand
	command, ctx, err := command.From(ctx, request)
	if err != nil {
		return nil, err
	}

	if err := svc.bus.Exec(ctx, command); err != nil {
		return nil, err
	}
	return new(emptypb.Empty), nil
}

type (
	StarBodyCommand interface {
		isStarBodyCommand_Kind()
		From(context.Context, *BodyRequest) (StarBodyCommand, context.Context, error)
	}
	UnimplementedStarBodyCommand struct{}

	NamedBodyCommand interface {
		isNamedBodyCommand_Kind()
		From(context.Context, *BodyRequest) (NamedBodyCommand, context.Context, error)
	}
	UnimplementedNamedBodyCommand struct{}

	NonBodyCommand interface {
		isNonBodyCommand_Kind()
		From(context.Context, *emptypb.Empty) (NonBodyCommand, context.Context, error)
	}
	UnimplementedNonBodyCommand struct{}

	HttpBodyStarBodyCommand interface {
		isHttpBodyStarBodyCommand_Kind()
		From(context.Context, *httpbody.HttpBody) (HttpBodyStarBodyCommand, context.Context, error)
	}
	UnimplementedHttpBodyStarBodyCommand struct{}

	HttpBodyNamedBodyCommand interface {
		isHttpBodyNamedBodyCommand_Kind()
		From(context.Context, *HttpBodyRequest) (HttpBodyNamedBodyCommand, context.Context, error)
	}
	UnimplementedHttpBodyNamedBodyCommand struct{}

	HttpRequestCommand interface {
		isHttpRequestCommand_Kind()
		From(context.Context, *http.HttpRequest) (HttpRequestCommand, context.Context, error)
	}
	UnimplementedHttpRequestCommand struct{}
)

func (UnimplementedStarBodyCommand) isStarBodyCommand_Kind() {}
func (UnimplementedStarBodyCommand) From(context.Context, *BodyRequest) (StarBodyCommand, context.Context, error) {
	panic("implement me")
	return nil, nil, nil
}
func (UnimplementedNamedBodyCommand) isNamedBodyCommand_Kind() {}
func (UnimplementedNamedBodyCommand) From(context.Context, *BodyRequest) (NamedBodyCommand, context.Context, error) {
	panic("implement me")
	return nil, nil, nil
}
func (UnimplementedNonBodyCommand) isNonBodyCommand_Kind() {}
func (UnimplementedNonBodyCommand) From(context.Context, *emptypb.Empty) (NonBodyCommand, context.Context, error) {
	panic("implement me")
	return nil, nil, nil
}
func (UnimplementedHttpBodyStarBodyCommand) isHttpBodyStarBodyCommand_Kind() {}
func (UnimplementedHttpBodyStarBodyCommand) From(context.Context, *httpbody.HttpBody) (HttpBodyStarBodyCommand, context.Context, error) {
	panic("implement me")
	return nil, nil, nil
}
func (UnimplementedHttpBodyNamedBodyCommand) isHttpBodyNamedBodyCommand_Kind() {}
func (UnimplementedHttpBodyNamedBodyCommand) From(context.Context, *HttpBodyRequest) (HttpBodyNamedBodyCommand, context.Context, error) {
	panic("implement me")
	return nil, nil, nil
}
func (UnimplementedHttpRequestCommand) isHttpRequestCommand_Kind() {}
func (UnimplementedHttpRequestCommand) From(context.Context, *http.HttpRequest) (HttpRequestCommand, context.Context, error) {
	panic("implement me")
	return nil, nil, nil
}

// route/v1/cq/star_body_leo.query.pb.go
// route/v1/cq/named_body_leo.query.pb.go
// route/v1/cq/non_body_leo.query.pb.go
// route/v1/cq/http_body_star_body_leo.query.pb.go
// route/v1/cq/http_body_named_body_leo.query.pb.go
// route/v1/cq/http_request_leo.query.pb.go
