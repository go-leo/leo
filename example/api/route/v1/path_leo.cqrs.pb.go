// Code generated by protoc-gen-go-leo. DO NOT EDIT.

package route

import (
	context "context"
	cqrs "github.com/go-leo/leo/v3/cqrs"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

func NewBoolPathCqrsService[
	BoolPathCommandType BoolPathCommand,
](
	boolPathHandler cqrs.CommandHandler[BoolPathCommandType],
) (BoolPathService, error) {
	var bus cqrs.SampleBus
	if err := bus.RegisterCommand(boolPathHandler); err != nil {
		return nil, err
	}
	return &boolPathCqrsService[BoolPathCommandType]{bus: &bus}, nil
}

func NewInt32PathCqrsService[
	Int32PathCommandType Int32PathCommand,
](
	int32PathHandler cqrs.CommandHandler[Int32PathCommandType],
) (Int32PathService, error) {
	var bus cqrs.SampleBus
	if err := bus.RegisterCommand(int32PathHandler); err != nil {
		return nil, err
	}
	return &int32PathCqrsService[Int32PathCommandType]{bus: &bus}, nil
}

func NewInt64PathCqrsService[
	Int64PathCommandType Int64PathCommand,
](
	int64PathHandler cqrs.CommandHandler[Int64PathCommandType],
) (Int64PathService, error) {
	var bus cqrs.SampleBus
	if err := bus.RegisterCommand(int64PathHandler); err != nil {
		return nil, err
	}
	return &int64PathCqrsService[Int64PathCommandType]{bus: &bus}, nil
}

func NewUint32PathCqrsService[
	Uint32PathCommandType Uint32PathCommand,
](
	uint32PathHandler cqrs.CommandHandler[Uint32PathCommandType],
) (Uint32PathService, error) {
	var bus cqrs.SampleBus
	if err := bus.RegisterCommand(uint32PathHandler); err != nil {
		return nil, err
	}
	return &uint32PathCqrsService[Uint32PathCommandType]{bus: &bus}, nil
}

func NewUint64PathCqrsService[
	Uint64PathCommandType Uint64PathCommand,
](
	uint64PathHandler cqrs.CommandHandler[Uint64PathCommandType],
) (Uint64PathService, error) {
	var bus cqrs.SampleBus
	if err := bus.RegisterCommand(uint64PathHandler); err != nil {
		return nil, err
	}
	return &uint64PathCqrsService[Uint64PathCommandType]{bus: &bus}, nil
}

func NewFloatPathCqrsService[
	FloatPathCommandType FloatPathCommand,
](
	floatPathHandler cqrs.CommandHandler[FloatPathCommandType],
) (FloatPathService, error) {
	var bus cqrs.SampleBus
	if err := bus.RegisterCommand(floatPathHandler); err != nil {
		return nil, err
	}
	return &floatPathCqrsService[FloatPathCommandType]{bus: &bus}, nil
}

func NewDoublePathCqrsService[
	DoublePathCommandType DoublePathCommand,
](
	doublePathHandler cqrs.CommandHandler[DoublePathCommandType],
) (DoublePathService, error) {
	var bus cqrs.SampleBus
	if err := bus.RegisterCommand(doublePathHandler); err != nil {
		return nil, err
	}
	return &doublePathCqrsService[DoublePathCommandType]{bus: &bus}, nil
}

func NewStringPathCqrsService[
	StringPathCommandType StringPathCommand,
](
	stringPathHandler cqrs.CommandHandler[StringPathCommandType],
) (StringPathService, error) {
	var bus cqrs.SampleBus
	if err := bus.RegisterCommand(stringPathHandler); err != nil {
		return nil, err
	}
	return &stringPathCqrsService[StringPathCommandType]{bus: &bus}, nil
}

func NewEnumPathCqrsService[
	EnumPathCommandType EnumPathCommand,
](
	enumPathHandler cqrs.CommandHandler[EnumPathCommandType],
) (EnumPathService, error) {
	var bus cqrs.SampleBus
	if err := bus.RegisterCommand(enumPathHandler); err != nil {
		return nil, err
	}
	return &enumPathCqrsService[EnumPathCommandType]{bus: &bus}, nil
}

func NewNamedPathCqrsService[
	NamedPathStringCommandType NamedPathStringCommand,
	NamedPathOptStringCommandType NamedPathOptStringCommand,
	NamedPathWrapStringCommandType NamedPathWrapStringCommand,
	EmbedNamedPathStringCommandType EmbedNamedPathStringCommand,
	EmbedNamedPathOptStringCommandType EmbedNamedPathOptStringCommand,
	EmbedNamedPathWrapStringCommandType EmbedNamedPathWrapStringCommand,
](
	namedPathStringHandler cqrs.CommandHandler[NamedPathStringCommandType],
	namedPathOptStringHandler cqrs.CommandHandler[NamedPathOptStringCommandType],
	namedPathWrapStringHandler cqrs.CommandHandler[NamedPathWrapStringCommandType],
	embedNamedPathStringHandler cqrs.CommandHandler[EmbedNamedPathStringCommandType],
	embedNamedPathOptStringHandler cqrs.CommandHandler[EmbedNamedPathOptStringCommandType],
	embedNamedPathWrapStringHandler cqrs.CommandHandler[EmbedNamedPathWrapStringCommandType],
) (NamedPathService, error) {
	var bus cqrs.SampleBus
	if err := bus.RegisterCommand(namedPathStringHandler); err != nil {
		return nil, err
	}
	if err := bus.RegisterCommand(namedPathOptStringHandler); err != nil {
		return nil, err
	}
	if err := bus.RegisterCommand(namedPathWrapStringHandler); err != nil {
		return nil, err
	}
	if err := bus.RegisterCommand(embedNamedPathStringHandler); err != nil {
		return nil, err
	}
	if err := bus.RegisterCommand(embedNamedPathOptStringHandler); err != nil {
		return nil, err
	}
	if err := bus.RegisterCommand(embedNamedPathWrapStringHandler); err != nil {
		return nil, err
	}
	return &namedPathCqrsService[
		NamedPathStringCommandType,
		NamedPathOptStringCommandType,
		NamedPathWrapStringCommandType,
		EmbedNamedPathStringCommandType,
		EmbedNamedPathOptStringCommandType,
		EmbedNamedPathWrapStringCommandType,
	]{bus: &bus}, nil
}

func NewMixPathCqrsService[
	MixPathCommandType MixPathCommand,
](
	mixPathHandler cqrs.CommandHandler[MixPathCommandType],
) (MixPathService, error) {
	var bus cqrs.SampleBus
	if err := bus.RegisterCommand(mixPathHandler); err != nil {
		return nil, err
	}
	return &mixPathCqrsService[MixPathCommandType]{bus: &bus}, nil
}

type boolPathCqrsService[
	BoolPathCommandType BoolPathCommand,
] struct {
	bus cqrs.Bus
}

func (svc *boolPathCqrsService[BoolPathCommandType]) BoolPath(ctx context.Context, request *BoolPathRequest) (*emptypb.Empty, error) {
	var command BoolPathCommandType
	cmd, ctx, err := command.From(ctx, request)
	if err != nil {
		return nil, err
	}
	if err := svc.bus.Exec(ctx, cmd); err != nil {
		return nil, err
	}
	return new(emptypb.Empty), nil
}

type (
	BoolPathCommand interface {
		isBoolPathCommand_Kind()
		From(context.Context, *BoolPathRequest) (BoolPathCommand, context.Context, error)
	}
	UnimplementedBoolPathCommand struct{}
)

func (UnimplementedBoolPathCommand) isBoolPathCommand_Kind() {}
func (UnimplementedBoolPathCommand) From(context.Context, *BoolPathRequest) (BoolPathCommand, context.Context, error) {
	panic("implement me")
	return nil, nil, nil
}

type int32PathCqrsService[
	Int32PathCommandType Int32PathCommand,
] struct {
	bus cqrs.Bus
}

func (svc *int32PathCqrsService[Int32PathCommandType]) Int32Path(ctx context.Context, request *Int32PathRequest) (*emptypb.Empty, error) {
	var command Int32PathCommandType
	cmd, ctx, err := command.From(ctx, request)
	if err != nil {
		return nil, err
	}
	if err := svc.bus.Exec(ctx, cmd); err != nil {
		return nil, err
	}
	return new(emptypb.Empty), nil
}

type (
	Int32PathCommand interface {
		isInt32PathCommand_Kind()
		From(context.Context, *Int32PathRequest) (Int32PathCommand, context.Context, error)
	}
	UnimplementedInt32PathCommand struct{}
)

func (UnimplementedInt32PathCommand) isInt32PathCommand_Kind() {}
func (UnimplementedInt32PathCommand) From(context.Context, *Int32PathRequest) (Int32PathCommand, context.Context, error) {
	panic("implement me")
	return nil, nil, nil
}

type int64PathCqrsService[
	Int64PathCommandType Int64PathCommand,
] struct {
	bus cqrs.Bus
}

func (svc *int64PathCqrsService[Int64PathCommandType]) Int64Path(ctx context.Context, request *Int64PathRequest) (*emptypb.Empty, error) {
	var command Int64PathCommandType
	cmd, ctx, err := command.From(ctx, request)
	if err != nil {
		return nil, err
	}
	if err := svc.bus.Exec(ctx, cmd); err != nil {
		return nil, err
	}
	return new(emptypb.Empty), nil
}

type (
	Int64PathCommand interface {
		isInt64PathCommand_Kind()
		From(context.Context, *Int64PathRequest) (Int64PathCommand, context.Context, error)
	}
	UnimplementedInt64PathCommand struct{}
)

func (UnimplementedInt64PathCommand) isInt64PathCommand_Kind() {}
func (UnimplementedInt64PathCommand) From(context.Context, *Int64PathRequest) (Int64PathCommand, context.Context, error) {
	panic("implement me")
	return nil, nil, nil
}

type uint32PathCqrsService[
	Uint32PathCommandType Uint32PathCommand,
] struct {
	bus cqrs.Bus
}

func (svc *uint32PathCqrsService[Uint32PathCommandType]) Uint32Path(ctx context.Context, request *Uint32PathRequest) (*emptypb.Empty, error) {
	var command Uint32PathCommandType
	cmd, ctx, err := command.From(ctx, request)
	if err != nil {
		return nil, err
	}
	if err := svc.bus.Exec(ctx, cmd); err != nil {
		return nil, err
	}
	return new(emptypb.Empty), nil
}

type (
	Uint32PathCommand interface {
		isUint32PathCommand_Kind()
		From(context.Context, *Uint32PathRequest) (Uint32PathCommand, context.Context, error)
	}
	UnimplementedUint32PathCommand struct{}
)

func (UnimplementedUint32PathCommand) isUint32PathCommand_Kind() {}
func (UnimplementedUint32PathCommand) From(context.Context, *Uint32PathRequest) (Uint32PathCommand, context.Context, error) {
	panic("implement me")
	return nil, nil, nil
}

type uint64PathCqrsService[
	Uint64PathCommandType Uint64PathCommand,
] struct {
	bus cqrs.Bus
}

func (svc *uint64PathCqrsService[Uint64PathCommandType]) Uint64Path(ctx context.Context, request *Uint64PathRequest) (*emptypb.Empty, error) {
	var command Uint64PathCommandType
	cmd, ctx, err := command.From(ctx, request)
	if err != nil {
		return nil, err
	}
	if err := svc.bus.Exec(ctx, cmd); err != nil {
		return nil, err
	}
	return new(emptypb.Empty), nil
}

type (
	Uint64PathCommand interface {
		isUint64PathCommand_Kind()
		From(context.Context, *Uint64PathRequest) (Uint64PathCommand, context.Context, error)
	}
	UnimplementedUint64PathCommand struct{}
)

func (UnimplementedUint64PathCommand) isUint64PathCommand_Kind() {}
func (UnimplementedUint64PathCommand) From(context.Context, *Uint64PathRequest) (Uint64PathCommand, context.Context, error) {
	panic("implement me")
	return nil, nil, nil
}

type floatPathCqrsService[
	FloatPathCommandType FloatPathCommand,
] struct {
	bus cqrs.Bus
}

func (svc *floatPathCqrsService[FloatPathCommandType]) FloatPath(ctx context.Context, request *FloatPathRequest) (*emptypb.Empty, error) {
	var command FloatPathCommandType
	cmd, ctx, err := command.From(ctx, request)
	if err != nil {
		return nil, err
	}
	if err := svc.bus.Exec(ctx, cmd); err != nil {
		return nil, err
	}
	return new(emptypb.Empty), nil
}

type (
	FloatPathCommand interface {
		isFloatPathCommand_Kind()
		From(context.Context, *FloatPathRequest) (FloatPathCommand, context.Context, error)
	}
	UnimplementedFloatPathCommand struct{}
)

func (UnimplementedFloatPathCommand) isFloatPathCommand_Kind() {}
func (UnimplementedFloatPathCommand) From(context.Context, *FloatPathRequest) (FloatPathCommand, context.Context, error) {
	panic("implement me")
	return nil, nil, nil
}

type doublePathCqrsService[
	DoublePathCommandType DoublePathCommand,
] struct {
	bus cqrs.Bus
}

func (svc *doublePathCqrsService[DoublePathCommandType]) DoublePath(ctx context.Context, request *DoublePathRequest) (*emptypb.Empty, error) {
	var command DoublePathCommandType
	cmd, ctx, err := command.From(ctx, request)
	if err != nil {
		return nil, err
	}
	if err := svc.bus.Exec(ctx, cmd); err != nil {
		return nil, err
	}
	return new(emptypb.Empty), nil
}

type (
	DoublePathCommand interface {
		isDoublePathCommand_Kind()
		From(context.Context, *DoublePathRequest) (DoublePathCommand, context.Context, error)
	}
	UnimplementedDoublePathCommand struct{}
)

func (UnimplementedDoublePathCommand) isDoublePathCommand_Kind() {}
func (UnimplementedDoublePathCommand) From(context.Context, *DoublePathRequest) (DoublePathCommand, context.Context, error) {
	panic("implement me")
	return nil, nil, nil
}

type stringPathCqrsService[
	StringPathCommandType StringPathCommand,
] struct {
	bus cqrs.Bus
}

func (svc *stringPathCqrsService[StringPathCommandType]) StringPath(ctx context.Context, request *StringPathRequest) (*emptypb.Empty, error) {
	var command StringPathCommandType
	cmd, ctx, err := command.From(ctx, request)
	if err != nil {
		return nil, err
	}
	if err := svc.bus.Exec(ctx, cmd); err != nil {
		return nil, err
	}
	return new(emptypb.Empty), nil
}

type (
	StringPathCommand interface {
		isStringPathCommand_Kind()
		From(context.Context, *StringPathRequest) (StringPathCommand, context.Context, error)
	}
	UnimplementedStringPathCommand struct{}
)

func (UnimplementedStringPathCommand) isStringPathCommand_Kind() {}
func (UnimplementedStringPathCommand) From(context.Context, *StringPathRequest) (StringPathCommand, context.Context, error) {
	panic("implement me")
	return nil, nil, nil
}

type enumPathCqrsService[
	EnumPathCommandType EnumPathCommand,
] struct {
	bus cqrs.Bus
}

func (svc *enumPathCqrsService[EnumPathCommandType]) EnumPath(ctx context.Context, request *EnumPathRequest) (*emptypb.Empty, error) {
	var command EnumPathCommandType
	cmd, ctx, err := command.From(ctx, request)
	if err != nil {
		return nil, err
	}
	if err := svc.bus.Exec(ctx, cmd); err != nil {
		return nil, err
	}
	return new(emptypb.Empty), nil
}

type (
	EnumPathCommand interface {
		isEnumPathCommand_Kind()
		From(context.Context, *EnumPathRequest) (EnumPathCommand, context.Context, error)
	}
	UnimplementedEnumPathCommand struct{}
)

func (UnimplementedEnumPathCommand) isEnumPathCommand_Kind() {}
func (UnimplementedEnumPathCommand) From(context.Context, *EnumPathRequest) (EnumPathCommand, context.Context, error) {
	panic("implement me")
	return nil, nil, nil
}

type namedPathCqrsService[
	NamedPathStringCommandType NamedPathStringCommand,
	NamedPathOptStringCommandType NamedPathOptStringCommand,
	NamedPathWrapStringCommandType NamedPathWrapStringCommand,
	EmbedNamedPathStringCommandType EmbedNamedPathStringCommand,
	EmbedNamedPathOptStringCommandType EmbedNamedPathOptStringCommand,
	EmbedNamedPathWrapStringCommandType EmbedNamedPathWrapStringCommand,
] struct {
	bus cqrs.Bus
}

func (svc *namedPathCqrsService[
	NamedPathStringCommandType,
	NamedPathOptStringCommandType,
	NamedPathWrapStringCommandType,
	EmbedNamedPathStringCommandType,
	EmbedNamedPathOptStringCommandType,
	EmbedNamedPathWrapStringCommandType,
]) NamedPathString(ctx context.Context, request *NamedPathRequest) (*emptypb.Empty, error) {
	var command NamedPathStringCommandType
	cmd, ctx, err := command.From(ctx, request)
	if err != nil {
		return nil, err
	}
	if err := svc.bus.Exec(ctx, cmd); err != nil {
		return nil, err
	}
	return new(emptypb.Empty), nil
}

func (svc *namedPathCqrsService[
	NamedPathStringCommandType,
	NamedPathOptStringCommandType,
	NamedPathWrapStringCommandType,
	EmbedNamedPathStringCommandType,
	EmbedNamedPathOptStringCommandType,
	EmbedNamedPathWrapStringCommandType,
]) NamedPathOptString(ctx context.Context, request *NamedPathRequest) (*emptypb.Empty, error) {
	var command NamedPathOptStringCommandType
	cmd, ctx, err := command.From(ctx, request)
	if err != nil {
		return nil, err
	}
	if err := svc.bus.Exec(ctx, cmd); err != nil {
		return nil, err
	}
	return new(emptypb.Empty), nil
}

func (svc *namedPathCqrsService[
	NamedPathStringCommandType,
	NamedPathOptStringCommandType,
	NamedPathWrapStringCommandType,
	EmbedNamedPathStringCommandType,
	EmbedNamedPathOptStringCommandType,
	EmbedNamedPathWrapStringCommandType,
]) NamedPathWrapString(ctx context.Context, request *NamedPathRequest) (*emptypb.Empty, error) {
	var command NamedPathWrapStringCommandType
	cmd, ctx, err := command.From(ctx, request)
	if err != nil {
		return nil, err
	}
	if err := svc.bus.Exec(ctx, cmd); err != nil {
		return nil, err
	}
	return new(emptypb.Empty), nil
}

func (svc *namedPathCqrsService[
	NamedPathStringCommandType,
	NamedPathOptStringCommandType,
	NamedPathWrapStringCommandType,
	EmbedNamedPathStringCommandType,
	EmbedNamedPathOptStringCommandType,
	EmbedNamedPathWrapStringCommandType,
]) EmbedNamedPathString(ctx context.Context, request *EmbedNamedPathRequest) (*emptypb.Empty, error) {
	var command EmbedNamedPathStringCommandType
	cmd, ctx, err := command.From(ctx, request)
	if err != nil {
		return nil, err
	}
	if err := svc.bus.Exec(ctx, cmd); err != nil {
		return nil, err
	}
	return new(emptypb.Empty), nil
}

func (svc *namedPathCqrsService[
	NamedPathStringCommandType,
	NamedPathOptStringCommandType,
	NamedPathWrapStringCommandType,
	EmbedNamedPathStringCommandType,
	EmbedNamedPathOptStringCommandType,
	EmbedNamedPathWrapStringCommandType,
]) EmbedNamedPathOptString(ctx context.Context, request *EmbedNamedPathRequest) (*emptypb.Empty, error) {
	var command EmbedNamedPathOptStringCommandType
	cmd, ctx, err := command.From(ctx, request)
	if err != nil {
		return nil, err
	}
	if err := svc.bus.Exec(ctx, cmd); err != nil {
		return nil, err
	}
	return new(emptypb.Empty), nil
}

func (svc *namedPathCqrsService[
	NamedPathStringCommandType,
	NamedPathOptStringCommandType,
	NamedPathWrapStringCommandType,
	EmbedNamedPathStringCommandType,
	EmbedNamedPathOptStringCommandType,
	EmbedNamedPathWrapStringCommandType,
]) EmbedNamedPathWrapString(ctx context.Context, request *EmbedNamedPathRequest) (*emptypb.Empty, error) {
	var command EmbedNamedPathWrapStringCommandType
	cmd, ctx, err := command.From(ctx, request)
	if err != nil {
		return nil, err
	}
	if err := svc.bus.Exec(ctx, cmd); err != nil {
		return nil, err
	}
	return new(emptypb.Empty), nil
}

type (
	NamedPathStringCommand interface {
		isNamedPathStringCommand_Kind()
		From(context.Context, *NamedPathRequest) (NamedPathStringCommand, context.Context, error)
	}
	UnimplementedNamedPathStringCommand struct{}

	NamedPathOptStringCommand interface {
		isNamedPathOptStringCommand_Kind()
		From(context.Context, *NamedPathRequest) (NamedPathOptStringCommand, context.Context, error)
	}
	UnimplementedNamedPathOptStringCommand struct{}

	NamedPathWrapStringCommand interface {
		isNamedPathWrapStringCommand_Kind()
		From(context.Context, *NamedPathRequest) (NamedPathWrapStringCommand, context.Context, error)
	}
	UnimplementedNamedPathWrapStringCommand struct{}

	EmbedNamedPathStringCommand interface {
		isEmbedNamedPathStringCommand_Kind()
		From(context.Context, *EmbedNamedPathRequest) (EmbedNamedPathStringCommand, context.Context, error)
	}
	UnimplementedEmbedNamedPathStringCommand struct{}

	EmbedNamedPathOptStringCommand interface {
		isEmbedNamedPathOptStringCommand_Kind()
		From(context.Context, *EmbedNamedPathRequest) (EmbedNamedPathOptStringCommand, context.Context, error)
	}
	UnimplementedEmbedNamedPathOptStringCommand struct{}

	EmbedNamedPathWrapStringCommand interface {
		isEmbedNamedPathWrapStringCommand_Kind()
		From(context.Context, *EmbedNamedPathRequest) (EmbedNamedPathWrapStringCommand, context.Context, error)
	}
	UnimplementedEmbedNamedPathWrapStringCommand struct{}
)

func (UnimplementedNamedPathStringCommand) isNamedPathStringCommand_Kind() {}
func (UnimplementedNamedPathStringCommand) From(context.Context, *NamedPathRequest) (NamedPathStringCommand, context.Context, error) {
	panic("implement me")
	return nil, nil, nil
}
func (UnimplementedNamedPathOptStringCommand) isNamedPathOptStringCommand_Kind() {}
func (UnimplementedNamedPathOptStringCommand) From(context.Context, *NamedPathRequest) (NamedPathOptStringCommand, context.Context, error) {
	panic("implement me")
	return nil, nil, nil
}
func (UnimplementedNamedPathWrapStringCommand) isNamedPathWrapStringCommand_Kind() {}
func (UnimplementedNamedPathWrapStringCommand) From(context.Context, *NamedPathRequest) (NamedPathWrapStringCommand, context.Context, error) {
	panic("implement me")
	return nil, nil, nil
}
func (UnimplementedEmbedNamedPathStringCommand) isEmbedNamedPathStringCommand_Kind() {}
func (UnimplementedEmbedNamedPathStringCommand) From(context.Context, *EmbedNamedPathRequest) (EmbedNamedPathStringCommand, context.Context, error) {
	panic("implement me")
	return nil, nil, nil
}
func (UnimplementedEmbedNamedPathOptStringCommand) isEmbedNamedPathOptStringCommand_Kind() {}
func (UnimplementedEmbedNamedPathOptStringCommand) From(context.Context, *EmbedNamedPathRequest) (EmbedNamedPathOptStringCommand, context.Context, error) {
	panic("implement me")
	return nil, nil, nil
}
func (UnimplementedEmbedNamedPathWrapStringCommand) isEmbedNamedPathWrapStringCommand_Kind() {}
func (UnimplementedEmbedNamedPathWrapStringCommand) From(context.Context, *EmbedNamedPathRequest) (EmbedNamedPathWrapStringCommand, context.Context, error) {
	panic("implement me")
	return nil, nil, nil
}

type mixPathCqrsService[
	MixPathCommandType MixPathCommand,
] struct {
	bus cqrs.Bus
}

func (svc *mixPathCqrsService[MixPathCommandType]) MixPath(ctx context.Context, request *MixPathRequest) (*emptypb.Empty, error) {
	var command MixPathCommandType
	cmd, ctx, err := command.From(ctx, request)
	if err != nil {
		return nil, err
	}
	if err := svc.bus.Exec(ctx, cmd); err != nil {
		return nil, err
	}
	return new(emptypb.Empty), nil
}

type (
	MixPathCommand interface {
		isMixPathCommand_Kind()
		From(context.Context, *MixPathRequest) (MixPathCommand, context.Context, error)
	}
	UnimplementedMixPathCommand struct{}
)

func (UnimplementedMixPathCommand) isMixPathCommand_Kind() {}
func (UnimplementedMixPathCommand) From(context.Context, *MixPathRequest) (MixPathCommand, context.Context, error) {
	panic("implement me")
	return nil, nil, nil
}

// route/v1/cq/bool_path_leo.query.pb.go
// route/v1/cq/int32_path_leo.query.pb.go
// route/v1/cq/int64_path_leo.query.pb.go
// route/v1/cq/uint32_path_leo.query.pb.go
// route/v1/cq/uint64_path_leo.query.pb.go
// route/v1/cq/float_path_leo.query.pb.go
// route/v1/cq/double_path_leo.query.pb.go
// route/v1/cq/string_path_leo.query.pb.go
// route/v1/cq/enum_path_leo.query.pb.go
// route/v1/cq/named_path_string_leo.query.pb.go
// route/v1/cq/named_path_opt_string_leo.query.pb.go
// route/v1/cq/named_path_wrap_string_leo.query.pb.go
// route/v1/cq/embed_named_path_string_leo.query.pb.go
// route/v1/cq/embed_named_path_opt_string_leo.query.pb.go
// route/v1/cq/embed_named_path_wrap_string_leo.query.pb.go
// route/v1/cq/mix_path_leo.query.pb.go
