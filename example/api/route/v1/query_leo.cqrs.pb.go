// Code generated by protoc-gen-go-leo. DO NOT EDIT.

package route

import (
	context "context"
	cqrs "github.com/go-leo/leo/v3/cqrs"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

func NewBoolQueryCqrsService[
	BoolQueryCommandType BoolQueryCommand,
](
	boolQueryHandler cqrs.CommandHandler[BoolQueryCommandType],
) (BoolQueryService, error) {
	var bus cqrs.SampleBus
	if err := bus.RegisterCommand(boolQueryHandler); err != nil {
		return nil, err
	}
	return &boolQueryCqrsService[BoolQueryCommandType]{bus: &bus}, nil
}

func NewInt32QueryCqrsService[
	Int32QueryCommandType Int32QueryCommand,
](
	int32QueryHandler cqrs.CommandHandler[Int32QueryCommandType],
) (Int32QueryService, error) {
	var bus cqrs.SampleBus
	if err := bus.RegisterCommand(int32QueryHandler); err != nil {
		return nil, err
	}
	return &int32QueryCqrsService[Int32QueryCommandType]{bus: &bus}, nil
}

func NewInt64QueryCqrsService[
	Int64QueryCommandType Int64QueryCommand,
](
	int64QueryHandler cqrs.CommandHandler[Int64QueryCommandType],
) (Int64QueryService, error) {
	var bus cqrs.SampleBus
	if err := bus.RegisterCommand(int64QueryHandler); err != nil {
		return nil, err
	}
	return &int64QueryCqrsService[Int64QueryCommandType]{bus: &bus}, nil
}

func NewUint32QueryCqrsService[
	Uint32QueryCommandType Uint32QueryCommand,
](
	uint32QueryHandler cqrs.CommandHandler[Uint32QueryCommandType],
) (Uint32QueryService, error) {
	var bus cqrs.SampleBus
	if err := bus.RegisterCommand(uint32QueryHandler); err != nil {
		return nil, err
	}
	return &uint32QueryCqrsService[Uint32QueryCommandType]{bus: &bus}, nil
}

func NewUint64QueryCqrsService[
	Uint64QueryCommandType Uint64QueryCommand,
](
	uint64QueryHandler cqrs.CommandHandler[Uint64QueryCommandType],
) (Uint64QueryService, error) {
	var bus cqrs.SampleBus
	if err := bus.RegisterCommand(uint64QueryHandler); err != nil {
		return nil, err
	}
	return &uint64QueryCqrsService[Uint64QueryCommandType]{bus: &bus}, nil
}

func NewFloatQueryCqrsService[
	FloatQueryCommandType FloatQueryCommand,
](
	floatQueryHandler cqrs.CommandHandler[FloatQueryCommandType],
) (FloatQueryService, error) {
	var bus cqrs.SampleBus
	if err := bus.RegisterCommand(floatQueryHandler); err != nil {
		return nil, err
	}
	return &floatQueryCqrsService[FloatQueryCommandType]{bus: &bus}, nil
}

func NewDoubleQueryCqrsService[
	DoubleQueryCommandType DoubleQueryCommand,
](
	doubleQueryHandler cqrs.CommandHandler[DoubleQueryCommandType],
) (DoubleQueryService, error) {
	var bus cqrs.SampleBus
	if err := bus.RegisterCommand(doubleQueryHandler); err != nil {
		return nil, err
	}
	return &doubleQueryCqrsService[DoubleQueryCommandType]{bus: &bus}, nil
}

func NewStringQueryCqrsService[
	StringQueryCommandType StringQueryCommand,
](
	stringQueryHandler cqrs.CommandHandler[StringQueryCommandType],
) (StringQueryService, error) {
	var bus cqrs.SampleBus
	if err := bus.RegisterCommand(stringQueryHandler); err != nil {
		return nil, err
	}
	return &stringQueryCqrsService[StringQueryCommandType]{bus: &bus}, nil
}

func NewEnumQueryCqrsService[
	EnumQueryCommandType EnumQueryCommand,
](
	enumQueryHandler cqrs.CommandHandler[EnumQueryCommandType],
) (EnumQueryService, error) {
	var bus cqrs.SampleBus
	if err := bus.RegisterCommand(enumQueryHandler); err != nil {
		return nil, err
	}
	return &enumQueryCqrsService[EnumQueryCommandType]{bus: &bus}, nil
}

type boolQueryCqrsService[
	BoolQueryCommandType BoolQueryCommand,
] struct {
	bus cqrs.Bus
}

func (svc *boolQueryCqrsService[BoolQueryCommandType]) BoolQuery(ctx context.Context, request *BoolQueryRequest) (*emptypb.Empty, error) {
	var command BoolQueryCommandType
	cmd, ctx, err := command.From(ctx, request)
	if err != nil {
		return nil, err
	}
	if err := svc.bus.Exec(ctx, cmd); err != nil {
		return nil, err
	}
	return new(emptypb.Empty), nil
}

type (
	BoolQueryCommand interface {
		isBoolQueryCommand_Kind()
		From(context.Context, *BoolQueryRequest) (BoolQueryCommand, context.Context, error)
	}
	UnimplementedBoolQueryCommand struct{}
)

func (UnimplementedBoolQueryCommand) isBoolQueryCommand_Kind() {}
func (UnimplementedBoolQueryCommand) From(context.Context, *BoolQueryRequest) (BoolQueryCommand, context.Context, error) {
	panic("implement me")
	return nil, nil, nil
}

type int32QueryCqrsService[
	Int32QueryCommandType Int32QueryCommand,
] struct {
	bus cqrs.Bus
}

func (svc *int32QueryCqrsService[Int32QueryCommandType]) Int32Query(ctx context.Context, request *Int32QueryRequest) (*emptypb.Empty, error) {
	var command Int32QueryCommandType
	cmd, ctx, err := command.From(ctx, request)
	if err != nil {
		return nil, err
	}
	if err := svc.bus.Exec(ctx, cmd); err != nil {
		return nil, err
	}
	return new(emptypb.Empty), nil
}

type (
	Int32QueryCommand interface {
		isInt32QueryCommand_Kind()
		From(context.Context, *Int32QueryRequest) (Int32QueryCommand, context.Context, error)
	}
	UnimplementedInt32QueryCommand struct{}
)

func (UnimplementedInt32QueryCommand) isInt32QueryCommand_Kind() {}
func (UnimplementedInt32QueryCommand) From(context.Context, *Int32QueryRequest) (Int32QueryCommand, context.Context, error) {
	panic("implement me")
	return nil, nil, nil
}

type int64QueryCqrsService[
	Int64QueryCommandType Int64QueryCommand,
] struct {
	bus cqrs.Bus
}

func (svc *int64QueryCqrsService[Int64QueryCommandType]) Int64Query(ctx context.Context, request *Int64QueryRequest) (*emptypb.Empty, error) {
	var command Int64QueryCommandType
	cmd, ctx, err := command.From(ctx, request)
	if err != nil {
		return nil, err
	}
	if err := svc.bus.Exec(ctx, cmd); err != nil {
		return nil, err
	}
	return new(emptypb.Empty), nil
}

type (
	Int64QueryCommand interface {
		isInt64QueryCommand_Kind()
		From(context.Context, *Int64QueryRequest) (Int64QueryCommand, context.Context, error)
	}
	UnimplementedInt64QueryCommand struct{}
)

func (UnimplementedInt64QueryCommand) isInt64QueryCommand_Kind() {}
func (UnimplementedInt64QueryCommand) From(context.Context, *Int64QueryRequest) (Int64QueryCommand, context.Context, error) {
	panic("implement me")
	return nil, nil, nil
}

type uint32QueryCqrsService[
	Uint32QueryCommandType Uint32QueryCommand,
] struct {
	bus cqrs.Bus
}

func (svc *uint32QueryCqrsService[Uint32QueryCommandType]) Uint32Query(ctx context.Context, request *Uint32QueryRequest) (*emptypb.Empty, error) {
	var command Uint32QueryCommandType
	cmd, ctx, err := command.From(ctx, request)
	if err != nil {
		return nil, err
	}
	if err := svc.bus.Exec(ctx, cmd); err != nil {
		return nil, err
	}
	return new(emptypb.Empty), nil
}

type (
	Uint32QueryCommand interface {
		isUint32QueryCommand_Kind()
		From(context.Context, *Uint32QueryRequest) (Uint32QueryCommand, context.Context, error)
	}
	UnimplementedUint32QueryCommand struct{}
)

func (UnimplementedUint32QueryCommand) isUint32QueryCommand_Kind() {}
func (UnimplementedUint32QueryCommand) From(context.Context, *Uint32QueryRequest) (Uint32QueryCommand, context.Context, error) {
	panic("implement me")
	return nil, nil, nil
}

type uint64QueryCqrsService[
	Uint64QueryCommandType Uint64QueryCommand,
] struct {
	bus cqrs.Bus
}

func (svc *uint64QueryCqrsService[Uint64QueryCommandType]) Uint64Query(ctx context.Context, request *Uint64QueryRequest) (*emptypb.Empty, error) {
	var command Uint64QueryCommandType
	cmd, ctx, err := command.From(ctx, request)
	if err != nil {
		return nil, err
	}
	if err := svc.bus.Exec(ctx, cmd); err != nil {
		return nil, err
	}
	return new(emptypb.Empty), nil
}

type (
	Uint64QueryCommand interface {
		isUint64QueryCommand_Kind()
		From(context.Context, *Uint64QueryRequest) (Uint64QueryCommand, context.Context, error)
	}
	UnimplementedUint64QueryCommand struct{}
)

func (UnimplementedUint64QueryCommand) isUint64QueryCommand_Kind() {}
func (UnimplementedUint64QueryCommand) From(context.Context, *Uint64QueryRequest) (Uint64QueryCommand, context.Context, error) {
	panic("implement me")
	return nil, nil, nil
}

type floatQueryCqrsService[
	FloatQueryCommandType FloatQueryCommand,
] struct {
	bus cqrs.Bus
}

func (svc *floatQueryCqrsService[FloatQueryCommandType]) FloatQuery(ctx context.Context, request *FloatQueryRequest) (*emptypb.Empty, error) {
	var command FloatQueryCommandType
	cmd, ctx, err := command.From(ctx, request)
	if err != nil {
		return nil, err
	}
	if err := svc.bus.Exec(ctx, cmd); err != nil {
		return nil, err
	}
	return new(emptypb.Empty), nil
}

type (
	FloatQueryCommand interface {
		isFloatQueryCommand_Kind()
		From(context.Context, *FloatQueryRequest) (FloatQueryCommand, context.Context, error)
	}
	UnimplementedFloatQueryCommand struct{}
)

func (UnimplementedFloatQueryCommand) isFloatQueryCommand_Kind() {}
func (UnimplementedFloatQueryCommand) From(context.Context, *FloatQueryRequest) (FloatQueryCommand, context.Context, error) {
	panic("implement me")
	return nil, nil, nil
}

type doubleQueryCqrsService[
	DoubleQueryCommandType DoubleQueryCommand,
] struct {
	bus cqrs.Bus
}

func (svc *doubleQueryCqrsService[DoubleQueryCommandType]) DoubleQuery(ctx context.Context, request *DoubleQueryRequest) (*emptypb.Empty, error) {
	var command DoubleQueryCommandType
	cmd, ctx, err := command.From(ctx, request)
	if err != nil {
		return nil, err
	}
	if err := svc.bus.Exec(ctx, cmd); err != nil {
		return nil, err
	}
	return new(emptypb.Empty), nil
}

type (
	DoubleQueryCommand interface {
		isDoubleQueryCommand_Kind()
		From(context.Context, *DoubleQueryRequest) (DoubleQueryCommand, context.Context, error)
	}
	UnimplementedDoubleQueryCommand struct{}
)

func (UnimplementedDoubleQueryCommand) isDoubleQueryCommand_Kind() {}
func (UnimplementedDoubleQueryCommand) From(context.Context, *DoubleQueryRequest) (DoubleQueryCommand, context.Context, error) {
	panic("implement me")
	return nil, nil, nil
}

type stringQueryCqrsService[
	StringQueryCommandType StringQueryCommand,
] struct {
	bus cqrs.Bus
}

func (svc *stringQueryCqrsService[StringQueryCommandType]) StringQuery(ctx context.Context, request *StringQueryRequest) (*emptypb.Empty, error) {
	var command StringQueryCommandType
	cmd, ctx, err := command.From(ctx, request)
	if err != nil {
		return nil, err
	}
	if err := svc.bus.Exec(ctx, cmd); err != nil {
		return nil, err
	}
	return new(emptypb.Empty), nil
}

type (
	StringQueryCommand interface {
		isStringQueryCommand_Kind()
		From(context.Context, *StringQueryRequest) (StringQueryCommand, context.Context, error)
	}
	UnimplementedStringQueryCommand struct{}
)

func (UnimplementedStringQueryCommand) isStringQueryCommand_Kind() {}
func (UnimplementedStringQueryCommand) From(context.Context, *StringQueryRequest) (StringQueryCommand, context.Context, error) {
	panic("implement me")
	return nil, nil, nil
}

type enumQueryCqrsService[
	EnumQueryCommandType EnumQueryCommand,
] struct {
	bus cqrs.Bus
}

func (svc *enumQueryCqrsService[EnumQueryCommandType]) EnumQuery(ctx context.Context, request *EnumQueryRequest) (*emptypb.Empty, error) {
	var command EnumQueryCommandType
	cmd, ctx, err := command.From(ctx, request)
	if err != nil {
		return nil, err
	}
	if err := svc.bus.Exec(ctx, cmd); err != nil {
		return nil, err
	}
	return new(emptypb.Empty), nil
}

type (
	EnumQueryCommand interface {
		isEnumQueryCommand_Kind()
		From(context.Context, *EnumQueryRequest) (EnumQueryCommand, context.Context, error)
	}
	UnimplementedEnumQueryCommand struct{}
)

func (UnimplementedEnumQueryCommand) isEnumQueryCommand_Kind() {}
func (UnimplementedEnumQueryCommand) From(context.Context, *EnumQueryRequest) (EnumQueryCommand, context.Context, error) {
	panic("implement me")
	return nil, nil, nil
}

// f.File.Desc.Path(): route/v1/query.proto
// protoFilePath: /Users/stuff/Workspace/github/go-leo/leo/example/api/route/v1/query.proto<nil>
// loopPath: /Users/stuff/Workspace/github/go-leo/leo/example/api/route/v1/query.proto
// cqDirPath: /Users/stuff/Workspace/github/go-leo/leo/example/api/route/v1/cq
// loopPath: /Users/stuff/Workspace/github/go-leo/leo/example/api/route/v1
// cqDirPath: /Users/stuff/Workspace/github/go-leo/leo/example/api/route/cq
// loopPath: /Users/stuff/Workspace/github/go-leo/leo/example/api/route
// cqDirPath: /Users/stuff/Workspace/github/go-leo/leo/example/api/cq
// loopPath: /Users/stuff/Workspace/github/go-leo/leo/example/api
// cqDirPath: /Users/stuff/Workspace/github/go-leo/leo/example/cq
// -- cqDirPath: /Users/stuff/Workspace/github/go-leo/leo/example/cq
// loopPath: /Users/stuff/Workspace/github/go-leo/leo/example
// goMode.Module.Mod.Path: github.com/go-leo/leo/v3
// loopPath: /Users/stuff/Workspace/github/go-leo/leo
// loopPath: /Users/stuff/Workspace/github/go-leo
// loopPath: /Users/stuff/Workspace/github
// loopPath: /Users/stuff/Workspace
// loopPath: /Users/stuff
// loopPath: /Users
// loopPath: /
// rel: ../../../cq
// cmdFilename: ../../../cq/bool_query_leo.command.pb.go
