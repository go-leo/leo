// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.29.3
// source: route/v1/response.proto

package route

import (
	context "context"
	httpbody "google.golang.org/genproto/googleapis/api/httpbody"
	http "google.golang.org/genproto/googleapis/rpc/http"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Response_OmittedResponse_FullMethodName       = "/leo.example.route.response.Response/OmittedResponse"
	Response_StarResponse_FullMethodName          = "/leo.example.route.response.Response/StarResponse"
	Response_NamedResponse_FullMethodName         = "/leo.example.route.response.Response/NamedResponse"
	Response_HttpBodyResponse_FullMethodName      = "/leo.example.route.response.Response/HttpBodyResponse"
	Response_HttpBodyNamedResponse_FullMethodName = "/leo.example.route.response.Response/HttpBodyNamedResponse"
	Response_HttpResponse_FullMethodName          = "/leo.example.route.response.Response/HttpResponse"
)

// ResponseClient is the client API for Response service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ResponseClient interface {
	OmittedResponse(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*UserResponse, error)
	StarResponse(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*UserResponse, error)
	NamedResponse(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*UserResponse, error)
	HttpBodyResponse(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*httpbody.HttpBody, error)
	HttpBodyNamedResponse(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*HttpBody, error)
	HttpResponse(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*http.HttpResponse, error)
}

type responseClient struct {
	cc grpc.ClientConnInterface
}

func NewResponseClient(cc grpc.ClientConnInterface) ResponseClient {
	return &responseClient{cc}
}

func (c *responseClient) OmittedResponse(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*UserResponse, error) {
	out := new(UserResponse)
	err := c.cc.Invoke(ctx, Response_OmittedResponse_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *responseClient) StarResponse(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*UserResponse, error) {
	out := new(UserResponse)
	err := c.cc.Invoke(ctx, Response_StarResponse_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *responseClient) NamedResponse(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*UserResponse, error) {
	out := new(UserResponse)
	err := c.cc.Invoke(ctx, Response_NamedResponse_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *responseClient) HttpBodyResponse(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*httpbody.HttpBody, error) {
	out := new(httpbody.HttpBody)
	err := c.cc.Invoke(ctx, Response_HttpBodyResponse_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *responseClient) HttpBodyNamedResponse(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*HttpBody, error) {
	out := new(HttpBody)
	err := c.cc.Invoke(ctx, Response_HttpBodyNamedResponse_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *responseClient) HttpResponse(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*http.HttpResponse, error) {
	out := new(http.HttpResponse)
	err := c.cc.Invoke(ctx, Response_HttpResponse_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ResponseServer is the server API for Response service.
// All implementations must embed UnimplementedResponseServer
// for forward compatibility
type ResponseServer interface {
	OmittedResponse(context.Context, *emptypb.Empty) (*UserResponse, error)
	StarResponse(context.Context, *emptypb.Empty) (*UserResponse, error)
	NamedResponse(context.Context, *emptypb.Empty) (*UserResponse, error)
	HttpBodyResponse(context.Context, *emptypb.Empty) (*httpbody.HttpBody, error)
	HttpBodyNamedResponse(context.Context, *emptypb.Empty) (*HttpBody, error)
	HttpResponse(context.Context, *emptypb.Empty) (*http.HttpResponse, error)
	mustEmbedUnimplementedResponseServer()
}

// UnimplementedResponseServer must be embedded to have forward compatible implementations.
type UnimplementedResponseServer struct {
}

func (UnimplementedResponseServer) OmittedResponse(context.Context, *emptypb.Empty) (*UserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OmittedResponse not implemented")
}
func (UnimplementedResponseServer) StarResponse(context.Context, *emptypb.Empty) (*UserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StarResponse not implemented")
}
func (UnimplementedResponseServer) NamedResponse(context.Context, *emptypb.Empty) (*UserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NamedResponse not implemented")
}
func (UnimplementedResponseServer) HttpBodyResponse(context.Context, *emptypb.Empty) (*httpbody.HttpBody, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HttpBodyResponse not implemented")
}
func (UnimplementedResponseServer) HttpBodyNamedResponse(context.Context, *emptypb.Empty) (*HttpBody, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HttpBodyNamedResponse not implemented")
}
func (UnimplementedResponseServer) HttpResponse(context.Context, *emptypb.Empty) (*http.HttpResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HttpResponse not implemented")
}
func (UnimplementedResponseServer) mustEmbedUnimplementedResponseServer() {}

// UnsafeResponseServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ResponseServer will
// result in compilation errors.
type UnsafeResponseServer interface {
	mustEmbedUnimplementedResponseServer()
}

func RegisterResponseServer(s grpc.ServiceRegistrar, srv ResponseServer) {
	s.RegisterService(&Response_ServiceDesc, srv)
}

func _Response_OmittedResponse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResponseServer).OmittedResponse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Response_OmittedResponse_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResponseServer).OmittedResponse(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Response_StarResponse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResponseServer).StarResponse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Response_StarResponse_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResponseServer).StarResponse(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Response_NamedResponse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResponseServer).NamedResponse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Response_NamedResponse_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResponseServer).NamedResponse(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Response_HttpBodyResponse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResponseServer).HttpBodyResponse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Response_HttpBodyResponse_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResponseServer).HttpBodyResponse(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Response_HttpBodyNamedResponse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResponseServer).HttpBodyNamedResponse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Response_HttpBodyNamedResponse_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResponseServer).HttpBodyNamedResponse(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Response_HttpResponse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ResponseServer).HttpResponse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Response_HttpResponse_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ResponseServer).HttpResponse(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// Response_ServiceDesc is the grpc.ServiceDesc for Response service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Response_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "leo.example.route.response.Response",
	HandlerType: (*ResponseServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "OmittedResponse",
			Handler:    _Response_OmittedResponse_Handler,
		},
		{
			MethodName: "StarResponse",
			Handler:    _Response_StarResponse_Handler,
		},
		{
			MethodName: "NamedResponse",
			Handler:    _Response_NamedResponse_Handler,
		},
		{
			MethodName: "HttpBodyResponse",
			Handler:    _Response_HttpBodyResponse_Handler,
		},
		{
			MethodName: "HttpBodyNamedResponse",
			Handler:    _Response_HttpBodyNamedResponse_Handler,
		},
		{
			MethodName: "HttpResponse",
			Handler:    _Response_HttpResponse_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "route/v1/response.proto",
}
