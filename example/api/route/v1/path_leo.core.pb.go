// Code generated by protoc-gen-go-leo. DO NOT EDIT.

package route

import (
	context "context"
	endpoint "github.com/go-kit/kit/endpoint"
	sd "github.com/go-kit/kit/sd"
	lb "github.com/go-kit/kit/sd/lb"
	log "github.com/go-kit/log"
	lazyloadx "github.com/go-leo/gox/syncx/lazyloadx"
	endpointx "github.com/go-leo/leo/v3/endpointx"
	sdx "github.com/go-leo/leo/v3/sdx"
	lbx "github.com/go-leo/leo/v3/sdx/lbx"
	stainx "github.com/go-leo/leo/v3/stainx"
	transportx "github.com/go-leo/leo/v3/transportx"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	io "io"
)

// BoolPathService is a service
type BoolPathService interface {
	BoolPath(ctx context.Context, request *BoolPathRequest) (*emptypb.Empty, error)
}

// BoolPathServerEndpoints is server endpoints
type BoolPathServerEndpoints interface {
	BoolPath(ctx context.Context) endpoint.Endpoint
}

// BoolPathClientEndpoints is client endpoints
type BoolPathClientEndpoints interface {
	BoolPath(ctx context.Context) (endpoint.Endpoint, error)
}

// BoolPathClientTransports is client transports
type BoolPathClientTransports interface {
	BoolPath(ctx context.Context, instance string) (endpoint.Endpoint, io.Closer, error)
}

// BoolPathFactories is client factories
type BoolPathFactories interface {
	BoolPath(ctx context.Context) sd.Factory
}

// BoolPathEndpointers is client endpointers
type BoolPathEndpointers interface {
	BoolPath(ctx context.Context, color string) (sd.Endpointer, error)
}

// BoolPathBalancers is client balancers
type BoolPathBalancers interface {
	BoolPath(ctx context.Context) (lb.Balancer, error)
}

// boolPathServerEndpoints implements BoolPathServerEndpoints
type boolPathServerEndpoints struct {
	svc         BoolPathService
	middlewares []endpoint.Middleware
}

func (e *boolPathServerEndpoints) BoolPath(context.Context) endpoint.Endpoint {
	component := func(ctx context.Context, request any) (any, error) {
		return e.svc.BoolPath(ctx, request.(*BoolPathRequest))
	}
	return endpointx.Chain(component, e.middlewares...)
}

// boolPathFactories implements BoolPathFactories
type boolPathFactories struct {
	transports BoolPathClientTransports
}

func (f *boolPathFactories) BoolPath(ctx context.Context) sd.Factory {
	return func(instance string) (endpoint.Endpoint, io.Closer, error) {
		return f.transports.BoolPath(ctx, instance)
	}
}

// boolPathEndpointers implements BoolPathEndpointers
type boolPathEndpointers struct {
	target    string
	builder   sdx.Builder
	factories BoolPathFactories
	logger    log.Logger
	options   []sd.EndpointerOption
}

func (e *boolPathEndpointers) BoolPath(ctx context.Context, color string) (sd.Endpointer, error) {
	return sdx.NewEndpointer(ctx, e.target, color, e.builder, e.factories.BoolPath(ctx), e.logger, e.options...)
}

// boolPathBalancers implements BoolPathBalancers
type boolPathBalancers struct {
	factory    lbx.BalancerFactory
	endpointer BoolPathEndpointers
	boolPath   lazyloadx.Group[lb.Balancer]
}

func (b *boolPathBalancers) BoolPath(ctx context.Context) (lb.Balancer, error) {
	color, _ := stainx.ExtractColor(ctx)
	balancer, err, _ := b.boolPath.LoadOrNew(color, lbx.NewBalancer(ctx, b.factory, b.endpointer.BoolPath))
	return balancer, err
}
func newBoolPathBalancers(factory lbx.BalancerFactory, endpointer BoolPathEndpointers) BoolPathBalancers {
	return &boolPathBalancers{
		factory:    factory,
		endpointer: endpointer,
		boolPath:   lazyloadx.Group[lb.Balancer]{},
	}
}

// boolPathClientEndpoints implements BoolPathClientEndpoints
type boolPathClientEndpoints struct {
	balancers BoolPathBalancers
}

func (e *boolPathClientEndpoints) BoolPath(ctx context.Context) (endpoint.Endpoint, error) {
	balancer, err := e.balancers.BoolPath(ctx)
	if err != nil {
		return nil, err
	}
	return balancer.Endpoint()
}

// boolPathClientService implements BoolPathClientService
type boolPathClientService struct {
	endpoints     BoolPathClientEndpoints
	transportName string
}

func (c *boolPathClientService) BoolPath(ctx context.Context, request *BoolPathRequest) (*emptypb.Empty, error) {
	ctx = endpointx.InjectName(ctx, "/leo.example.route.path.BoolPath/BoolPath")
	ctx = transportx.InjectName(ctx, c.transportName)
	endpoint, err := c.endpoints.BoolPath(ctx)
	if err != nil {
		return nil, err
	}
	rep, err := endpoint(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*emptypb.Empty), nil
}

// Int32PathService is a service
type Int32PathService interface {
	Int32Path(ctx context.Context, request *Int32PathRequest) (*emptypb.Empty, error)
}

// Int32PathServerEndpoints is server endpoints
type Int32PathServerEndpoints interface {
	Int32Path(ctx context.Context) endpoint.Endpoint
}

// Int32PathClientEndpoints is client endpoints
type Int32PathClientEndpoints interface {
	Int32Path(ctx context.Context) (endpoint.Endpoint, error)
}

// Int32PathClientTransports is client transports
type Int32PathClientTransports interface {
	Int32Path(ctx context.Context, instance string) (endpoint.Endpoint, io.Closer, error)
}

// Int32PathFactories is client factories
type Int32PathFactories interface {
	Int32Path(ctx context.Context) sd.Factory
}

// Int32PathEndpointers is client endpointers
type Int32PathEndpointers interface {
	Int32Path(ctx context.Context, color string) (sd.Endpointer, error)
}

// Int32PathBalancers is client balancers
type Int32PathBalancers interface {
	Int32Path(ctx context.Context) (lb.Balancer, error)
}

// int32PathServerEndpoints implements Int32PathServerEndpoints
type int32PathServerEndpoints struct {
	svc         Int32PathService
	middlewares []endpoint.Middleware
}

func (e *int32PathServerEndpoints) Int32Path(context.Context) endpoint.Endpoint {
	component := func(ctx context.Context, request any) (any, error) {
		return e.svc.Int32Path(ctx, request.(*Int32PathRequest))
	}
	return endpointx.Chain(component, e.middlewares...)
}

// int32PathFactories implements Int32PathFactories
type int32PathFactories struct {
	transports Int32PathClientTransports
}

func (f *int32PathFactories) Int32Path(ctx context.Context) sd.Factory {
	return func(instance string) (endpoint.Endpoint, io.Closer, error) {
		return f.transports.Int32Path(ctx, instance)
	}
}

// int32PathEndpointers implements Int32PathEndpointers
type int32PathEndpointers struct {
	target    string
	builder   sdx.Builder
	factories Int32PathFactories
	logger    log.Logger
	options   []sd.EndpointerOption
}

func (e *int32PathEndpointers) Int32Path(ctx context.Context, color string) (sd.Endpointer, error) {
	return sdx.NewEndpointer(ctx, e.target, color, e.builder, e.factories.Int32Path(ctx), e.logger, e.options...)
}

// int32PathBalancers implements Int32PathBalancers
type int32PathBalancers struct {
	factory    lbx.BalancerFactory
	endpointer Int32PathEndpointers
	int32Path  lazyloadx.Group[lb.Balancer]
}

func (b *int32PathBalancers) Int32Path(ctx context.Context) (lb.Balancer, error) {
	color, _ := stainx.ExtractColor(ctx)
	balancer, err, _ := b.int32Path.LoadOrNew(color, lbx.NewBalancer(ctx, b.factory, b.endpointer.Int32Path))
	return balancer, err
}
func newInt32PathBalancers(factory lbx.BalancerFactory, endpointer Int32PathEndpointers) Int32PathBalancers {
	return &int32PathBalancers{
		factory:    factory,
		endpointer: endpointer,
		int32Path:  lazyloadx.Group[lb.Balancer]{},
	}
}

// int32PathClientEndpoints implements Int32PathClientEndpoints
type int32PathClientEndpoints struct {
	balancers Int32PathBalancers
}

func (e *int32PathClientEndpoints) Int32Path(ctx context.Context) (endpoint.Endpoint, error) {
	balancer, err := e.balancers.Int32Path(ctx)
	if err != nil {
		return nil, err
	}
	return balancer.Endpoint()
}

// int32PathClientService implements Int32PathClientService
type int32PathClientService struct {
	endpoints     Int32PathClientEndpoints
	transportName string
}

func (c *int32PathClientService) Int32Path(ctx context.Context, request *Int32PathRequest) (*emptypb.Empty, error) {
	ctx = endpointx.InjectName(ctx, "/leo.example.route.path.Int32Path/Int32Path")
	ctx = transportx.InjectName(ctx, c.transportName)
	endpoint, err := c.endpoints.Int32Path(ctx)
	if err != nil {
		return nil, err
	}
	rep, err := endpoint(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*emptypb.Empty), nil
}

// Int64PathService is a service
type Int64PathService interface {
	Int64Path(ctx context.Context, request *Int64PathRequest) (*emptypb.Empty, error)
}

// Int64PathServerEndpoints is server endpoints
type Int64PathServerEndpoints interface {
	Int64Path(ctx context.Context) endpoint.Endpoint
}

// Int64PathClientEndpoints is client endpoints
type Int64PathClientEndpoints interface {
	Int64Path(ctx context.Context) (endpoint.Endpoint, error)
}

// Int64PathClientTransports is client transports
type Int64PathClientTransports interface {
	Int64Path(ctx context.Context, instance string) (endpoint.Endpoint, io.Closer, error)
}

// Int64PathFactories is client factories
type Int64PathFactories interface {
	Int64Path(ctx context.Context) sd.Factory
}

// Int64PathEndpointers is client endpointers
type Int64PathEndpointers interface {
	Int64Path(ctx context.Context, color string) (sd.Endpointer, error)
}

// Int64PathBalancers is client balancers
type Int64PathBalancers interface {
	Int64Path(ctx context.Context) (lb.Balancer, error)
}

// int64PathServerEndpoints implements Int64PathServerEndpoints
type int64PathServerEndpoints struct {
	svc         Int64PathService
	middlewares []endpoint.Middleware
}

func (e *int64PathServerEndpoints) Int64Path(context.Context) endpoint.Endpoint {
	component := func(ctx context.Context, request any) (any, error) {
		return e.svc.Int64Path(ctx, request.(*Int64PathRequest))
	}
	return endpointx.Chain(component, e.middlewares...)
}

// int64PathFactories implements Int64PathFactories
type int64PathFactories struct {
	transports Int64PathClientTransports
}

func (f *int64PathFactories) Int64Path(ctx context.Context) sd.Factory {
	return func(instance string) (endpoint.Endpoint, io.Closer, error) {
		return f.transports.Int64Path(ctx, instance)
	}
}

// int64PathEndpointers implements Int64PathEndpointers
type int64PathEndpointers struct {
	target    string
	builder   sdx.Builder
	factories Int64PathFactories
	logger    log.Logger
	options   []sd.EndpointerOption
}

func (e *int64PathEndpointers) Int64Path(ctx context.Context, color string) (sd.Endpointer, error) {
	return sdx.NewEndpointer(ctx, e.target, color, e.builder, e.factories.Int64Path(ctx), e.logger, e.options...)
}

// int64PathBalancers implements Int64PathBalancers
type int64PathBalancers struct {
	factory    lbx.BalancerFactory
	endpointer Int64PathEndpointers
	int64Path  lazyloadx.Group[lb.Balancer]
}

func (b *int64PathBalancers) Int64Path(ctx context.Context) (lb.Balancer, error) {
	color, _ := stainx.ExtractColor(ctx)
	balancer, err, _ := b.int64Path.LoadOrNew(color, lbx.NewBalancer(ctx, b.factory, b.endpointer.Int64Path))
	return balancer, err
}
func newInt64PathBalancers(factory lbx.BalancerFactory, endpointer Int64PathEndpointers) Int64PathBalancers {
	return &int64PathBalancers{
		factory:    factory,
		endpointer: endpointer,
		int64Path:  lazyloadx.Group[lb.Balancer]{},
	}
}

// int64PathClientEndpoints implements Int64PathClientEndpoints
type int64PathClientEndpoints struct {
	balancers Int64PathBalancers
}

func (e *int64PathClientEndpoints) Int64Path(ctx context.Context) (endpoint.Endpoint, error) {
	balancer, err := e.balancers.Int64Path(ctx)
	if err != nil {
		return nil, err
	}
	return balancer.Endpoint()
}

// int64PathClientService implements Int64PathClientService
type int64PathClientService struct {
	endpoints     Int64PathClientEndpoints
	transportName string
}

func (c *int64PathClientService) Int64Path(ctx context.Context, request *Int64PathRequest) (*emptypb.Empty, error) {
	ctx = endpointx.InjectName(ctx, "/leo.example.route.path.Int64Path/Int64Path")
	ctx = transportx.InjectName(ctx, c.transportName)
	endpoint, err := c.endpoints.Int64Path(ctx)
	if err != nil {
		return nil, err
	}
	rep, err := endpoint(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*emptypb.Empty), nil
}

// Uint32PathService is a service
type Uint32PathService interface {
	Uint32Path(ctx context.Context, request *Uint32PathRequest) (*emptypb.Empty, error)
}

// Uint32PathServerEndpoints is server endpoints
type Uint32PathServerEndpoints interface {
	Uint32Path(ctx context.Context) endpoint.Endpoint
}

// Uint32PathClientEndpoints is client endpoints
type Uint32PathClientEndpoints interface {
	Uint32Path(ctx context.Context) (endpoint.Endpoint, error)
}

// Uint32PathClientTransports is client transports
type Uint32PathClientTransports interface {
	Uint32Path(ctx context.Context, instance string) (endpoint.Endpoint, io.Closer, error)
}

// Uint32PathFactories is client factories
type Uint32PathFactories interface {
	Uint32Path(ctx context.Context) sd.Factory
}

// Uint32PathEndpointers is client endpointers
type Uint32PathEndpointers interface {
	Uint32Path(ctx context.Context, color string) (sd.Endpointer, error)
}

// Uint32PathBalancers is client balancers
type Uint32PathBalancers interface {
	Uint32Path(ctx context.Context) (lb.Balancer, error)
}

// uint32PathServerEndpoints implements Uint32PathServerEndpoints
type uint32PathServerEndpoints struct {
	svc         Uint32PathService
	middlewares []endpoint.Middleware
}

func (e *uint32PathServerEndpoints) Uint32Path(context.Context) endpoint.Endpoint {
	component := func(ctx context.Context, request any) (any, error) {
		return e.svc.Uint32Path(ctx, request.(*Uint32PathRequest))
	}
	return endpointx.Chain(component, e.middlewares...)
}

// uint32PathFactories implements Uint32PathFactories
type uint32PathFactories struct {
	transports Uint32PathClientTransports
}

func (f *uint32PathFactories) Uint32Path(ctx context.Context) sd.Factory {
	return func(instance string) (endpoint.Endpoint, io.Closer, error) {
		return f.transports.Uint32Path(ctx, instance)
	}
}

// uint32PathEndpointers implements Uint32PathEndpointers
type uint32PathEndpointers struct {
	target    string
	builder   sdx.Builder
	factories Uint32PathFactories
	logger    log.Logger
	options   []sd.EndpointerOption
}

func (e *uint32PathEndpointers) Uint32Path(ctx context.Context, color string) (sd.Endpointer, error) {
	return sdx.NewEndpointer(ctx, e.target, color, e.builder, e.factories.Uint32Path(ctx), e.logger, e.options...)
}

// uint32PathBalancers implements Uint32PathBalancers
type uint32PathBalancers struct {
	factory    lbx.BalancerFactory
	endpointer Uint32PathEndpointers
	uint32Path lazyloadx.Group[lb.Balancer]
}

func (b *uint32PathBalancers) Uint32Path(ctx context.Context) (lb.Balancer, error) {
	color, _ := stainx.ExtractColor(ctx)
	balancer, err, _ := b.uint32Path.LoadOrNew(color, lbx.NewBalancer(ctx, b.factory, b.endpointer.Uint32Path))
	return balancer, err
}
func newUint32PathBalancers(factory lbx.BalancerFactory, endpointer Uint32PathEndpointers) Uint32PathBalancers {
	return &uint32PathBalancers{
		factory:    factory,
		endpointer: endpointer,
		uint32Path: lazyloadx.Group[lb.Balancer]{},
	}
}

// uint32PathClientEndpoints implements Uint32PathClientEndpoints
type uint32PathClientEndpoints struct {
	balancers Uint32PathBalancers
}

func (e *uint32PathClientEndpoints) Uint32Path(ctx context.Context) (endpoint.Endpoint, error) {
	balancer, err := e.balancers.Uint32Path(ctx)
	if err != nil {
		return nil, err
	}
	return balancer.Endpoint()
}

// uint32PathClientService implements Uint32PathClientService
type uint32PathClientService struct {
	endpoints     Uint32PathClientEndpoints
	transportName string
}

func (c *uint32PathClientService) Uint32Path(ctx context.Context, request *Uint32PathRequest) (*emptypb.Empty, error) {
	ctx = endpointx.InjectName(ctx, "/leo.example.route.path.Uint32Path/Uint32Path")
	ctx = transportx.InjectName(ctx, c.transportName)
	endpoint, err := c.endpoints.Uint32Path(ctx)
	if err != nil {
		return nil, err
	}
	rep, err := endpoint(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*emptypb.Empty), nil
}

// Uint64PathService is a service
type Uint64PathService interface {
	Uint64Path(ctx context.Context, request *Uint64PathRequest) (*emptypb.Empty, error)
}

// Uint64PathServerEndpoints is server endpoints
type Uint64PathServerEndpoints interface {
	Uint64Path(ctx context.Context) endpoint.Endpoint
}

// Uint64PathClientEndpoints is client endpoints
type Uint64PathClientEndpoints interface {
	Uint64Path(ctx context.Context) (endpoint.Endpoint, error)
}

// Uint64PathClientTransports is client transports
type Uint64PathClientTransports interface {
	Uint64Path(ctx context.Context, instance string) (endpoint.Endpoint, io.Closer, error)
}

// Uint64PathFactories is client factories
type Uint64PathFactories interface {
	Uint64Path(ctx context.Context) sd.Factory
}

// Uint64PathEndpointers is client endpointers
type Uint64PathEndpointers interface {
	Uint64Path(ctx context.Context, color string) (sd.Endpointer, error)
}

// Uint64PathBalancers is client balancers
type Uint64PathBalancers interface {
	Uint64Path(ctx context.Context) (lb.Balancer, error)
}

// uint64PathServerEndpoints implements Uint64PathServerEndpoints
type uint64PathServerEndpoints struct {
	svc         Uint64PathService
	middlewares []endpoint.Middleware
}

func (e *uint64PathServerEndpoints) Uint64Path(context.Context) endpoint.Endpoint {
	component := func(ctx context.Context, request any) (any, error) {
		return e.svc.Uint64Path(ctx, request.(*Uint64PathRequest))
	}
	return endpointx.Chain(component, e.middlewares...)
}

// uint64PathFactories implements Uint64PathFactories
type uint64PathFactories struct {
	transports Uint64PathClientTransports
}

func (f *uint64PathFactories) Uint64Path(ctx context.Context) sd.Factory {
	return func(instance string) (endpoint.Endpoint, io.Closer, error) {
		return f.transports.Uint64Path(ctx, instance)
	}
}

// uint64PathEndpointers implements Uint64PathEndpointers
type uint64PathEndpointers struct {
	target    string
	builder   sdx.Builder
	factories Uint64PathFactories
	logger    log.Logger
	options   []sd.EndpointerOption
}

func (e *uint64PathEndpointers) Uint64Path(ctx context.Context, color string) (sd.Endpointer, error) {
	return sdx.NewEndpointer(ctx, e.target, color, e.builder, e.factories.Uint64Path(ctx), e.logger, e.options...)
}

// uint64PathBalancers implements Uint64PathBalancers
type uint64PathBalancers struct {
	factory    lbx.BalancerFactory
	endpointer Uint64PathEndpointers
	uint64Path lazyloadx.Group[lb.Balancer]
}

func (b *uint64PathBalancers) Uint64Path(ctx context.Context) (lb.Balancer, error) {
	color, _ := stainx.ExtractColor(ctx)
	balancer, err, _ := b.uint64Path.LoadOrNew(color, lbx.NewBalancer(ctx, b.factory, b.endpointer.Uint64Path))
	return balancer, err
}
func newUint64PathBalancers(factory lbx.BalancerFactory, endpointer Uint64PathEndpointers) Uint64PathBalancers {
	return &uint64PathBalancers{
		factory:    factory,
		endpointer: endpointer,
		uint64Path: lazyloadx.Group[lb.Balancer]{},
	}
}

// uint64PathClientEndpoints implements Uint64PathClientEndpoints
type uint64PathClientEndpoints struct {
	balancers Uint64PathBalancers
}

func (e *uint64PathClientEndpoints) Uint64Path(ctx context.Context) (endpoint.Endpoint, error) {
	balancer, err := e.balancers.Uint64Path(ctx)
	if err != nil {
		return nil, err
	}
	return balancer.Endpoint()
}

// uint64PathClientService implements Uint64PathClientService
type uint64PathClientService struct {
	endpoints     Uint64PathClientEndpoints
	transportName string
}

func (c *uint64PathClientService) Uint64Path(ctx context.Context, request *Uint64PathRequest) (*emptypb.Empty, error) {
	ctx = endpointx.InjectName(ctx, "/leo.example.route.path.Uint64Path/Uint64Path")
	ctx = transportx.InjectName(ctx, c.transportName)
	endpoint, err := c.endpoints.Uint64Path(ctx)
	if err != nil {
		return nil, err
	}
	rep, err := endpoint(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*emptypb.Empty), nil
}

// FloatPathService is a service
type FloatPathService interface {
	FloatPath(ctx context.Context, request *FloatPathRequest) (*emptypb.Empty, error)
}

// FloatPathServerEndpoints is server endpoints
type FloatPathServerEndpoints interface {
	FloatPath(ctx context.Context) endpoint.Endpoint
}

// FloatPathClientEndpoints is client endpoints
type FloatPathClientEndpoints interface {
	FloatPath(ctx context.Context) (endpoint.Endpoint, error)
}

// FloatPathClientTransports is client transports
type FloatPathClientTransports interface {
	FloatPath(ctx context.Context, instance string) (endpoint.Endpoint, io.Closer, error)
}

// FloatPathFactories is client factories
type FloatPathFactories interface {
	FloatPath(ctx context.Context) sd.Factory
}

// FloatPathEndpointers is client endpointers
type FloatPathEndpointers interface {
	FloatPath(ctx context.Context, color string) (sd.Endpointer, error)
}

// FloatPathBalancers is client balancers
type FloatPathBalancers interface {
	FloatPath(ctx context.Context) (lb.Balancer, error)
}

// floatPathServerEndpoints implements FloatPathServerEndpoints
type floatPathServerEndpoints struct {
	svc         FloatPathService
	middlewares []endpoint.Middleware
}

func (e *floatPathServerEndpoints) FloatPath(context.Context) endpoint.Endpoint {
	component := func(ctx context.Context, request any) (any, error) {
		return e.svc.FloatPath(ctx, request.(*FloatPathRequest))
	}
	return endpointx.Chain(component, e.middlewares...)
}

// floatPathFactories implements FloatPathFactories
type floatPathFactories struct {
	transports FloatPathClientTransports
}

func (f *floatPathFactories) FloatPath(ctx context.Context) sd.Factory {
	return func(instance string) (endpoint.Endpoint, io.Closer, error) {
		return f.transports.FloatPath(ctx, instance)
	}
}

// floatPathEndpointers implements FloatPathEndpointers
type floatPathEndpointers struct {
	target    string
	builder   sdx.Builder
	factories FloatPathFactories
	logger    log.Logger
	options   []sd.EndpointerOption
}

func (e *floatPathEndpointers) FloatPath(ctx context.Context, color string) (sd.Endpointer, error) {
	return sdx.NewEndpointer(ctx, e.target, color, e.builder, e.factories.FloatPath(ctx), e.logger, e.options...)
}

// floatPathBalancers implements FloatPathBalancers
type floatPathBalancers struct {
	factory    lbx.BalancerFactory
	endpointer FloatPathEndpointers
	floatPath  lazyloadx.Group[lb.Balancer]
}

func (b *floatPathBalancers) FloatPath(ctx context.Context) (lb.Balancer, error) {
	color, _ := stainx.ExtractColor(ctx)
	balancer, err, _ := b.floatPath.LoadOrNew(color, lbx.NewBalancer(ctx, b.factory, b.endpointer.FloatPath))
	return balancer, err
}
func newFloatPathBalancers(factory lbx.BalancerFactory, endpointer FloatPathEndpointers) FloatPathBalancers {
	return &floatPathBalancers{
		factory:    factory,
		endpointer: endpointer,
		floatPath:  lazyloadx.Group[lb.Balancer]{},
	}
}

// floatPathClientEndpoints implements FloatPathClientEndpoints
type floatPathClientEndpoints struct {
	balancers FloatPathBalancers
}

func (e *floatPathClientEndpoints) FloatPath(ctx context.Context) (endpoint.Endpoint, error) {
	balancer, err := e.balancers.FloatPath(ctx)
	if err != nil {
		return nil, err
	}
	return balancer.Endpoint()
}

// floatPathClientService implements FloatPathClientService
type floatPathClientService struct {
	endpoints     FloatPathClientEndpoints
	transportName string
}

func (c *floatPathClientService) FloatPath(ctx context.Context, request *FloatPathRequest) (*emptypb.Empty, error) {
	ctx = endpointx.InjectName(ctx, "/leo.example.route.path.FloatPath/FloatPath")
	ctx = transportx.InjectName(ctx, c.transportName)
	endpoint, err := c.endpoints.FloatPath(ctx)
	if err != nil {
		return nil, err
	}
	rep, err := endpoint(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*emptypb.Empty), nil
}

// DoublePathService is a service
type DoublePathService interface {
	DoublePath(ctx context.Context, request *DoublePathRequest) (*emptypb.Empty, error)
}

// DoublePathServerEndpoints is server endpoints
type DoublePathServerEndpoints interface {
	DoublePath(ctx context.Context) endpoint.Endpoint
}

// DoublePathClientEndpoints is client endpoints
type DoublePathClientEndpoints interface {
	DoublePath(ctx context.Context) (endpoint.Endpoint, error)
}

// DoublePathClientTransports is client transports
type DoublePathClientTransports interface {
	DoublePath(ctx context.Context, instance string) (endpoint.Endpoint, io.Closer, error)
}

// DoublePathFactories is client factories
type DoublePathFactories interface {
	DoublePath(ctx context.Context) sd.Factory
}

// DoublePathEndpointers is client endpointers
type DoublePathEndpointers interface {
	DoublePath(ctx context.Context, color string) (sd.Endpointer, error)
}

// DoublePathBalancers is client balancers
type DoublePathBalancers interface {
	DoublePath(ctx context.Context) (lb.Balancer, error)
}

// doublePathServerEndpoints implements DoublePathServerEndpoints
type doublePathServerEndpoints struct {
	svc         DoublePathService
	middlewares []endpoint.Middleware
}

func (e *doublePathServerEndpoints) DoublePath(context.Context) endpoint.Endpoint {
	component := func(ctx context.Context, request any) (any, error) {
		return e.svc.DoublePath(ctx, request.(*DoublePathRequest))
	}
	return endpointx.Chain(component, e.middlewares...)
}

// doublePathFactories implements DoublePathFactories
type doublePathFactories struct {
	transports DoublePathClientTransports
}

func (f *doublePathFactories) DoublePath(ctx context.Context) sd.Factory {
	return func(instance string) (endpoint.Endpoint, io.Closer, error) {
		return f.transports.DoublePath(ctx, instance)
	}
}

// doublePathEndpointers implements DoublePathEndpointers
type doublePathEndpointers struct {
	target    string
	builder   sdx.Builder
	factories DoublePathFactories
	logger    log.Logger
	options   []sd.EndpointerOption
}

func (e *doublePathEndpointers) DoublePath(ctx context.Context, color string) (sd.Endpointer, error) {
	return sdx.NewEndpointer(ctx, e.target, color, e.builder, e.factories.DoublePath(ctx), e.logger, e.options...)
}

// doublePathBalancers implements DoublePathBalancers
type doublePathBalancers struct {
	factory    lbx.BalancerFactory
	endpointer DoublePathEndpointers
	doublePath lazyloadx.Group[lb.Balancer]
}

func (b *doublePathBalancers) DoublePath(ctx context.Context) (lb.Balancer, error) {
	color, _ := stainx.ExtractColor(ctx)
	balancer, err, _ := b.doublePath.LoadOrNew(color, lbx.NewBalancer(ctx, b.factory, b.endpointer.DoublePath))
	return balancer, err
}
func newDoublePathBalancers(factory lbx.BalancerFactory, endpointer DoublePathEndpointers) DoublePathBalancers {
	return &doublePathBalancers{
		factory:    factory,
		endpointer: endpointer,
		doublePath: lazyloadx.Group[lb.Balancer]{},
	}
}

// doublePathClientEndpoints implements DoublePathClientEndpoints
type doublePathClientEndpoints struct {
	balancers DoublePathBalancers
}

func (e *doublePathClientEndpoints) DoublePath(ctx context.Context) (endpoint.Endpoint, error) {
	balancer, err := e.balancers.DoublePath(ctx)
	if err != nil {
		return nil, err
	}
	return balancer.Endpoint()
}

// doublePathClientService implements DoublePathClientService
type doublePathClientService struct {
	endpoints     DoublePathClientEndpoints
	transportName string
}

func (c *doublePathClientService) DoublePath(ctx context.Context, request *DoublePathRequest) (*emptypb.Empty, error) {
	ctx = endpointx.InjectName(ctx, "/leo.example.route.path.DoublePath/DoublePath")
	ctx = transportx.InjectName(ctx, c.transportName)
	endpoint, err := c.endpoints.DoublePath(ctx)
	if err != nil {
		return nil, err
	}
	rep, err := endpoint(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*emptypb.Empty), nil
}

// StringPathService is a service
type StringPathService interface {
	StringPath(ctx context.Context, request *StringPathRequest) (*emptypb.Empty, error)
}

// StringPathServerEndpoints is server endpoints
type StringPathServerEndpoints interface {
	StringPath(ctx context.Context) endpoint.Endpoint
}

// StringPathClientEndpoints is client endpoints
type StringPathClientEndpoints interface {
	StringPath(ctx context.Context) (endpoint.Endpoint, error)
}

// StringPathClientTransports is client transports
type StringPathClientTransports interface {
	StringPath(ctx context.Context, instance string) (endpoint.Endpoint, io.Closer, error)
}

// StringPathFactories is client factories
type StringPathFactories interface {
	StringPath(ctx context.Context) sd.Factory
}

// StringPathEndpointers is client endpointers
type StringPathEndpointers interface {
	StringPath(ctx context.Context, color string) (sd.Endpointer, error)
}

// StringPathBalancers is client balancers
type StringPathBalancers interface {
	StringPath(ctx context.Context) (lb.Balancer, error)
}

// stringPathServerEndpoints implements StringPathServerEndpoints
type stringPathServerEndpoints struct {
	svc         StringPathService
	middlewares []endpoint.Middleware
}

func (e *stringPathServerEndpoints) StringPath(context.Context) endpoint.Endpoint {
	component := func(ctx context.Context, request any) (any, error) {
		return e.svc.StringPath(ctx, request.(*StringPathRequest))
	}
	return endpointx.Chain(component, e.middlewares...)
}

// stringPathFactories implements StringPathFactories
type stringPathFactories struct {
	transports StringPathClientTransports
}

func (f *stringPathFactories) StringPath(ctx context.Context) sd.Factory {
	return func(instance string) (endpoint.Endpoint, io.Closer, error) {
		return f.transports.StringPath(ctx, instance)
	}
}

// stringPathEndpointers implements StringPathEndpointers
type stringPathEndpointers struct {
	target    string
	builder   sdx.Builder
	factories StringPathFactories
	logger    log.Logger
	options   []sd.EndpointerOption
}

func (e *stringPathEndpointers) StringPath(ctx context.Context, color string) (sd.Endpointer, error) {
	return sdx.NewEndpointer(ctx, e.target, color, e.builder, e.factories.StringPath(ctx), e.logger, e.options...)
}

// stringPathBalancers implements StringPathBalancers
type stringPathBalancers struct {
	factory    lbx.BalancerFactory
	endpointer StringPathEndpointers
	stringPath lazyloadx.Group[lb.Balancer]
}

func (b *stringPathBalancers) StringPath(ctx context.Context) (lb.Balancer, error) {
	color, _ := stainx.ExtractColor(ctx)
	balancer, err, _ := b.stringPath.LoadOrNew(color, lbx.NewBalancer(ctx, b.factory, b.endpointer.StringPath))
	return balancer, err
}
func newStringPathBalancers(factory lbx.BalancerFactory, endpointer StringPathEndpointers) StringPathBalancers {
	return &stringPathBalancers{
		factory:    factory,
		endpointer: endpointer,
		stringPath: lazyloadx.Group[lb.Balancer]{},
	}
}

// stringPathClientEndpoints implements StringPathClientEndpoints
type stringPathClientEndpoints struct {
	balancers StringPathBalancers
}

func (e *stringPathClientEndpoints) StringPath(ctx context.Context) (endpoint.Endpoint, error) {
	balancer, err := e.balancers.StringPath(ctx)
	if err != nil {
		return nil, err
	}
	return balancer.Endpoint()
}

// stringPathClientService implements StringPathClientService
type stringPathClientService struct {
	endpoints     StringPathClientEndpoints
	transportName string
}

func (c *stringPathClientService) StringPath(ctx context.Context, request *StringPathRequest) (*emptypb.Empty, error) {
	ctx = endpointx.InjectName(ctx, "/leo.example.route.path.StringPath/StringPath")
	ctx = transportx.InjectName(ctx, c.transportName)
	endpoint, err := c.endpoints.StringPath(ctx)
	if err != nil {
		return nil, err
	}
	rep, err := endpoint(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*emptypb.Empty), nil
}

// EnumPathService is a service
type EnumPathService interface {
	EnumPath(ctx context.Context, request *EnumPathRequest) (*emptypb.Empty, error)
}

// EnumPathServerEndpoints is server endpoints
type EnumPathServerEndpoints interface {
	EnumPath(ctx context.Context) endpoint.Endpoint
}

// EnumPathClientEndpoints is client endpoints
type EnumPathClientEndpoints interface {
	EnumPath(ctx context.Context) (endpoint.Endpoint, error)
}

// EnumPathClientTransports is client transports
type EnumPathClientTransports interface {
	EnumPath(ctx context.Context, instance string) (endpoint.Endpoint, io.Closer, error)
}

// EnumPathFactories is client factories
type EnumPathFactories interface {
	EnumPath(ctx context.Context) sd.Factory
}

// EnumPathEndpointers is client endpointers
type EnumPathEndpointers interface {
	EnumPath(ctx context.Context, color string) (sd.Endpointer, error)
}

// EnumPathBalancers is client balancers
type EnumPathBalancers interface {
	EnumPath(ctx context.Context) (lb.Balancer, error)
}

// enumPathServerEndpoints implements EnumPathServerEndpoints
type enumPathServerEndpoints struct {
	svc         EnumPathService
	middlewares []endpoint.Middleware
}

func (e *enumPathServerEndpoints) EnumPath(context.Context) endpoint.Endpoint {
	component := func(ctx context.Context, request any) (any, error) {
		return e.svc.EnumPath(ctx, request.(*EnumPathRequest))
	}
	return endpointx.Chain(component, e.middlewares...)
}

// enumPathFactories implements EnumPathFactories
type enumPathFactories struct {
	transports EnumPathClientTransports
}

func (f *enumPathFactories) EnumPath(ctx context.Context) sd.Factory {
	return func(instance string) (endpoint.Endpoint, io.Closer, error) {
		return f.transports.EnumPath(ctx, instance)
	}
}

// enumPathEndpointers implements EnumPathEndpointers
type enumPathEndpointers struct {
	target    string
	builder   sdx.Builder
	factories EnumPathFactories
	logger    log.Logger
	options   []sd.EndpointerOption
}

func (e *enumPathEndpointers) EnumPath(ctx context.Context, color string) (sd.Endpointer, error) {
	return sdx.NewEndpointer(ctx, e.target, color, e.builder, e.factories.EnumPath(ctx), e.logger, e.options...)
}

// enumPathBalancers implements EnumPathBalancers
type enumPathBalancers struct {
	factory    lbx.BalancerFactory
	endpointer EnumPathEndpointers
	enumPath   lazyloadx.Group[lb.Balancer]
}

func (b *enumPathBalancers) EnumPath(ctx context.Context) (lb.Balancer, error) {
	color, _ := stainx.ExtractColor(ctx)
	balancer, err, _ := b.enumPath.LoadOrNew(color, lbx.NewBalancer(ctx, b.factory, b.endpointer.EnumPath))
	return balancer, err
}
func newEnumPathBalancers(factory lbx.BalancerFactory, endpointer EnumPathEndpointers) EnumPathBalancers {
	return &enumPathBalancers{
		factory:    factory,
		endpointer: endpointer,
		enumPath:   lazyloadx.Group[lb.Balancer]{},
	}
}

// enumPathClientEndpoints implements EnumPathClientEndpoints
type enumPathClientEndpoints struct {
	balancers EnumPathBalancers
}

func (e *enumPathClientEndpoints) EnumPath(ctx context.Context) (endpoint.Endpoint, error) {
	balancer, err := e.balancers.EnumPath(ctx)
	if err != nil {
		return nil, err
	}
	return balancer.Endpoint()
}

// enumPathClientService implements EnumPathClientService
type enumPathClientService struct {
	endpoints     EnumPathClientEndpoints
	transportName string
}

func (c *enumPathClientService) EnumPath(ctx context.Context, request *EnumPathRequest) (*emptypb.Empty, error) {
	ctx = endpointx.InjectName(ctx, "/leo.example.route.path.EnumPath/EnumPath")
	ctx = transportx.InjectName(ctx, c.transportName)
	endpoint, err := c.endpoints.EnumPath(ctx)
	if err != nil {
		return nil, err
	}
	rep, err := endpoint(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*emptypb.Empty), nil
}

// NamedPathService is a service
type NamedPathService interface {
	NamedPathString(ctx context.Context, request *NamedPathRequest) (*emptypb.Empty, error)
	NamedPathOptString(ctx context.Context, request *NamedPathRequest) (*emptypb.Empty, error)
	NamedPathWrapString(ctx context.Context, request *NamedPathRequest) (*emptypb.Empty, error)
	EmbedNamedPathString(ctx context.Context, request *EmbedNamedPathRequest) (*emptypb.Empty, error)
	EmbedNamedPathOptString(ctx context.Context, request *EmbedNamedPathRequest) (*emptypb.Empty, error)
	EmbedNamedPathWrapString(ctx context.Context, request *EmbedNamedPathRequest) (*emptypb.Empty, error)
}

// NamedPathServerEndpoints is server endpoints
type NamedPathServerEndpoints interface {
	NamedPathString(ctx context.Context) endpoint.Endpoint
	NamedPathOptString(ctx context.Context) endpoint.Endpoint
	NamedPathWrapString(ctx context.Context) endpoint.Endpoint
	EmbedNamedPathString(ctx context.Context) endpoint.Endpoint
	EmbedNamedPathOptString(ctx context.Context) endpoint.Endpoint
	EmbedNamedPathWrapString(ctx context.Context) endpoint.Endpoint
}

// NamedPathClientEndpoints is client endpoints
type NamedPathClientEndpoints interface {
	NamedPathString(ctx context.Context) (endpoint.Endpoint, error)
	NamedPathOptString(ctx context.Context) (endpoint.Endpoint, error)
	NamedPathWrapString(ctx context.Context) (endpoint.Endpoint, error)
	EmbedNamedPathString(ctx context.Context) (endpoint.Endpoint, error)
	EmbedNamedPathOptString(ctx context.Context) (endpoint.Endpoint, error)
	EmbedNamedPathWrapString(ctx context.Context) (endpoint.Endpoint, error)
}

// NamedPathClientTransports is client transports
type NamedPathClientTransports interface {
	NamedPathString(ctx context.Context, instance string) (endpoint.Endpoint, io.Closer, error)
	NamedPathOptString(ctx context.Context, instance string) (endpoint.Endpoint, io.Closer, error)
	NamedPathWrapString(ctx context.Context, instance string) (endpoint.Endpoint, io.Closer, error)
	EmbedNamedPathString(ctx context.Context, instance string) (endpoint.Endpoint, io.Closer, error)
	EmbedNamedPathOptString(ctx context.Context, instance string) (endpoint.Endpoint, io.Closer, error)
	EmbedNamedPathWrapString(ctx context.Context, instance string) (endpoint.Endpoint, io.Closer, error)
}

// NamedPathFactories is client factories
type NamedPathFactories interface {
	NamedPathString(ctx context.Context) sd.Factory
	NamedPathOptString(ctx context.Context) sd.Factory
	NamedPathWrapString(ctx context.Context) sd.Factory
	EmbedNamedPathString(ctx context.Context) sd.Factory
	EmbedNamedPathOptString(ctx context.Context) sd.Factory
	EmbedNamedPathWrapString(ctx context.Context) sd.Factory
}

// NamedPathEndpointers is client endpointers
type NamedPathEndpointers interface {
	NamedPathString(ctx context.Context, color string) (sd.Endpointer, error)
	NamedPathOptString(ctx context.Context, color string) (sd.Endpointer, error)
	NamedPathWrapString(ctx context.Context, color string) (sd.Endpointer, error)
	EmbedNamedPathString(ctx context.Context, color string) (sd.Endpointer, error)
	EmbedNamedPathOptString(ctx context.Context, color string) (sd.Endpointer, error)
	EmbedNamedPathWrapString(ctx context.Context, color string) (sd.Endpointer, error)
}

// NamedPathBalancers is client balancers
type NamedPathBalancers interface {
	NamedPathString(ctx context.Context) (lb.Balancer, error)
	NamedPathOptString(ctx context.Context) (lb.Balancer, error)
	NamedPathWrapString(ctx context.Context) (lb.Balancer, error)
	EmbedNamedPathString(ctx context.Context) (lb.Balancer, error)
	EmbedNamedPathOptString(ctx context.Context) (lb.Balancer, error)
	EmbedNamedPathWrapString(ctx context.Context) (lb.Balancer, error)
}

// namedPathServerEndpoints implements NamedPathServerEndpoints
type namedPathServerEndpoints struct {
	svc         NamedPathService
	middlewares []endpoint.Middleware
}

func (e *namedPathServerEndpoints) NamedPathString(context.Context) endpoint.Endpoint {
	component := func(ctx context.Context, request any) (any, error) {
		return e.svc.NamedPathString(ctx, request.(*NamedPathRequest))
	}
	return endpointx.Chain(component, e.middlewares...)
}

func (e *namedPathServerEndpoints) NamedPathOptString(context.Context) endpoint.Endpoint {
	component := func(ctx context.Context, request any) (any, error) {
		return e.svc.NamedPathOptString(ctx, request.(*NamedPathRequest))
	}
	return endpointx.Chain(component, e.middlewares...)
}

func (e *namedPathServerEndpoints) NamedPathWrapString(context.Context) endpoint.Endpoint {
	component := func(ctx context.Context, request any) (any, error) {
		return e.svc.NamedPathWrapString(ctx, request.(*NamedPathRequest))
	}
	return endpointx.Chain(component, e.middlewares...)
}

func (e *namedPathServerEndpoints) EmbedNamedPathString(context.Context) endpoint.Endpoint {
	component := func(ctx context.Context, request any) (any, error) {
		return e.svc.EmbedNamedPathString(ctx, request.(*EmbedNamedPathRequest))
	}
	return endpointx.Chain(component, e.middlewares...)
}

func (e *namedPathServerEndpoints) EmbedNamedPathOptString(context.Context) endpoint.Endpoint {
	component := func(ctx context.Context, request any) (any, error) {
		return e.svc.EmbedNamedPathOptString(ctx, request.(*EmbedNamedPathRequest))
	}
	return endpointx.Chain(component, e.middlewares...)
}

func (e *namedPathServerEndpoints) EmbedNamedPathWrapString(context.Context) endpoint.Endpoint {
	component := func(ctx context.Context, request any) (any, error) {
		return e.svc.EmbedNamedPathWrapString(ctx, request.(*EmbedNamedPathRequest))
	}
	return endpointx.Chain(component, e.middlewares...)
}

// namedPathFactories implements NamedPathFactories
type namedPathFactories struct {
	transports NamedPathClientTransports
}

func (f *namedPathFactories) NamedPathString(ctx context.Context) sd.Factory {
	return func(instance string) (endpoint.Endpoint, io.Closer, error) {
		return f.transports.NamedPathString(ctx, instance)
	}
}

func (f *namedPathFactories) NamedPathOptString(ctx context.Context) sd.Factory {
	return func(instance string) (endpoint.Endpoint, io.Closer, error) {
		return f.transports.NamedPathOptString(ctx, instance)
	}
}

func (f *namedPathFactories) NamedPathWrapString(ctx context.Context) sd.Factory {
	return func(instance string) (endpoint.Endpoint, io.Closer, error) {
		return f.transports.NamedPathWrapString(ctx, instance)
	}
}

func (f *namedPathFactories) EmbedNamedPathString(ctx context.Context) sd.Factory {
	return func(instance string) (endpoint.Endpoint, io.Closer, error) {
		return f.transports.EmbedNamedPathString(ctx, instance)
	}
}

func (f *namedPathFactories) EmbedNamedPathOptString(ctx context.Context) sd.Factory {
	return func(instance string) (endpoint.Endpoint, io.Closer, error) {
		return f.transports.EmbedNamedPathOptString(ctx, instance)
	}
}

func (f *namedPathFactories) EmbedNamedPathWrapString(ctx context.Context) sd.Factory {
	return func(instance string) (endpoint.Endpoint, io.Closer, error) {
		return f.transports.EmbedNamedPathWrapString(ctx, instance)
	}
}

// namedPathEndpointers implements NamedPathEndpointers
type namedPathEndpointers struct {
	target    string
	builder   sdx.Builder
	factories NamedPathFactories
	logger    log.Logger
	options   []sd.EndpointerOption
}

func (e *namedPathEndpointers) NamedPathString(ctx context.Context, color string) (sd.Endpointer, error) {
	return sdx.NewEndpointer(ctx, e.target, color, e.builder, e.factories.NamedPathString(ctx), e.logger, e.options...)
}

func (e *namedPathEndpointers) NamedPathOptString(ctx context.Context, color string) (sd.Endpointer, error) {
	return sdx.NewEndpointer(ctx, e.target, color, e.builder, e.factories.NamedPathOptString(ctx), e.logger, e.options...)
}

func (e *namedPathEndpointers) NamedPathWrapString(ctx context.Context, color string) (sd.Endpointer, error) {
	return sdx.NewEndpointer(ctx, e.target, color, e.builder, e.factories.NamedPathWrapString(ctx), e.logger, e.options...)
}

func (e *namedPathEndpointers) EmbedNamedPathString(ctx context.Context, color string) (sd.Endpointer, error) {
	return sdx.NewEndpointer(ctx, e.target, color, e.builder, e.factories.EmbedNamedPathString(ctx), e.logger, e.options...)
}

func (e *namedPathEndpointers) EmbedNamedPathOptString(ctx context.Context, color string) (sd.Endpointer, error) {
	return sdx.NewEndpointer(ctx, e.target, color, e.builder, e.factories.EmbedNamedPathOptString(ctx), e.logger, e.options...)
}

func (e *namedPathEndpointers) EmbedNamedPathWrapString(ctx context.Context, color string) (sd.Endpointer, error) {
	return sdx.NewEndpointer(ctx, e.target, color, e.builder, e.factories.EmbedNamedPathWrapString(ctx), e.logger, e.options...)
}

// namedPathBalancers implements NamedPathBalancers
type namedPathBalancers struct {
	factory                  lbx.BalancerFactory
	endpointer               NamedPathEndpointers
	namedPathString          lazyloadx.Group[lb.Balancer]
	namedPathOptString       lazyloadx.Group[lb.Balancer]
	namedPathWrapString      lazyloadx.Group[lb.Balancer]
	embedNamedPathString     lazyloadx.Group[lb.Balancer]
	embedNamedPathOptString  lazyloadx.Group[lb.Balancer]
	embedNamedPathWrapString lazyloadx.Group[lb.Balancer]
}

func (b *namedPathBalancers) NamedPathString(ctx context.Context) (lb.Balancer, error) {
	color, _ := stainx.ExtractColor(ctx)
	balancer, err, _ := b.namedPathString.LoadOrNew(color, lbx.NewBalancer(ctx, b.factory, b.endpointer.NamedPathString))
	return balancer, err
}
func (b *namedPathBalancers) NamedPathOptString(ctx context.Context) (lb.Balancer, error) {
	color, _ := stainx.ExtractColor(ctx)
	balancer, err, _ := b.namedPathOptString.LoadOrNew(color, lbx.NewBalancer(ctx, b.factory, b.endpointer.NamedPathOptString))
	return balancer, err
}
func (b *namedPathBalancers) NamedPathWrapString(ctx context.Context) (lb.Balancer, error) {
	color, _ := stainx.ExtractColor(ctx)
	balancer, err, _ := b.namedPathWrapString.LoadOrNew(color, lbx.NewBalancer(ctx, b.factory, b.endpointer.NamedPathWrapString))
	return balancer, err
}
func (b *namedPathBalancers) EmbedNamedPathString(ctx context.Context) (lb.Balancer, error) {
	color, _ := stainx.ExtractColor(ctx)
	balancer, err, _ := b.embedNamedPathString.LoadOrNew(color, lbx.NewBalancer(ctx, b.factory, b.endpointer.EmbedNamedPathString))
	return balancer, err
}
func (b *namedPathBalancers) EmbedNamedPathOptString(ctx context.Context) (lb.Balancer, error) {
	color, _ := stainx.ExtractColor(ctx)
	balancer, err, _ := b.embedNamedPathOptString.LoadOrNew(color, lbx.NewBalancer(ctx, b.factory, b.endpointer.EmbedNamedPathOptString))
	return balancer, err
}
func (b *namedPathBalancers) EmbedNamedPathWrapString(ctx context.Context) (lb.Balancer, error) {
	color, _ := stainx.ExtractColor(ctx)
	balancer, err, _ := b.embedNamedPathWrapString.LoadOrNew(color, lbx.NewBalancer(ctx, b.factory, b.endpointer.EmbedNamedPathWrapString))
	return balancer, err
}
func newNamedPathBalancers(factory lbx.BalancerFactory, endpointer NamedPathEndpointers) NamedPathBalancers {
	return &namedPathBalancers{
		factory:                  factory,
		endpointer:               endpointer,
		namedPathString:          lazyloadx.Group[lb.Balancer]{},
		namedPathOptString:       lazyloadx.Group[lb.Balancer]{},
		namedPathWrapString:      lazyloadx.Group[lb.Balancer]{},
		embedNamedPathString:     lazyloadx.Group[lb.Balancer]{},
		embedNamedPathOptString:  lazyloadx.Group[lb.Balancer]{},
		embedNamedPathWrapString: lazyloadx.Group[lb.Balancer]{},
	}
}

// namedPathClientEndpoints implements NamedPathClientEndpoints
type namedPathClientEndpoints struct {
	balancers NamedPathBalancers
}

func (e *namedPathClientEndpoints) NamedPathString(ctx context.Context) (endpoint.Endpoint, error) {
	balancer, err := e.balancers.NamedPathString(ctx)
	if err != nil {
		return nil, err
	}
	return balancer.Endpoint()
}

func (e *namedPathClientEndpoints) NamedPathOptString(ctx context.Context) (endpoint.Endpoint, error) {
	balancer, err := e.balancers.NamedPathOptString(ctx)
	if err != nil {
		return nil, err
	}
	return balancer.Endpoint()
}

func (e *namedPathClientEndpoints) NamedPathWrapString(ctx context.Context) (endpoint.Endpoint, error) {
	balancer, err := e.balancers.NamedPathWrapString(ctx)
	if err != nil {
		return nil, err
	}
	return balancer.Endpoint()
}

func (e *namedPathClientEndpoints) EmbedNamedPathString(ctx context.Context) (endpoint.Endpoint, error) {
	balancer, err := e.balancers.EmbedNamedPathString(ctx)
	if err != nil {
		return nil, err
	}
	return balancer.Endpoint()
}

func (e *namedPathClientEndpoints) EmbedNamedPathOptString(ctx context.Context) (endpoint.Endpoint, error) {
	balancer, err := e.balancers.EmbedNamedPathOptString(ctx)
	if err != nil {
		return nil, err
	}
	return balancer.Endpoint()
}

func (e *namedPathClientEndpoints) EmbedNamedPathWrapString(ctx context.Context) (endpoint.Endpoint, error) {
	balancer, err := e.balancers.EmbedNamedPathWrapString(ctx)
	if err != nil {
		return nil, err
	}
	return balancer.Endpoint()
}

// namedPathClientService implements NamedPathClientService
type namedPathClientService struct {
	endpoints     NamedPathClientEndpoints
	transportName string
}

func (c *namedPathClientService) NamedPathString(ctx context.Context, request *NamedPathRequest) (*emptypb.Empty, error) {
	ctx = endpointx.InjectName(ctx, "/leo.example.route.path.NamedPath/NamedPathString")
	ctx = transportx.InjectName(ctx, c.transportName)
	endpoint, err := c.endpoints.NamedPathString(ctx)
	if err != nil {
		return nil, err
	}
	rep, err := endpoint(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*emptypb.Empty), nil
}

func (c *namedPathClientService) NamedPathOptString(ctx context.Context, request *NamedPathRequest) (*emptypb.Empty, error) {
	ctx = endpointx.InjectName(ctx, "/leo.example.route.path.NamedPath/NamedPathOptString")
	ctx = transportx.InjectName(ctx, c.transportName)
	endpoint, err := c.endpoints.NamedPathOptString(ctx)
	if err != nil {
		return nil, err
	}
	rep, err := endpoint(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*emptypb.Empty), nil
}

func (c *namedPathClientService) NamedPathWrapString(ctx context.Context, request *NamedPathRequest) (*emptypb.Empty, error) {
	ctx = endpointx.InjectName(ctx, "/leo.example.route.path.NamedPath/NamedPathWrapString")
	ctx = transportx.InjectName(ctx, c.transportName)
	endpoint, err := c.endpoints.NamedPathWrapString(ctx)
	if err != nil {
		return nil, err
	}
	rep, err := endpoint(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*emptypb.Empty), nil
}

func (c *namedPathClientService) EmbedNamedPathString(ctx context.Context, request *EmbedNamedPathRequest) (*emptypb.Empty, error) {
	ctx = endpointx.InjectName(ctx, "/leo.example.route.path.NamedPath/EmbedNamedPathString")
	ctx = transportx.InjectName(ctx, c.transportName)
	endpoint, err := c.endpoints.EmbedNamedPathString(ctx)
	if err != nil {
		return nil, err
	}
	rep, err := endpoint(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*emptypb.Empty), nil
}

func (c *namedPathClientService) EmbedNamedPathOptString(ctx context.Context, request *EmbedNamedPathRequest) (*emptypb.Empty, error) {
	ctx = endpointx.InjectName(ctx, "/leo.example.route.path.NamedPath/EmbedNamedPathOptString")
	ctx = transportx.InjectName(ctx, c.transportName)
	endpoint, err := c.endpoints.EmbedNamedPathOptString(ctx)
	if err != nil {
		return nil, err
	}
	rep, err := endpoint(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*emptypb.Empty), nil
}

func (c *namedPathClientService) EmbedNamedPathWrapString(ctx context.Context, request *EmbedNamedPathRequest) (*emptypb.Empty, error) {
	ctx = endpointx.InjectName(ctx, "/leo.example.route.path.NamedPath/EmbedNamedPathWrapString")
	ctx = transportx.InjectName(ctx, c.transportName)
	endpoint, err := c.endpoints.EmbedNamedPathWrapString(ctx)
	if err != nil {
		return nil, err
	}
	rep, err := endpoint(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*emptypb.Empty), nil
}

// MixPathService is a service
type MixPathService interface {
	MixPath(ctx context.Context, request *MixPathRequest) (*emptypb.Empty, error)
}

// MixPathServerEndpoints is server endpoints
type MixPathServerEndpoints interface {
	MixPath(ctx context.Context) endpoint.Endpoint
}

// MixPathClientEndpoints is client endpoints
type MixPathClientEndpoints interface {
	MixPath(ctx context.Context) (endpoint.Endpoint, error)
}

// MixPathClientTransports is client transports
type MixPathClientTransports interface {
	MixPath(ctx context.Context, instance string) (endpoint.Endpoint, io.Closer, error)
}

// MixPathFactories is client factories
type MixPathFactories interface {
	MixPath(ctx context.Context) sd.Factory
}

// MixPathEndpointers is client endpointers
type MixPathEndpointers interface {
	MixPath(ctx context.Context, color string) (sd.Endpointer, error)
}

// MixPathBalancers is client balancers
type MixPathBalancers interface {
	MixPath(ctx context.Context) (lb.Balancer, error)
}

// mixPathServerEndpoints implements MixPathServerEndpoints
type mixPathServerEndpoints struct {
	svc         MixPathService
	middlewares []endpoint.Middleware
}

func (e *mixPathServerEndpoints) MixPath(context.Context) endpoint.Endpoint {
	component := func(ctx context.Context, request any) (any, error) {
		return e.svc.MixPath(ctx, request.(*MixPathRequest))
	}
	return endpointx.Chain(component, e.middlewares...)
}

// mixPathFactories implements MixPathFactories
type mixPathFactories struct {
	transports MixPathClientTransports
}

func (f *mixPathFactories) MixPath(ctx context.Context) sd.Factory {
	return func(instance string) (endpoint.Endpoint, io.Closer, error) {
		return f.transports.MixPath(ctx, instance)
	}
}

// mixPathEndpointers implements MixPathEndpointers
type mixPathEndpointers struct {
	target    string
	builder   sdx.Builder
	factories MixPathFactories
	logger    log.Logger
	options   []sd.EndpointerOption
}

func (e *mixPathEndpointers) MixPath(ctx context.Context, color string) (sd.Endpointer, error) {
	return sdx.NewEndpointer(ctx, e.target, color, e.builder, e.factories.MixPath(ctx), e.logger, e.options...)
}

// mixPathBalancers implements MixPathBalancers
type mixPathBalancers struct {
	factory    lbx.BalancerFactory
	endpointer MixPathEndpointers
	mixPath    lazyloadx.Group[lb.Balancer]
}

func (b *mixPathBalancers) MixPath(ctx context.Context) (lb.Balancer, error) {
	color, _ := stainx.ExtractColor(ctx)
	balancer, err, _ := b.mixPath.LoadOrNew(color, lbx.NewBalancer(ctx, b.factory, b.endpointer.MixPath))
	return balancer, err
}
func newMixPathBalancers(factory lbx.BalancerFactory, endpointer MixPathEndpointers) MixPathBalancers {
	return &mixPathBalancers{
		factory:    factory,
		endpointer: endpointer,
		mixPath:    lazyloadx.Group[lb.Balancer]{},
	}
}

// mixPathClientEndpoints implements MixPathClientEndpoints
type mixPathClientEndpoints struct {
	balancers MixPathBalancers
}

func (e *mixPathClientEndpoints) MixPath(ctx context.Context) (endpoint.Endpoint, error) {
	balancer, err := e.balancers.MixPath(ctx)
	if err != nil {
		return nil, err
	}
	return balancer.Endpoint()
}

// mixPathClientService implements MixPathClientService
type mixPathClientService struct {
	endpoints     MixPathClientEndpoints
	transportName string
}

func (c *mixPathClientService) MixPath(ctx context.Context, request *MixPathRequest) (*emptypb.Empty, error) {
	ctx = endpointx.InjectName(ctx, "/leo.example.route.path.MixPath/MixPath")
	ctx = transportx.InjectName(ctx, c.transportName)
	endpoint, err := c.endpoints.MixPath(ctx)
	if err != nil {
		return nil, err
	}
	rep, err := endpoint(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*emptypb.Empty), nil
}
