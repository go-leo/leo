// Copyright 2019 Google LLC.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

// Code generated by protoc-gen-gors. DO NOT EDIT.
// versions:
// - protoc-gen-gors v1.3.0
// - protoc             v4.24.3
// source: cmd/protoc-gen-gors/examples/google/example/library/v1/library.proto

package library

import (
	context "context"
	gin "github.com/gin-gonic/gin"
	gors "github.com/go-leo/gors"
	binding "github.com/go-leo/gors/pkg/binding"
	grpc "google.golang.org/grpc"
	metadata "google.golang.org/grpc/metadata"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

func LibraryServiceServiceRoutes(svc LibraryServiceService, opts ...gors.Option) []gors.Route {
	options := gors.NewOptions(opts...)
	wrapper := &_LibraryServiceServiceWrapper{svc: svc, options: options}
	_ = wrapper
	return []gors.Route{
		gors.NewRoute("POST", "/v1/shelves", _LibraryService_CreateShelf_GORS_Handler(wrapper, options, _LibraryService_CreateShelf_GORS_Handler_POST_933fe354a7c3c7d9865206c828f8c483_Binding())),
		gors.NewRoute("GET", "/v1/shelves", _LibraryService_ListOneShelves_GORS_Handler(wrapper, options, _LibraryService_ListOneShelves_GORS_Handler_GET_933fe354a7c3c7d9865206c828f8c483_Binding())),
		gors.NewRoute("GET", "/v1/shelves/:shelf", _LibraryService_GetShelf_GORS_Handler(wrapper, options, _LibraryService_GetShelf_GORS_Handler_GET_2abcf91b917e818f32bade73708a3c18_Binding())),
		gors.NewRoute("DELETE", "/v1/shelves/:shelf", _LibraryService_DeleteShelf_GORS_Handler(wrapper, options, _LibraryService_DeleteShelf_GORS_Handler_DELETE_2abcf91b917e818f32bade73708a3c18_Binding())),
		gors.NewRoute("GET", "/v1/shelves/:shelf/books", _LibraryService_ListBooks_GORS_Handler(wrapper, options, _LibraryService_ListBooks_GORS_Handler_GET_0fbff9c990144497ddae3b379cad6203_Binding())),
		gors.NewRoute("POST", "/v1/shelves/:shelf/books", _LibraryService_CreateBook_GORS_Handler(wrapper, options, _LibraryService_CreateBook_GORS_Handler_POST_0fbff9c990144497ddae3b379cad6203_Binding())),
		gors.NewRoute("GET", "/v1/shelves/:shelf/books/:book", _LibraryService_GetBook_GORS_Handler(wrapper, options, _LibraryService_GetBook_GORS_Handler_GET_8a01d92f2e02fc807cde2a4e4bb36cca_Binding())),
		gors.NewRoute("PUT", "/v1/shelves/:shelf/books/:book", _LibraryService_UpdateBook_GORS_Handler(wrapper, options, _LibraryService_UpdateBook_GORS_Handler_PUT_8a01d92f2e02fc807cde2a4e4bb36cca_Binding())),
		gors.NewRoute("DELETE", "/v1/shelves/:shelf/books/:book", _LibraryService_DeleteBook_GORS_Handler(wrapper, options, _LibraryService_DeleteBook_GORS_Handler_DELETE_8a01d92f2e02fc807cde2a4e4bb36cca_Binding())),
		gors.NewRoute("POST", "/v1/shelves/:shelf:merge", _LibraryService_MergeShelves_GORS_Handler(wrapper, options, _LibraryService_MergeShelves_GORS_Handler_POST_4b703ad56441d8d25c2b17d36635b9a4_Binding())),
		gors.NewRoute("POST", "/v1/shelves/:shelf/books/:book:move", _LibraryService_MoveBook_GORS_Handler(wrapper, options, _LibraryService_MoveBook_GORS_Handler_POST_2fc2b66ac71dbdf85c836dc9a57e0a6b_Binding())),
	}
}

func LibraryServiceServerRoutes(srv LibraryServiceServer, opts ...gors.Option) []gors.Route {
	options := gors.NewOptions(opts...)
	wrapper := &_LibraryServiceServerWrapper{srv: srv, options: options}
	_ = wrapper
	return []gors.Route{
		gors.NewRoute("POST", "/v1/shelves", _LibraryService_CreateShelf_GORS_Handler(wrapper, options, _LibraryService_CreateShelf_GORS_Handler_POST_933fe354a7c3c7d9865206c828f8c483_Binding())),
		gors.NewRoute("GET", "/v1/shelves", _LibraryService_ListOneShelves_GORS_Handler(wrapper, options, _LibraryService_ListOneShelves_GORS_Handler_GET_933fe354a7c3c7d9865206c828f8c483_Binding())),
		gors.NewRoute("GET", "/v1/shelves/:shelf", _LibraryService_GetShelf_GORS_Handler(wrapper, options, _LibraryService_GetShelf_GORS_Handler_GET_2abcf91b917e818f32bade73708a3c18_Binding())),
		gors.NewRoute("DELETE", "/v1/shelves/:shelf", _LibraryService_DeleteShelf_GORS_Handler(wrapper, options, _LibraryService_DeleteShelf_GORS_Handler_DELETE_2abcf91b917e818f32bade73708a3c18_Binding())),
		gors.NewRoute("GET", "/v1/shelves/:shelf/books", _LibraryService_ListBooks_GORS_Handler(wrapper, options, _LibraryService_ListBooks_GORS_Handler_GET_0fbff9c990144497ddae3b379cad6203_Binding())),
		gors.NewRoute("POST", "/v1/shelves/:shelf/books", _LibraryService_CreateBook_GORS_Handler(wrapper, options, _LibraryService_CreateBook_GORS_Handler_POST_0fbff9c990144497ddae3b379cad6203_Binding())),
		gors.NewRoute("GET", "/v1/shelves/:shelf/books/:book", _LibraryService_GetBook_GORS_Handler(wrapper, options, _LibraryService_GetBook_GORS_Handler_GET_8a01d92f2e02fc807cde2a4e4bb36cca_Binding())),
		gors.NewRoute("PUT", "/v1/shelves/:shelf/books/:book", _LibraryService_UpdateBook_GORS_Handler(wrapper, options, _LibraryService_UpdateBook_GORS_Handler_PUT_8a01d92f2e02fc807cde2a4e4bb36cca_Binding())),
		gors.NewRoute("DELETE", "/v1/shelves/:shelf/books/:book", _LibraryService_DeleteBook_GORS_Handler(wrapper, options, _LibraryService_DeleteBook_GORS_Handler_DELETE_8a01d92f2e02fc807cde2a4e4bb36cca_Binding())),
		gors.NewRoute("POST", "/v1/shelves/:shelf:merge", _LibraryService_MergeShelves_GORS_Handler(wrapper, options, _LibraryService_MergeShelves_GORS_Handler_POST_4b703ad56441d8d25c2b17d36635b9a4_Binding())),
		gors.NewRoute("POST", "/v1/shelves/:shelf/books/:book:move", _LibraryService_MoveBook_GORS_Handler(wrapper, options, _LibraryService_MoveBook_GORS_Handler_POST_2fc2b66ac71dbdf85c836dc9a57e0a6b_Binding())),
	}
}

func LibraryServiceClientRoutes(cli LibraryServiceClient, opts ...gors.Option) []gors.Route {
	options := gors.NewOptions(opts...)
	wrapper := &_LibraryServiceClientWrapper{cli: cli, options: options}
	_ = wrapper
	return []gors.Route{
		gors.NewRoute("POST", "/v1/shelves", _LibraryService_CreateShelf_GORS_Handler(wrapper, options, _LibraryService_CreateShelf_GORS_Handler_POST_933fe354a7c3c7d9865206c828f8c483_Binding())),
		gors.NewRoute("GET", "/v1/shelves", _LibraryService_ListOneShelves_GORS_Handler(wrapper, options, _LibraryService_ListOneShelves_GORS_Handler_GET_933fe354a7c3c7d9865206c828f8c483_Binding())),
		gors.NewRoute("GET", "/v1/shelves/:shelf", _LibraryService_GetShelf_GORS_Handler(wrapper, options, _LibraryService_GetShelf_GORS_Handler_GET_2abcf91b917e818f32bade73708a3c18_Binding())),
		gors.NewRoute("DELETE", "/v1/shelves/:shelf", _LibraryService_DeleteShelf_GORS_Handler(wrapper, options, _LibraryService_DeleteShelf_GORS_Handler_DELETE_2abcf91b917e818f32bade73708a3c18_Binding())),
		gors.NewRoute("GET", "/v1/shelves/:shelf/books", _LibraryService_ListBooks_GORS_Handler(wrapper, options, _LibraryService_ListBooks_GORS_Handler_GET_0fbff9c990144497ddae3b379cad6203_Binding())),
		gors.NewRoute("POST", "/v1/shelves/:shelf/books", _LibraryService_CreateBook_GORS_Handler(wrapper, options, _LibraryService_CreateBook_GORS_Handler_POST_0fbff9c990144497ddae3b379cad6203_Binding())),
		gors.NewRoute("GET", "/v1/shelves/:shelf/books/:book", _LibraryService_GetBook_GORS_Handler(wrapper, options, _LibraryService_GetBook_GORS_Handler_GET_8a01d92f2e02fc807cde2a4e4bb36cca_Binding())),
		gors.NewRoute("PUT", "/v1/shelves/:shelf/books/:book", _LibraryService_UpdateBook_GORS_Handler(wrapper, options, _LibraryService_UpdateBook_GORS_Handler_PUT_8a01d92f2e02fc807cde2a4e4bb36cca_Binding())),
		gors.NewRoute("DELETE", "/v1/shelves/:shelf/books/:book", _LibraryService_DeleteBook_GORS_Handler(wrapper, options, _LibraryService_DeleteBook_GORS_Handler_DELETE_8a01d92f2e02fc807cde2a4e4bb36cca_Binding())),
		gors.NewRoute("POST", "/v1/shelves/:shelf:merge", _LibraryService_MergeShelves_GORS_Handler(wrapper, options, _LibraryService_MergeShelves_GORS_Handler_POST_4b703ad56441d8d25c2b17d36635b9a4_Binding())),
		gors.NewRoute("POST", "/v1/shelves/:shelf/books/:book:move", _LibraryService_MoveBook_GORS_Handler(wrapper, options, _LibraryService_MoveBook_GORS_Handler_POST_2fc2b66ac71dbdf85c836dc9a57e0a6b_Binding())),
	}
}

// LibraryServiceService is the service API for LibraryService service.
type LibraryServiceService interface {
	// Creates a shelf, and returns the new Shelf.
	CreateShelf(context.Context, *CreateShelfRequest) (*Shelf, error)
	// Lists shelves. The order is unspecified but deterministic. Newly created
	// shelves will not necessarily be added to the end of this list.
	ListOneShelves(context.Context, *ListShelvesRequest) (*ListShelvesResponse, error)
	// Gets a shelf. Returns NOT_FOUND if the shelf does not exist.
	GetShelf(context.Context, *GetShelfRequest) (*Shelf, error)
	// Deletes a shelf. Returns NOT_FOUND if the shelf does not exist.
	DeleteShelf(context.Context, *DeleteShelfRequest) (*emptypb.Empty, error)
	// Lists books in a shelf. The order is unspecified but deterministic. Newly
	// created books will not necessarily be added to the end of this list.
	// Returns NOT_FOUND if the shelf does not exist.
	ListBooks(context.Context, *ListBooksRequest) (*ListBooksResponse, error)
	// Creates a book, and returns the new Book.
	CreateBook(context.Context, *CreateBookRequest) (*Book, error)
	// Gets a book. Returns NOT_FOUND if the book does not exist.
	GetBook(context.Context, *GetBookRequest) (*Book, error)
	// Updates a book. Returns INVALID_ARGUMENT if the name of the book
	// is non-empty and does not equal the existing name.
	UpdateBook(context.Context, *UpdateBookRequest) (*Book, error)
	// Deletes a book. Returns NOT_FOUND if the book does not exist.
	DeleteBook(context.Context, *DeleteBookRequest) (*emptypb.Empty, error)
	// Merges two shelves by adding all books from the shelf named
	// `other_shelf_name` to shelf `name`, and deletes
	// `other_shelf_name`. Returns the updated shelf.
	// The book ids of the moved books may not be the same as the original books.
	//
	// Returns NOT_FOUND if either shelf does not exist.
	// This call is a no-op if the specified shelves are the same.
	MergeShelves(context.Context, *MergeShelvesRequest) (*Shelf, error)
	// Moves a book to another shelf, and returns the new book. The book
	// id of the new book may not be the same as the original book.
	MoveBook(context.Context, *MoveBookRequest) (*Book, error)
}

var _ LibraryServiceService = (*_LibraryServiceServiceWrapper)(nil)

type _LibraryServiceServiceWrapper struct {
	svc     LibraryServiceService
	options *gors.Options
}

func (wrapper *_LibraryServiceServiceWrapper) CreateShelf(ctx context.Context, request *CreateShelfRequest) (*Shelf, error) {
	return wrapper.svc.CreateShelf(ctx, request)
}

func (wrapper *_LibraryServiceServiceWrapper) ListOneShelves(ctx context.Context, request *ListShelvesRequest) (*ListShelvesResponse, error) {
	return wrapper.svc.ListOneShelves(ctx, request)
}

func (wrapper *_LibraryServiceServiceWrapper) GetShelf(ctx context.Context, request *GetShelfRequest) (*Shelf, error) {
	return wrapper.svc.GetShelf(ctx, request)
}

func (wrapper *_LibraryServiceServiceWrapper) DeleteShelf(ctx context.Context, request *DeleteShelfRequest) (*emptypb.Empty, error) {
	return wrapper.svc.DeleteShelf(ctx, request)
}

func (wrapper *_LibraryServiceServiceWrapper) ListBooks(ctx context.Context, request *ListBooksRequest) (*ListBooksResponse, error) {
	return wrapper.svc.ListBooks(ctx, request)
}

func (wrapper *_LibraryServiceServiceWrapper) CreateBook(ctx context.Context, request *CreateBookRequest) (*Book, error) {
	return wrapper.svc.CreateBook(ctx, request)
}

func (wrapper *_LibraryServiceServiceWrapper) GetBook(ctx context.Context, request *GetBookRequest) (*Book, error) {
	return wrapper.svc.GetBook(ctx, request)
}

func (wrapper *_LibraryServiceServiceWrapper) UpdateBook(ctx context.Context, request *UpdateBookRequest) (*Book, error) {
	return wrapper.svc.UpdateBook(ctx, request)
}

func (wrapper *_LibraryServiceServiceWrapper) DeleteBook(ctx context.Context, request *DeleteBookRequest) (*emptypb.Empty, error) {
	return wrapper.svc.DeleteBook(ctx, request)
}

func (wrapper *_LibraryServiceServiceWrapper) MergeShelves(ctx context.Context, request *MergeShelvesRequest) (*Shelf, error) {
	return wrapper.svc.MergeShelves(ctx, request)
}

func (wrapper *_LibraryServiceServiceWrapper) MoveBook(ctx context.Context, request *MoveBookRequest) (*Book, error) {
	return wrapper.svc.MoveBook(ctx, request)
}

var _ LibraryServiceService = (*_LibraryServiceServerWrapper)(nil)

// _LibraryServiceServerWrapper implement LibraryServiceService and wrap gRPC LibraryServiceServer
type _LibraryServiceServerWrapper struct {
	srv     LibraryServiceServer
	options *gors.Options
}

func (wrapper *_LibraryServiceServerWrapper) CreateShelf(ctx context.Context, request *CreateShelfRequest) (*Shelf, error) {
	rpcMethodName := "/google.example.library.v1.LibraryService/CreateShelf"
	stream := gors.NewServerTransportStream(rpcMethodName)
	ctx = grpc.NewContextWithServerTransportStream(ctx, stream)
	resp, err := wrapper.srv.CreateShelf(ctx, request)
	gors.AddGRPCMetadata(ctx, stream.Header(), stream.Trailer(), wrapper.options.OutgoingHeaderMatcher)
	return resp, err
}

func (wrapper *_LibraryServiceServerWrapper) ListOneShelves(ctx context.Context, request *ListShelvesRequest) (*ListShelvesResponse, error) {
	rpcMethodName := "/google.example.library.v1.LibraryService/ListOneShelves"
	stream := gors.NewServerTransportStream(rpcMethodName)
	ctx = grpc.NewContextWithServerTransportStream(ctx, stream)
	resp, err := wrapper.srv.ListOneShelves(ctx, request)
	gors.AddGRPCMetadata(ctx, stream.Header(), stream.Trailer(), wrapper.options.OutgoingHeaderMatcher)
	return resp, err
}

func (wrapper *_LibraryServiceServerWrapper) GetShelf(ctx context.Context, request *GetShelfRequest) (*Shelf, error) {
	rpcMethodName := "/google.example.library.v1.LibraryService/GetShelf"
	stream := gors.NewServerTransportStream(rpcMethodName)
	ctx = grpc.NewContextWithServerTransportStream(ctx, stream)
	resp, err := wrapper.srv.GetShelf(ctx, request)
	gors.AddGRPCMetadata(ctx, stream.Header(), stream.Trailer(), wrapper.options.OutgoingHeaderMatcher)
	return resp, err
}

func (wrapper *_LibraryServiceServerWrapper) DeleteShelf(ctx context.Context, request *DeleteShelfRequest) (*emptypb.Empty, error) {
	rpcMethodName := "/google.example.library.v1.LibraryService/DeleteShelf"
	stream := gors.NewServerTransportStream(rpcMethodName)
	ctx = grpc.NewContextWithServerTransportStream(ctx, stream)
	resp, err := wrapper.srv.DeleteShelf(ctx, request)
	gors.AddGRPCMetadata(ctx, stream.Header(), stream.Trailer(), wrapper.options.OutgoingHeaderMatcher)
	return resp, err
}

func (wrapper *_LibraryServiceServerWrapper) ListBooks(ctx context.Context, request *ListBooksRequest) (*ListBooksResponse, error) {
	rpcMethodName := "/google.example.library.v1.LibraryService/ListBooks"
	stream := gors.NewServerTransportStream(rpcMethodName)
	ctx = grpc.NewContextWithServerTransportStream(ctx, stream)
	resp, err := wrapper.srv.ListBooks(ctx, request)
	gors.AddGRPCMetadata(ctx, stream.Header(), stream.Trailer(), wrapper.options.OutgoingHeaderMatcher)
	return resp, err
}

func (wrapper *_LibraryServiceServerWrapper) CreateBook(ctx context.Context, request *CreateBookRequest) (*Book, error) {
	rpcMethodName := "/google.example.library.v1.LibraryService/CreateBook"
	stream := gors.NewServerTransportStream(rpcMethodName)
	ctx = grpc.NewContextWithServerTransportStream(ctx, stream)
	resp, err := wrapper.srv.CreateBook(ctx, request)
	gors.AddGRPCMetadata(ctx, stream.Header(), stream.Trailer(), wrapper.options.OutgoingHeaderMatcher)
	return resp, err
}

func (wrapper *_LibraryServiceServerWrapper) GetBook(ctx context.Context, request *GetBookRequest) (*Book, error) {
	rpcMethodName := "/google.example.library.v1.LibraryService/GetBook"
	stream := gors.NewServerTransportStream(rpcMethodName)
	ctx = grpc.NewContextWithServerTransportStream(ctx, stream)
	resp, err := wrapper.srv.GetBook(ctx, request)
	gors.AddGRPCMetadata(ctx, stream.Header(), stream.Trailer(), wrapper.options.OutgoingHeaderMatcher)
	return resp, err
}

func (wrapper *_LibraryServiceServerWrapper) UpdateBook(ctx context.Context, request *UpdateBookRequest) (*Book, error) {
	rpcMethodName := "/google.example.library.v1.LibraryService/UpdateBook"
	stream := gors.NewServerTransportStream(rpcMethodName)
	ctx = grpc.NewContextWithServerTransportStream(ctx, stream)
	resp, err := wrapper.srv.UpdateBook(ctx, request)
	gors.AddGRPCMetadata(ctx, stream.Header(), stream.Trailer(), wrapper.options.OutgoingHeaderMatcher)
	return resp, err
}

func (wrapper *_LibraryServiceServerWrapper) DeleteBook(ctx context.Context, request *DeleteBookRequest) (*emptypb.Empty, error) {
	rpcMethodName := "/google.example.library.v1.LibraryService/DeleteBook"
	stream := gors.NewServerTransportStream(rpcMethodName)
	ctx = grpc.NewContextWithServerTransportStream(ctx, stream)
	resp, err := wrapper.srv.DeleteBook(ctx, request)
	gors.AddGRPCMetadata(ctx, stream.Header(), stream.Trailer(), wrapper.options.OutgoingHeaderMatcher)
	return resp, err
}

func (wrapper *_LibraryServiceServerWrapper) MergeShelves(ctx context.Context, request *MergeShelvesRequest) (*Shelf, error) {
	rpcMethodName := "/google.example.library.v1.LibraryService/MergeShelves"
	stream := gors.NewServerTransportStream(rpcMethodName)
	ctx = grpc.NewContextWithServerTransportStream(ctx, stream)
	resp, err := wrapper.srv.MergeShelves(ctx, request)
	gors.AddGRPCMetadata(ctx, stream.Header(), stream.Trailer(), wrapper.options.OutgoingHeaderMatcher)
	return resp, err
}

func (wrapper *_LibraryServiceServerWrapper) MoveBook(ctx context.Context, request *MoveBookRequest) (*Book, error) {
	rpcMethodName := "/google.example.library.v1.LibraryService/MoveBook"
	stream := gors.NewServerTransportStream(rpcMethodName)
	ctx = grpc.NewContextWithServerTransportStream(ctx, stream)
	resp, err := wrapper.srv.MoveBook(ctx, request)
	gors.AddGRPCMetadata(ctx, stream.Header(), stream.Trailer(), wrapper.options.OutgoingHeaderMatcher)
	return resp, err
}

var _ LibraryServiceService = (*_LibraryServiceClientWrapper)(nil)

// _LibraryServiceClientWrapper implement LibraryServiceService and wrap gRPC LibraryServiceClient
type _LibraryServiceClientWrapper struct {
	cli     LibraryServiceClient
	options *gors.Options
}

func (wrapper *_LibraryServiceClientWrapper) CreateShelf(ctx context.Context, request *CreateShelfRequest) (*Shelf, error) {
	var headerMD, trailerMD metadata.MD
	resp, err := wrapper.cli.CreateShelf(ctx, request, grpc.Header(&headerMD), grpc.Trailer(&trailerMD))
	gors.AddGRPCMetadata(ctx, headerMD, trailerMD, wrapper.options.OutgoingHeaderMatcher)
	return resp, err
}

func (wrapper *_LibraryServiceClientWrapper) ListOneShelves(ctx context.Context, request *ListShelvesRequest) (*ListShelvesResponse, error) {
	var headerMD, trailerMD metadata.MD
	resp, err := wrapper.cli.ListOneShelves(ctx, request, grpc.Header(&headerMD), grpc.Trailer(&trailerMD))
	gors.AddGRPCMetadata(ctx, headerMD, trailerMD, wrapper.options.OutgoingHeaderMatcher)
	return resp, err
}

func (wrapper *_LibraryServiceClientWrapper) GetShelf(ctx context.Context, request *GetShelfRequest) (*Shelf, error) {
	var headerMD, trailerMD metadata.MD
	resp, err := wrapper.cli.GetShelf(ctx, request, grpc.Header(&headerMD), grpc.Trailer(&trailerMD))
	gors.AddGRPCMetadata(ctx, headerMD, trailerMD, wrapper.options.OutgoingHeaderMatcher)
	return resp, err
}

func (wrapper *_LibraryServiceClientWrapper) DeleteShelf(ctx context.Context, request *DeleteShelfRequest) (*emptypb.Empty, error) {
	var headerMD, trailerMD metadata.MD
	resp, err := wrapper.cli.DeleteShelf(ctx, request, grpc.Header(&headerMD), grpc.Trailer(&trailerMD))
	gors.AddGRPCMetadata(ctx, headerMD, trailerMD, wrapper.options.OutgoingHeaderMatcher)
	return resp, err
}

func (wrapper *_LibraryServiceClientWrapper) ListBooks(ctx context.Context, request *ListBooksRequest) (*ListBooksResponse, error) {
	var headerMD, trailerMD metadata.MD
	resp, err := wrapper.cli.ListBooks(ctx, request, grpc.Header(&headerMD), grpc.Trailer(&trailerMD))
	gors.AddGRPCMetadata(ctx, headerMD, trailerMD, wrapper.options.OutgoingHeaderMatcher)
	return resp, err
}

func (wrapper *_LibraryServiceClientWrapper) CreateBook(ctx context.Context, request *CreateBookRequest) (*Book, error) {
	var headerMD, trailerMD metadata.MD
	resp, err := wrapper.cli.CreateBook(ctx, request, grpc.Header(&headerMD), grpc.Trailer(&trailerMD))
	gors.AddGRPCMetadata(ctx, headerMD, trailerMD, wrapper.options.OutgoingHeaderMatcher)
	return resp, err
}

func (wrapper *_LibraryServiceClientWrapper) GetBook(ctx context.Context, request *GetBookRequest) (*Book, error) {
	var headerMD, trailerMD metadata.MD
	resp, err := wrapper.cli.GetBook(ctx, request, grpc.Header(&headerMD), grpc.Trailer(&trailerMD))
	gors.AddGRPCMetadata(ctx, headerMD, trailerMD, wrapper.options.OutgoingHeaderMatcher)
	return resp, err
}

func (wrapper *_LibraryServiceClientWrapper) UpdateBook(ctx context.Context, request *UpdateBookRequest) (*Book, error) {
	var headerMD, trailerMD metadata.MD
	resp, err := wrapper.cli.UpdateBook(ctx, request, grpc.Header(&headerMD), grpc.Trailer(&trailerMD))
	gors.AddGRPCMetadata(ctx, headerMD, trailerMD, wrapper.options.OutgoingHeaderMatcher)
	return resp, err
}

func (wrapper *_LibraryServiceClientWrapper) DeleteBook(ctx context.Context, request *DeleteBookRequest) (*emptypb.Empty, error) {
	var headerMD, trailerMD metadata.MD
	resp, err := wrapper.cli.DeleteBook(ctx, request, grpc.Header(&headerMD), grpc.Trailer(&trailerMD))
	gors.AddGRPCMetadata(ctx, headerMD, trailerMD, wrapper.options.OutgoingHeaderMatcher)
	return resp, err
}

func (wrapper *_LibraryServiceClientWrapper) MergeShelves(ctx context.Context, request *MergeShelvesRequest) (*Shelf, error) {
	var headerMD, trailerMD metadata.MD
	resp, err := wrapper.cli.MergeShelves(ctx, request, grpc.Header(&headerMD), grpc.Trailer(&trailerMD))
	gors.AddGRPCMetadata(ctx, headerMD, trailerMD, wrapper.options.OutgoingHeaderMatcher)
	return resp, err
}

func (wrapper *_LibraryServiceClientWrapper) MoveBook(ctx context.Context, request *MoveBookRequest) (*Book, error) {
	var headerMD, trailerMD metadata.MD
	resp, err := wrapper.cli.MoveBook(ctx, request, grpc.Header(&headerMD), grpc.Trailer(&trailerMD))
	gors.AddGRPCMetadata(ctx, headerMD, trailerMD, wrapper.options.OutgoingHeaderMatcher)
	return resp, err
}

func _LibraryService_CreateShelf_GORS_Handler(svc LibraryServiceService, options *gors.Options, binding *binding.HttpRuleBinding) func(c *gin.Context) {
	return func(c *gin.Context) {
		var rpcMethodName = "/google.example.library.v1.LibraryService/CreateShelf"
		var ctx = gors.NewContext(c, rpcMethodName)
		var req *CreateShelfRequest
		var resp *Shelf
		var err error
		req = new(CreateShelfRequest)
		if err = gors.RequestBind(
			ctx, req, options.Tag,
			gors.HttpRuleBinding(binding),
		); err != nil {
			gors.ErrorRender(ctx, err, options.ErrorHandler, options.ResponseWrapper)
			return
		}
		if ctx, err = gors.NewGRPCContext(ctx, options.IncomingHeaderMatcher, options.MetadataAnnotators); err != nil {
			gors.ErrorRender(ctx, err, options.ErrorHandler, options.ResponseWrapper)
			return
		}
		resp, err = svc.CreateShelf(ctx, req)
		if err != nil {
			gors.ErrorRender(ctx, err, options.ErrorHandler, options.ResponseWrapper)
			return
		}
		gors.ResponseRender(ctx, gors.StatusCode(ctx), resp, "", gors.ProtoJSONRender(options.ProtoJSONMarshalOptions), options.ResponseWrapper)
	}
}

func _LibraryService_ListOneShelves_GORS_Handler(svc LibraryServiceService, options *gors.Options, binding *binding.HttpRuleBinding) func(c *gin.Context) {
	return func(c *gin.Context) {
		var rpcMethodName = "/google.example.library.v1.LibraryService/ListOneShelves"
		var ctx = gors.NewContext(c, rpcMethodName)
		var req *ListShelvesRequest
		var resp *ListShelvesResponse
		var err error
		req = new(ListShelvesRequest)
		if err = gors.RequestBind(
			ctx, req, options.Tag,
			gors.HttpRuleBinding(binding),
		); err != nil {
			gors.ErrorRender(ctx, err, options.ErrorHandler, options.ResponseWrapper)
			return
		}
		if ctx, err = gors.NewGRPCContext(ctx, options.IncomingHeaderMatcher, options.MetadataAnnotators); err != nil {
			gors.ErrorRender(ctx, err, options.ErrorHandler, options.ResponseWrapper)
			return
		}
		resp, err = svc.ListOneShelves(ctx, req)
		if err != nil {
			gors.ErrorRender(ctx, err, options.ErrorHandler, options.ResponseWrapper)
			return
		}
		gors.ResponseRender(ctx, gors.StatusCode(ctx), resp, "", gors.ProtoJSONRender(options.ProtoJSONMarshalOptions), options.ResponseWrapper)
	}
}

func _LibraryService_GetShelf_GORS_Handler(svc LibraryServiceService, options *gors.Options, binding *binding.HttpRuleBinding) func(c *gin.Context) {
	return func(c *gin.Context) {
		var rpcMethodName = "/google.example.library.v1.LibraryService/GetShelf"
		var ctx = gors.NewContext(c, rpcMethodName)
		var req *GetShelfRequest
		var resp *Shelf
		var err error
		req = new(GetShelfRequest)
		if err = gors.RequestBind(
			ctx, req, options.Tag,
			gors.HttpRuleBinding(binding),
		); err != nil {
			gors.ErrorRender(ctx, err, options.ErrorHandler, options.ResponseWrapper)
			return
		}
		if ctx, err = gors.NewGRPCContext(ctx, options.IncomingHeaderMatcher, options.MetadataAnnotators); err != nil {
			gors.ErrorRender(ctx, err, options.ErrorHandler, options.ResponseWrapper)
			return
		}
		resp, err = svc.GetShelf(ctx, req)
		if err != nil {
			gors.ErrorRender(ctx, err, options.ErrorHandler, options.ResponseWrapper)
			return
		}
		gors.ResponseRender(ctx, gors.StatusCode(ctx), resp, "", gors.ProtoJSONRender(options.ProtoJSONMarshalOptions), options.ResponseWrapper)
	}
}

func _LibraryService_DeleteShelf_GORS_Handler(svc LibraryServiceService, options *gors.Options, binding *binding.HttpRuleBinding) func(c *gin.Context) {
	return func(c *gin.Context) {
		var rpcMethodName = "/google.example.library.v1.LibraryService/DeleteShelf"
		var ctx = gors.NewContext(c, rpcMethodName)
		var req *DeleteShelfRequest
		var resp *emptypb.Empty
		var err error
		req = new(DeleteShelfRequest)
		if err = gors.RequestBind(
			ctx, req, options.Tag,
			gors.HttpRuleBinding(binding),
		); err != nil {
			gors.ErrorRender(ctx, err, options.ErrorHandler, options.ResponseWrapper)
			return
		}
		if ctx, err = gors.NewGRPCContext(ctx, options.IncomingHeaderMatcher, options.MetadataAnnotators); err != nil {
			gors.ErrorRender(ctx, err, options.ErrorHandler, options.ResponseWrapper)
			return
		}
		resp, err = svc.DeleteShelf(ctx, req)
		if err != nil {
			gors.ErrorRender(ctx, err, options.ErrorHandler, options.ResponseWrapper)
			return
		}
		gors.ResponseRender(ctx, gors.StatusCode(ctx), resp, "", gors.ProtoJSONRender(options.ProtoJSONMarshalOptions), options.ResponseWrapper)
	}
}

func _LibraryService_ListBooks_GORS_Handler(svc LibraryServiceService, options *gors.Options, binding *binding.HttpRuleBinding) func(c *gin.Context) {
	return func(c *gin.Context) {
		var rpcMethodName = "/google.example.library.v1.LibraryService/ListBooks"
		var ctx = gors.NewContext(c, rpcMethodName)
		var req *ListBooksRequest
		var resp *ListBooksResponse
		var err error
		req = new(ListBooksRequest)
		if err = gors.RequestBind(
			ctx, req, options.Tag,
			gors.HttpRuleBinding(binding),
		); err != nil {
			gors.ErrorRender(ctx, err, options.ErrorHandler, options.ResponseWrapper)
			return
		}
		if ctx, err = gors.NewGRPCContext(ctx, options.IncomingHeaderMatcher, options.MetadataAnnotators); err != nil {
			gors.ErrorRender(ctx, err, options.ErrorHandler, options.ResponseWrapper)
			return
		}
		resp, err = svc.ListBooks(ctx, req)
		if err != nil {
			gors.ErrorRender(ctx, err, options.ErrorHandler, options.ResponseWrapper)
			return
		}
		gors.ResponseRender(ctx, gors.StatusCode(ctx), resp, "", gors.ProtoJSONRender(options.ProtoJSONMarshalOptions), options.ResponseWrapper)
	}
}

func _LibraryService_CreateBook_GORS_Handler(svc LibraryServiceService, options *gors.Options, binding *binding.HttpRuleBinding) func(c *gin.Context) {
	return func(c *gin.Context) {
		var rpcMethodName = "/google.example.library.v1.LibraryService/CreateBook"
		var ctx = gors.NewContext(c, rpcMethodName)
		var req *CreateBookRequest
		var resp *Book
		var err error
		req = new(CreateBookRequest)
		if err = gors.RequestBind(
			ctx, req, options.Tag,
			gors.HttpRuleBinding(binding),
		); err != nil {
			gors.ErrorRender(ctx, err, options.ErrorHandler, options.ResponseWrapper)
			return
		}
		if ctx, err = gors.NewGRPCContext(ctx, options.IncomingHeaderMatcher, options.MetadataAnnotators); err != nil {
			gors.ErrorRender(ctx, err, options.ErrorHandler, options.ResponseWrapper)
			return
		}
		resp, err = svc.CreateBook(ctx, req)
		if err != nil {
			gors.ErrorRender(ctx, err, options.ErrorHandler, options.ResponseWrapper)
			return
		}
		gors.ResponseRender(ctx, gors.StatusCode(ctx), resp, "", gors.ProtoJSONRender(options.ProtoJSONMarshalOptions), options.ResponseWrapper)
	}
}

func _LibraryService_GetBook_GORS_Handler(svc LibraryServiceService, options *gors.Options, binding *binding.HttpRuleBinding) func(c *gin.Context) {
	return func(c *gin.Context) {
		var rpcMethodName = "/google.example.library.v1.LibraryService/GetBook"
		var ctx = gors.NewContext(c, rpcMethodName)
		var req *GetBookRequest
		var resp *Book
		var err error
		req = new(GetBookRequest)
		if err = gors.RequestBind(
			ctx, req, options.Tag,
			gors.HttpRuleBinding(binding),
		); err != nil {
			gors.ErrorRender(ctx, err, options.ErrorHandler, options.ResponseWrapper)
			return
		}
		if ctx, err = gors.NewGRPCContext(ctx, options.IncomingHeaderMatcher, options.MetadataAnnotators); err != nil {
			gors.ErrorRender(ctx, err, options.ErrorHandler, options.ResponseWrapper)
			return
		}
		resp, err = svc.GetBook(ctx, req)
		if err != nil {
			gors.ErrorRender(ctx, err, options.ErrorHandler, options.ResponseWrapper)
			return
		}
		gors.ResponseRender(ctx, gors.StatusCode(ctx), resp, "", gors.ProtoJSONRender(options.ProtoJSONMarshalOptions), options.ResponseWrapper)
	}
}

func _LibraryService_UpdateBook_GORS_Handler(svc LibraryServiceService, options *gors.Options, binding *binding.HttpRuleBinding) func(c *gin.Context) {
	return func(c *gin.Context) {
		var rpcMethodName = "/google.example.library.v1.LibraryService/UpdateBook"
		var ctx = gors.NewContext(c, rpcMethodName)
		var req *UpdateBookRequest
		var resp *Book
		var err error
		req = new(UpdateBookRequest)
		if err = gors.RequestBind(
			ctx, req, options.Tag,
			gors.HttpRuleBinding(binding),
		); err != nil {
			gors.ErrorRender(ctx, err, options.ErrorHandler, options.ResponseWrapper)
			return
		}
		if ctx, err = gors.NewGRPCContext(ctx, options.IncomingHeaderMatcher, options.MetadataAnnotators); err != nil {
			gors.ErrorRender(ctx, err, options.ErrorHandler, options.ResponseWrapper)
			return
		}
		resp, err = svc.UpdateBook(ctx, req)
		if err != nil {
			gors.ErrorRender(ctx, err, options.ErrorHandler, options.ResponseWrapper)
			return
		}
		gors.ResponseRender(ctx, gors.StatusCode(ctx), resp, "", gors.ProtoJSONRender(options.ProtoJSONMarshalOptions), options.ResponseWrapper)
	}
}

func _LibraryService_DeleteBook_GORS_Handler(svc LibraryServiceService, options *gors.Options, binding *binding.HttpRuleBinding) func(c *gin.Context) {
	return func(c *gin.Context) {
		var rpcMethodName = "/google.example.library.v1.LibraryService/DeleteBook"
		var ctx = gors.NewContext(c, rpcMethodName)
		var req *DeleteBookRequest
		var resp *emptypb.Empty
		var err error
		req = new(DeleteBookRequest)
		if err = gors.RequestBind(
			ctx, req, options.Tag,
			gors.HttpRuleBinding(binding),
		); err != nil {
			gors.ErrorRender(ctx, err, options.ErrorHandler, options.ResponseWrapper)
			return
		}
		if ctx, err = gors.NewGRPCContext(ctx, options.IncomingHeaderMatcher, options.MetadataAnnotators); err != nil {
			gors.ErrorRender(ctx, err, options.ErrorHandler, options.ResponseWrapper)
			return
		}
		resp, err = svc.DeleteBook(ctx, req)
		if err != nil {
			gors.ErrorRender(ctx, err, options.ErrorHandler, options.ResponseWrapper)
			return
		}
		gors.ResponseRender(ctx, gors.StatusCode(ctx), resp, "", gors.ProtoJSONRender(options.ProtoJSONMarshalOptions), options.ResponseWrapper)
	}
}

func _LibraryService_MergeShelves_GORS_Handler(svc LibraryServiceService, options *gors.Options, binding *binding.HttpRuleBinding) func(c *gin.Context) {
	return func(c *gin.Context) {
		var rpcMethodName = "/google.example.library.v1.LibraryService/MergeShelves"
		var ctx = gors.NewContext(c, rpcMethodName)
		var req *MergeShelvesRequest
		var resp *Shelf
		var err error
		req = new(MergeShelvesRequest)
		if err = gors.RequestBind(
			ctx, req, options.Tag,
			gors.HttpRuleBinding(binding),
		); err != nil {
			gors.ErrorRender(ctx, err, options.ErrorHandler, options.ResponseWrapper)
			return
		}
		if ctx, err = gors.NewGRPCContext(ctx, options.IncomingHeaderMatcher, options.MetadataAnnotators); err != nil {
			gors.ErrorRender(ctx, err, options.ErrorHandler, options.ResponseWrapper)
			return
		}
		resp, err = svc.MergeShelves(ctx, req)
		if err != nil {
			gors.ErrorRender(ctx, err, options.ErrorHandler, options.ResponseWrapper)
			return
		}
		gors.ResponseRender(ctx, gors.StatusCode(ctx), resp, "", gors.ProtoJSONRender(options.ProtoJSONMarshalOptions), options.ResponseWrapper)
	}
}

func _LibraryService_MoveBook_GORS_Handler(svc LibraryServiceService, options *gors.Options, binding *binding.HttpRuleBinding) func(c *gin.Context) {
	return func(c *gin.Context) {
		var rpcMethodName = "/google.example.library.v1.LibraryService/MoveBook"
		var ctx = gors.NewContext(c, rpcMethodName)
		var req *MoveBookRequest
		var resp *Book
		var err error
		req = new(MoveBookRequest)
		if err = gors.RequestBind(
			ctx, req, options.Tag,
			gors.HttpRuleBinding(binding),
		); err != nil {
			gors.ErrorRender(ctx, err, options.ErrorHandler, options.ResponseWrapper)
			return
		}
		if ctx, err = gors.NewGRPCContext(ctx, options.IncomingHeaderMatcher, options.MetadataAnnotators); err != nil {
			gors.ErrorRender(ctx, err, options.ErrorHandler, options.ResponseWrapper)
			return
		}
		resp, err = svc.MoveBook(ctx, req)
		if err != nil {
			gors.ErrorRender(ctx, err, options.ErrorHandler, options.ResponseWrapper)
			return
		}
		gors.ResponseRender(ctx, gors.StatusCode(ctx), resp, "", gors.ProtoJSONRender(options.ProtoJSONMarshalOptions), options.ResponseWrapper)
	}
}

func _LibraryService_CreateShelf_GORS_Handler_POST_933fe354a7c3c7d9865206c828f8c483_Binding() *binding.HttpRuleBinding {
	return &binding.HttpRuleBinding{
		Body: &binding.BodyRule{
			Name: "shelf",
			Type: "object",
		},
	}
}
func _LibraryService_ListOneShelves_GORS_Handler_GET_933fe354a7c3c7d9865206c828f8c483_Binding() *binding.HttpRuleBinding {
	return &binding.HttpRuleBinding{
		Query: []*binding.QueryRule{
			{Name: "page_size", Type: "integer"},
			{Name: "page_token", Type: "string"},
		},
	}
}
func _LibraryService_GetShelf_GORS_Handler_GET_2abcf91b917e818f32bade73708a3c18_Binding() *binding.HttpRuleBinding {
	return &binding.HttpRuleBinding{
		NamedPath: &binding.NamedPathRule{
			Name:       "name",
			Parameters: []string{"shelf"},
			Template:   "shelves/%s",
		},
	}
}
func _LibraryService_DeleteShelf_GORS_Handler_DELETE_2abcf91b917e818f32bade73708a3c18_Binding() *binding.HttpRuleBinding {
	return &binding.HttpRuleBinding{
		NamedPath: &binding.NamedPathRule{
			Name:       "name",
			Parameters: []string{"shelf"},
			Template:   "shelves/%s",
		},
	}
}
func _LibraryService_ListBooks_GORS_Handler_GET_0fbff9c990144497ddae3b379cad6203_Binding() *binding.HttpRuleBinding {
	return &binding.HttpRuleBinding{
		NamedPath: &binding.NamedPathRule{
			Name:       "name",
			Parameters: []string{"shelf"},
			Template:   "shelves/%s",
		},
		Query: []*binding.QueryRule{
			{Name: "page_size", Type: "integer"},
			{Name: "page_token", Type: "string"},
		},
	}
}
func _LibraryService_CreateBook_GORS_Handler_POST_0fbff9c990144497ddae3b379cad6203_Binding() *binding.HttpRuleBinding {
	return &binding.HttpRuleBinding{
		NamedPath: &binding.NamedPathRule{
			Name:       "name",
			Parameters: []string{"shelf"},
			Template:   "shelves/%s",
		},
		Body: &binding.BodyRule{
			Name: "book",
			Type: "object",
		},
	}
}
func _LibraryService_GetBook_GORS_Handler_GET_8a01d92f2e02fc807cde2a4e4bb36cca_Binding() *binding.HttpRuleBinding {
	return &binding.HttpRuleBinding{
		NamedPath: &binding.NamedPathRule{
			Name:       "name",
			Parameters: []string{"shelf", "book"},
			Template:   "shelves/%s/books/%s",
		},
	}
}
func _LibraryService_UpdateBook_GORS_Handler_PUT_8a01d92f2e02fc807cde2a4e4bb36cca_Binding() *binding.HttpRuleBinding {
	return &binding.HttpRuleBinding{
		NamedPath: &binding.NamedPathRule{
			Name:       "book.name",
			Parameters: []string{"shelf", "book"},
			Template:   "shelves/%s/books/%s",
		},
		Query: []*binding.QueryRule{
			{Name: "name", Type: "string"},
		},
		Body: &binding.BodyRule{
			Name: "book",
			Type: "object",
		},
	}
}
func _LibraryService_DeleteBook_GORS_Handler_DELETE_8a01d92f2e02fc807cde2a4e4bb36cca_Binding() *binding.HttpRuleBinding {
	return &binding.HttpRuleBinding{
		NamedPath: &binding.NamedPathRule{
			Name:       "name",
			Parameters: []string{"shelf", "book"},
			Template:   "shelves/%s/books/%s",
		},
	}
}
func _LibraryService_MergeShelves_GORS_Handler_POST_4b703ad56441d8d25c2b17d36635b9a4_Binding() *binding.HttpRuleBinding {
	return &binding.HttpRuleBinding{
		NamedPath: &binding.NamedPathRule{
			Name:       "name",
			Parameters: []string{"shelf"},
			Template:   "shelves/%s",
		},
		Body: &binding.BodyRule{
			Name: "*",
			Type: "object",
		},
	}
}
func _LibraryService_MoveBook_GORS_Handler_POST_2fc2b66ac71dbdf85c836dc9a57e0a6b_Binding() *binding.HttpRuleBinding {
	return &binding.HttpRuleBinding{
		NamedPath: &binding.NamedPathRule{
			Name:       "name",
			Parameters: []string{"shelf", "book"},
			Template:   "shelves/%s/books/%s",
		},
		Body: &binding.BodyRule{
			Name: "*",
			Type: "object",
		},
	}
}
