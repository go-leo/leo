// Code generated by protoc-gen-leo. DO NOT EDIT.

package route

import (
	bytes "bytes"
	context "context"
	errors "errors"
	fmt "fmt"
	endpoint "github.com/go-kit/kit/endpoint"
	http1 "github.com/go-kit/kit/transport/http"
	jsonx "github.com/go-leo/gox/encodingx/jsonx"
	endpointx "github.com/go-leo/leo/v3/endpointx"
	httpx "github.com/go-leo/leo/v3/transportx/httpx"
	coder "github.com/go-leo/leo/v3/transportx/httpx/coder"
	mux "github.com/gorilla/mux"
	httpbody "google.golang.org/genproto/googleapis/api/httpbody"
	http2 "google.golang.org/genproto/googleapis/rpc/http"
	protojson "google.golang.org/protobuf/encoding/protojson"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	io "io"
	http "net/http"
	url "net/url"
)

func appendBodyHttpRoutes(router *mux.Router) *mux.Router {
	router.NewRoute().
		Name("/leo.example.route.body.Body/StarBody").
		Methods("POST").
		Path("/v1/star/body")
	router.NewRoute().
		Name("/leo.example.route.body.Body/NamedBody").
		Methods("POST").
		Path("/v1/named/body")
	router.NewRoute().
		Name("/leo.example.route.body.Body/NonBody").
		Methods("GET").
		Path("/v1/user_body")
	router.NewRoute().
		Name("/leo.example.route.body.Body/HttpBodyStarBody").
		Methods("PUT").
		Path("/v1/http/body/star/body")
	router.NewRoute().
		Name("/leo.example.route.body.Body/HttpBodyNamedBody").
		Methods("PUT").
		Path("/v1/http/body/named/body")
	router.NewRoute().
		Name("/leo.example.route.body.Body/HttpRequest").
		Methods("PUT").
		Path("/v1/http/request")
	return router
}
func AppendBodyHttpServerRoutes(router *mux.Router, svc BodyService, middlewares ...endpoint.Middleware) *mux.Router {
	endpoints := &bodyServerEndpoints{
		svc:         svc,
		middlewares: middlewares,
	}
	transports := &bodyHttpServerTransports{
		endpoints:       endpoints,
		requestDecoder:  bodyHttpServerRequestDecoder{},
		responseEncoder: bodyHttpServerResponseEncoder{},
	}
	router = appendBodyHttpRoutes(router)
	router.Get("/leo.example.route.body.Body/StarBody").Handler(transports.StarBody())
	router.Get("/leo.example.route.body.Body/NamedBody").Handler(transports.NamedBody())
	router.Get("/leo.example.route.body.Body/NonBody").Handler(transports.NonBody())
	router.Get("/leo.example.route.body.Body/HttpBodyStarBody").Handler(transports.HttpBodyStarBody())
	router.Get("/leo.example.route.body.Body/HttpBodyNamedBody").Handler(transports.HttpBodyNamedBody())
	router.Get("/leo.example.route.body.Body/HttpRequest").Handler(transports.HttpRequest())
	return router
}

func NewBodyHttpClient(target string, opts ...httpx.ClientOption) BodyService {
	options := httpx.NewClientOptions(opts...)
	requestEncoder := &bodyHttpClientRequestEncoder{
		router: appendBodyHttpRoutes(mux.NewRouter()),
		scheme: options.Scheme(),
	}
	responseDecoder := &bodyHttpClientResponseDecoder{}
	transports := &bodyHttpClientTransports{
		clientOptions:   options.ClientTransportOptions(),
		middlewares:     options.Middlewares(),
		requestEncoder:  requestEncoder,
		responseDecoder: responseDecoder,
	}
	factories := &bodyFactories{
		transports: transports,
	}
	endpointer := &bodyEndpointers{
		target:    target,
		builder:   options.Builder(),
		factories: factories,
		logger:    options.Logger(),
		options:   options.EndpointerOptions(),
	}
	balancers := &bodyBalancers{
		factory:    options.BalancerFactory(),
		endpointer: endpointer,
	}
	endpoints := &bodyClientEndpoints{
		balancers: balancers,
	}
	return &bodyClientService{
		endpoints:     endpoints,
		transportName: httpx.HttpClient,
	}
}

type BodyHttpServerTransports interface {
	StarBody() http.Handler
	NamedBody() http.Handler
	NonBody() http.Handler
	HttpBodyStarBody() http.Handler
	HttpBodyNamedBody() http.Handler
	HttpRequest() http.Handler
}

type BodyHttpServerRequestDecoder interface {
	StarBody() http1.DecodeRequestFunc
	NamedBody() http1.DecodeRequestFunc
	NonBody() http1.DecodeRequestFunc
	HttpBodyStarBody() http1.DecodeRequestFunc
	HttpBodyNamedBody() http1.DecodeRequestFunc
	HttpRequest() http1.DecodeRequestFunc
}

type BodyHttpServerResponseEncoder interface {
	StarBody() http1.EncodeResponseFunc
	NamedBody() http1.EncodeResponseFunc
	NonBody() http1.EncodeResponseFunc
	HttpBodyStarBody() http1.EncodeResponseFunc
	HttpBodyNamedBody() http1.EncodeResponseFunc
	HttpRequest() http1.EncodeResponseFunc
}

type BodyHttpClientRequestEncoder interface {
	StarBody(instance string) http1.CreateRequestFunc
	NamedBody(instance string) http1.CreateRequestFunc
	NonBody(instance string) http1.CreateRequestFunc
	HttpBodyStarBody(instance string) http1.CreateRequestFunc
	HttpBodyNamedBody(instance string) http1.CreateRequestFunc
	HttpRequest(instance string) http1.CreateRequestFunc
}

type BodyHttpClientResponseDecoder interface {
	StarBody() http1.DecodeResponseFunc
	NamedBody() http1.DecodeResponseFunc
	NonBody() http1.DecodeResponseFunc
	HttpBodyStarBody() http1.DecodeResponseFunc
	HttpBodyNamedBody() http1.DecodeResponseFunc
	HttpRequest() http1.DecodeResponseFunc
}

type bodyHttpServerTransports struct {
	endpoints       BodyServerEndpoints
	requestDecoder  BodyHttpServerRequestDecoder
	responseEncoder BodyHttpServerResponseEncoder
}

func (t *bodyHttpServerTransports) StarBody() http.Handler {
	return http1.NewServer(
		t.endpoints.StarBody(context.TODO()),
		t.requestDecoder.StarBody(),
		t.responseEncoder.StarBody(),
		http1.ServerBefore(httpx.EndpointInjector("/leo.example.route.body.Body/StarBody")),
		http1.ServerBefore(httpx.ServerTransportInjector),
		http1.ServerBefore(httpx.IncomingMetadataInjector),
		http1.ServerBefore(httpx.IncomingTimeLimitInjector),
		http1.ServerBefore(httpx.IncomingStainInjector),
		http1.ServerFinalizer(httpx.CancelInvoker),
	)
}

func (t *bodyHttpServerTransports) NamedBody() http.Handler {
	return http1.NewServer(
		t.endpoints.NamedBody(context.TODO()),
		t.requestDecoder.NamedBody(),
		t.responseEncoder.NamedBody(),
		http1.ServerBefore(httpx.EndpointInjector("/leo.example.route.body.Body/NamedBody")),
		http1.ServerBefore(httpx.ServerTransportInjector),
		http1.ServerBefore(httpx.IncomingMetadataInjector),
		http1.ServerBefore(httpx.IncomingTimeLimitInjector),
		http1.ServerBefore(httpx.IncomingStainInjector),
		http1.ServerFinalizer(httpx.CancelInvoker),
	)
}

func (t *bodyHttpServerTransports) NonBody() http.Handler {
	return http1.NewServer(
		t.endpoints.NonBody(context.TODO()),
		t.requestDecoder.NonBody(),
		t.responseEncoder.NonBody(),
		http1.ServerBefore(httpx.EndpointInjector("/leo.example.route.body.Body/NonBody")),
		http1.ServerBefore(httpx.ServerTransportInjector),
		http1.ServerBefore(httpx.IncomingMetadataInjector),
		http1.ServerBefore(httpx.IncomingTimeLimitInjector),
		http1.ServerBefore(httpx.IncomingStainInjector),
		http1.ServerFinalizer(httpx.CancelInvoker),
	)
}

func (t *bodyHttpServerTransports) HttpBodyStarBody() http.Handler {
	return http1.NewServer(
		t.endpoints.HttpBodyStarBody(context.TODO()),
		t.requestDecoder.HttpBodyStarBody(),
		t.responseEncoder.HttpBodyStarBody(),
		http1.ServerBefore(httpx.EndpointInjector("/leo.example.route.body.Body/HttpBodyStarBody")),
		http1.ServerBefore(httpx.ServerTransportInjector),
		http1.ServerBefore(httpx.IncomingMetadataInjector),
		http1.ServerBefore(httpx.IncomingTimeLimitInjector),
		http1.ServerBefore(httpx.IncomingStainInjector),
		http1.ServerFinalizer(httpx.CancelInvoker),
	)
}

func (t *bodyHttpServerTransports) HttpBodyNamedBody() http.Handler {
	return http1.NewServer(
		t.endpoints.HttpBodyNamedBody(context.TODO()),
		t.requestDecoder.HttpBodyNamedBody(),
		t.responseEncoder.HttpBodyNamedBody(),
		http1.ServerBefore(httpx.EndpointInjector("/leo.example.route.body.Body/HttpBodyNamedBody")),
		http1.ServerBefore(httpx.ServerTransportInjector),
		http1.ServerBefore(httpx.IncomingMetadataInjector),
		http1.ServerBefore(httpx.IncomingTimeLimitInjector),
		http1.ServerBefore(httpx.IncomingStainInjector),
		http1.ServerFinalizer(httpx.CancelInvoker),
	)
}

func (t *bodyHttpServerTransports) HttpRequest() http.Handler {
	return http1.NewServer(
		t.endpoints.HttpRequest(context.TODO()),
		t.requestDecoder.HttpRequest(),
		t.responseEncoder.HttpRequest(),
		http1.ServerBefore(httpx.EndpointInjector("/leo.example.route.body.Body/HttpRequest")),
		http1.ServerBefore(httpx.ServerTransportInjector),
		http1.ServerBefore(httpx.IncomingMetadataInjector),
		http1.ServerBefore(httpx.IncomingTimeLimitInjector),
		http1.ServerBefore(httpx.IncomingStainInjector),
		http1.ServerFinalizer(httpx.CancelInvoker),
	)
}

type bodyHttpServerRequestDecoder struct {
	unmarshalOptions protojson.UnmarshalOptions
}

func (decoder bodyHttpServerRequestDecoder) StarBody() http1.DecodeRequestFunc {
	return func(ctx context.Context, r *http.Request) (any, error) {
		req := &BodyRequest{}
		if err := coder.DecodeRequestFromRequest(ctx, r, req, decoder.unmarshalOptions); err != nil {
			return nil, err
		}
		return req, nil
	}
}
func (decoder bodyHttpServerRequestDecoder) NamedBody() http1.DecodeRequestFunc {
	return func(ctx context.Context, r *http.Request) (any, error) {
		req := &BodyRequest{}
		if req.User == nil {
			req.User = &BodyRequest_User{}
		}
		if err := coder.DecodeRequestFromRequest(ctx, r, req.User, decoder.unmarshalOptions); err != nil {
			return nil, err
		}
		return req, nil
	}
}
func (decoder bodyHttpServerRequestDecoder) NonBody() http1.DecodeRequestFunc {
	return func(ctx context.Context, r *http.Request) (any, error) {
		req := &emptypb.Empty{}
		return req, nil
	}
}
func (decoder bodyHttpServerRequestDecoder) HttpBodyStarBody() http1.DecodeRequestFunc {
	return func(ctx context.Context, r *http.Request) (any, error) {
		req := &httpbody.HttpBody{}
		if err := coder.DecodeHttpBodyFromRequest(ctx, r, req); err != nil {
			return nil, err
		}
		return req, nil
	}
}
func (decoder bodyHttpServerRequestDecoder) HttpBodyNamedBody() http1.DecodeRequestFunc {
	return func(ctx context.Context, r *http.Request) (any, error) {
		req := &HttpBodyRequest{}
		if req.Body == nil {
			req.Body = &httpbody.HttpBody{}
		}
		if err := coder.DecodeHttpBodyFromRequest(ctx, r, req.Body); err != nil {
			return nil, err
		}
		return req, nil
	}
}
func (decoder bodyHttpServerRequestDecoder) HttpRequest() http1.DecodeRequestFunc {
	return func(ctx context.Context, r *http.Request) (any, error) {
		req := &http2.HttpRequest{}
		if err := coder.DecodeHttpRequestFromRequest(ctx, r, req); err != nil {
			return nil, err
		}
		return req, nil
	}
}

type bodyHttpServerResponseEncoder struct {
	marshalOptions      protojson.MarshalOptions
	unmarshalOptions    protojson.UnmarshalOptions
	responseTransformer coder.ResponseTransformer
}

func (encoder bodyHttpServerResponseEncoder) StarBody() http1.EncodeResponseFunc {
	return func(ctx context.Context, w http.ResponseWriter, obj any) error {
		resp := obj.(*emptypb.Empty)
		return coder.EncodeResponseToResponse(ctx, w, encoder.responseTransformer(ctx, resp), encoder.marshalOptions)
	}
}
func (encoder bodyHttpServerResponseEncoder) NamedBody() http1.EncodeResponseFunc {
	return func(ctx context.Context, w http.ResponseWriter, obj any) error {
		resp := obj.(*emptypb.Empty)
		return coder.EncodeResponseToResponse(ctx, w, encoder.responseTransformer(ctx, resp), encoder.marshalOptions)
	}
}
func (encoder bodyHttpServerResponseEncoder) NonBody() http1.EncodeResponseFunc {
	return func(ctx context.Context, w http.ResponseWriter, obj any) error {
		resp := obj.(*emptypb.Empty)
		return coder.EncodeResponseToResponse(ctx, w, encoder.responseTransformer(ctx, resp), encoder.marshalOptions)
	}
}
func (encoder bodyHttpServerResponseEncoder) HttpBodyStarBody() http1.EncodeResponseFunc {
	return func(ctx context.Context, w http.ResponseWriter, obj any) error {
		resp := obj.(*emptypb.Empty)
		return coder.EncodeResponseToResponse(ctx, w, encoder.responseTransformer(ctx, resp), encoder.marshalOptions)
	}
}
func (encoder bodyHttpServerResponseEncoder) HttpBodyNamedBody() http1.EncodeResponseFunc {
	return func(ctx context.Context, w http.ResponseWriter, obj any) error {
		resp := obj.(*emptypb.Empty)
		return coder.EncodeResponseToResponse(ctx, w, encoder.responseTransformer(ctx, resp), encoder.marshalOptions)
	}
}
func (encoder bodyHttpServerResponseEncoder) HttpRequest() http1.EncodeResponseFunc {
	return func(ctx context.Context, w http.ResponseWriter, obj any) error {
		resp := obj.(*emptypb.Empty)
		return coder.EncodeResponseToResponse(ctx, w, encoder.responseTransformer(ctx, resp), encoder.marshalOptions)
	}
}

type bodyHttpClientTransports struct {
	clientOptions   []http1.ClientOption
	middlewares     []endpoint.Middleware
	requestEncoder  BodyHttpClientRequestEncoder
	responseDecoder BodyHttpClientResponseDecoder
}

func (t *bodyHttpClientTransports) StarBody(ctx context.Context, instance string) (endpoint.Endpoint, io.Closer, error) {
	opts := []http1.ClientOption{
		http1.ClientBefore(httpx.OutgoingMetadataInjector),
		http1.ClientBefore(httpx.OutgoingTimeLimitInjector),
		http1.ClientBefore(httpx.OutgoingStainInjector),
	}
	opts = append(opts, t.clientOptions...)
	client := http1.NewExplicitClient(
		t.requestEncoder.StarBody(instance),
		t.responseDecoder.StarBody(),
		opts...,
	)
	return endpointx.Chain(client.Endpoint(), t.middlewares...), nil, nil
}

func (t *bodyHttpClientTransports) NamedBody(ctx context.Context, instance string) (endpoint.Endpoint, io.Closer, error) {
	opts := []http1.ClientOption{
		http1.ClientBefore(httpx.OutgoingMetadataInjector),
		http1.ClientBefore(httpx.OutgoingTimeLimitInjector),
		http1.ClientBefore(httpx.OutgoingStainInjector),
	}
	opts = append(opts, t.clientOptions...)
	client := http1.NewExplicitClient(
		t.requestEncoder.NamedBody(instance),
		t.responseDecoder.NamedBody(),
		opts...,
	)
	return endpointx.Chain(client.Endpoint(), t.middlewares...), nil, nil
}

func (t *bodyHttpClientTransports) NonBody(ctx context.Context, instance string) (endpoint.Endpoint, io.Closer, error) {
	opts := []http1.ClientOption{
		http1.ClientBefore(httpx.OutgoingMetadataInjector),
		http1.ClientBefore(httpx.OutgoingTimeLimitInjector),
		http1.ClientBefore(httpx.OutgoingStainInjector),
	}
	opts = append(opts, t.clientOptions...)
	client := http1.NewExplicitClient(
		t.requestEncoder.NonBody(instance),
		t.responseDecoder.NonBody(),
		opts...,
	)
	return endpointx.Chain(client.Endpoint(), t.middlewares...), nil, nil
}

func (t *bodyHttpClientTransports) HttpBodyStarBody(ctx context.Context, instance string) (endpoint.Endpoint, io.Closer, error) {
	opts := []http1.ClientOption{
		http1.ClientBefore(httpx.OutgoingMetadataInjector),
		http1.ClientBefore(httpx.OutgoingTimeLimitInjector),
		http1.ClientBefore(httpx.OutgoingStainInjector),
	}
	opts = append(opts, t.clientOptions...)
	client := http1.NewExplicitClient(
		t.requestEncoder.HttpBodyStarBody(instance),
		t.responseDecoder.HttpBodyStarBody(),
		opts...,
	)
	return endpointx.Chain(client.Endpoint(), t.middlewares...), nil, nil
}

func (t *bodyHttpClientTransports) HttpBodyNamedBody(ctx context.Context, instance string) (endpoint.Endpoint, io.Closer, error) {
	opts := []http1.ClientOption{
		http1.ClientBefore(httpx.OutgoingMetadataInjector),
		http1.ClientBefore(httpx.OutgoingTimeLimitInjector),
		http1.ClientBefore(httpx.OutgoingStainInjector),
	}
	opts = append(opts, t.clientOptions...)
	client := http1.NewExplicitClient(
		t.requestEncoder.HttpBodyNamedBody(instance),
		t.responseDecoder.HttpBodyNamedBody(),
		opts...,
	)
	return endpointx.Chain(client.Endpoint(), t.middlewares...), nil, nil
}

func (t *bodyHttpClientTransports) HttpRequest(ctx context.Context, instance string) (endpoint.Endpoint, io.Closer, error) {
	opts := []http1.ClientOption{
		http1.ClientBefore(httpx.OutgoingMetadataInjector),
		http1.ClientBefore(httpx.OutgoingTimeLimitInjector),
		http1.ClientBefore(httpx.OutgoingStainInjector),
	}
	opts = append(opts, t.clientOptions...)
	client := http1.NewExplicitClient(
		t.requestEncoder.HttpRequest(instance),
		t.responseDecoder.HttpRequest(),
		opts...,
	)
	return endpointx.Chain(client.Endpoint(), t.middlewares...), nil, nil
}

type bodyHttpClientRequestEncoder struct {
	router *mux.Router
	scheme string
}

func (e bodyHttpClientRequestEncoder) StarBody(instance string) http1.CreateRequestFunc {
	return func(ctx context.Context, obj any) (*http.Request, error) {
		if obj == nil {
			return nil, errors.New("request is nil")
		}
		req, ok := obj.(*BodyRequest)
		if !ok {
			return nil, fmt.Errorf("invalid request type, %T", obj)
		}
		_ = req
		var body io.Reader
		var bodyBuf bytes.Buffer
		if err := jsonx.NewEncoder(&bodyBuf).Encode(req); err != nil {
			return nil, err
		}
		body = &bodyBuf
		contentType := "application/json; charset=utf-8"
		var pairs []string
		path, err := e.router.Get("/leo.example.route.body.Body/StarBody").URLPath(pairs...)
		if err != nil {
			return nil, err
		}
		queries := url.Values{}
		target := &url.URL{
			Scheme:   e.scheme,
			Host:     instance,
			Path:     path.Path,
			RawQuery: queries.Encode(),
		}
		r, err := http.NewRequestWithContext(ctx, "POST", target.String(), body)
		if err != nil {
			return nil, err
		}
		r.Header.Set("Content-Type", contentType)
		return r, nil
	}
}
func (e bodyHttpClientRequestEncoder) NamedBody(instance string) http1.CreateRequestFunc {
	return func(ctx context.Context, obj any) (*http.Request, error) {
		if obj == nil {
			return nil, errors.New("request is nil")
		}
		req, ok := obj.(*BodyRequest)
		if !ok {
			return nil, fmt.Errorf("invalid request type, %T", obj)
		}
		_ = req
		var body io.Reader
		var bodyBuf bytes.Buffer
		if err := jsonx.NewEncoder(&bodyBuf).Encode(req.GetUser()); err != nil {
			return nil, err
		}
		body = &bodyBuf
		contentType := "application/json; charset=utf-8"
		var pairs []string
		path, err := e.router.Get("/leo.example.route.body.Body/NamedBody").URLPath(pairs...)
		if err != nil {
			return nil, err
		}
		queries := url.Values{}
		target := &url.URL{
			Scheme:   e.scheme,
			Host:     instance,
			Path:     path.Path,
			RawQuery: queries.Encode(),
		}
		r, err := http.NewRequestWithContext(ctx, "POST", target.String(), body)
		if err != nil {
			return nil, err
		}
		r.Header.Set("Content-Type", contentType)
		return r, nil
	}
}
func (e bodyHttpClientRequestEncoder) NonBody(instance string) http1.CreateRequestFunc {
	return func(ctx context.Context, obj any) (*http.Request, error) {
		if obj == nil {
			return nil, errors.New("request is nil")
		}
		req, ok := obj.(*emptypb.Empty)
		if !ok {
			return nil, fmt.Errorf("invalid request type, %T", obj)
		}
		_ = req
		var body io.Reader
		var pairs []string
		path, err := e.router.Get("/leo.example.route.body.Body/NonBody").URLPath(pairs...)
		if err != nil {
			return nil, err
		}
		queries := url.Values{}
		target := &url.URL{
			Scheme:   e.scheme,
			Host:     instance,
			Path:     path.Path,
			RawQuery: queries.Encode(),
		}
		r, err := http.NewRequestWithContext(ctx, "GET", target.String(), body)
		if err != nil {
			return nil, err
		}
		return r, nil
	}
}
func (e bodyHttpClientRequestEncoder) HttpBodyStarBody(instance string) http1.CreateRequestFunc {
	return func(ctx context.Context, obj any) (*http.Request, error) {
		if obj == nil {
			return nil, errors.New("request is nil")
		}
		req, ok := obj.(*httpbody.HttpBody)
		if !ok {
			return nil, fmt.Errorf("invalid request type, %T", obj)
		}
		_ = req
		var body io.Reader
		body = bytes.NewReader(req.GetData())
		contentType := req.GetContentType()
		var pairs []string
		path, err := e.router.Get("/leo.example.route.body.Body/HttpBodyStarBody").URLPath(pairs...)
		if err != nil {
			return nil, err
		}
		queries := url.Values{}
		target := &url.URL{
			Scheme:   e.scheme,
			Host:     instance,
			Path:     path.Path,
			RawQuery: queries.Encode(),
		}
		r, err := http.NewRequestWithContext(ctx, "PUT", target.String(), body)
		if err != nil {
			return nil, err
		}
		r.Header.Set("Content-Type", contentType)
		return r, nil
	}
}
func (e bodyHttpClientRequestEncoder) HttpBodyNamedBody(instance string) http1.CreateRequestFunc {
	return func(ctx context.Context, obj any) (*http.Request, error) {
		if obj == nil {
			return nil, errors.New("request is nil")
		}
		req, ok := obj.(*HttpBodyRequest)
		if !ok {
			return nil, fmt.Errorf("invalid request type, %T", obj)
		}
		_ = req
		var body io.Reader
		body = bytes.NewReader(req.GetBody().GetData())
		contentType := req.GetBody().GetContentType()
		var pairs []string
		path, err := e.router.Get("/leo.example.route.body.Body/HttpBodyNamedBody").URLPath(pairs...)
		if err != nil {
			return nil, err
		}
		queries := url.Values{}
		target := &url.URL{
			Scheme:   e.scheme,
			Host:     instance,
			Path:     path.Path,
			RawQuery: queries.Encode(),
		}
		r, err := http.NewRequestWithContext(ctx, "PUT", target.String(), body)
		if err != nil {
			return nil, err
		}
		r.Header.Set("Content-Type", contentType)
		return r, nil
	}
}
func (e bodyHttpClientRequestEncoder) HttpRequest(instance string) http1.CreateRequestFunc {
	return func(ctx context.Context, obj any) (*http.Request, error) {
		if obj == nil {
			return nil, errors.New("request is nil")
		}
		req, ok := obj.(*http2.HttpRequest)
		if !ok {
			return nil, fmt.Errorf("invalid request type, %T", obj)
		}
		_ = req
		var body io.Reader
		var bodyBuf bytes.Buffer
		if err := jsonx.NewEncoder(&bodyBuf).Encode(req); err != nil {
			return nil, err
		}
		body = &bodyBuf
		contentType := "application/json; charset=utf-8"
		var pairs []string
		path, err := e.router.Get("/leo.example.route.body.Body/HttpRequest").URLPath(pairs...)
		if err != nil {
			return nil, err
		}
		queries := url.Values{}
		target := &url.URL{
			Scheme:   e.scheme,
			Host:     instance,
			Path:     path.Path,
			RawQuery: queries.Encode(),
		}
		r, err := http.NewRequestWithContext(ctx, "PUT", target.String(), body)
		if err != nil {
			return nil, err
		}
		r.Header.Set("Content-Type", contentType)
		return r, nil
	}
}

type bodyHttpClientResponseDecoder struct {
	marshalOptions      protojson.MarshalOptions
	unmarshalOptions    protojson.UnmarshalOptions
	responseTransformer coder.ResponseTransformer
}

func (decoder bodyHttpClientResponseDecoder) StarBody() http1.DecodeResponseFunc {
	return func(ctx context.Context, r *http.Response) (any, error) {
		resp := &emptypb.Empty{}
		if err := coder.DecodeResponseFromResponse(ctx, r, resp, decoder.unmarshalOptions); err != nil {
			return nil, err
		}
		return resp, nil
	}
}
func (decoder bodyHttpClientResponseDecoder) NamedBody() http1.DecodeResponseFunc {
	return func(ctx context.Context, r *http.Response) (any, error) {
		resp := &emptypb.Empty{}
		if err := coder.DecodeResponseFromResponse(ctx, r, resp, decoder.unmarshalOptions); err != nil {
			return nil, err
		}
		return resp, nil
	}
}
func (decoder bodyHttpClientResponseDecoder) NonBody() http1.DecodeResponseFunc {
	return func(ctx context.Context, r *http.Response) (any, error) {
		resp := &emptypb.Empty{}
		if err := coder.DecodeResponseFromResponse(ctx, r, resp, decoder.unmarshalOptions); err != nil {
			return nil, err
		}
		return resp, nil
	}
}
func (decoder bodyHttpClientResponseDecoder) HttpBodyStarBody() http1.DecodeResponseFunc {
	return func(ctx context.Context, r *http.Response) (any, error) {
		resp := &emptypb.Empty{}
		if err := coder.DecodeResponseFromResponse(ctx, r, resp, decoder.unmarshalOptions); err != nil {
			return nil, err
		}
		return resp, nil
	}
}
func (decoder bodyHttpClientResponseDecoder) HttpBodyNamedBody() http1.DecodeResponseFunc {
	return func(ctx context.Context, r *http.Response) (any, error) {
		resp := &emptypb.Empty{}
		if err := coder.DecodeResponseFromResponse(ctx, r, resp, decoder.unmarshalOptions); err != nil {
			return nil, err
		}
		return resp, nil
	}
}
func (decoder bodyHttpClientResponseDecoder) HttpRequest() http1.DecodeResponseFunc {
	return func(ctx context.Context, r *http.Response) (any, error) {
		resp := &emptypb.Empty{}
		if err := coder.DecodeResponseFromResponse(ctx, r, resp, decoder.unmarshalOptions); err != nil {
			return nil, err
		}
		return resp, nil
	}
}
