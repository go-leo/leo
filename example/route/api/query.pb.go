// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.24.3
// source: api/query.proto

package api

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type EnumQueryRequest_Status int32

const (
	EnumQueryRequest_UNKNOWN       EnumQueryRequest_Status = 0
	EnumQueryRequest_OK            EnumQueryRequest_Status = 1
	EnumQueryRequest_CANCELLED     EnumQueryRequest_Status = 2
	EnumQueryRequest_UNKNOWN_ERROR EnumQueryRequest_Status = 3
)

// Enum value maps for EnumQueryRequest_Status.
var (
	EnumQueryRequest_Status_name = map[int32]string{
		0: "UNKNOWN",
		1: "OK",
		2: "CANCELLED",
		3: "UNKNOWN_ERROR",
	}
	EnumQueryRequest_Status_value = map[string]int32{
		"UNKNOWN":       0,
		"OK":            1,
		"CANCELLED":     2,
		"UNKNOWN_ERROR": 3,
	}
)

func (x EnumQueryRequest_Status) Enum() *EnumQueryRequest_Status {
	p := new(EnumQueryRequest_Status)
	*p = x
	return p
}

func (x EnumQueryRequest_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EnumQueryRequest_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_api_query_proto_enumTypes[0].Descriptor()
}

func (EnumQueryRequest_Status) Type() protoreflect.EnumType {
	return &file_api_query_proto_enumTypes[0]
}

func (x EnumQueryRequest_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EnumQueryRequest_Status.Descriptor instead.
func (EnumQueryRequest_Status) EnumDescriptor() ([]byte, []int) {
	return file_api_query_proto_rawDescGZIP(), []int{8, 0}
}

type BoolQueryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bool     bool                  `protobuf:"varint,2,opt,name=bool,proto3" json:"bool,omitempty"`
	OptBool  *bool                 `protobuf:"varint,22,opt,name=opt_bool,json=optBool,proto3,oneof" json:"opt_bool,omitempty"`
	WrapBool *wrapperspb.BoolValue `protobuf:"bytes,48,opt,name=wrap_bool,json=wrapBool,proto3" json:"wrap_bool,omitempty"`
}

func (x *BoolQueryRequest) Reset() {
	*x = BoolQueryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_query_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BoolQueryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BoolQueryRequest) ProtoMessage() {}

func (x *BoolQueryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_query_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BoolQueryRequest.ProtoReflect.Descriptor instead.
func (*BoolQueryRequest) Descriptor() ([]byte, []int) {
	return file_api_query_proto_rawDescGZIP(), []int{0}
}

func (x *BoolQueryRequest) GetBool() bool {
	if x != nil {
		return x.Bool
	}
	return false
}

func (x *BoolQueryRequest) GetOptBool() bool {
	if x != nil && x.OptBool != nil {
		return *x.OptBool
	}
	return false
}

func (x *BoolQueryRequest) GetWrapBool() *wrapperspb.BoolValue {
	if x != nil {
		return x.WrapBool
	}
	return nil
}

type Int32QueryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Int32       int32                  `protobuf:"varint,3,opt,name=int32,proto3" json:"int32,omitempty"`
	Sint32      int32                  `protobuf:"zigzag32,4,opt,name=sint32,proto3" json:"sint32,omitempty"`
	Sfixed32    int32                  `protobuf:"fixed32,10,opt,name=sfixed32,proto3" json:"sfixed32,omitempty"`
	OptInt32    *int32                 `protobuf:"varint,23,opt,name=opt_int32,json=optInt32,proto3,oneof" json:"opt_int32,omitempty"`
	OptSint32   *int32                 `protobuf:"zigzag32,24,opt,name=opt_sint32,json=optSint32,proto3,oneof" json:"opt_sint32,omitempty"`
	OptSfixed32 *int32                 `protobuf:"fixed32,30,opt,name=opt_sfixed32,json=optSfixed32,proto3,oneof" json:"opt_sfixed32,omitempty"`
	WrapInt32   *wrapperspb.Int32Value `protobuf:"bytes,46,opt,name=wrap_int32,json=wrapInt32,proto3" json:"wrap_int32,omitempty"`
}

func (x *Int32QueryRequest) Reset() {
	*x = Int32QueryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_query_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Int32QueryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Int32QueryRequest) ProtoMessage() {}

func (x *Int32QueryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_query_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Int32QueryRequest.ProtoReflect.Descriptor instead.
func (*Int32QueryRequest) Descriptor() ([]byte, []int) {
	return file_api_query_proto_rawDescGZIP(), []int{1}
}

func (x *Int32QueryRequest) GetInt32() int32 {
	if x != nil {
		return x.Int32
	}
	return 0
}

func (x *Int32QueryRequest) GetSint32() int32 {
	if x != nil {
		return x.Sint32
	}
	return 0
}

func (x *Int32QueryRequest) GetSfixed32() int32 {
	if x != nil {
		return x.Sfixed32
	}
	return 0
}

func (x *Int32QueryRequest) GetOptInt32() int32 {
	if x != nil && x.OptInt32 != nil {
		return *x.OptInt32
	}
	return 0
}

func (x *Int32QueryRequest) GetOptSint32() int32 {
	if x != nil && x.OptSint32 != nil {
		return *x.OptSint32
	}
	return 0
}

func (x *Int32QueryRequest) GetOptSfixed32() int32 {
	if x != nil && x.OptSfixed32 != nil {
		return *x.OptSfixed32
	}
	return 0
}

func (x *Int32QueryRequest) GetWrapInt32() *wrapperspb.Int32Value {
	if x != nil {
		return x.WrapInt32
	}
	return nil
}

type Int64QueryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Int64       int64                  `protobuf:"varint,7,opt,name=int64,proto3" json:"int64,omitempty"`
	Sint64      int64                  `protobuf:"zigzag64,8,opt,name=sint64,proto3" json:"sint64,omitempty"`
	Sfixed64    int64                  `protobuf:"fixed64,13,opt,name=sfixed64,proto3" json:"sfixed64,omitempty"`
	OptInt64    *int64                 `protobuf:"varint,27,opt,name=opt_int64,json=optInt64,proto3,oneof" json:"opt_int64,omitempty"`
	OptSint64   *int64                 `protobuf:"zigzag64,28,opt,name=opt_sint64,json=optSint64,proto3,oneof" json:"opt_sint64,omitempty"`
	OptSfixed64 *int64                 `protobuf:"fixed64,33,opt,name=opt_sfixed64,json=optSfixed64,proto3,oneof" json:"opt_sfixed64,omitempty"`
	WrapInt64   *wrapperspb.Int64Value `protobuf:"bytes,44,opt,name=wrap_int64,json=wrapInt64,proto3" json:"wrap_int64,omitempty"`
}

func (x *Int64QueryRequest) Reset() {
	*x = Int64QueryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_query_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Int64QueryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Int64QueryRequest) ProtoMessage() {}

func (x *Int64QueryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_query_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Int64QueryRequest.ProtoReflect.Descriptor instead.
func (*Int64QueryRequest) Descriptor() ([]byte, []int) {
	return file_api_query_proto_rawDescGZIP(), []int{2}
}

func (x *Int64QueryRequest) GetInt64() int64 {
	if x != nil {
		return x.Int64
	}
	return 0
}

func (x *Int64QueryRequest) GetSint64() int64 {
	if x != nil {
		return x.Sint64
	}
	return 0
}

func (x *Int64QueryRequest) GetSfixed64() int64 {
	if x != nil {
		return x.Sfixed64
	}
	return 0
}

func (x *Int64QueryRequest) GetOptInt64() int64 {
	if x != nil && x.OptInt64 != nil {
		return *x.OptInt64
	}
	return 0
}

func (x *Int64QueryRequest) GetOptSint64() int64 {
	if x != nil && x.OptSint64 != nil {
		return *x.OptSint64
	}
	return 0
}

func (x *Int64QueryRequest) GetOptSfixed64() int64 {
	if x != nil && x.OptSfixed64 != nil {
		return *x.OptSfixed64
	}
	return 0
}

func (x *Int64QueryRequest) GetWrapInt64() *wrapperspb.Int64Value {
	if x != nil {
		return x.WrapInt64
	}
	return nil
}

type Uint32QueryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uint32     uint32                  `protobuf:"varint,6,opt,name=uint32,proto3" json:"uint32,omitempty"`
	Fixed32    uint32                  `protobuf:"fixed32,11,opt,name=fixed32,proto3" json:"fixed32,omitempty"`
	OptUint32  *uint32                 `protobuf:"varint,26,opt,name=opt_uint32,json=optUint32,proto3,oneof" json:"opt_uint32,omitempty"`
	OptFixed32 *uint32                 `protobuf:"fixed32,31,opt,name=opt_fixed32,json=optFixed32,proto3,oneof" json:"opt_fixed32,omitempty"`
	WrapUint32 *wrapperspb.UInt32Value `protobuf:"bytes,47,opt,name=wrap_uint32,json=wrapUint32,proto3" json:"wrap_uint32,omitempty"`
}

func (x *Uint32QueryRequest) Reset() {
	*x = Uint32QueryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_query_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Uint32QueryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Uint32QueryRequest) ProtoMessage() {}

func (x *Uint32QueryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_query_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Uint32QueryRequest.ProtoReflect.Descriptor instead.
func (*Uint32QueryRequest) Descriptor() ([]byte, []int) {
	return file_api_query_proto_rawDescGZIP(), []int{3}
}

func (x *Uint32QueryRequest) GetUint32() uint32 {
	if x != nil {
		return x.Uint32
	}
	return 0
}

func (x *Uint32QueryRequest) GetFixed32() uint32 {
	if x != nil {
		return x.Fixed32
	}
	return 0
}

func (x *Uint32QueryRequest) GetOptUint32() uint32 {
	if x != nil && x.OptUint32 != nil {
		return *x.OptUint32
	}
	return 0
}

func (x *Uint32QueryRequest) GetOptFixed32() uint32 {
	if x != nil && x.OptFixed32 != nil {
		return *x.OptFixed32
	}
	return 0
}

func (x *Uint32QueryRequest) GetWrapUint32() *wrapperspb.UInt32Value {
	if x != nil {
		return x.WrapUint32
	}
	return nil
}

type Uint64QueryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uint64     uint64                  `protobuf:"varint,9,opt,name=uint64,proto3" json:"uint64,omitempty"`
	Fixed64    uint64                  `protobuf:"fixed64,14,opt,name=fixed64,proto3" json:"fixed64,omitempty"`
	OptUint64  *uint64                 `protobuf:"varint,29,opt,name=opt_uint64,json=optUint64,proto3,oneof" json:"opt_uint64,omitempty"`
	OptFixed64 *uint64                 `protobuf:"fixed64,34,opt,name=opt_fixed64,json=optFixed64,proto3,oneof" json:"opt_fixed64,omitempty"`
	WrapUint64 *wrapperspb.UInt64Value `protobuf:"bytes,45,opt,name=wrap_uint64,json=wrapUint64,proto3" json:"wrap_uint64,omitempty"`
}

func (x *Uint64QueryRequest) Reset() {
	*x = Uint64QueryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_query_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Uint64QueryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Uint64QueryRequest) ProtoMessage() {}

func (x *Uint64QueryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_query_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Uint64QueryRequest.ProtoReflect.Descriptor instead.
func (*Uint64QueryRequest) Descriptor() ([]byte, []int) {
	return file_api_query_proto_rawDescGZIP(), []int{4}
}

func (x *Uint64QueryRequest) GetUint64() uint64 {
	if x != nil {
		return x.Uint64
	}
	return 0
}

func (x *Uint64QueryRequest) GetFixed64() uint64 {
	if x != nil {
		return x.Fixed64
	}
	return 0
}

func (x *Uint64QueryRequest) GetOptUint64() uint64 {
	if x != nil && x.OptUint64 != nil {
		return *x.OptUint64
	}
	return 0
}

func (x *Uint64QueryRequest) GetOptFixed64() uint64 {
	if x != nil && x.OptFixed64 != nil {
		return *x.OptFixed64
	}
	return 0
}

func (x *Uint64QueryRequest) GetWrapUint64() *wrapperspb.UInt64Value {
	if x != nil {
		return x.WrapUint64
	}
	return nil
}

type FloatQueryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Float     float32                `protobuf:"fixed32,12,opt,name=float,proto3" json:"float,omitempty"`
	OptFloat  *float32               `protobuf:"fixed32,32,opt,name=opt_float,json=optFloat,proto3,oneof" json:"opt_float,omitempty"`
	WrapFloat *wrapperspb.FloatValue `protobuf:"bytes,43,opt,name=wrap_float,json=wrapFloat,proto3" json:"wrap_float,omitempty"`
}

func (x *FloatQueryRequest) Reset() {
	*x = FloatQueryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_query_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FloatQueryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FloatQueryRequest) ProtoMessage() {}

func (x *FloatQueryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_query_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FloatQueryRequest.ProtoReflect.Descriptor instead.
func (*FloatQueryRequest) Descriptor() ([]byte, []int) {
	return file_api_query_proto_rawDescGZIP(), []int{5}
}

func (x *FloatQueryRequest) GetFloat() float32 {
	if x != nil {
		return x.Float
	}
	return 0
}

func (x *FloatQueryRequest) GetOptFloat() float32 {
	if x != nil && x.OptFloat != nil {
		return *x.OptFloat
	}
	return 0
}

func (x *FloatQueryRequest) GetWrapFloat() *wrapperspb.FloatValue {
	if x != nil {
		return x.WrapFloat
	}
	return nil
}

type DoubleQueryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Double     float64                 `protobuf:"fixed64,15,opt,name=double,proto3" json:"double,omitempty"`
	OptDouble  *float64                `protobuf:"fixed64,35,opt,name=opt_double,json=optDouble,proto3,oneof" json:"opt_double,omitempty"`
	WrapDouble *wrapperspb.DoubleValue `protobuf:"bytes,42,opt,name=wrap_double,json=wrapDouble,proto3" json:"wrap_double,omitempty"`
}

func (x *DoubleQueryRequest) Reset() {
	*x = DoubleQueryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_query_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DoubleQueryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DoubleQueryRequest) ProtoMessage() {}

func (x *DoubleQueryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_query_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DoubleQueryRequest.ProtoReflect.Descriptor instead.
func (*DoubleQueryRequest) Descriptor() ([]byte, []int) {
	return file_api_query_proto_rawDescGZIP(), []int{6}
}

func (x *DoubleQueryRequest) GetDouble() float64 {
	if x != nil {
		return x.Double
	}
	return 0
}

func (x *DoubleQueryRequest) GetOptDouble() float64 {
	if x != nil && x.OptDouble != nil {
		return *x.OptDouble
	}
	return 0
}

func (x *DoubleQueryRequest) GetWrapDouble() *wrapperspb.DoubleValue {
	if x != nil {
		return x.WrapDouble
	}
	return nil
}

type StringQueryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	String_    string                  `protobuf:"bytes,16,opt,name=string,proto3" json:"string,omitempty"`
	OptString  *string                 `protobuf:"bytes,36,opt,name=opt_string,json=optString,proto3,oneof" json:"opt_string,omitempty"`
	WrapString *wrapperspb.StringValue `protobuf:"bytes,49,opt,name=wrap_string,json=wrapString,proto3" json:"wrap_string,omitempty"`
}

func (x *StringQueryRequest) Reset() {
	*x = StringQueryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_query_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StringQueryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StringQueryRequest) ProtoMessage() {}

func (x *StringQueryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_query_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StringQueryRequest.ProtoReflect.Descriptor instead.
func (*StringQueryRequest) Descriptor() ([]byte, []int) {
	return file_api_query_proto_rawDescGZIP(), []int{7}
}

func (x *StringQueryRequest) GetString_() string {
	if x != nil {
		return x.String_
	}
	return ""
}

func (x *StringQueryRequest) GetOptString() string {
	if x != nil && x.OptString != nil {
		return *x.OptString
	}
	return ""
}

func (x *StringQueryRequest) GetWrapString() *wrapperspb.StringValue {
	if x != nil {
		return x.WrapString
	}
	return nil
}

type EnumQueryRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status    EnumQueryRequest_Status  `protobuf:"varint,68,opt,name=status,proto3,enum=leo.example.route.query.EnumQueryRequest_Status" json:"status,omitempty"`
	OptStatus *EnumQueryRequest_Status `protobuf:"varint,69,opt,name=opt_status,json=optStatus,proto3,enum=leo.example.route.query.EnumQueryRequest_Status,oneof" json:"opt_status,omitempty"`
}

func (x *EnumQueryRequest) Reset() {
	*x = EnumQueryRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_query_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnumQueryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnumQueryRequest) ProtoMessage() {}

func (x *EnumQueryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_query_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnumQueryRequest.ProtoReflect.Descriptor instead.
func (*EnumQueryRequest) Descriptor() ([]byte, []int) {
	return file_api_query_proto_rawDescGZIP(), []int{8}
}

func (x *EnumQueryRequest) GetStatus() EnumQueryRequest_Status {
	if x != nil {
		return x.Status
	}
	return EnumQueryRequest_UNKNOWN
}

func (x *EnumQueryRequest) GetOptStatus() EnumQueryRequest_Status {
	if x != nil && x.OptStatus != nil {
		return *x.OptStatus
	}
	return EnumQueryRequest_UNKNOWN
}

var File_api_query_proto protoreflect.FileDescriptor

var file_api_query_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x61, 0x70, 0x69, 0x2f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x17, 0x6c, 0x65, 0x6f, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74,
	0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8c, 0x01, 0x0a, 0x10, 0x42, 0x6f, 0x6f, 0x6c, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x6f,
	0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x62, 0x6f, 0x6f, 0x6c, 0x12, 0x1e,
	0x0a, 0x08, 0x6f, 0x70, 0x74, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x18, 0x16, 0x20, 0x01, 0x28, 0x08,
	0x48, 0x00, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x42, 0x6f, 0x6f, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x37,
	0x0a, 0x09, 0x77, 0x72, 0x61, 0x70, 0x5f, 0x62, 0x6f, 0x6f, 0x6c, 0x18, 0x30, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x77,
	0x72, 0x61, 0x70, 0x42, 0x6f, 0x6f, 0x6c, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6f, 0x70, 0x74, 0x5f,
	0x62, 0x6f, 0x6f, 0x6c, 0x22, 0xb5, 0x02, 0x0a, 0x11, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e,
	0x74, 0x33, 0x32, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69, 0x6e, 0x74, 0x33, 0x32,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x04, 0x20, 0x01, 0x28, 0x11,
	0x52, 0x06, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x66, 0x69, 0x78,
	0x65, 0x64, 0x33, 0x32, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0f, 0x52, 0x08, 0x73, 0x66, 0x69, 0x78,
	0x65, 0x64, 0x33, 0x32, 0x12, 0x20, 0x0a, 0x09, 0x6f, 0x70, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x33,
	0x32, 0x18, 0x17, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x08, 0x6f, 0x70, 0x74, 0x49, 0x6e,
	0x74, 0x33, 0x32, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x6f, 0x70, 0x74, 0x5f, 0x73, 0x69,
	0x6e, 0x74, 0x33, 0x32, 0x18, 0x18, 0x20, 0x01, 0x28, 0x11, 0x48, 0x01, 0x52, 0x09, 0x6f, 0x70,
	0x74, 0x53, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x6f, 0x70,
	0x74, 0x5f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0f,
	0x48, 0x02, 0x52, 0x0b, 0x6f, 0x70, 0x74, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x88,
	0x01, 0x01, 0x12, 0x3a, 0x0a, 0x0a, 0x77, 0x72, 0x61, 0x70, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32,
	0x18, 0x2e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x09, 0x77, 0x72, 0x61, 0x70, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x42, 0x0c,
	0x0a, 0x0a, 0x5f, 0x6f, 0x70, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x42, 0x0d, 0x0a, 0x0b,
	0x5f, 0x6f, 0x70, 0x74, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x42, 0x0f, 0x0a, 0x0d, 0x5f,
	0x6f, 0x70, 0x74, 0x5f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x22, 0xb5, 0x02, 0x0a,
	0x11, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x05, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x69, 0x6e, 0x74,
	0x36, 0x34, 0x18, 0x08, 0x20, 0x01, 0x28, 0x12, 0x52, 0x06, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34,
	0x12, 0x1a, 0x0a, 0x08, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x10, 0x52, 0x08, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x12, 0x20, 0x0a, 0x09,
	0x6f, 0x70, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x03, 0x48,
	0x00, 0x52, 0x08, 0x6f, 0x70, 0x74, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x88, 0x01, 0x01, 0x12, 0x22,
	0x0a, 0x0a, 0x6f, 0x70, 0x74, 0x5f, 0x73, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x1c, 0x20, 0x01,
	0x28, 0x12, 0x48, 0x01, 0x52, 0x09, 0x6f, 0x70, 0x74, 0x53, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x88,
	0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x6f, 0x70, 0x74, 0x5f, 0x73, 0x66, 0x69, 0x78, 0x65, 0x64,
	0x36, 0x34, 0x18, 0x21, 0x20, 0x01, 0x28, 0x10, 0x48, 0x02, 0x52, 0x0b, 0x6f, 0x70, 0x74, 0x53,
	0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x88, 0x01, 0x01, 0x12, 0x3a, 0x0a, 0x0a, 0x77, 0x72,
	0x61, 0x70, 0x5f, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x77, 0x72, 0x61,
	0x70, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6f, 0x70, 0x74, 0x5f, 0x69,
	0x6e, 0x74, 0x36, 0x34, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6f, 0x70, 0x74, 0x5f, 0x73, 0x69, 0x6e,
	0x74, 0x36, 0x34, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6f, 0x70, 0x74, 0x5f, 0x73, 0x66, 0x69, 0x78,
	0x65, 0x64, 0x36, 0x34, 0x22, 0xee, 0x01, 0x0a, 0x12, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x75,
	0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x75, 0x69, 0x6e,
	0x74, 0x33, 0x32, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x07, 0x52, 0x07, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x12, 0x22, 0x0a,
	0x0a, 0x6f, 0x70, 0x74, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x1a, 0x20, 0x01, 0x28,
	0x0d, 0x48, 0x00, 0x52, 0x09, 0x6f, 0x70, 0x74, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x88, 0x01,
	0x01, 0x12, 0x24, 0x0a, 0x0b, 0x6f, 0x70, 0x74, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32,
	0x18, 0x1f, 0x20, 0x01, 0x28, 0x07, 0x48, 0x01, 0x52, 0x0a, 0x6f, 0x70, 0x74, 0x46, 0x69, 0x78,
	0x65, 0x64, 0x33, 0x32, 0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a, 0x0b, 0x77, 0x72, 0x61, 0x70, 0x5f,
	0x75, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55,
	0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x77, 0x72, 0x61, 0x70,
	0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6f, 0x70, 0x74, 0x5f, 0x75,
	0x69, 0x6e, 0x74, 0x33, 0x32, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6f, 0x70, 0x74, 0x5f, 0x66, 0x69,
	0x78, 0x65, 0x64, 0x33, 0x32, 0x22, 0xee, 0x01, 0x0a, 0x12, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x75, 0x69,
	0x6e, 0x74, 0x36, 0x34, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x06, 0x52, 0x07, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x12, 0x22,
	0x0a, 0x0a, 0x6f, 0x70, 0x74, 0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x1d, 0x20, 0x01,
	0x28, 0x04, 0x48, 0x00, 0x52, 0x09, 0x6f, 0x70, 0x74, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x88,
	0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x6f, 0x70, 0x74, 0x5f, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36,
	0x34, 0x18, 0x22, 0x20, 0x01, 0x28, 0x06, 0x48, 0x01, 0x52, 0x0a, 0x6f, 0x70, 0x74, 0x46, 0x69,
	0x78, 0x65, 0x64, 0x36, 0x34, 0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a, 0x0b, 0x77, 0x72, 0x61, 0x70,
	0x5f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x77, 0x72, 0x61,
	0x70, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6f, 0x70, 0x74, 0x5f,
	0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6f, 0x70, 0x74, 0x5f, 0x66,
	0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x22, 0x95, 0x01, 0x0a, 0x11, 0x46, 0x6c, 0x6f, 0x61, 0x74,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x66, 0x6c, 0x6f,
	0x61, 0x74, 0x12, 0x20, 0x0a, 0x09, 0x6f, 0x70, 0x74, 0x5f, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x18,
	0x20, 0x20, 0x01, 0x28, 0x02, 0x48, 0x00, 0x52, 0x08, 0x6f, 0x70, 0x74, 0x46, 0x6c, 0x6f, 0x61,
	0x74, 0x88, 0x01, 0x01, 0x12, 0x3a, 0x0a, 0x0a, 0x77, 0x72, 0x61, 0x70, 0x5f, 0x66, 0x6c, 0x6f,
	0x61, 0x74, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x77, 0x72, 0x61, 0x70, 0x46, 0x6c, 0x6f, 0x61, 0x74,
	0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x6f, 0x70, 0x74, 0x5f, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x22, 0x9e,
	0x01, 0x0a, 0x12, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x12, 0x22, 0x0a,
	0x0a, 0x6f, 0x70, 0x74, 0x5f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x18, 0x23, 0x20, 0x01, 0x28,
	0x01, 0x48, 0x00, 0x52, 0x09, 0x6f, 0x70, 0x74, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x3d, 0x0a, 0x0b, 0x77, 0x72, 0x61, 0x70, 0x5f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65,
	0x18, 0x2a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x77, 0x72, 0x61, 0x70, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65,
	0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6f, 0x70, 0x74, 0x5f, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x22,
	0x9e, 0x01, 0x0a, 0x12, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x22,
	0x0a, 0x0a, 0x6f, 0x70, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x24, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x09, 0x6f, 0x70, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x88,
	0x01, 0x01, 0x12, 0x3d, 0x0a, 0x0b, 0x77, 0x72, 0x61, 0x70, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x18, 0x31, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x77, 0x72, 0x61, 0x70, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6f, 0x70, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x22, 0x82, 0x02, 0x0a, 0x10, 0x45, 0x6e, 0x75, 0x6d, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x48, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x44, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x6c, 0x65, 0x6f, 0x2e, 0x65, 0x78, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e,
	0x45, 0x6e, 0x75, 0x6d, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x54, 0x0a, 0x0a, 0x6f, 0x70, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x45, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x6c, 0x65, 0x6f, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x45, 0x6e,
	0x75, 0x6d, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x48, 0x00, 0x52, 0x09, 0x6f, 0x70, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x88, 0x01, 0x01, 0x22, 0x3f, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x06, 0x0a, 0x02,
	0x4f, 0x4b, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x45,
	0x44, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x45,
	0x52, 0x52, 0x4f, 0x52, 0x10, 0x03, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6f, 0x70, 0x74, 0x5f, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x32, 0x6d, 0x0a, 0x09, 0x42, 0x6f, 0x6f, 0x6c, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x12, 0x60, 0x0a, 0x09, 0x42, 0x6f, 0x6f, 0x6c, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12,
	0x29, 0x2e, 0x6c, 0x65, 0x6f, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x10, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0a, 0x12, 0x08, 0x2f, 0x76, 0x31, 0x2f,
	0x62, 0x6f, 0x6f, 0x6c, 0x32, 0x71, 0x0a, 0x0a, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x12, 0x63, 0x0a, 0x0a, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x12, 0x2a, 0x2e, 0x6c, 0x65, 0x6f, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x11, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0b, 0x12, 0x09, 0x2f, 0x76,
	0x31, 0x2f, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x32, 0x71, 0x0a, 0x0a, 0x49, 0x6e, 0x74, 0x36, 0x34,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x63, 0x0a, 0x0a, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x12, 0x2a, 0x2e, 0x6c, 0x65, 0x6f, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x49, 0x6e,
	0x74, 0x36, 0x34, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x11, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0b, 0x12,
	0x09, 0x2f, 0x76, 0x31, 0x2f, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x32, 0x75, 0x0a, 0x0b, 0x55, 0x69,
	0x6e, 0x74, 0x33, 0x32, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x66, 0x0a, 0x0b, 0x55, 0x69, 0x6e,
	0x74, 0x33, 0x32, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x2b, 0x2e, 0x6c, 0x65, 0x6f, 0x2e, 0x65,
	0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2e, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x12, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x0c, 0x12, 0x0a, 0x2f, 0x76, 0x31, 0x2f, 0x75, 0x69, 0x6e, 0x74, 0x33,
	0x32, 0x32, 0x75, 0x0a, 0x0b, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x12, 0x66, 0x0a, 0x0b, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12,
	0x2b, 0x2e, 0x6c, 0x65, 0x6f, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x72, 0x6f,
	0x75, 0x74, 0x65, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x12, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0c, 0x12, 0x0a, 0x2f, 0x76,
	0x31, 0x2f, 0x75, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x32, 0x71, 0x0a, 0x0a, 0x46, 0x6c, 0x6f, 0x61,
	0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x63, 0x0a, 0x0a, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x12, 0x2a, 0x2e, 0x6c, 0x65, 0x6f, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x46,
	0x6c, 0x6f, 0x61, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x11, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0b,
	0x12, 0x09, 0x2f, 0x76, 0x31, 0x2f, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x75, 0x0a, 0x0b, 0x44,
	0x6f, 0x75, 0x62, 0x6c, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x66, 0x0a, 0x0b, 0x44, 0x6f,
	0x75, 0x62, 0x6c, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x2b, 0x2e, 0x6c, 0x65, 0x6f, 0x2e,
	0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2e, 0x71, 0x75,
	0x65, 0x72, 0x79, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x12,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0c, 0x12, 0x0a, 0x2f, 0x76, 0x31, 0x2f, 0x64, 0x6f, 0x75, 0x62,
	0x6c, 0x65, 0x32, 0x75, 0x0a, 0x0b, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x12, 0x66, 0x0a, 0x0b, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x12, 0x2b, 0x2e, 0x6c, 0x65, 0x6f, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x72,
	0x6f, 0x75, 0x74, 0x65, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x12, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0c, 0x12, 0x0a, 0x2f,
	0x76, 0x31, 0x2f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x32, 0x6d, 0x0a, 0x09, 0x45, 0x6e, 0x75,
	0x6d, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x60, 0x0a, 0x09, 0x45, 0x6e, 0x75, 0x6d, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x12, 0x29, 0x2e, 0x6c, 0x65, 0x6f, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x2e, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x2e, 0x71, 0x75, 0x65, 0x72, 0x79, 0x2e, 0x45, 0x6e,
	0x75, 0x6d, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x10, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0a, 0x12, 0x08,
	0x2f, 0x76, 0x31, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x42, 0x30, 0x5a, 0x2e, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x6f, 0x2d, 0x6c, 0x65, 0x6f, 0x2f, 0x6c, 0x65,
	0x6f, 0x2f, 0x76, 0x33, 0x2f, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2f, 0x72, 0x6f, 0x75,
	0x74, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x3b, 0x61, 0x70, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_api_query_proto_rawDescOnce sync.Once
	file_api_query_proto_rawDescData = file_api_query_proto_rawDesc
)

func file_api_query_proto_rawDescGZIP() []byte {
	file_api_query_proto_rawDescOnce.Do(func() {
		file_api_query_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_query_proto_rawDescData)
	})
	return file_api_query_proto_rawDescData
}

var file_api_query_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_api_query_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_api_query_proto_goTypes = []interface{}{
	(EnumQueryRequest_Status)(0),   // 0: leo.example.route.query.EnumQueryRequest.Status
	(*BoolQueryRequest)(nil),       // 1: leo.example.route.query.BoolQueryRequest
	(*Int32QueryRequest)(nil),      // 2: leo.example.route.query.Int32QueryRequest
	(*Int64QueryRequest)(nil),      // 3: leo.example.route.query.Int64QueryRequest
	(*Uint32QueryRequest)(nil),     // 4: leo.example.route.query.Uint32QueryRequest
	(*Uint64QueryRequest)(nil),     // 5: leo.example.route.query.Uint64QueryRequest
	(*FloatQueryRequest)(nil),      // 6: leo.example.route.query.FloatQueryRequest
	(*DoubleQueryRequest)(nil),     // 7: leo.example.route.query.DoubleQueryRequest
	(*StringQueryRequest)(nil),     // 8: leo.example.route.query.StringQueryRequest
	(*EnumQueryRequest)(nil),       // 9: leo.example.route.query.EnumQueryRequest
	(*wrapperspb.BoolValue)(nil),   // 10: google.protobuf.BoolValue
	(*wrapperspb.Int32Value)(nil),  // 11: google.protobuf.Int32Value
	(*wrapperspb.Int64Value)(nil),  // 12: google.protobuf.Int64Value
	(*wrapperspb.UInt32Value)(nil), // 13: google.protobuf.UInt32Value
	(*wrapperspb.UInt64Value)(nil), // 14: google.protobuf.UInt64Value
	(*wrapperspb.FloatValue)(nil),  // 15: google.protobuf.FloatValue
	(*wrapperspb.DoubleValue)(nil), // 16: google.protobuf.DoubleValue
	(*wrapperspb.StringValue)(nil), // 17: google.protobuf.StringValue
	(*emptypb.Empty)(nil),          // 18: google.protobuf.Empty
}
var file_api_query_proto_depIdxs = []int32{
	10, // 0: leo.example.route.query.BoolQueryRequest.wrap_bool:type_name -> google.protobuf.BoolValue
	11, // 1: leo.example.route.query.Int32QueryRequest.wrap_int32:type_name -> google.protobuf.Int32Value
	12, // 2: leo.example.route.query.Int64QueryRequest.wrap_int64:type_name -> google.protobuf.Int64Value
	13, // 3: leo.example.route.query.Uint32QueryRequest.wrap_uint32:type_name -> google.protobuf.UInt32Value
	14, // 4: leo.example.route.query.Uint64QueryRequest.wrap_uint64:type_name -> google.protobuf.UInt64Value
	15, // 5: leo.example.route.query.FloatQueryRequest.wrap_float:type_name -> google.protobuf.FloatValue
	16, // 6: leo.example.route.query.DoubleQueryRequest.wrap_double:type_name -> google.protobuf.DoubleValue
	17, // 7: leo.example.route.query.StringQueryRequest.wrap_string:type_name -> google.protobuf.StringValue
	0,  // 8: leo.example.route.query.EnumQueryRequest.status:type_name -> leo.example.route.query.EnumQueryRequest.Status
	0,  // 9: leo.example.route.query.EnumQueryRequest.opt_status:type_name -> leo.example.route.query.EnumQueryRequest.Status
	1,  // 10: leo.example.route.query.BoolQuery.BoolQuery:input_type -> leo.example.route.query.BoolQueryRequest
	2,  // 11: leo.example.route.query.Int32Query.Int32Query:input_type -> leo.example.route.query.Int32QueryRequest
	3,  // 12: leo.example.route.query.Int64Query.Int64Query:input_type -> leo.example.route.query.Int64QueryRequest
	4,  // 13: leo.example.route.query.Uint32Query.Uint32Query:input_type -> leo.example.route.query.Uint32QueryRequest
	5,  // 14: leo.example.route.query.Uint64Query.Uint64Query:input_type -> leo.example.route.query.Uint64QueryRequest
	6,  // 15: leo.example.route.query.FloatQuery.FloatQuery:input_type -> leo.example.route.query.FloatQueryRequest
	7,  // 16: leo.example.route.query.DoubleQuery.DoubleQuery:input_type -> leo.example.route.query.DoubleQueryRequest
	8,  // 17: leo.example.route.query.StringQuery.StringQuery:input_type -> leo.example.route.query.StringQueryRequest
	9,  // 18: leo.example.route.query.EnumQuery.EnumQuery:input_type -> leo.example.route.query.EnumQueryRequest
	18, // 19: leo.example.route.query.BoolQuery.BoolQuery:output_type -> google.protobuf.Empty
	18, // 20: leo.example.route.query.Int32Query.Int32Query:output_type -> google.protobuf.Empty
	18, // 21: leo.example.route.query.Int64Query.Int64Query:output_type -> google.protobuf.Empty
	18, // 22: leo.example.route.query.Uint32Query.Uint32Query:output_type -> google.protobuf.Empty
	18, // 23: leo.example.route.query.Uint64Query.Uint64Query:output_type -> google.protobuf.Empty
	18, // 24: leo.example.route.query.FloatQuery.FloatQuery:output_type -> google.protobuf.Empty
	18, // 25: leo.example.route.query.DoubleQuery.DoubleQuery:output_type -> google.protobuf.Empty
	18, // 26: leo.example.route.query.StringQuery.StringQuery:output_type -> google.protobuf.Empty
	18, // 27: leo.example.route.query.EnumQuery.EnumQuery:output_type -> google.protobuf.Empty
	19, // [19:28] is the sub-list for method output_type
	10, // [10:19] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_api_query_proto_init() }
func file_api_query_proto_init() {
	if File_api_query_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_api_query_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BoolQueryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_query_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Int32QueryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_query_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Int64QueryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_query_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Uint32QueryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_query_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Uint64QueryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_query_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FloatQueryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_query_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DoubleQueryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_query_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StringQueryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_query_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnumQueryRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_api_query_proto_msgTypes[0].OneofWrappers = []interface{}{}
	file_api_query_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_api_query_proto_msgTypes[2].OneofWrappers = []interface{}{}
	file_api_query_proto_msgTypes[3].OneofWrappers = []interface{}{}
	file_api_query_proto_msgTypes[4].OneofWrappers = []interface{}{}
	file_api_query_proto_msgTypes[5].OneofWrappers = []interface{}{}
	file_api_query_proto_msgTypes[6].OneofWrappers = []interface{}{}
	file_api_query_proto_msgTypes[7].OneofWrappers = []interface{}{}
	file_api_query_proto_msgTypes[8].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_query_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   9,
		},
		GoTypes:           file_api_query_proto_goTypes,
		DependencyIndexes: file_api_query_proto_depIdxs,
		EnumInfos:         file_api_query_proto_enumTypes,
		MessageInfos:      file_api_query_proto_msgTypes,
	}.Build()
	File_api_query_proto = out.File
	file_api_query_proto_rawDesc = nil
	file_api_query_proto_goTypes = nil
	file_api_query_proto_depIdxs = nil
}
