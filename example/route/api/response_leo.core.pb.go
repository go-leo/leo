// Code generated by protoc-gen-leo. DO NOT EDIT.

package api

import (
	context "context"
	endpoint "github.com/go-kit/kit/endpoint"
	sd "github.com/go-kit/kit/sd"
	lb "github.com/go-kit/kit/sd/lb"
	log "github.com/go-kit/log"
	lazyloadx "github.com/go-leo/gox/syncx/lazyloadx"
	endpointx "github.com/go-leo/leo/v3/endpointx"
	sdx "github.com/go-leo/leo/v3/sdx"
	lbx "github.com/go-leo/leo/v3/sdx/lbx"
	stain "github.com/go-leo/leo/v3/sdx/stain"
	transportx "github.com/go-leo/leo/v3/transportx"
	httpbody "google.golang.org/genproto/googleapis/api/httpbody"
	http "google.golang.org/genproto/googleapis/rpc/http"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	io "io"
)

// ResponseService is a service
type ResponseService interface {
	OmittedResponse(ctx context.Context, request *emptypb.Empty) (*UserResponse, error)
	StarResponse(ctx context.Context, request *emptypb.Empty) (*UserResponse, error)
	NamedResponse(ctx context.Context, request *emptypb.Empty) (*UserResponse, error)
	HttpBodyResponse(ctx context.Context, request *emptypb.Empty) (*httpbody.HttpBody, error)
	HttpBodyNamedResponse(ctx context.Context, request *emptypb.Empty) (*HttpBody, error)
	HttpResponse(ctx context.Context, request *emptypb.Empty) (*http.HttpResponse, error)
}

// ResponseServerEndpoints is server endpoints
type ResponseServerEndpoints interface {
	OmittedResponse(ctx context.Context) endpoint.Endpoint
	StarResponse(ctx context.Context) endpoint.Endpoint
	NamedResponse(ctx context.Context) endpoint.Endpoint
	HttpBodyResponse(ctx context.Context) endpoint.Endpoint
	HttpBodyNamedResponse(ctx context.Context) endpoint.Endpoint
	HttpResponse(ctx context.Context) endpoint.Endpoint
}

// ResponseClientEndpoints is client endpoints
type ResponseClientEndpoints interface {
	OmittedResponse(ctx context.Context) (endpoint.Endpoint, error)
	StarResponse(ctx context.Context) (endpoint.Endpoint, error)
	NamedResponse(ctx context.Context) (endpoint.Endpoint, error)
	HttpBodyResponse(ctx context.Context) (endpoint.Endpoint, error)
	HttpBodyNamedResponse(ctx context.Context) (endpoint.Endpoint, error)
	HttpResponse(ctx context.Context) (endpoint.Endpoint, error)
}

// ResponseClientTransports is client transports
type ResponseClientTransports interface {
	OmittedResponse(ctx context.Context, instance string) (endpoint.Endpoint, io.Closer, error)
	StarResponse(ctx context.Context, instance string) (endpoint.Endpoint, io.Closer, error)
	NamedResponse(ctx context.Context, instance string) (endpoint.Endpoint, io.Closer, error)
	HttpBodyResponse(ctx context.Context, instance string) (endpoint.Endpoint, io.Closer, error)
	HttpBodyNamedResponse(ctx context.Context, instance string) (endpoint.Endpoint, io.Closer, error)
	HttpResponse(ctx context.Context, instance string) (endpoint.Endpoint, io.Closer, error)
}

// ResponseFactories is client factories
type ResponseFactories interface {
	OmittedResponse(ctx context.Context) sd.Factory
	StarResponse(ctx context.Context) sd.Factory
	NamedResponse(ctx context.Context) sd.Factory
	HttpBodyResponse(ctx context.Context) sd.Factory
	HttpBodyNamedResponse(ctx context.Context) sd.Factory
	HttpResponse(ctx context.Context) sd.Factory
}

// ResponseEndpointers is client endpointers
type ResponseEndpointers interface {
	OmittedResponse(ctx context.Context, color string) (sd.Endpointer, error)
	StarResponse(ctx context.Context, color string) (sd.Endpointer, error)
	NamedResponse(ctx context.Context, color string) (sd.Endpointer, error)
	HttpBodyResponse(ctx context.Context, color string) (sd.Endpointer, error)
	HttpBodyNamedResponse(ctx context.Context, color string) (sd.Endpointer, error)
	HttpResponse(ctx context.Context, color string) (sd.Endpointer, error)
}

// ResponseBalancers is client balancers
type ResponseBalancers interface {
	OmittedResponse(ctx context.Context) (lb.Balancer, error)
	StarResponse(ctx context.Context) (lb.Balancer, error)
	NamedResponse(ctx context.Context) (lb.Balancer, error)
	HttpBodyResponse(ctx context.Context) (lb.Balancer, error)
	HttpBodyNamedResponse(ctx context.Context) (lb.Balancer, error)
	HttpResponse(ctx context.Context) (lb.Balancer, error)
}

// responseServerEndpoints implements ResponseServerEndpoints
type responseServerEndpoints struct {
	svc         ResponseService
	middlewares []endpoint.Middleware
}

func (e *responseServerEndpoints) OmittedResponse(context.Context) endpoint.Endpoint {
	component := func(ctx context.Context, request any) (any, error) {
		return e.svc.OmittedResponse(ctx, request.(*emptypb.Empty))
	}
	return endpointx.Chain(component, e.middlewares...)
}

func (e *responseServerEndpoints) StarResponse(context.Context) endpoint.Endpoint {
	component := func(ctx context.Context, request any) (any, error) {
		return e.svc.StarResponse(ctx, request.(*emptypb.Empty))
	}
	return endpointx.Chain(component, e.middlewares...)
}

func (e *responseServerEndpoints) NamedResponse(context.Context) endpoint.Endpoint {
	component := func(ctx context.Context, request any) (any, error) {
		return e.svc.NamedResponse(ctx, request.(*emptypb.Empty))
	}
	return endpointx.Chain(component, e.middlewares...)
}

func (e *responseServerEndpoints) HttpBodyResponse(context.Context) endpoint.Endpoint {
	component := func(ctx context.Context, request any) (any, error) {
		return e.svc.HttpBodyResponse(ctx, request.(*emptypb.Empty))
	}
	return endpointx.Chain(component, e.middlewares...)
}

func (e *responseServerEndpoints) HttpBodyNamedResponse(context.Context) endpoint.Endpoint {
	component := func(ctx context.Context, request any) (any, error) {
		return e.svc.HttpBodyNamedResponse(ctx, request.(*emptypb.Empty))
	}
	return endpointx.Chain(component, e.middlewares...)
}

func (e *responseServerEndpoints) HttpResponse(context.Context) endpoint.Endpoint {
	component := func(ctx context.Context, request any) (any, error) {
		return e.svc.HttpResponse(ctx, request.(*emptypb.Empty))
	}
	return endpointx.Chain(component, e.middlewares...)
}

// responseFactories implements ResponseFactories
type responseFactories struct {
	transports ResponseClientTransports
}

func (f *responseFactories) OmittedResponse(ctx context.Context) sd.Factory {
	return func(instance string) (endpoint.Endpoint, io.Closer, error) {
		return f.transports.OmittedResponse(ctx, instance)
	}
}

func (f *responseFactories) StarResponse(ctx context.Context) sd.Factory {
	return func(instance string) (endpoint.Endpoint, io.Closer, error) {
		return f.transports.StarResponse(ctx, instance)
	}
}

func (f *responseFactories) NamedResponse(ctx context.Context) sd.Factory {
	return func(instance string) (endpoint.Endpoint, io.Closer, error) {
		return f.transports.NamedResponse(ctx, instance)
	}
}

func (f *responseFactories) HttpBodyResponse(ctx context.Context) sd.Factory {
	return func(instance string) (endpoint.Endpoint, io.Closer, error) {
		return f.transports.HttpBodyResponse(ctx, instance)
	}
}

func (f *responseFactories) HttpBodyNamedResponse(ctx context.Context) sd.Factory {
	return func(instance string) (endpoint.Endpoint, io.Closer, error) {
		return f.transports.HttpBodyNamedResponse(ctx, instance)
	}
}

func (f *responseFactories) HttpResponse(ctx context.Context) sd.Factory {
	return func(instance string) (endpoint.Endpoint, io.Closer, error) {
		return f.transports.HttpResponse(ctx, instance)
	}
}

// responseEndpointers implements ResponseEndpointers
type responseEndpointers struct {
	target    string
	builder   sdx.Builder
	factories ResponseFactories
	logger    log.Logger
	options   []sd.EndpointerOption
}

func (e *responseEndpointers) OmittedResponse(ctx context.Context, color string) (sd.Endpointer, error) {
	return sdx.NewEndpointer(ctx, e.target, color, e.builder, e.factories.OmittedResponse(ctx), e.logger, e.options...)
}

func (e *responseEndpointers) StarResponse(ctx context.Context, color string) (sd.Endpointer, error) {
	return sdx.NewEndpointer(ctx, e.target, color, e.builder, e.factories.StarResponse(ctx), e.logger, e.options...)
}

func (e *responseEndpointers) NamedResponse(ctx context.Context, color string) (sd.Endpointer, error) {
	return sdx.NewEndpointer(ctx, e.target, color, e.builder, e.factories.NamedResponse(ctx), e.logger, e.options...)
}

func (e *responseEndpointers) HttpBodyResponse(ctx context.Context, color string) (sd.Endpointer, error) {
	return sdx.NewEndpointer(ctx, e.target, color, e.builder, e.factories.HttpBodyResponse(ctx), e.logger, e.options...)
}

func (e *responseEndpointers) HttpBodyNamedResponse(ctx context.Context, color string) (sd.Endpointer, error) {
	return sdx.NewEndpointer(ctx, e.target, color, e.builder, e.factories.HttpBodyNamedResponse(ctx), e.logger, e.options...)
}

func (e *responseEndpointers) HttpResponse(ctx context.Context, color string) (sd.Endpointer, error) {
	return sdx.NewEndpointer(ctx, e.target, color, e.builder, e.factories.HttpResponse(ctx), e.logger, e.options...)
}

// responseBalancers implements ResponseBalancers
type responseBalancers struct {
	factory               lbx.BalancerFactory
	endpointer            ResponseEndpointers
	omittedResponse       lazyloadx.Group[lb.Balancer]
	starResponse          lazyloadx.Group[lb.Balancer]
	namedResponse         lazyloadx.Group[lb.Balancer]
	httpBodyResponse      lazyloadx.Group[lb.Balancer]
	httpBodyNamedResponse lazyloadx.Group[lb.Balancer]
	httpResponse          lazyloadx.Group[lb.Balancer]
}

func (b *responseBalancers) OmittedResponse(ctx context.Context) (lb.Balancer, error) {
	color, _ := stain.ExtractColor(ctx)
	balancer, err, _ := b.omittedResponse.LoadOrNew(color, lbx.NewBalancer(ctx, b.factory, b.endpointer.OmittedResponse))
	return balancer, err
}
func (b *responseBalancers) StarResponse(ctx context.Context) (lb.Balancer, error) {
	color, _ := stain.ExtractColor(ctx)
	balancer, err, _ := b.starResponse.LoadOrNew(color, lbx.NewBalancer(ctx, b.factory, b.endpointer.StarResponse))
	return balancer, err
}
func (b *responseBalancers) NamedResponse(ctx context.Context) (lb.Balancer, error) {
	color, _ := stain.ExtractColor(ctx)
	balancer, err, _ := b.namedResponse.LoadOrNew(color, lbx.NewBalancer(ctx, b.factory, b.endpointer.NamedResponse))
	return balancer, err
}
func (b *responseBalancers) HttpBodyResponse(ctx context.Context) (lb.Balancer, error) {
	color, _ := stain.ExtractColor(ctx)
	balancer, err, _ := b.httpBodyResponse.LoadOrNew(color, lbx.NewBalancer(ctx, b.factory, b.endpointer.HttpBodyResponse))
	return balancer, err
}
func (b *responseBalancers) HttpBodyNamedResponse(ctx context.Context) (lb.Balancer, error) {
	color, _ := stain.ExtractColor(ctx)
	balancer, err, _ := b.httpBodyNamedResponse.LoadOrNew(color, lbx.NewBalancer(ctx, b.factory, b.endpointer.HttpBodyNamedResponse))
	return balancer, err
}
func (b *responseBalancers) HttpResponse(ctx context.Context) (lb.Balancer, error) {
	color, _ := stain.ExtractColor(ctx)
	balancer, err, _ := b.httpResponse.LoadOrNew(color, lbx.NewBalancer(ctx, b.factory, b.endpointer.HttpResponse))
	return balancer, err
}
func newResponseBalancers(factory lbx.BalancerFactory, endpointer ResponseEndpointers) ResponseBalancers {
	return &responseBalancers{
		factory:               factory,
		endpointer:            endpointer,
		omittedResponse:       lazyloadx.Group[lb.Balancer]{},
		starResponse:          lazyloadx.Group[lb.Balancer]{},
		namedResponse:         lazyloadx.Group[lb.Balancer]{},
		httpBodyResponse:      lazyloadx.Group[lb.Balancer]{},
		httpBodyNamedResponse: lazyloadx.Group[lb.Balancer]{},
		httpResponse:          lazyloadx.Group[lb.Balancer]{},
	}
}

// responseClientEndpoints implements ResponseClientEndpoints
type responseClientEndpoints struct {
	balancers ResponseBalancers
}

func (e *responseClientEndpoints) OmittedResponse(ctx context.Context) (endpoint.Endpoint, error) {
	balancer, err := e.balancers.OmittedResponse(ctx)
	if err != nil {
		return nil, err
	}
	return balancer.Endpoint()
}

func (e *responseClientEndpoints) StarResponse(ctx context.Context) (endpoint.Endpoint, error) {
	balancer, err := e.balancers.StarResponse(ctx)
	if err != nil {
		return nil, err
	}
	return balancer.Endpoint()
}

func (e *responseClientEndpoints) NamedResponse(ctx context.Context) (endpoint.Endpoint, error) {
	balancer, err := e.balancers.NamedResponse(ctx)
	if err != nil {
		return nil, err
	}
	return balancer.Endpoint()
}

func (e *responseClientEndpoints) HttpBodyResponse(ctx context.Context) (endpoint.Endpoint, error) {
	balancer, err := e.balancers.HttpBodyResponse(ctx)
	if err != nil {
		return nil, err
	}
	return balancer.Endpoint()
}

func (e *responseClientEndpoints) HttpBodyNamedResponse(ctx context.Context) (endpoint.Endpoint, error) {
	balancer, err := e.balancers.HttpBodyNamedResponse(ctx)
	if err != nil {
		return nil, err
	}
	return balancer.Endpoint()
}

func (e *responseClientEndpoints) HttpResponse(ctx context.Context) (endpoint.Endpoint, error) {
	balancer, err := e.balancers.HttpResponse(ctx)
	if err != nil {
		return nil, err
	}
	return balancer.Endpoint()
}

// responseClientService implements ResponseClientService
type responseClientService struct {
	endpoints     ResponseClientEndpoints
	transportName string
}

func (c *responseClientService) OmittedResponse(ctx context.Context, request *emptypb.Empty) (*UserResponse, error) {
	ctx = endpointx.InjectName(ctx, "/leo.example.route.response.Response/OmittedResponse")
	ctx = transportx.InjectName(ctx, c.transportName)
	endpoint, err := c.endpoints.OmittedResponse(ctx)
	if err != nil {
		return nil, err
	}
	rep, err := endpoint(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*UserResponse), nil
}

func (c *responseClientService) StarResponse(ctx context.Context, request *emptypb.Empty) (*UserResponse, error) {
	ctx = endpointx.InjectName(ctx, "/leo.example.route.response.Response/StarResponse")
	ctx = transportx.InjectName(ctx, c.transportName)
	endpoint, err := c.endpoints.StarResponse(ctx)
	if err != nil {
		return nil, err
	}
	rep, err := endpoint(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*UserResponse), nil
}

func (c *responseClientService) NamedResponse(ctx context.Context, request *emptypb.Empty) (*UserResponse, error) {
	ctx = endpointx.InjectName(ctx, "/leo.example.route.response.Response/NamedResponse")
	ctx = transportx.InjectName(ctx, c.transportName)
	endpoint, err := c.endpoints.NamedResponse(ctx)
	if err != nil {
		return nil, err
	}
	rep, err := endpoint(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*UserResponse), nil
}

func (c *responseClientService) HttpBodyResponse(ctx context.Context, request *emptypb.Empty) (*httpbody.HttpBody, error) {
	ctx = endpointx.InjectName(ctx, "/leo.example.route.response.Response/HttpBodyResponse")
	ctx = transportx.InjectName(ctx, c.transportName)
	endpoint, err := c.endpoints.HttpBodyResponse(ctx)
	if err != nil {
		return nil, err
	}
	rep, err := endpoint(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*httpbody.HttpBody), nil
}

func (c *responseClientService) HttpBodyNamedResponse(ctx context.Context, request *emptypb.Empty) (*HttpBody, error) {
	ctx = endpointx.InjectName(ctx, "/leo.example.route.response.Response/HttpBodyNamedResponse")
	ctx = transportx.InjectName(ctx, c.transportName)
	endpoint, err := c.endpoints.HttpBodyNamedResponse(ctx)
	if err != nil {
		return nil, err
	}
	rep, err := endpoint(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*HttpBody), nil
}

func (c *responseClientService) HttpResponse(ctx context.Context, request *emptypb.Empty) (*http.HttpResponse, error) {
	ctx = endpointx.InjectName(ctx, "/leo.example.route.response.Response/HttpResponse")
	ctx = transportx.InjectName(ctx, c.transportName)
	endpoint, err := c.endpoints.HttpResponse(ctx)
	if err != nil {
		return nil, err
	}
	rep, err := endpoint(ctx, request)
	if err != nil {
		return nil, err
	}
	return rep.(*http.HttpResponse), nil
}
