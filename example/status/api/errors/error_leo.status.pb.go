// Code generated by protoc-gen-leo. DO NOT EDIT.

package errors

import (
	statusx "github.com/go-leo/leo/v3/statusx"
)

var clean_ErrInvalidName = ErrInvalidName()

func ErrInvalidName(opts ...statusx.Option) statusx.Status {
	return statusx.InvalidArgument(append([]statusx.Option{statusx.Identifier("Errors_InvalidName"), statusx.Message("名称为空")}, opts...)...)
}

func IsInvalidName(err error) (statusx.Status, bool) {
	st, ok := statusx.From(err)
	if !ok {
		return st, false
	}
	return st, clean_ErrInvalidName.Is(st)
}

var clean_ErrFileDownloadFailed = ErrFileDownloadFailed()

func ErrFileDownloadFailed(opts ...statusx.Option) statusx.Status {
	return statusx.Internal(append([]statusx.Option{statusx.Identifier("Errors_FileDownloadFailed"), statusx.Message("文件下载失败")}, opts...)...)
}

func IsFileDownloadFailed(err error) (statusx.Status, bool) {
	st, ok := statusx.From(err)
	if !ok {
		return st, false
	}
	return st, clean_ErrFileDownloadFailed.Is(st)
}

var clean_ErrFileUploadFailed = ErrFileUploadFailed()

func ErrFileUploadFailed(opts ...statusx.Option) statusx.Status {
	return statusx.Internal(append([]statusx.Option{statusx.Identifier("Errors_FileUploadFailed")}, opts...)...)
}

func IsFileUploadFailed(err error) (statusx.Status, bool) {
	st, ok := statusx.From(err)
	if !ok {
		return st, false
	}
	return st, clean_ErrFileUploadFailed.Is(st)
}
