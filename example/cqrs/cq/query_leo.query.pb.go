// Code generated by protoc-gen-go-leo. DO NOT EDIT.
// If you want edit it, can move this file to another directory.

package cq

import (
	context "context"
	cqrs "github.com/go-leo/leo/v3/cqrs"
	v1 "github.com/go-leo/leo/v3/example/api/cqrs/v1"
)

var _ QueryHandler = (*queryHandler)(nil)

type QueryHandler cqrs.QueryHandler[QueryQuery, QueryResult]

type QueryQuery struct {
	v1.UnimplementedQueryQuery
	Name string
}

func (QueryQuery) From(ctx context.Context, req *v1.QueryRequest) (v1.QueryQuery, context.Context, error) {
	return QueryQuery{Name: req.GetName()}, ctx, nil
}

type QueryResult struct {
	v1.UnimplementedQueryResult
	Message string
}

func (r QueryResult) To(ctx context.Context) (*v1.QueryReply, error) {
	return &v1.QueryReply{Message: r.Message}, nil
}

func NewQueryHandler() QueryHandler {
	return &queryHandler{}
}

type queryHandler struct {
}

func (h *queryHandler) Handle(ctx context.Context, q QueryQuery) (QueryResult, error) {
	return QueryResult{Message: "hello " + q.Name}, nil
}
