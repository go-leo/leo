// Code generated by protoc-gen-go-leo. DO NOT EDIT.
// If you want edit it, can move this file to another directory.

package cq

import (
	context "context"
	"github.com/go-leo/gox/convx"
	cqrs "github.com/go-leo/leo/v3/cqrs"
	v1 "github.com/go-leo/leo/v3/example/api/cqrs/v1"
	"github.com/google/uuid"
	"time"
)

var _ QueryOneOfHandler = (*queryOneOfHandler)(nil)

type QueryOneOfHandler cqrs.QueryHandler[QueryOneOfQuery, QueryOneOfResult]

type QueryOneOfQuery struct {
	v1.UnimplementedQueryOneOfQuery
	Name string
}

func (QueryOneOfQuery) From(ctx context.Context, req *v1.QueryRequest) (v1.QueryOneOfQuery, context.Context, error) {
	return QueryOneOfQuery{Name: req.GetName()}, ctx, nil
}

type QueryOneOfResult struct {
	v1.UnimplementedQueryOneOfResult
	Id   string
	Name string
}

func (r QueryOneOfResult) To(ctx context.Context) (*v1.QueryOneOfReply, error) {
	if time.Now().Unix()%2 == 0 {
		return &v1.QueryOneOfReply{
			Data: &v1.QueryOneOfReply_Id{Id: r.Id},
		}, nil
	}
	return &v1.QueryOneOfReply{
		Data: &v1.QueryOneOfReply_Name{Name: r.Name},
	}, nil
}

func NewQueryOneOfHandler() QueryOneOfHandler {
	return &queryOneOfHandler{}
}

type queryOneOfHandler struct {
}

func (h *queryOneOfHandler) Handle(ctx context.Context, q QueryOneOfQuery) (QueryOneOfResult, error) {
	return QueryOneOfResult{Id: convx.ToString(time.Now().Unix()), Name: uuid.NewString()}, nil
}
