package generator

import (
	"github.com/go-leo/leo/v3/cmd/internal"
	"google.golang.org/protobuf/compiler/protogen"
	"strconv"
)

type Generator struct {
	Plugin   *protogen.Plugin
	File     *protogen.File
	Services []*internal.Service
}

func NewGenerator(plugin *protogen.Plugin, file *protogen.File) (*Generator, error) {
	services, err := internal.NewServices(file)
	if err != nil {
		return nil, err
	}
	return &Generator{Plugin: plugin, File: file, Services: services}, nil
}

func (f *Generator) Generate() error {
	return f.GenerateFile()
}

func (f *Generator) GenerateFile() error {
	file := f.File
	filename := file.GeneratedFilenamePrefix + "_grpc.leo.pb.go"
	g := f.Plugin.NewGeneratedFile(filename, file.GoImportPath)
	g.P("// Code generated by protoc-gen-go-grpc. DO NOT EDIT.")
	g.P()
	g.P("package ", file.GoPackageName)
	g.P()
	for _, service := range f.Services {
		if err := f.GenerateServer(service, g); err != nil {
			return err
		}
	}

	for _, service := range f.Services {
		if err := f.GenerateNewServer(service, g); err != nil {
			return err
		}
	}

	for _, service := range f.Services {
		if err := f.GenerateClient(service, g); err != nil {
			return err
		}
	}

	for _, service := range f.Services {
		if err := f.GenerateNewClient(service, g); err != nil {
			return err
		}
	}

	return nil
}

func (f *Generator) GenerateServer(service *internal.Service, generatedFile *protogen.GeneratedFile) error {
	generatedFile.P("type ", service.UnexportedGRPCServerName(), " struct {")
	generatedFile.P()
	if *Conf.RequireUnimplemented {
		generatedFile.P(service.UnimplementedServerName())
		generatedFile.P()
	}
	for _, endpoint := range service.Endpoints {
		generatedFile.P(endpoint.UnexportedName(), " ", grpcTransportPackage.Ident("Handler"))
		generatedFile.P()
	}
	generatedFile.P("}")
	generatedFile.P()

	for _, endpoint := range service.Endpoints {
		generatedFile.P("func (s *", service.UnexportedGRPCServerName(), ") ", endpoint.Name(), "(ctx ", contextPackage.Ident("Context"), ", request *", endpoint.InputGoIdent(), ") (*", endpoint.OutputGoIdent(), ", error){")
		generatedFile.P("ctx, rep, err := s.", endpoint.UnexportedName(), ".ServeGRPC(ctx, request)")
		generatedFile.P("if err != nil {")
		generatedFile.P("return nil, err")
		generatedFile.P("}")
		generatedFile.P("_ = ctx")
		generatedFile.P("return rep.(*", endpoint.OutputGoIdent(), "), nil")
		generatedFile.P("}")
		generatedFile.P()
	}
	return nil
}

func (f *Generator) GenerateNewServer(service *internal.Service, generatedFile *protogen.GeneratedFile) error {
	generatedFile.P("func New", service.GRPCServerName(), "(")
	generatedFile.P("endpoints interface {")
	for _, endpoint := range service.Endpoints {
		generatedFile.P(endpoint.Name(), "() ", endpointPackage.Ident("Endpoint"))
	}
	generatedFile.P("},")
	generatedFile.P("mdw []", endpointPackage.Ident("Middleware"), ",")
	generatedFile.P("opts ...", grpcTransportPackage.Ident("ServerOption"), ",")
	generatedFile.P(") interface {")
	for _, endpoint := range service.Endpoints {
		generatedFile.P(endpoint.Name(), "(ctx ", contextPackage.Ident("Context"), ", request *", endpoint.InputGoIdent(), ") (*", endpoint.OutputGoIdent(), ", error)")
	}
	generatedFile.P("} {")
	generatedFile.P("return &", service.UnexportedGRPCServerName(), "{")
	for _, endpoint := range service.Endpoints {
		generatedFile.P(endpoint.UnexportedName(), ":    ", grpcTransportPackage.Ident("NewServer"), "(", endpointxPackage.Ident("Chain"), "(endpoints.", endpoint.Name(), "(), mdw...), func(_ ", contextPackage.Ident("Context"), ", v any) (any, error) { return v, nil }", ", ", "func(_ ", contextPackage.Ident("Context"), ", v any) (any, error) { return v, nil }", ", opts...),")
	}
	generatedFile.P("}")
	generatedFile.P("}")
	generatedFile.P()
	return nil
}

func (f *Generator) GenerateClient(service *internal.Service, generatedFile *protogen.GeneratedFile) error {
	generatedFile.P("type ", service.UnexportedGRPCClientName(), " struct {")
	for _, endpoint := range service.Endpoints {
		generatedFile.P(endpoint.UnexportedName(), " ", endpointPackage.Ident("Endpoint"))
	}
	generatedFile.P("}")
	generatedFile.P()
	for _, endpoint := range service.Endpoints {
		generatedFile.P("func (c *", service.UnexportedGRPCClientName(), ") ", endpoint.Name(), "(ctx ", contextPackage.Ident("Context"), ", request *", endpoint.InputGoIdent(), ") (*", endpoint.OutputGoIdent(), ", error){")
		generatedFile.P("rep, err := c.", endpoint.UnexportedName(), "(ctx, request)")
		generatedFile.P("if err != nil {")
		generatedFile.P("return nil, err")
		generatedFile.P("}")
		generatedFile.P("return rep.(*", endpoint.OutputGoIdent(), "), nil")
		generatedFile.P("}")
		generatedFile.P()
	}
	return nil
}

func (f *Generator) GenerateNewClient(service *internal.Service, generatedFile *protogen.GeneratedFile) error {
	generatedFile.P("func New", service.GRPCClientName(), "(")
	generatedFile.P("conn *", grpcPackage.Ident("ClientConn"), ",")
	generatedFile.P("mdw []", endpointPackage.Ident("Middleware"), ",")
	generatedFile.P("opts ...", grpcTransportPackage.Ident("ClientOption"), ",")
	generatedFile.P(") interface {")
	for _, endpoint := range service.Endpoints {
		generatedFile.P(endpoint.Name(), "(ctx ", contextPackage.Ident("Context"), ", request *", endpoint.InputGoIdent(), ") (*", endpoint.OutputGoIdent(), ", error)")
	}
	generatedFile.P("} {")
	generatedFile.P("return &", service.UnexportedGRPCClientName(), "{")
	for _, endpoint := range service.Endpoints {
		_ = endpoint
		generatedFile.P(endpoint.UnexportedName(), ":    ", endpointxPackage.Ident("Chain"), "(", grpcTransportPackage.Ident("NewClient"), "(conn, ", strconv.Quote(service.FullName()), ",", strconv.Quote(endpoint.Name()), ", func(_ ", contextPackage.Ident("Context"), ", v any) (any, error) { return v, nil }", ", ", "func(_ ", contextPackage.Ident("Context"), ", v any) (any, error) { return v, nil }, ", endpoint.OutputGoIdent(), "{}, opts...).Endpoint(), mdw...),")
	}
	generatedFile.P("}")
	generatedFile.P("}")
	generatedFile.P()
	return nil
}
