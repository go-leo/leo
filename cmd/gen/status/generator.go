package status

import (
	"github.com/go-leo/gox/slicex"
	"github.com/go-leo/leo/v3/proto/leo/status"
	"google.golang.org/genproto/googleapis/rpc/code"
	"google.golang.org/protobuf/compiler/protogen"
	"google.golang.org/protobuf/proto"
	"strconv"
)

type Generator struct {
	Plugin *protogen.Plugin
	File   *protogen.File
}

func NewGenerator(plugin *protogen.Plugin, file *protogen.File) *Generator {
	return &Generator{Plugin: plugin, File: file}
}

func (f *Generator) Generate() {
	// 如果没有一个枚举定义default_rpc_code，则不生成代码
	_, ok := slicex.FindFunc(f.File.Enums, func(enum *protogen.Enum) bool {
		return proto.HasExtension(enum.Desc.Options(), status.E_DefaultRpcCode)
	})
	if !ok {
		return
	}

	filename := f.File.GeneratedFilenamePrefix + "_leo.status.pb.go"
	g := f.Plugin.NewGeneratedFile(filename, f.File.GoImportPath)
	g.P("// Code generated by protoc-gen-leo. DO NOT EDIT.")
	g.P()
	g.P("package ", f.File.GoPackageName)
	g.P()

	for _, enum := range f.File.Enums {
		// 忽略未定义default_rpc_code的枚举
		if !proto.HasExtension(enum.Desc.Options(), status.E_DefaultRpcCode) {
			continue
		}
		for _, value := range enum.Values {
			g.P("var ", f.Clean(value), " = ", f.Err(value), "()")
			g.P()
			g.P("func ", f.Err(value), "(opts ...", Option, ") ", Status, " {")
			message, ok := f.Message(value)
			if ok {
				g.P("return ", f.Code(enum, value), "(append([]", Option, "{", Identifier, "(", f.Identifier(value), "), ", Message, "(", message, ")}, opts...)...)")
			} else {
				g.P("return ", f.Code(enum, value), "(append([]", Option, "{", Identifier, "(", f.Identifier(value), ")", "}, opts...)...)")
			}
			g.P("}")
			g.P()
			g.P("func ", f.Is(value), "(err error) (", Status, ", bool) {")
			g.P("st, ok :=", From, "(err)")
			g.P("if !ok {")
			g.P("return st, false")
			g.P("}")
			g.P("return st, ", f.Clean(value), ".Is(st)")
			g.P("}")
			g.P()
		}
	}
	return
}

func (f *Generator) Code(enum *protogen.Enum, value *protogen.EnumValue) any {
	if proto.HasExtension(value.Desc.Options(), status.E_RpcCode) {
		rpcCode := proto.GetExtension(value.Desc.Options(), status.E_RpcCode).(code.Code)
		return f.CodeMethod(rpcCode)
	}
	if proto.HasExtension(enum.Desc.Options(), status.E_DefaultRpcCode) {
		rpcCode := proto.GetExtension(enum.Desc.Options(), status.E_DefaultRpcCode).(code.Code)
		return f.CodeMethod(rpcCode)
	}
	return Unknown
}

func (f *Generator) CodeMethod(rpcCode code.Code) any {
	i := int(rpcCode)
	if i < 0 && i >= len(CodeMethods) {
		return Unknown
	}
	return CodeMethods[i]
}

func (f *Generator) Err(value *protogen.EnumValue) string {
	return "Err" + string(value.Desc.Name())
}

func (f *Generator) Is(value *protogen.EnumValue) string {
	return "Is" + string(value.Desc.Name())
}

func (f *Generator) Clean(value *protogen.EnumValue) string {
	return "clean_" + f.Err(value)
}

func (f *Generator) Identifier(value *protogen.EnumValue) string {
	return strconv.Quote(value.GoIdent.GoName)
}

func (f *Generator) Message(value *protogen.EnumValue) (string, bool) {
	if proto.HasExtension(value.Desc.Options(), status.E_Message) {
		return strconv.Quote(proto.GetExtension(value.Desc.Options(), status.E_Message).(string)), true
	}
	return strconv.Quote(""), false
}

var (
	StatusPackage = protogen.GoImportPath("github.com/go-leo/leo/v3/statusx")

	OK                 = StatusPackage.Ident("OK")
	Canceled           = StatusPackage.Ident("Canceled")
	Unknown            = StatusPackage.Ident("Unknown")
	InvalidArgument    = StatusPackage.Ident("InvalidArgument")
	DeadlineExceeded   = StatusPackage.Ident("DeadlineExceeded")
	NotFound           = StatusPackage.Ident("NotFound")
	AlreadyExists      = StatusPackage.Ident("AlreadyExists")
	PermissionDenied   = StatusPackage.Ident("PermissionDenied")
	ResourceExhausted  = StatusPackage.Ident("ResourceExhausted")
	FailedPrecondition = StatusPackage.Ident("FailedPrecondition")
	Aborted            = StatusPackage.Ident("Aborted")
	OutOfRange         = StatusPackage.Ident("OutOfRange")
	Unimplemented      = StatusPackage.Ident("Unimplemented")
	Internal           = StatusPackage.Ident("Internal")
	Unavailable        = StatusPackage.Ident("Unavailable")
	DataLoss           = StatusPackage.Ident("DataLoss")
	Unauthenticated    = StatusPackage.Ident("Unauthenticated")
	CodeMethods        = []protogen.GoIdent{
		OK,
		Canceled,
		Unknown,
		InvalidArgument,
		DeadlineExceeded,
		NotFound,
		AlreadyExists,
		PermissionDenied,
		ResourceExhausted,
		FailedPrecondition,
		Aborted,
		OutOfRange,
		Unimplemented,
		Internal,
		Unavailable,
		DataLoss,
		Unauthenticated,
	}

	Status = StatusPackage.Ident("Status")
	From   = StatusPackage.Ident("From")

	Option     = StatusPackage.Ident("Option")
	Identifier = StatusPackage.Ident("Identifier")
	Message    = StatusPackage.Ident("Message")
)
