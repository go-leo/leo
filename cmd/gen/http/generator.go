package http

import (
	"github.com/go-leo/leo/v3/cmd/gen/internal"
	"google.golang.org/protobuf/compiler/protogen"
)

type Generator struct {
	Plugin   *protogen.Plugin
	File     *protogen.File
	Services []*internal.Service
}

func NewGenerator(plugin *protogen.Plugin, file *protogen.File) (*Generator, error) {
	services, err := internal.NewServices(file)
	if err != nil {
		return nil, err
	}
	return &Generator{Plugin: plugin, File: file, Services: services}, nil
}

func (f *Generator) Generate() error {
	if len(f.Services) <= 0 {
		return nil
	}
	file := f.File
	filename := file.GeneratedFilenamePrefix + "_leo.http.pb.go"
	g := f.Plugin.NewGeneratedFile(filename, file.GoImportPath)
	g.P("// Code generated by protoc-gen-leo. DO NOT EDIT.")
	g.P()
	g.P("package ", file.GoPackageName)
	g.P()

	services, err := internal.NewServices(file)
	if err != nil {
		return err
	}

	functionGenerator := FunctionGenerator{}
	serverTransportsGenerator := ServerTransportsGenerator{}
	serverRequestDecoderGenerator := ServerRequestDecoderGenerator{}

	for _, service := range services {

		if err := functionGenerator.GenerateAppendRoutesFunc(service, g); err != nil {
			return err
		}
		if err := functionGenerator.GenerateAppendServerFunc(service, g); err != nil {
			return err
		}
		if err := functionGenerator.GenerateNewClientFunc(service, g); err != nil {
			return err
		}
		if err := serverTransportsGenerator.GenerateTransports(service, g); err != nil {
			return err
		}
		if err := serverRequestDecoderGenerator.GenerateServerRequestDecoder(service, g); err != nil {
			return err
		}
		responseEncoderGenerator := ResponseEncoderGenerator{
			service: service,
			g:       g,
		}
		if err := responseEncoderGenerator.GenerateResponseEncoder(); err != nil {
			return err
		}
		requestEncoderGenerator := RequestEncoderGenerator{
			service: service,
			g:       g,
		}
		if err := requestEncoderGenerator.GenerateRequestEncoder(); err != nil {
			return err
		}
		responseDecoderGenerator := ResponseDecoderGenerator{
			service: service,
			g:       g,
		}
		if err := responseDecoderGenerator.GenerateClientResponseDecoder(); err != nil {
			return err
		}
		if err := serverTransportsGenerator.GenerateTransportsImplements(service, g); err != nil {
			return err
		}
		if err := serverRequestDecoderGenerator.GenerateServerRequestDecoderImplements(service, g); err != nil {
			return err
		}
		if err := responseEncoderGenerator.GenerateServerResponseEncoderImplements(); err != nil {
			return err
		}
		clientTransportsGenerator := ClientTransportsGenerator{
			service: service,
			g:       g,
		}
		if err := clientTransportsGenerator.GenerateTransports(); err != nil {
			return err
		}
		if err := requestEncoderGenerator.GenerateClientRequestEncoderImplements(); err != nil {
			return err
		}
		if err := responseDecoderGenerator.GenerateClientResponseDecoderImplements(); err != nil {
			return err
		}
	}

	return nil
}
