package main

import (
	"fmt"
	"strconv"
	"strings"

	"google.golang.org/protobuf/compiler/protogen"
	"google.golang.org/protobuf/types/descriptorpb"
)

const (
	contextPackage    = protogen.GoImportPath("context")
	stdHTTPPackage    = protogen.GoImportPath("net/http")
	grpcPackage       = protogen.GoImportPath("google.golang.org/grpc")
	httpServerPackage = protogen.GoImportPath("github.com/hmldd/leo/runner/net/http/server")
	httpClientPackage = protogen.GoImportPath("github.com/hmldd/leo/runner/net/http/client")
)

// generateFile generates a _grpc.pb.go file containing gRPC service definitions.
func generateFile(gen *protogen.Plugin, file *protogen.File) *protogen.GeneratedFile {
	if len(file.Services) == 0 {
		return nil
	}
	filename := file.GeneratedFilenamePrefix + "_leo.pb.go"
	g := gen.NewGeneratedFile(filename, file.GoImportPath)
	g.P("// Code generated by protoc-gen-go-leo. DO NOT EDIT.")
	g.P("// versions:")
	g.P("// - protoc-gen-go-leo ", version)
	if file.Proto.GetOptions().GetDeprecated() {
		g.P("// ", file.Desc.Path(), " is a deprecated file.")
	} else {
		g.P("// source: ", file.Desc.Path())
	}
	g.P()
	g.P("package ", file.GoPackageName)
	g.P()
	generateFileContent(gen, file, g)
	return g
}

// generateFileContent generates the gRPC service definitions, excluding the package statement.
func generateFileContent(gen *protogen.Plugin, file *protogen.File, g *protogen.GeneratedFile) {
	if len(file.Services) == 0 {
		return
	}

	for _, service := range file.Services {
		genService(gen, file, g, service)
	}
}

func genService(gen *protogen.Plugin, file *protogen.File, g *protogen.GeneratedFile, service *protogen.Service) {
	genClient(gen, file, g, service)
	genServer(gen, file, g, service)
}

func genClient(gen *protogen.Plugin, file *protogen.File, g *protogen.GeneratedFile, service *protogen.Service) {
	clientName := service.GoName + "HTTPClient"

	// Client interface.
	genClientInterface(service, g, clientName)

	// Client structure.
	genClientStruct(g, clientName)

	// NewClient factory.
	genClientFactory(service, g, clientName)

	// Client method implementations.
	for _, method := range service.Methods {
		if method.Desc.IsStreamingClient() || method.Desc.IsStreamingServer() {
			continue
		}
		genClientMethod(gen, file, g, method, clientName)
	}
}

func genClientFactory(service *protogen.Service, g *protogen.GeneratedFile, clientName string) {
	if service.Desc.Options().(*descriptorpb.ServiceOptions).GetDeprecated() {
		g.P(deprecationComment)
	}
	g.P("func New", clientName, " (cc ", httpClientPackage.Ident("Interface"), ") ", clientName, " {")
	g.P("return &", unexport(clientName), "{cc}")
	g.P("}")
	g.P()
}

func genClientStruct(g *protogen.GeneratedFile, clientName string) {
	g.P("type ", unexport(clientName), " struct {")
	g.P("cc ", httpClientPackage.Ident("Interface"))
	g.P("}")
	g.P()
}

func genClientInterface(service *protogen.Service, g *protogen.GeneratedFile, clientName string) {
	if service.Desc.Options().(*descriptorpb.ServiceOptions).GetDeprecated() {
		g.P("//")
		g.P(deprecationComment)
	}
	g.Annotate(clientName, service.Location)
	g.P("type ", clientName, " interface {")
	for _, method := range service.Methods {
		if method.Desc.IsStreamingClient() || method.Desc.IsStreamingServer() {
			continue
		}
		g.Annotate(clientName+"."+method.GoName, method.Location)
		if method.Desc.Options().(*descriptorpb.MethodOptions).GetDeprecated() {
			g.P(deprecationComment)
		}
		g.P(method.GoName+"(ctx ", contextPackage.Ident("Context"), ", in *", method.Input.GoIdent, ") (* ", method.Output.GoIdent, ", error)")
	}
	g.P("}")
	g.P()
}

func genClientMethod(gen *protogen.Plugin, file *protogen.File, g *protogen.GeneratedFile, method *protogen.Method, clientName string) {
	service := method.Parent
	sname := fmt.Sprintf("/%s/%s", service.Desc.FullName(), method.Desc.Name())

	if method.Desc.Options().(*descriptorpb.MethodOptions).GetDeprecated() {
		g.P(deprecationComment)
	}
	g.P("func (c *", unexport(clientName), ") ", method.GoName+"(ctx ", contextPackage.Ident("Context"), ", in *", method.Input.GoIdent, ") (* ", method.Output.GoIdent, ", error)", "{")
	g.P("out := new(", method.Output.GoIdent, ")")
	g.P(`err := c.cc.Invoke(ctx, `, stdHTTPPackage.Ident("MethodPost"), `, "`, sname, `", in, out)`)
	g.P("if err != nil { return nil, err }")
	g.P("return out, nil")
	g.P("}")
	g.P()
}

func genServer(gen *protogen.Plugin, file *protogen.File, g *protogen.GeneratedFile, service *protogen.Service) {
	//g.P("// Leading", service.Comments.Leading)
	//g.P("// Trailing", service.Comments.Trailing)
	//for _, comments := range service.Comments.LeadingDetached {
	//	g.P("// LeadingDetached", comments)
	//}
	serverType := service.GoName + "Server"
	clientName := service.GoName + "Client"
	// Server registration.
	if service.Desc.Options().(*descriptorpb.ServiceOptions).GetDeprecated() {
		g.P(deprecationComment)
	}
	serviceGRPCDescVar := service.GoName + "_ServiceDesc"
	serviceHTTPDescVar := service.GoName + "_HTTP_ServiceDesc"
	g.P("func ", service.GoName, "ServiceDesc(srv ", serverType, ") func() (any, *", grpcPackage.Ident("ServiceDesc"), ", *", httpServerPackage.Ident("ServiceDesc"), ", func(", grpcPackage.Ident("ClientConnInterface"), ") any", ") {")
	g.P("return func() (any, *", grpcPackage.Ident("ServiceDesc"), ", *", httpServerPackage.Ident("ServiceDesc"), ", func(", grpcPackage.Ident("ClientConnInterface"), ") any", ") {")
	g.P("return srv, &", serviceGRPCDescVar, ", &", serviceHTTPDescVar, ", func(cc ", grpcPackage.Ident("ClientConnInterface"), ") any  { return ", "New", clientName, "(cc)", "}")
	g.P("}")
	g.P("}")
	g.P()

	// Server handlers.
	methods := genServerHandlers(gen, file, g, service)
	// Service descriptor.
	genServerDescriptor(gen, file, g, service, methods, serverType, serviceHTTPDescVar)
}

func genServerHandlers(gen *protogen.Plugin, file *protogen.File, g *protogen.GeneratedFile, service *protogen.Service) []*protogen.Method {
	var methods []*protogen.Method
	for _, method := range service.Methods {
		if method.Desc.IsStreamingClient() || method.Desc.IsStreamingServer() {
			continue
		}

		genServerMethod(gen, file, g, service, method)
		methods = append(methods, method)
	}
	return methods
}

func genServerMethod(gen *protogen.Plugin, file *protogen.File, g *protogen.GeneratedFile, service *protogen.Service, method *protogen.Method) {
	clientName := service.GoName + "Client"
	handlerName := formatHandlerName(service, method)
	requestCreatorName := formatRequestConstructorName(service, method)
	g.P("func ", requestCreatorName, "() any{")
	g.P("return ", "new(", method.Input.GoIdent, ")")
	g.P("}")
	g.P()

	g.P("func ", handlerName, "(", "cli any", ", ctx ", contextPackage.Ident("Context"), ", in any) (any, error) {")
	g.P("metadata, _ := ", httpServerPackage.Ident("MetadataFromContext"), "(ctx)")
	g.P("return cli.(", clientName, ").", method.GoName, "(ctx, in.(*", method.Input.GoIdent, "), ", grpcPackage.Ident("Header"), "(&metadata.HeaderMD),", grpcPackage.Ident("Trailer"), "(&metadata.TrailerMD))")
	g.P("}")
	g.P()
}

func genServerDescriptor(gen *protogen.Plugin, file *protogen.File, g *protogen.GeneratedFile, service *protogen.Service, methods []*protogen.Method, serverType, serviceDescVar string) {
	g.P("// ", serviceDescVar, " is the ", httpServerPackage.Ident("ServiceDesc"), " for ", service.GoName, " service,")
	g.P("// and not to be introspected or modified (even as a copy)")
	g.P("var ", serviceDescVar, " = ", httpServerPackage.Ident("ServiceDesc"), " {")
	g.P("ServiceName: ", strconv.Quote(string(service.Desc.FullName())), ",")
	g.P("HandlerType: (*", serverType, ")(nil),")
	g.P("Methods: []*", httpServerPackage.Ident("MethodDesc"), "{")
	for _, method := range methods {
		if method.Desc.IsStreamingClient() || method.Desc.IsStreamingServer() {
			continue
		}
		methodName := strconv.Quote(string(method.Desc.Name()))
		path := strconv.Quote(formatFullMethodName(service, method))
		handlerName := formatHandlerName(service, method)
		requestConstructorName := formatRequestConstructorName(service, method)
		g.P("{")
		g.P("HTTPMethod: ", stdHTTPPackage.Ident("MethodPost"), ",")
		g.P("MethodName: ", methodName, ",")
		g.P("Path: ", path, ",")
		g.P("Handler: ", handlerName, ",")
		g.P("RequestConstructor: ", requestConstructorName, ",")
		g.P("},")
	}
	g.P("},")
	g.P("Metadata: \"", file.Desc.Path(), "\",")
	g.P("}")
	g.P()
}

const deprecationComment = "// Deprecated: Do not use."

func unexport(s string) string { return strings.ToLower(s[:1]) + s[1:] }

func formatFullMethodName(service *protogen.Service, method *protogen.Method) string {
	return fmt.Sprintf("/%s/%s", service.Desc.FullName(), method.Desc.Name())
}

func formatHandlerName(service *protogen.Service, method *protogen.Method) string {
	return fmt.Sprintf("_%s_%s_HTTP_Handler", service.GoName, method.GoName)
}

func formatRequestConstructorName(service *protogen.Service, method *protogen.Method) string {
	return fmt.Sprintf("_%s_%s_request_constructor", service.GoName, method.GoName)
}
