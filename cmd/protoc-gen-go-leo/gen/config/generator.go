package config

import (
	"github.com/go-leo/gox/slicex"
	"github.com/go-leo/leo/v3/proto/leo/config"
	"google.golang.org/protobuf/compiler/protogen"
	"google.golang.org/protobuf/proto"
)

type Generator struct {
	Plugin *protogen.Plugin
	File   *protogen.File
}

func NewGenerator(plugin *protogen.Plugin, file *protogen.File) *Generator {
	return &Generator{Plugin: plugin, File: file}
}

func (f *Generator) Generate() {
	_, ok := slicex.FindFunc(f.File.Messages, func(message *protogen.Message) bool {
		return proto.HasExtension(message.Desc.Options(), config.E_Enable)
	})
	if !ok {
		return
	}

	filename := f.File.GeneratedFilenamePrefix + "_leo.config.pb.go"
	g := f.Plugin.NewGeneratedFile(filename, f.File.GoImportPath)
	g.P("// Code generated by protoc-gen-go-leo. DO NOT EDIT.")
	g.P()
	g.P("package ", f.File.GoPackageName)
	g.P()

	messages := f.EnabledMessage()

	for _, message := range messages {
		g.P("var (")
		g.P(f.GlobalConfig(message), " = &", message.GoIdent, "{}")
		g.P(f.GlobalConfigMutex(message), " ", RWMutex)
		g.P(")")
		g.P()
	}

	for _, message := range messages {
		g.P("func ", f.GetConfig(message), "() *", message.GoIdent, " {")
		g.P(f.GlobalConfigMutex(message), ".RLock()")
		g.P("defer ", f.GlobalConfigMutex(message), ".RUnlock()")
		g.P("return ", Clone, "(", f.GlobalConfig(message), ")")
		g.P("}")
		g.P()
		g.P("func ", f.SetConfig(message), "(conf *", message.GoIdent, ") {")
		g.P(f.GlobalConfigMutex(message), ".Lock()")
		g.P(f.GlobalConfig(message), " = ", Clone, "(conf)")
		g.P(f.GlobalConfigMutex(message), ".Unlock()")
		g.P("}")
		g.P()
	}

	for _, message := range messages {
		g.P("func ", f.LoadConfig(message), "(ctx ", Context, ", opts ...", Option, ") error {")
		g.P("conf, err := ", Load, "[*", message.GoIdent, "](ctx, opts...)")
		g.P("if err != nil {")
		g.P("return err")
		g.P("}")
		g.P(f.SetConfig(message), "(conf)")
		g.P("return nil")
		g.P("}")
		g.P()
		g.P("func ", f.WatchConfig(message), "(ctx ", Context, ", opts ...", Option, ") error {")
		g.P("confC, err := ", Watch, "[*", message.GoIdent, "](ctx, opts...)")
		g.P("if err != nil {")
		g.P("return err")
		g.P("}")
		g.P("go func() {")
		g.P("for {")
		g.P("select {")
		g.P("case <-ctx.Done():")
		g.P("return")
		g.P("case conf := <-confC:")
		g.P(f.SetConfig(message), "(conf)")
		g.P("}")
		g.P("}")
		g.P("}()")
		g.P("return nil")
		g.P("}")
		g.P()
		g.P("func ", f.LoadAndWatchConfig(message), "(ctx ", Context, ", opts ...", Option, ") error {")
		g.P("if err := ", f.LoadConfig(message), "(ctx, opts...); err != nil {")
		g.P("return err")
		g.P("}")
		g.P("return ", f.WatchConfig(message), "(ctx, opts...)")
		g.P("}")

	}

	//for _, message := range messages {
	//	for _, field := range message.Fields {
	//		if field.Desc.Kind() != protoreflect.MessageKind {
	//			g.P("// ", message.GoIdent.GoName, ".", field.GoName, " is not message, skip")
	//			g.P()
	//			continue
	//		}
	//		g.P("func ", f.GetFieldOption(message, field), "() *", field.Message.GoIdent, "{")
	//		g.P("return ", f.GetConfig(message), "().Get", field.GoName, "()")
	//		g.P("}")
	//		g.P()
	//	}
	//}
}

func (f *Generator) GetFieldOption(message *protogen.Message, field *protogen.Field) string {
	return "Get" + message.GoIdent.GoName + field.GoName + "Options"
}

func (f *Generator) GlobalConfigMutex(message *protogen.Message) string {
	return f.GlobalConfig(message) + "Mutex"
}

func (f *Generator) GlobalConfig(message *protogen.Message) string {
	return "_" + f.Config(message)
}

func (f *Generator) GetConfig(message *protogen.Message) string {
	return "Get" + f.Config(message)
}

func (f *Generator) SetConfig(message *protogen.Message) string {
	return "Set" + f.Config(message)
}

func (f *Generator) Config(message *protogen.Message) string {
	return message.GoIdent.GoName + "Config"
}

func (f *Generator) LoadConfig(message *protogen.Message) string {
	return "Load" + f.Config(message)
}

func (f *Generator) WatchConfig(message *protogen.Message) string {
	return "Watch" + f.Config(message)
}

func (f *Generator) LoadAndWatchConfig(message *protogen.Message) string {
	return "LoadAndWatch" + f.Config(message)
}

func (f *Generator) EnabledMessage() []*protogen.Message {
	var messages []*protogen.Message
	for _, message := range f.File.Messages {
		if !proto.HasExtension(message.Desc.Options(), config.E_Enable) {
			continue
		}
		if !proto.GetExtension(message.Desc.Options(), config.E_Enable).(bool) {
			continue
		}
		messages = append(messages, message)
	}
	return messages
}

var (
	syncPackage = protogen.GoImportPath("sync")
	RWMutex     = syncPackage.Ident("RWMutex")
)

var (
	protoxPackage = protogen.GoImportPath("github.com/go-leo/gox/protox")
	Clone         = protoxPackage.Ident("Clone")
)

var (
	contextPackage = protogen.GoImportPath("context")
	Context        = contextPackage.Ident("Context")
)

var (
	configxPackage = protogen.GoImportPath("github.com/go-leo/leo/v3/configx")
	Option         = configxPackage.Ident("Option")
	Load           = configxPackage.Ident("Load")
	Watch          = configxPackage.Ident("Watch")
)
