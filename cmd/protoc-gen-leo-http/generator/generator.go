package generator

import (
	"github.com/go-leo/leo/v3/cmd/internal"
	"google.golang.org/protobuf/compiler/protogen"
)

type Generator struct {
	Plugin   *protogen.Plugin
	File     *protogen.File
	Services []*internal.Service
}

func NewGenerator(plugin *protogen.Plugin, file *protogen.File) (*Generator, error) {
	services, err := internal.NewHttpServices(file)
	if err != nil {
		return nil, err
	}
	return &Generator{Plugin: plugin, File: file, Services: services}, nil
}

func (f *Generator) Generate() error {
	return f.GenerateFile()
}

func (f *Generator) GenerateFile() error {
	file := f.File
	filename := file.GeneratedFilenamePrefix + "_leo.http.pb.go"
	g := f.Plugin.NewGeneratedFile(filename, file.GoImportPath)
	g.P("// Code generated by protoc-gen-go-grpc. DO NOT EDIT.")
	g.P()
	g.P("package ", file.GoPackageName)
	g.P()

	server := ServerGenerator{}
	for _, service := range f.Services {
		if err := server.GenerateNewServer(service, g); err != nil {
			return err
		}
	}

	client := ClientGenerator{}
	for _, service := range f.Services {
		if err := client.GenerateClient(service, g); err != nil {
			return err
		}
	}
	for _, service := range f.Services {
		if err := client.GenerateNewClient(service, g); err != nil {
			return err
		}
	}
	return nil
}
