package generator

import (
	"fmt"
	"github.com/go-leo/gox/convx"
	"github.com/go-leo/leo/v3/cmd/internal"
	"google.golang.org/protobuf/compiler/protogen"
	"google.golang.org/protobuf/reflect/protoreflect"
	"strconv"
	"strings"
	"sync"
)

type Generator struct {
	Plugin   *protogen.Plugin
	File     *protogen.File
	Services []*internal.Service
}

func NewGenerator(plugin *protogen.Plugin, file *protogen.File) (*Generator, error) {
	services, err := internal.NewServices(file)
	if err != nil {
		return nil, err
	}
	return &Generator{Plugin: plugin, File: file, Services: services}, nil
}

func (f *Generator) Generate() error {
	return f.GenerateFile()
}

func (f *Generator) GenerateFile() error {
	file := f.File
	filename := file.GeneratedFilenamePrefix + "_leo.http.pb.go"
	g := f.Plugin.NewGeneratedFile(filename, file.GoImportPath)
	g.P("// Code generated by protoc-gen-go-grpc. DO NOT EDIT.")
	g.P()
	g.P("package ", file.GoPackageName)
	g.P()
	//for _, service := range f.Services {
	//	if err := f.GenerateNewServer(service, g); err != nil {
	//		return err
	//	}
	//}
	for _, service := range f.Services {
		if err := f.GenerateClient(service, g); err != nil {
			return err
		}
	}

	for _, service := range f.Services {
		if err := f.GenerateNewClient(service, g); err != nil {
			return err
		}
	}
	return nil
}

func (f *Generator) GenerateNewServer(service *internal.Service, generatedFile *protogen.GeneratedFile) error {
	generatedFile.P("func New", service.HTTPServerName(), "(")
	generatedFile.P("endpoints interface {")
	for _, endpoint := range service.Endpoints {
		generatedFile.P(endpoint.Name(), "() ", internal.EndpointPackage.Ident("Endpoint"))
	}
	generatedFile.P("},")
	generatedFile.P("mdw []", internal.EndpointPackage.Ident("Middleware"), ",")
	generatedFile.P("opts ...", internal.HttpTransportPackage.Ident("ServerOption"), ",")
	generatedFile.P(") ", internal.HttpPackage.Ident("Handler"), " {")
	generatedFile.P("router := ", internal.MuxPackage.Ident("NewRouter"), "()")
	for _, endpoint := range service.Endpoints {
		httpRule := endpoint.HttpRule()
		// 调整路径，来适应 github.com/gorilla/mux 路由规则
		path, _, _, _ := httpRule.RegularizePath(httpRule.Path())
		generatedFile.P("router.NewRoute().")
		generatedFile.P("Name(", strconv.Quote(endpoint.FullName()), ").")
		generatedFile.P("Methods(", strconv.Quote(httpRule.Method()), ").")
		generatedFile.P("Path(", strconv.Quote(path), ").")
		generatedFile.P("Handler(", internal.HttpTransportPackage.Ident("NewServer"), "(")
		generatedFile.P(internal.EndpointxPackage.Ident("Chain"), "(endpoints.", endpoint.Name(), "(), mdw...), ")
		if err := f.PrintDecodeRequestFunc(generatedFile, endpoint); err != nil {
			return err
		}
		if err := f.PrintEncodeResponseFunc(generatedFile, endpoint, httpRule); err != nil {
			return err
		}

		generatedFile.P("},")
		generatedFile.P("opts...,")
		generatedFile.P("))")
	}
	generatedFile.P("return router")
	generatedFile.P("}")
	generatedFile.P()
	return nil
}

func (f *Generator) PrintDecodeRequestFunc(
	generatedFile *protogen.GeneratedFile, endpoint *internal.Endpoint,
) error {
	generatedFile.P("func(ctx ", internal.ContextPackage.Ident("Context"), ", r *", internal.HttpPackage.Ident("Request"), ") (any, error) {")
	generatedFile.P("req := &", endpoint.InputGoIdent(), "{}")

	bodyMessage, bodyField, namedPathFields, pathFields, queryFields, err := endpoint.ParseParameters()
	if err != nil {
		return err
	}

	if bodyMessage != nil {
		switch bodyMessage.Desc.FullName() {
		case "google.api.HttpBody":
			f.PrintApiFromBody(generatedFile, nil)
		case "google.rpc.HttpRequest":
			f.PrintRpcBody(generatedFile, nil)
		default:
			f.printStarBody(generatedFile)
		}
	} else if bodyField != nil {
		if err := f.printFieldBody(generatedFile, bodyField); err != nil {
			return err
		}
	}

	var pathOnce sync.Once
	for i, namedPathField := range namedPathFields {
		pathOnce.Do(func() {
			generatedFile.P("vars := ", internal.MuxPackage.Ident("Vars"), "(r)")
		})
		fullFieldName := internal.FullFieldName(namedPathFields[:i+1])
		if i < len(namedPathFields)-1 {
			generatedFile.P("if req.", fullFieldName, " == nil {")
			generatedFile.P("req.", fullFieldName, " = &", namedPathField.Message.GoIdent, "{}")
			generatedFile.P("}")
		} else {
			httpRule := endpoint.HttpRule()
			_, _, namedPathTemplate, namedPathParameters := httpRule.RegularizePath(httpRule.Path())
			left := []any{"req.", fullFieldName, " = "}
			right := []any{internal.FmtPackage.Ident("Sprintf"), "(", strconv.Quote(namedPathTemplate)}
			for _, namedPathParameter := range namedPathParameters {
				right = append(right, ", vars[", strconv.Quote(namedPathParameter), "]")
			}
			right = append(right, ")")
			if err := f.printAssign(generatedFile, namedPathField, left, right, false); err != nil {
				return err
			}
		}
	}

	for _, pathField := range pathFields {
		pathOnce.Do(func() {
			generatedFile.P("vars := ", internal.MuxPackage.Ident("Vars"), "(r)")
		})
		left := []any{"req.", pathField.GoName, " = "}
		right := []any{"vars[", strconv.Quote(string(pathField.Desc.Name())), "]"}
		if err := f.printAssign(generatedFile, pathField, left, right, false); err != nil {
			return err
		}
	}

	var queryOnce sync.Once
	for _, field := range queryFields {
		queryOnce.Do(func() {
			generatedFile.P("queries := r.URL.Query()")
		})
		fieldName := string(field.Desc.Name())
		if field.Message != nil && field.Message.Desc.FullName() == "google.protobuf.FieldMask" {
			if bodyField != nil {
				generatedFile.P("mask, err := ", internal.FieldmaskpbPackage.Ident("New"), "(req.", bodyField.GoName, ", queries[", strconv.Quote(fieldName), "]...)")
			} else if bodyMessage != nil {
				generatedFile.P("mask, err := ", internal.FieldmaskpbPackage.Ident("New"), "(req", ", queries[", strconv.Quote(fieldName), "]...)")
			}
			generatedFile.P("if err != nil {")
			generatedFile.P("return nil, err")
			generatedFile.P("}")
			generatedFile.P("req.UpdateMask = mask")
			continue
		}
		left := []any{"req.", field.GoName, " = "}
		right := []any{"queries.Get(", strconv.Quote(fieldName), ")"}
		if field.Desc.IsList() {
			right = []any{"queries[", strconv.Quote(fieldName), "]"}
		}
		if err := f.printAssign(generatedFile, field, left, right, field.Desc.IsList()); err != nil {
			return err
		}
	}

	generatedFile.P("return req, nil")
	generatedFile.P("},")
	return nil
}

func (f *Generator) PrintApiFromBody(generatedFile *protogen.GeneratedFile, field *protogen.Field) {
	prefix := "req."
	if field != nil {
		prefix = prefix + field.GoName + "."
	}
	generatedFile.P(prefix, "ContentType = r.Header.Get(", strconv.Quote("Content-Type"), ")")
	generatedFile.P("body, err := ", internal.IOPackage.Ident("ReadAll"), "(r.Body)")
	generatedFile.P("if err != nil {")
	generatedFile.P("return nil, err")
	generatedFile.P("}")
	generatedFile.P(prefix, "Data = body")
}

func (f *Generator) PrintRpcBody(generatedFile *protogen.GeneratedFile, field *protogen.Field) {
	prefix := "req."
	if field != nil {
		prefix = prefix + field.GoName + "."
	}
	generatedFile.P(prefix, "Method = r.Method")
	generatedFile.P(prefix, "Uri = r.RequestURI")
	generatedFile.P(prefix, "Headers = make([]*", internal.RpcHttpPackage.Ident("HttpHeader"), ", 0, len(r.Header))")
	generatedFile.P("for key, values := range r.Header {")
	generatedFile.P("for _, value := range values {")
	generatedFile.P(prefix, "Headers = append(", prefix, "Headers, &", internal.RpcHttpPackage.Ident("HttpHeader"), "{Key: key, Value: value})")
	generatedFile.P("}")
	generatedFile.P("}")
	generatedFile.P("body, err := ", internal.IOPackage.Ident("ReadAll"), "(r.Body)")
	generatedFile.P("if err != nil {")
	generatedFile.P("return nil, err")
	generatedFile.P("}")
	generatedFile.P(prefix, "Body = body")
}

func (f *Generator) printFieldBody(generatedFile *protogen.GeneratedFile, field *protogen.Field) error {
	message := field.Message
	switch {
	case message != nil && message.Desc.FullName() == "google.api.HttpBody":
		f.PrintApiFromBody(generatedFile, field)
	case message != nil && message.Desc.FullName() == "google.rpc.HttpRequest":
		f.PrintRpcBody(generatedFile, field)
	default:
		generatedFile.P("body, err := ", internal.IOPackage.Ident("ReadAll"), "(r.Body)")
		generatedFile.P("if err != nil {")
		generatedFile.P("return nil, err")
		generatedFile.P("}")
		left := []any{"req.", field.GoName, " = "}
		right := []any{"string(body)"}
		if err := f.printAssign(generatedFile, field, left, right, false); err != nil {
			return err
		}
	}
	return nil
}

func (f *Generator) printStarBody(generatedFile *protogen.GeneratedFile) {
	generatedFile.P("body, err := ", internal.IOPackage.Ident("ReadAll"), "(r.Body)")
	generatedFile.P("if err != nil {")
	generatedFile.P("return nil, err")
	generatedFile.P("}")
	generatedFile.P("if err := ", internal.ProtoJsonPackage.Ident("Unmarshal"), "(body, req); err != nil {")
	generatedFile.P("return nil, err")
	generatedFile.P("}")
}

func (f *Generator) printAssign(generatedFile *protogen.GeneratedFile, field *protogen.Field, left []any, right []any, isList bool) error {
	switch field.Desc.Kind() {
	case protoreflect.BoolKind:
		// bool
		if isList {
			right = append([]any{"if v, err := ", internal.ConvxPackage.Ident("ParseBoolSlice"), "("}, right...)
		} else {
			right = append([]any{"if v, err := ", internal.StrconvPackage.Ident("ParseBool"), "("}, right...)
		}
		right = append(right, "); err != nil {")
		generatedFile.P(right...)
		generatedFile.P("return nil, err")
		generatedFile.P("} else {")
		if field.Desc.HasOptionalKeyword() {
			generatedFile.P(append(left, internal.ProtoPackage.Ident("Bool"), "(v)")...)
		} else {
			generatedFile.P(append(left, "v")...)
		}
		generatedFile.P("}")
	case protoreflect.EnumKind:
		generatedFile.P("// enum")

	case protoreflect.Int32Kind, protoreflect.Sint32Kind, protoreflect.Sfixed32Kind:
		// int32
		if isList {
			right = append([]any{"if v, err := ", internal.ConvxPackage.Ident("ParseIntSlice[int32]"), "("}, right...)
		} else {
			right = append([]any{"if v, err := ", internal.StrconvPackage.Ident("ParseInt"), "("}, right...)
		}
		right = append(right, ", 10, 32); err != nil {")
		generatedFile.P(right...)
		generatedFile.P("return nil, err")
		generatedFile.P("} else {")
		if field.Desc.HasOptionalKeyword() {
			generatedFile.P(append(left, internal.ProtoPackage.Ident("Int32"), "(int32(v))")...)
		} else if isList {
			generatedFile.P(append(left, "v")...)
		} else {
			generatedFile.P(append(left, "int32(v)")...)
		}
		generatedFile.P("}")
	case protoreflect.Uint32Kind, protoreflect.Fixed32Kind:
		// uint32
		if isList {
			right = append([]any{"if v, err := ", internal.ConvxPackage.Ident("ParseUintSlice[uint32]"), "("}, right...)
		} else {
			right = append([]any{"if v, err := ", internal.StrconvPackage.Ident("ParseUint"), "("}, right...)
		}
		right = append(right, ", 10, 32); err != nil {")
		generatedFile.P(right...)
		generatedFile.P("return nil, err")
		generatedFile.P("} else {")
		if field.Desc.HasOptionalKeyword() {
			generatedFile.P(append(left, internal.ProtoPackage.Ident("Uint32"), "(uint32(v))")...)
		} else if isList {
			generatedFile.P(append(left, "v")...)
		} else {
			generatedFile.P(append(left, "uint32(v)")...)
		}
		generatedFile.P("}")
	case protoreflect.Int64Kind, protoreflect.Sint64Kind, protoreflect.Sfixed64Kind:
		// int64
		if isList {
			right = append([]any{"if v, err := ", internal.ConvxPackage.Ident("ParseIntSlice[int64]"), "("}, right...)
		} else {
			right = append([]any{"if v, err := ", internal.StrconvPackage.Ident("ParseInt"), "("}, right...)
		}
		right = append(right, ", 10, 64); err != nil {")
		generatedFile.P(right...)
		generatedFile.P("return nil, err")
		generatedFile.P("} else {")
		if field.Desc.HasOptionalKeyword() {
			generatedFile.P(append(left, internal.ProtoPackage.Ident("Int64"), "(v)")...)
		} else {
			generatedFile.P(append(left, "v")...)
		}
		generatedFile.P("}")
	case protoreflect.Uint64Kind, protoreflect.Fixed64Kind:
		// uint64
		if isList {
			right = append([]any{"if v, err := ", internal.ConvxPackage.Ident("ParseUintSlice[uint64]"), "("}, right...)
		} else {
			right = append([]any{"if v, err := ", internal.StrconvPackage.Ident("ParseUint"), "("}, right...)
		}
		right = append(right, ", 10, 64); err != nil {")
		generatedFile.P(right...)
		generatedFile.P("return nil, err")
		generatedFile.P("} else {")
		if field.Desc.HasOptionalKeyword() {
			generatedFile.P(append(left, internal.ProtoPackage.Ident("Uint64"), "(v)")...)
		} else {
			generatedFile.P(append(left, "v")...)
		}
		generatedFile.P("}")
	case protoreflect.FloatKind:
		// float32
		if isList {
			right = append([]any{"if v, err := ", internal.ConvxPackage.Ident("ParseFloatSlice[float32]"), "("}, right...)
		} else {
			right = append([]any{"if v, err := ", internal.StrconvPackage.Ident("ParseFloat"), "("}, right...)
		}
		right = append(right, ", 32); err != nil {")
		generatedFile.P(right...)
		generatedFile.P("return nil, err")
		generatedFile.P("} else {")
		if field.Desc.HasOptionalKeyword() {
			generatedFile.P(append(left, internal.ProtoPackage.Ident("Float32"), "(float32(v))")...)
		} else if isList {
			generatedFile.P(append(left, "v")...)
		} else {
			generatedFile.P(append(left, "float32(v)")...)
		}
		generatedFile.P("}")
	case protoreflect.DoubleKind:
		// float64
		if isList {
			right = append([]any{"if v, err := ", internal.ConvxPackage.Ident("ParseFloatSlice[float64]"), "("}, right...)
		} else {
			right = append([]any{"if v, err := ", internal.StrconvPackage.Ident("ParseFloat"), "("}, right...)
		}
		right = append(right, ", 32); err != nil {")
		generatedFile.P(right...)
		generatedFile.P("return nil, err")
		generatedFile.P("} else {")
		if field.Desc.HasOptionalKeyword() {
			generatedFile.P(append(left, internal.ProtoPackage.Ident("Float64"), "(v)")...)
		} else {
			generatedFile.P(append(left, "v")...)
		}
		generatedFile.P("}")
	case protoreflect.StringKind:
		// string
		if field.Desc.HasOptionalKeyword() {
			a := []any{internal.ProtoPackage.Ident("String"), "("}
			right = append(a, right...)
			right = append(right, ")")
			generatedFile.P(append(left, right...)...)
		} else {
			generatedFile.P(append(left, right...)...)
		}
	case protoreflect.BytesKind:
		// []byte
		if isList {
			right = append([]any{internal.ConvxPackage.Ident("ParseBytesSlice"), "("}, right...)
			right = append(right, ")")
			generatedFile.P(append(left, right...)...)
		} else {
			right = append([]any{"[]byte("}, right...)
			right = append(right, ")")
			generatedFile.P(append(left, right...)...)
		}
	case protoreflect.MessageKind:
		switch field.Message.Desc.FullName() {
		case "google.protobuf.DoubleValue":
			right = append([]any{"if v, err := ", internal.StrconvPackage.Ident("ParseFloat"), "("}, right...)
			right = append(right, ", 64); err != nil {")
			generatedFile.P(right...)
			generatedFile.P("return nil, err")
			generatedFile.P("} else {")
			generatedFile.P(append(left, internal.WrapperspbPackage.Ident("Double"), "(v)")...)
			generatedFile.P("}")
		case "google.protobuf.FloatValue":
			right = append([]any{"if v, err := ", internal.StrconvPackage.Ident("ParseFloat"), "("}, right...)
			right = append(right, ", 32); err != nil {")
			generatedFile.P(right...)
			generatedFile.P("return nil, err")
			generatedFile.P("} else {")
			generatedFile.P(append(left, internal.WrapperspbPackage.Ident("Float"), "(float32(v))")...)
			generatedFile.P("}")
		case "google.protobuf.Int64Value":
			right = append([]any{"if v, err := ", internal.StrconvPackage.Ident("ParseInt"), "("}, right...)
			right = append(right, ", 10, 64); err != nil {")
			generatedFile.P(right...)
			generatedFile.P("return nil, err")
			generatedFile.P("} else {")
			generatedFile.P(append(left, internal.WrapperspbPackage.Ident("Int64"), "(v)")...)
			generatedFile.P("}")
		case "google.protobuf.UInt64Value":
			right = append([]any{"if v, err := ", internal.StrconvPackage.Ident("ParseUint"), "("}, right...)
			right = append(right, ", 10, 64); err != nil {")
			generatedFile.P(right...)
			generatedFile.P("return nil, err")
			generatedFile.P("} else {")
			generatedFile.P(append(left, internal.WrapperspbPackage.Ident("UInt64"), "(v)")...)
			generatedFile.P("}")
		case "google.protobuf.Int32Value":
			right = append([]any{"if v, err := ", internal.StrconvPackage.Ident("ParseInt"), "("}, right...)
			right = append(right, ", 10, 32); err != nil {")
			generatedFile.P(right...)
			generatedFile.P("return nil, err")
			generatedFile.P("} else {")
			generatedFile.P(append(left, internal.WrapperspbPackage.Ident("Int32"), "(int32(v))")...)
			generatedFile.P("}")
		case "google.protobuf.UInt32Value":
			right = append([]any{"if v, err := ", internal.StrconvPackage.Ident("ParseUint"), "("}, right...)
			right = append(right, ", 10, 32); err != nil {")
			generatedFile.P(right...)
			generatedFile.P("return nil, err")
			generatedFile.P("} else {")
			generatedFile.P(append(left, internal.WrapperspbPackage.Ident("UInt32"), "(uint32(v))")...)
			generatedFile.P("}")
		case "google.protobuf.BoolValue":
			right = append([]any{"if v, err := ", internal.StrconvPackage.Ident("ParseBool"), "("}, right...)
			right = append(right, "); err != nil {")
			generatedFile.P(right...)
			generatedFile.P("return nil, err")
			generatedFile.P("} else {")
			generatedFile.P(append(left, internal.WrapperspbPackage.Ident("Bool"), "(v)")...)
			generatedFile.P("}")
		case "google.protobuf.StringValue":
			a := []any{internal.WrapperspbPackage.Ident("String"), "("}
			right = append(a, right...)
			right = append(right, ")")
			generatedFile.P(append(left, right...)...)
		case "google.protobuf.BytesValue":
			a := []any{internal.WrapperspbPackage.Ident("Bytes"), "([]byte("}
			right = append(a, right...)
			right = append(right, "))")
			generatedFile.P(append(left, right...)...)
		default:
			generatedFile.P("if err := ", internal.ProtoJsonPackage.Ident("Unmarshal"), "(body, req.", field.GoName, "); err != nil {")
			generatedFile.P("return nil, err")
			generatedFile.P("}")
		}
	case protoreflect.GroupKind:
		generatedFile.P("// group")

	default:
		return fmt.Errorf("unsupported field type: %+v", internal.FullMessageTypeName(field.Desc.Message()))
	}
	return nil
}

func (f *Generator) PrintEncodeResponseFunc(generatedFile *protogen.GeneratedFile, endpoint *internal.Endpoint, httpRule *internal.HttpRule) error {
	generatedFile.P("func(ctx ", internal.ContextPackage.Ident("Context"), ", w ", internal.HttpPackage.Ident("ResponseWriter"), ", obj any) error {")
	generatedFile.P("resp := obj.(*", endpoint.Output().GoIdent, ")")
	generatedFile.P("_ = resp")
	bodyParameter := httpRule.ResponseBody()
	switch bodyParameter {
	case "":
		if err := f.PrintResponse(generatedFile, endpoint.Output(), "resp"); err != nil {
			return err
		}
	default:
		field := internal.FindField(bodyParameter, endpoint.Output())
		if field == nil {
			return errNotFoundField(endpoint, []string{bodyParameter})
		}
		if err := f.PrintResponse(generatedFile, field.Message, "resp."+field.GoName); err != nil {
			return err
		}
	}
	generatedFile.P("return nil")
	return nil
}

func (f *Generator) PrintResponse(generatedFile *protogen.GeneratedFile, message *protogen.Message, prefix string) error {
	switch message.Desc.FullName() {
	case "google.api.HttpBody":
		generatedFile.P("w.WriteHeader(", internal.HttpPackage.Ident("StatusOK"), ")")
		generatedFile.P("w.Header().Set(", strconv.Quote("Content-Type"), ", ", prefix, ".GetContentType())")
		generatedFile.P()
		generatedFile.P("if ", "_, err := w.Write(", prefix, ".GetData())", "; err != nil {")
		generatedFile.P("return err")
		generatedFile.P("}")
	case "google.rpc.HttpResponse":
		generatedFile.P("w.WriteHeader(int(", prefix, ".GetStatus()))")
		generatedFile.P("for _, header := range ", prefix, ".GetHeaders() {")
		generatedFile.P("w.Header().Add(header.Key, header.Value)")
		generatedFile.P("}")
		generatedFile.P("if ", "_, err := w.Write(", prefix, ".GetBody())", "; err != nil {")
		generatedFile.P("return err")
		generatedFile.P("}")
	default:
		generatedFile.P("w.WriteHeader(", internal.HttpPackage.Ident("StatusOK"), ")")
		generatedFile.P("data, err := ", internal.ProtoJsonPackage.Ident("Marshal"), "(", prefix, ")")
		generatedFile.P("if err != nil {")
		generatedFile.P("return err")
		generatedFile.P("}")
		generatedFile.P("if _, err := w.Write(data); err != nil {")
		generatedFile.P("return err")
		generatedFile.P("}")
	}
	return nil
}

func (f *Generator) GenerateClient(service *internal.Service, generatedFile *protogen.GeneratedFile) error {
	generatedFile.P("type ", service.UnexportedHTTPClientName(), " struct {")
	for _, endpoint := range service.Endpoints {
		generatedFile.P(endpoint.UnexportedName(), " ", internal.EndpointPackage.Ident("Endpoint"))
	}
	generatedFile.P("}")
	generatedFile.P()
	for _, endpoint := range service.Endpoints {
		generatedFile.P("func (c *", service.UnexportedHTTPClientName(), ") ", endpoint.Name(), "(ctx ", internal.ContextPackage.Ident("Context"), ", request *", endpoint.InputGoIdent(), ") (*", endpoint.OutputGoIdent(), ", error){")
		generatedFile.P("rep, err := c.", endpoint.UnexportedName(), "(ctx, request)")
		generatedFile.P("if err != nil {")
		generatedFile.P("return nil, err")
		generatedFile.P("}")
		generatedFile.P("return rep.(*", endpoint.OutputGoIdent(), "), nil")
		generatedFile.P("}")
		generatedFile.P()
	}
	return nil
}

func (f *Generator) GenerateNewClient(service *internal.Service, generatedFile *protogen.GeneratedFile) error {
	generatedFile.P("func New", service.HTTPClientName(), "(")
	generatedFile.P("scheme   string,")
	generatedFile.P("instance string,")
	generatedFile.P("mdw []", internal.EndpointPackage.Ident("Middleware"), ",")
	generatedFile.P("opts ...", internal.HttpTransportPackage.Ident("ClientOption"), ",")
	generatedFile.P(") interface {")
	for _, endpoint := range service.Endpoints {
		generatedFile.P(endpoint.Name(), "(ctx ", internal.ContextPackage.Ident("Context"), ", request *", endpoint.InputGoIdent(), ") (*", endpoint.OutputGoIdent(), ", error)")
	}
	generatedFile.P("} {")
	generatedFile.P("router := ", internal.MuxPackage.Ident("NewRouter"), "()")
	for _, endpoint := range service.Endpoints {
		httpRule := endpoint.HttpRule()
		// 调整路径，来适应 github.com/gorilla/mux 路由规则
		path, _, _, _ := httpRule.RegularizePath(httpRule.Path())
		generatedFile.P("router.NewRoute().")
		generatedFile.P("Name(", strconv.Quote(endpoint.FullName()), ").")
		generatedFile.P("Methods(", strconv.Quote(httpRule.Method()), ").")
		generatedFile.P("Path(", strconv.Quote(path), ")")
	}
	generatedFile.P("return &", service.UnexportedHTTPClientName(), "{")
	for _, endpoint := range service.Endpoints {
		generatedFile.P(endpoint.UnexportedName(), ":    ", internal.EndpointxPackage.Ident("Chain"), "(")
		generatedFile.P(internal.HttpTransportPackage.Ident("NewExplicitClient"), "(")
		if err := f.PrintEncodeRequestFunc(generatedFile, endpoint); err != nil {
			return err
		}
		if err := f.PrintDecodeResponseFunc(generatedFile); err != nil {
			return err
		}
		generatedFile.P("opts...,")
		generatedFile.P(").Endpoint(),")
		generatedFile.P("mdw...),")
	}
	generatedFile.P("}")
	generatedFile.P("}")
	generatedFile.P()
	return nil
}

func (f *Generator) PrintEncodeRequestFunc(generatedFile *protogen.GeneratedFile, endpoint *internal.Endpoint) error {
	httpRule := endpoint.HttpRule()
	generatedFile.P("func(ctx context.Context, obj interface{}) (*", internal.HttpPackage.Ident("Request"), ", error) {")
	generatedFile.P("req, ok := obj.(*", endpoint.InputGoIdent(), ")")
	generatedFile.P("if !ok {")
	generatedFile.P("return nil, ", internal.FmtPackage.Ident("Errorf"), "(", strconv.Quote("invalid request object type, %T"), ", obj)")
	generatedFile.P("}")
	generatedFile.P("if req == nil {")
	generatedFile.P("return nil, ", internal.ErrorsPackage.Ident("New"), "(", strconv.Quote("request object is nil"), ")")
	generatedFile.P("}")
	generatedFile.P("var method = ", strconv.Quote(httpRule.Method()))
	bodyMessage, bodyField, namedPathFields, pathFields, queryFields, err := endpoint.ParseParameters()
	if err != nil {
		return err
	}

	generatedFile.P("var body ", internal.IOPackage.Ident("Reader"))
	if bodyMessage != nil {
		message := bodyMessage
		srcValue := []any{"req"}
		f.PrintMessageBody(generatedFile, message, srcValue, false, false, false)
	} else if bodyField != nil {
		if err := f.PrintBodyField(generatedFile, bodyField); err != nil {
			return err
		}
	}

	generatedFile.P("var pairs []string")
	for i := range namedPathFields {
		f.PrintNamedPathField(generatedFile, namedPathFields, i, httpRule)
	}

	if len(pathFields) > 0 {
		for _, pathField := range pathFields {
			field := pathField
			srcValue := []any{"req.", field.GoName}
			isOptional := field.Desc.HasOptionalKeyword()
			if isOptional || pathField.Desc.Kind() == protoreflect.MessageKind {
				generatedFile.P(append(append([]any{"if "}, srcValue...), " == nil {")...)
				generatedFile.P("return nil, ", internal.FmtPackage.Ident("Errorf"), "(", strconv.Quote("%s is nil"), ", ", strconv.Quote(strings.Join(convx.ToStringSlice(srcValue), "")), ")")
				generatedFile.P("}")
			}
		}

		pairs := []any{"pairs = append(pairs"}
		for _, field := range pathFields {
			pairs = append(append(pairs, ",", strconv.Quote(string(field.Desc.Name())), ","), f.PathFieldFormat(field)...)
		}
		pairs = append(pairs, ")")
		generatedFile.P(pairs...)
	}

	generatedFile.P("path, err := router.Get(", strconv.Quote(endpoint.FullName()), ").URLPath(pairs...)")
	generatedFile.P("if err != nil {")
	generatedFile.P("return nil, err")
	generatedFile.P("}")

	generatedFile.P("queries := ", internal.UrlPackage.Ident("Values"), "{}")
	if len(queryFields) > 0 {
		for _, field := range queryFields {
			f.PrintQueryField(generatedFile, field)
		}
	}

	generatedFile.P("target := &", internal.UrlPackage.Ident("URL"), "{")
	generatedFile.P("Scheme:   scheme,")
	generatedFile.P("Host:     instance,")
	generatedFile.P("Path:     path.Path,")
	generatedFile.P("RawQuery: queries.Encode(),")
	generatedFile.P("}")

	generatedFile.P("r, err := ", internal.HttpPackage.Ident("NewRequestWithContext"), "(ctx, method, target.String(), body)")
	generatedFile.P("if err != nil {")
	generatedFile.P("return nil, err")
	generatedFile.P("}")

	generatedFile.P("return r, nil")
	generatedFile.P("},")
	return nil
}

func (f *Generator) PrintNamedPathField(generatedFile *protogen.GeneratedFile, namedPathFields []*protogen.Field, fieldIndex int, httpRule *internal.HttpRule) {
	namedPathField := namedPathFields[fieldIndex]
	fullFieldName := internal.FullFieldName(namedPathFields[:fieldIndex+1])
	if fieldIndex < len(namedPathFields)-1 {
		generatedFile.P("if req.", fullFieldName, " == nil {")
		generatedFile.P("return nil, ", internal.FmtPackage.Ident("Errorf"), "(", strconv.Quote("%s is nil"), ", ", strconv.Quote("req."+fullFieldName), ")")
		generatedFile.P("}")
	} else {
		_, _, _, namedPathParameters := httpRule.RegularizePath(httpRule.Path())
		switch namedPathField.Desc.Kind() {
		case protoreflect.StringKind:
			if namedPathField.Desc.HasOptionalKeyword() {
				generatedFile.P("namedPathParameter := *req.", fullFieldName)
			} else {
				generatedFile.P("namedPathParameter := req.", fullFieldName)
			}
		case protoreflect.MessageKind:
			generatedFile.P("namedPathParameter := req.", fullFieldName, ".Value")
		}

		generatedFile.P("namedPathValues := ", internal.StringsPackage.Ident("Split"), "(namedPathParameter, ", strconv.Quote("/"), ")")
		generatedFile.P("if len(namedPathValues) != ", strconv.Itoa(len(namedPathParameters)*2), " {")
		generatedFile.P("return nil, ", internal.FmtPackage.Ident("Errorf"), "(", strconv.Quote("invalid named path parameter, %s"), ", namedPathParameter)")
		generatedFile.P("}")

		pairs := []any{"pairs = append(pairs"}
		for i, parameter := range namedPathParameters {
			pairs = append(pairs, ",", strconv.Quote(parameter), ",", fmt.Sprintf("namedPathValues[%d]", i*2+1))
		}
		pairs = append(pairs, ")")
		generatedFile.P(pairs...)
	}
}

func (f *Generator) PrintQueryField(generatedFile *protogen.GeneratedFile, field *protogen.Field) {
	srcValue := []any{"req.", field.GoName}
	isOptional := field.Desc.HasOptionalKeyword()
	fieldName := string(field.Desc.Name())
	switch field.Desc.Kind() {
	case protoreflect.BoolKind: // bool
		if field.Desc.IsList() {
			f.PrintQueryList(generatedFile, fieldName, srcValue, f.BoolKindFormat([]any{"item"}, false))
		} else {
			f.PrintQueryOptional(generatedFile, fieldName, srcValue, f.BoolKindFormat(srcValue, isOptional), isOptional)
		}
	case protoreflect.Int32Kind, protoreflect.Sint32Kind, protoreflect.Sfixed32Kind: // int32
		if field.Desc.IsList() {
			f.PrintQueryList(generatedFile, fieldName, srcValue, f.Int32KindFormat([]any{"item"}, false))
		} else {
			f.PrintQueryOptional(generatedFile, fieldName, srcValue, f.Int32KindFormat(srcValue, isOptional), isOptional)
		}
	case protoreflect.Uint32Kind, protoreflect.Fixed32Kind: // uint32
		if field.Desc.IsList() {
			f.PrintQueryList(generatedFile, fieldName, srcValue, f.Uint32KindFormat([]any{"item"}, false))
		} else {
			f.PrintQueryOptional(generatedFile, fieldName, srcValue, f.Uint32KindFormat(srcValue, isOptional), isOptional)
		}
	case protoreflect.Int64Kind, protoreflect.Sint64Kind, protoreflect.Sfixed64Kind: // int64
		if field.Desc.IsList() {
			f.PrintQueryList(generatedFile, fieldName, srcValue, f.Int64KindFormat([]any{"item"}, false))
		} else {
			f.PrintQueryOptional(generatedFile, fieldName, srcValue, f.Int64KindFormat(srcValue, isOptional), isOptional)
		}
	case protoreflect.Uint64Kind, protoreflect.Fixed64Kind: // uint64
		if field.Desc.IsList() {
			f.PrintQueryList(generatedFile, fieldName, srcValue, f.Uint64KindFormat([]any{"item"}, false))
		} else {
			f.PrintQueryOptional(generatedFile, fieldName, srcValue, f.Uint64KindFormat(srcValue, isOptional), isOptional)
		}
	case protoreflect.FloatKind: // float32
		if field.Desc.IsList() {
			f.PrintQueryList(generatedFile, fieldName, srcValue, f.FloatKindFormat([]any{"item"}, false))
		} else {
			f.PrintQueryOptional(generatedFile, fieldName, srcValue, f.FloatKindFormat(srcValue, isOptional), isOptional)
		}
	case protoreflect.DoubleKind: // float64
		if field.Desc.IsList() {
			f.PrintQueryList(generatedFile, fieldName, srcValue, f.DoubleKindFormat([]any{"item"}, false))
		} else {
			f.PrintQueryOptional(generatedFile, fieldName, srcValue, f.DoubleKindFormat(srcValue, isOptional), isOptional)
		}
	case protoreflect.StringKind: // string
		if field.Desc.IsList() {
			f.PrintQueryList(generatedFile, fieldName, srcValue, f.StringKindFormat([]any{"item"}, false))
		} else {
			f.PrintQueryOptional(generatedFile, fieldName, srcValue, f.StringKindFormat(srcValue, isOptional), isOptional)
		}
	case protoreflect.EnumKind: // enum
		if field.Desc.IsList() {
			f.PrintQueryList(generatedFile, fieldName, srcValue, f.Int32KindFormat([]any{"item"}, false))
		} else {
			f.PrintQueryOptional(generatedFile, fieldName, srcValue, f.Int32KindFormat(srcValue, isOptional), isOptional)
		}
	case protoreflect.MessageKind:
		message := field.Message
		switch message.Desc.FullName() {
		case "google.protobuf.DoubleValue":
			if field.Desc.IsList() {
				f.PrintQueryList(generatedFile, fieldName, srcValue, f.WrapDoubleFormat([]any{"item"}))
			} else {
				f.PrintQueryOptional(generatedFile, fieldName, srcValue, f.WrapDoubleFormat(srcValue), true)
			}
		case "google.protobuf.FloatValue":
			if field.Desc.IsList() {
				f.PrintQueryList(generatedFile, fieldName, srcValue, f.WrapFloatFormat([]any{"item"}))
			} else {
				f.PrintQueryOptional(generatedFile, fieldName, srcValue, f.WrapFloatFormat(srcValue), true)
			}
		case "google.protobuf.Int64Value":
			if field.Desc.IsList() {
				f.PrintQueryList(generatedFile, fieldName, srcValue, f.WrapInt64Format([]any{"item"}))
			} else {
				f.PrintQueryOptional(generatedFile, fieldName, srcValue, f.WrapInt64Format(srcValue), true)
			}
		case "google.protobuf.UInt64Value":
			if field.Desc.IsList() {
				f.PrintQueryList(generatedFile, fieldName, srcValue, f.WrapUint64Format([]any{"item"}))
			} else {
				f.PrintQueryOptional(generatedFile, fieldName, srcValue, f.WrapUint64Format(srcValue), true)
			}
		case "google.protobuf.Int32Value":
			if field.Desc.IsList() {
				f.PrintQueryList(generatedFile, fieldName, srcValue, f.WrapInt32Format([]any{"item"}))
			} else {
				f.PrintQueryOptional(generatedFile, fieldName, srcValue, f.WrapInt32Format(srcValue), true)
			}
		case "google.protobuf.UInt32Value":
			if field.Desc.IsList() {
				f.PrintQueryList(generatedFile, fieldName, srcValue, f.WrapUint32Format([]any{"item"}))
			} else {
				f.PrintQueryOptional(generatedFile, fieldName, srcValue, f.WrapUint32Format(srcValue), true)
			}
		case "google.protobuf.BoolValue":
			if field.Desc.IsList() {
				f.PrintQueryList(generatedFile, fieldName, srcValue, f.WrapBoolFormat([]any{"item"}))
			} else {
				f.PrintQueryOptional(generatedFile, fieldName, srcValue, f.WrapBoolFormat(srcValue), true)
			}
		case "google.protobuf.StringValue":
			if field.Desc.IsList() {
				f.PrintQueryList(generatedFile, fieldName, srcValue, f.WrapStringFormat([]any{"item"}))
			} else {
				f.PrintQueryOptional(generatedFile, fieldName, srcValue, f.WrapStringFormat(srcValue), true)
			}
		case "google.protobuf.Timestamp":
			if field.Desc.IsList() {
				f.PrintQueryList(generatedFile, fieldName, srcValue, f.TimestampFormat([]any{"item"}))
			} else {
				f.PrintQueryOptional(generatedFile, fieldName, srcValue, f.TimestampFormat(srcValue), true)
			}
		case "google.protobuf.Duration":
			if field.Desc.IsList() {
				f.PrintQueryList(generatedFile, fieldName, srcValue, f.DurationFormat([]any{"item"}))
			} else {
				f.PrintQueryOptional(generatedFile, fieldName, srcValue, f.DurationFormat(srcValue), true)
			}
		}
	}
}

func (f *Generator) PrintQueryOptional(generatedFile *protogen.GeneratedFile, fieldName string, srcValue []any, format []any, isOptional bool) {
	if isOptional {
		generatedFile.P(append(append([]any{"if "}, srcValue...), " == nil {")...)
	}
	generatedFile.P(append(append([]any{"queries.Add(", strconv.Quote(fieldName), ","}, format...), []any{")"}...)...)
	if isOptional {
		generatedFile.P("}")
	}
}

func (f *Generator) PrintQueryList(generatedFile *protogen.GeneratedFile, fieldName string, srcValue []any, format []any) {
	generatedFile.P(append(append([]any{"for _, item := range "}, srcValue...), "{")...)
	generatedFile.P(append(append([]any{"queries.Add(", strconv.Quote(fieldName), ", "}, format...), []any{")"}...)...)
	generatedFile.P("}")
}

func (f *Generator) QueryFieldFormat(field *protogen.Field) []any {
	return nil
}

func (f *Generator) PathFieldFormat(field *protogen.Field) []any {
	srcValue := []any{"req.", field.GoName}
	switch field.Desc.Kind() {
	case protoreflect.BoolKind: // bool
		return f.BoolKindFormat(srcValue, field.Desc.HasOptionalKeyword())
	case protoreflect.Int32Kind, protoreflect.Sint32Kind, protoreflect.Sfixed32Kind: // int32
		return f.Int32KindFormat(srcValue, field.Desc.HasOptionalKeyword())
	case protoreflect.Uint32Kind, protoreflect.Fixed32Kind: // uint32
		return f.Uint32KindFormat(srcValue, field.Desc.HasOptionalKeyword())
	case protoreflect.Int64Kind, protoreflect.Sint64Kind, protoreflect.Sfixed64Kind: // int64
		return f.Int64KindFormat(srcValue, field.Desc.HasOptionalKeyword())
	case protoreflect.Uint64Kind, protoreflect.Fixed64Kind: // uint64
		return f.Uint64KindFormat(srcValue, field.Desc.HasOptionalKeyword())
	case protoreflect.FloatKind: // float32
		return f.FloatKindFormat(srcValue, field.Desc.HasOptionalKeyword())
	case protoreflect.DoubleKind: // float64
		return f.DoubleKindFormat(srcValue, field.Desc.HasOptionalKeyword())
	case protoreflect.StringKind: // string
		return f.StringKindFormat(srcValue, field.Desc.HasOptionalKeyword())
	case protoreflect.EnumKind: // enum
		return f.Int32KindFormat(srcValue, field.Desc.HasOptionalKeyword())
	case protoreflect.MessageKind:
		switch field.Message.Desc.FullName() {
		case "google.protobuf.DoubleValue":
			return f.WrapDoubleFormat(srcValue)
		case "google.protobuf.FloatValue":
			return f.WrapFloatFormat(srcValue)
		case "google.protobuf.Int64Value":
			return f.WrapInt64Format(srcValue)
		case "google.protobuf.UInt64Value":
			return f.WrapUint64Format(srcValue)
		case "google.protobuf.Int32Value":
			return f.WrapInt32Format(srcValue)
		case "google.protobuf.UInt32Value":
			return f.WrapUint32Format(srcValue)
		case "google.protobuf.BoolValue":
			return f.WrapBoolFormat(srcValue)
		case "google.protobuf.StringValue":
			return f.WrapStringFormat(srcValue)
		case "google.protobuf.Timestamp":
			return f.TimestampFormat(srcValue)
		case "google.protobuf.Duration":
			return f.DurationFormat(srcValue)
		}
	}
	return nil
}

func (f *Generator) PrintBodyField(generatedFile *protogen.GeneratedFile, field *protogen.Field) error {
	srcValue := []any{"req.", field.GoName}
	isList := field.Desc.IsList()
	isMap := field.Desc.IsMap()
	isOptional := field.Desc.HasOptionalKeyword()
	switch field.Desc.Kind() {
	case protoreflect.BoolKind: // bool
		if isList {
			f.PrintListFieldBody(generatedFile, srcValue)
		} else if isOptional {
			f.PrintOptionalFieldBody(generatedFile, internal.StringsPackage, srcValue, f.BoolKindFormat(srcValue, isOptional))
		} else {
			f.PrintSampleFieldBody(generatedFile, internal.StringsPackage, f.BoolKindFormat(srcValue, isOptional))
		}

	case protoreflect.Int32Kind, protoreflect.Sint32Kind, protoreflect.Sfixed32Kind: // int32
		if isList {
			f.PrintListFieldBody(generatedFile, srcValue)
		} else if isOptional {
			f.PrintOptionalFieldBody(generatedFile, internal.StringsPackage, srcValue, f.Int32KindFormat(srcValue, isOptional))
		} else {
			f.PrintSampleFieldBody(generatedFile, internal.StringsPackage, f.Int32KindFormat(srcValue, isOptional))
		}

	case protoreflect.Uint32Kind, protoreflect.Fixed32Kind: // uint32
		if isList {
			f.PrintListFieldBody(generatedFile, srcValue)
		} else if isOptional {
			f.PrintOptionalFieldBody(generatedFile, internal.StringsPackage, srcValue, f.Uint32KindFormat(srcValue, isOptional))
		} else {
			f.PrintSampleFieldBody(generatedFile, internal.StringsPackage, f.Uint32KindFormat(srcValue, isOptional))
		}

	case protoreflect.Int64Kind, protoreflect.Sint64Kind, protoreflect.Sfixed64Kind: // int64
		if isList {
			f.PrintListFieldBody(generatedFile, srcValue)
		} else if isOptional {
			f.PrintOptionalFieldBody(generatedFile, internal.StringsPackage, srcValue, f.Int64KindFormat(srcValue, isOptional))
		} else {
			f.PrintSampleFieldBody(generatedFile, internal.StringsPackage, f.Int64KindFormat(srcValue, isOptional))
		}

	case protoreflect.Uint64Kind, protoreflect.Fixed64Kind: // uint64
		if isList {
			f.PrintListFieldBody(generatedFile, srcValue)
		} else if isOptional {
			f.PrintOptionalFieldBody(generatedFile, internal.StringsPackage, srcValue, f.Uint64KindFormat(srcValue, isOptional))
		} else {
			f.PrintSampleFieldBody(generatedFile, internal.StringsPackage, f.Uint64KindFormat(srcValue, isOptional))
		}

	case protoreflect.FloatKind: // float32
		if isList {
			f.PrintListFieldBody(generatedFile, srcValue)
		} else if isOptional {
			f.PrintOptionalFieldBody(generatedFile, internal.StringsPackage, srcValue, f.FloatKindFormat(srcValue, isOptional))
		} else {
			f.PrintSampleFieldBody(generatedFile, internal.StringsPackage, f.FloatKindFormat(srcValue, isOptional))
		}

	case protoreflect.DoubleKind: // float64
		if isList {
			f.PrintListFieldBody(generatedFile, srcValue)
		} else if isOptional {
			f.PrintOptionalFieldBody(generatedFile, internal.StringsPackage, srcValue, f.DoubleKindFormat(srcValue, isOptional))
		} else {
			f.PrintSampleFieldBody(generatedFile, internal.StringsPackage, f.DoubleKindFormat(srcValue, isOptional))
		}

	case protoreflect.StringKind: // string
		if isList {
			f.PrintListFieldBody(generatedFile, srcValue)
		} else if isOptional {
			f.PrintOptionalFieldBody(generatedFile, internal.StringsPackage, srcValue, f.StringKindFormat(srcValue, isOptional))
		} else {
			f.PrintSampleFieldBody(generatedFile, internal.StringsPackage, f.StringKindFormat(srcValue, isOptional))
		}

	case protoreflect.BytesKind: // []byte
		if isList {
			f.PrintListFieldBody(generatedFile, srcValue)
		} else if isOptional {
			f.PrintSampleFieldBody(generatedFile, internal.BytesPackage, f.BytesKindFormat(srcValue, isOptional))
		} else {
			f.PrintSampleFieldBody(generatedFile, internal.BytesPackage, f.BytesKindFormat(srcValue, isOptional))
		}

	case protoreflect.EnumKind: // enum
		if isList {
			f.PrintListFieldBody(generatedFile, srcValue)
		} else if isOptional {
			f.PrintOptionalFieldBody(generatedFile, internal.StringsPackage, srcValue, f.Int32KindFormat(srcValue, isOptional))
		} else {
			f.PrintSampleFieldBody(generatedFile, internal.StringsPackage, f.Int32KindFormat(srcValue, isOptional))
		}

	case protoreflect.MessageKind:
		f.PrintMessageBody(generatedFile, field.Message, srcValue, isMap, isList, isOptional)
	case protoreflect.GroupKind:
		return fmt.Errorf("unsupported field type: %+v", internal.FullMessageTypeName(field.Desc.Message()))
	default:
		return fmt.Errorf("unsupported field type: %+v", internal.FullMessageTypeName(field.Desc.Message()))
	}
	return nil
}

func (f *Generator) PrintSampleFieldBody(generatedFile *protogen.GeneratedFile, readerPkg protogen.GoImportPath, format []any) {
	generatedFile.P(append(append([]any{"body = ", readerPkg.Ident("NewReader"), "("}, format...), ")")...)
}

func (f *Generator) PrintOptionalFieldBody(generatedFile *protogen.GeneratedFile, readerPkg protogen.GoImportPath, srcValue, format []any) {
	generatedFile.P(append(append([]any{"if "}, srcValue...), " != nil {")...)
	generatedFile.P(append(append([]any{"body = ", readerPkg.Ident("NewReader"), "("}, format...), ")")...)
	generatedFile.P("}")
}

func (f *Generator) PrintMessageBody(generatedFile *protogen.GeneratedFile, message *protogen.Message, srcValue []any, isMap bool, isList bool, isOptional bool) {
	if isList {
		f.PrintListFieldBody(generatedFile, srcValue)
		return
	}
	if isMap {
		f.PrintMessageFieldBody(generatedFile, internal.JsonPackage, srcValue)
		return
	}
	switch message.Desc.FullName() {
	case "google.protobuf.DoubleValue":
		f.PrintWrapFieldBody(generatedFile, internal.StringsPackage, srcValue, f.WrapDoubleFormat(srcValue))
	case "google.protobuf.FloatValue":
		f.PrintWrapFieldBody(generatedFile, internal.StringsPackage, srcValue, f.WrapFloatFormat(srcValue))
	case "google.protobuf.Int64Value":
		f.PrintWrapFieldBody(generatedFile, internal.StringsPackage, srcValue, f.WrapInt64Format(srcValue))
	case "google.protobuf.UInt64Value":
		f.PrintWrapFieldBody(generatedFile, internal.StringsPackage, srcValue, f.WrapUint64Format(srcValue))
	case "google.protobuf.Int32Value":
		f.PrintWrapFieldBody(generatedFile, internal.StringsPackage, srcValue, f.WrapInt32Format(srcValue))
	case "google.protobuf.UInt32Value":
		f.PrintWrapFieldBody(generatedFile, internal.StringsPackage, srcValue, f.WrapUint32Format(srcValue))
	case "google.protobuf.BoolValue":
		f.PrintWrapFieldBody(generatedFile, internal.StringsPackage, srcValue, f.WrapBoolFormat(srcValue))
	case "google.protobuf.StringValue":
		f.PrintWrapFieldBody(generatedFile, internal.StringsPackage, srcValue, f.WrapStringFormat(srcValue))
	case "google.protobuf.BytesValue":
		f.PrintWrapFieldBody(generatedFile, internal.BytesPackage, srcValue, f.WrapBytesFormat(srcValue))
	case "google.protobuf.Timestamp":
		f.PrintWrapFieldBody(generatedFile, internal.StringsPackage, srcValue, f.TimestampFormat(srcValue))
	case "google.protobuf.Duration":
		f.PrintWrapFieldBody(generatedFile, internal.StringsPackage, srcValue, f.DurationFormat(srcValue))
	case "google.api.HttpBody":
		f.PrintWrapFieldBody(generatedFile, internal.BytesPackage, srcValue, f.HttpBodyFormat(srcValue))
	case "google.rpc.HttpRequest":
		f.PrintWrapFieldBody(generatedFile, internal.BytesPackage, srcValue, f.HttpRequestFormat(srcValue))
	default:
		f.PrintMessageFieldBody(generatedFile, internal.ProtoJsonPackage, srcValue)
	}
}

func (f *Generator) PrintWrapFieldBody(generatedFile *protogen.GeneratedFile, readerPkg protogen.GoImportPath, srcValue, format []any) {
	generatedFile.P(append(append([]any{"if "}, srcValue...), " != nil {")...)
	generatedFile.P(append(append([]any{"body = ", readerPkg.Ident("NewReader"), "("}, format...), ")")...)
	generatedFile.P("}")
}

func (f *Generator) PrintMessageFieldBody(generatedFile *protogen.GeneratedFile, marshalPkg protogen.GoImportPath, srcValue []any) {
	generatedFile.P(append(append([]any{"if "}, srcValue...), " != nil {")...)
	generatedFile.P(append(append([]any{"data, err := ", marshalPkg.Ident("Marshal"), "("}, srcValue...), []any{")"}...)...)
	generatedFile.P("if err != nil {")
	generatedFile.P("return nil, err")
	generatedFile.P("}")
	generatedFile.P("body = ", internal.BytesPackage.Ident("NewBuffer"), "(data)")
	generatedFile.P("}")

}

func (f *Generator) PrintListFieldBody(generatedFile *protogen.GeneratedFile, srcValue []any) {
	generatedFile.P(append(append([]any{"if "}, srcValue...), []any{" != nil {"}...)...)
	generatedFile.P(append(append([]any{"if err := ", internal.JsonPackage.Ident("NewDecoder"), "(body).Decode("}, srcValue...), []any{"); err != nil {"}...)...)
	generatedFile.P("return nil, err")
	generatedFile.P("}")
	generatedFile.P("}")
}

func (f *Generator) BytesKindFormat(srcValue []any, isOptional bool) []any {
	return append(append([]any{}, srcValue...), []any{}...)
}

func (f *Generator) StringKindFormat(srcValue []any, isOptional bool) []any {
	format := []any{}
	if isOptional {
		format = append(format, "*")
	}
	return append(append(format, srcValue...), []any{}...)
}

func (f *Generator) DoubleKindFormat(srcValue []any, isOptional bool) []any {
	format := []any{internal.StrconvPackage.Ident("FormatFloat"), "("}
	if isOptional {
		format = append(format, "*")
	}
	return append(append(format, srcValue...), []any{", 'f', -1, 64)"}...)
}

func (f *Generator) FloatKindFormat(srcValue []any, isOptional bool) []any {
	format := []any{internal.StrconvPackage.Ident("FormatFloat"), "(float64("}
	if isOptional {
		format = append(format, "*")
	}
	return append(append(format, srcValue...), []any{"), 'f', -1, 32)"}...)
}

func (f *Generator) Uint64KindFormat(srcValue []any, isOptional bool) []any {
	format := []any{internal.StrconvPackage.Ident("FormatUint"), "("}
	if isOptional {
		format = append(format, "*")
	}
	return append(append(format, srcValue...), []any{", 10)"}...)
}

func (f *Generator) Int64KindFormat(srcValue []any, isOptional bool) []any {
	format := []any{internal.StrconvPackage.Ident("FormatInt"), "("}
	if isOptional {
		format = append(format, "*")
	}
	return append(append(format, srcValue...), []any{", 10)"}...)
}

func (f *Generator) Uint32KindFormat(srcValue []any, isOptional bool) []any {
	format := []any{internal.StrconvPackage.Ident("FormatUint"), "(uint64("}
	if isOptional {
		format = append(format, "*")
	}
	return append(append(format, srcValue...), []any{"), 10)"}...)
}

func (f *Generator) Int32KindFormat(srcValue []any, isOptional bool) []any {
	format := []any{internal.StrconvPackage.Ident("FormatInt"), "(int64("}
	if isOptional {
		format = append(format, "*")
	}
	return append(append(format, srcValue...), []any{"), 10)"}...)
}

func (f *Generator) BoolKindFormat(srcValue []any, isOptional bool) []any {
	format := []any{internal.StrconvPackage.Ident("FormatBool"), "("}
	if isOptional {
		format = append(format, "*")
	}
	return append(append(format, srcValue...), []any{")"}...)
}

func (f *Generator) HttpRequestFormat(srcValue []any) []any {
	return append(append([]any{}, srcValue...), []any{".Body"}...)
}

func (f *Generator) HttpBodyFormat(srcValue []any) []any {
	return append(append([]any{}, srcValue...), []any{".Data"}...)
}

func (f *Generator) WrapBytesFormat(srcValue []any) []any {
	return append(append([]any{}, srcValue...), []any{".Value"}...)
}

func (f *Generator) WrapStringFormat(srcValue []any) []any {
	return append(append([]any{}, srcValue...), []any{".Value"}...)
}

func (f *Generator) WrapBoolFormat(srcValue []any) []any {
	return append(append([]any{internal.StrconvPackage.Ident("FormatBool"), "("}, srcValue...), []any{".Value", ")"}...)
}

func (f *Generator) WrapUint32Format(srcValue []any) []any {
	return append(append([]any{internal.StrconvPackage.Ident("FormatUint"), "(uint64("}, srcValue...), []any{".Value", "), 10)"}...)
}

func (f *Generator) WrapInt32Format(srcValue []any) []any {
	return append(append([]any{internal.StrconvPackage.Ident("FormatInt"), "(int64("}, srcValue...), []any{".Value", "), 10)"}...)
}

func (f *Generator) WrapUint64Format(srcValue []any) []any {
	return append(append([]any{internal.StrconvPackage.Ident("FormatUint"), "("}, srcValue...), []any{".Value", ", 10)"}...)
}

func (f *Generator) WrapInt64Format(srcValue []any) []any {
	return append(append([]any{internal.StrconvPackage.Ident("FormatInt"), "("}, srcValue...), []any{".Value", ", 10)"}...)
}

func (f *Generator) WrapFloatFormat(srcValue []any) []any {
	return append(append([]any{internal.StrconvPackage.Ident("FormatFloat"), "(float64("}, srcValue...), []any{".Value", "), 'f', -1, 32)"}...)
}

func (f *Generator) WrapDoubleFormat(srcValue []any) []any {
	return append(append([]any{internal.StrconvPackage.Ident("FormatFloat"), "("}, srcValue...), []any{".Value", ", 'f', -1, 64)"}...)
}

func (f *Generator) TimestampFormat(srcValue []any) []any {
	return append(append([]any{"string(", internal.ErrorxPackage.Ident("Ignore"), "(", internal.ProtoJsonPackage.Ident("Marshal"), "("}, srcValue...), []any{")))"}...)
}

func (f *Generator) DurationFormat(srcValue []any) []any {
	return append(append([]any{"string(", internal.ErrorxPackage.Ident("Ignore"), "(", internal.ProtoJsonPackage.Ident("Marshal"), "("}, srcValue...), []any{")))"}...)
}

func (f *Generator) PrintDecodeResponseFunc(generatedFile *protogen.GeneratedFile) error {
	generatedFile.P("func(ctx context.Context, r *", internal.HttpPackage.Ident("Response"), ") (interface{}, error) {")
	generatedFile.P("return nil, nil")
	generatedFile.P("},")

	return nil
}
